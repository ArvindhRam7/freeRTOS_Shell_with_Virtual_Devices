
RTOS_Shell_VirtualDevices.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000cef0  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000804  0800d000  0800d000  0000e000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d804  0800d804  0000f1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800d804  0800d804  0000e804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d80c  0800d80c  0000f1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800d80c  0800d80c  0000e80c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d814  0800d814  0000e814  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800d818  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b5c  200001d8  0800d9f0  0000f1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d34  0800d9f0  0000fd34  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000f1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00018c0b  00000000  00000000  0000f201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004a8c  00000000  00000000  00027e0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001388  00000000  00000000  0002c898  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000eb5  00000000  00000000  0002dc20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002057b  00000000  00000000  0002ead5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001b542  00000000  00000000  0004f050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000a61a1  00000000  00000000  0006a592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00110733  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000063f4  00000000  00000000  00110778  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  00116b6c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800cfe8 	.word	0x0800cfe8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800cfe8 	.word	0x0800cfe8

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2f>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000aa4:	bf24      	itt	cs
 8000aa6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000aaa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000aae:	d90d      	bls.n	8000acc <__aeabi_d2f+0x30>
 8000ab0:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000ab4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000ab8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000abc:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000ac0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ac4:	bf08      	it	eq
 8000ac6:	f020 0001 	biceq.w	r0, r0, #1
 8000aca:	4770      	bx	lr
 8000acc:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000ad0:	d121      	bne.n	8000b16 <__aeabi_d2f+0x7a>
 8000ad2:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000ad6:	bfbc      	itt	lt
 8000ad8:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000adc:	4770      	bxlt	lr
 8000ade:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000ae2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ae6:	f1c2 0218 	rsb	r2, r2, #24
 8000aea:	f1c2 0c20 	rsb	ip, r2, #32
 8000aee:	fa10 f30c 	lsls.w	r3, r0, ip
 8000af2:	fa20 f002 	lsr.w	r0, r0, r2
 8000af6:	bf18      	it	ne
 8000af8:	f040 0001 	orrne.w	r0, r0, #1
 8000afc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b00:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b04:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b08:	ea40 000c 	orr.w	r0, r0, ip
 8000b0c:	fa23 f302 	lsr.w	r3, r3, r2
 8000b10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b14:	e7cc      	b.n	8000ab0 <__aeabi_d2f+0x14>
 8000b16:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b1a:	d107      	bne.n	8000b2c <__aeabi_d2f+0x90>
 8000b1c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b20:	bf1e      	ittt	ne
 8000b22:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000b26:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000b2a:	4770      	bxne	lr
 8000b2c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000b30:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000b34:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b38:	4770      	bx	lr
 8000b3a:	bf00      	nop

08000b3c <__aeabi_frsub>:
 8000b3c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000b40:	e002      	b.n	8000b48 <__addsf3>
 8000b42:	bf00      	nop

08000b44 <__aeabi_fsub>:
 8000b44:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000b48 <__addsf3>:
 8000b48:	0042      	lsls	r2, r0, #1
 8000b4a:	bf1f      	itttt	ne
 8000b4c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b50:	ea92 0f03 	teqne	r2, r3
 8000b54:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b58:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b5c:	d06a      	beq.n	8000c34 <__addsf3+0xec>
 8000b5e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b62:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b66:	bfc1      	itttt	gt
 8000b68:	18d2      	addgt	r2, r2, r3
 8000b6a:	4041      	eorgt	r1, r0
 8000b6c:	4048      	eorgt	r0, r1
 8000b6e:	4041      	eorgt	r1, r0
 8000b70:	bfb8      	it	lt
 8000b72:	425b      	neglt	r3, r3
 8000b74:	2b19      	cmp	r3, #25
 8000b76:	bf88      	it	hi
 8000b78:	4770      	bxhi	lr
 8000b7a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b7e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b82:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b86:	bf18      	it	ne
 8000b88:	4240      	negne	r0, r0
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b92:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b96:	bf18      	it	ne
 8000b98:	4249      	negne	r1, r1
 8000b9a:	ea92 0f03 	teq	r2, r3
 8000b9e:	d03f      	beq.n	8000c20 <__addsf3+0xd8>
 8000ba0:	f1a2 0201 	sub.w	r2, r2, #1
 8000ba4:	fa41 fc03 	asr.w	ip, r1, r3
 8000ba8:	eb10 000c 	adds.w	r0, r0, ip
 8000bac:	f1c3 0320 	rsb	r3, r3, #32
 8000bb0:	fa01 f103 	lsl.w	r1, r1, r3
 8000bb4:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bb8:	d502      	bpl.n	8000bc0 <__addsf3+0x78>
 8000bba:	4249      	negs	r1, r1
 8000bbc:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bc0:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000bc4:	d313      	bcc.n	8000bee <__addsf3+0xa6>
 8000bc6:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000bca:	d306      	bcc.n	8000bda <__addsf3+0x92>
 8000bcc:	0840      	lsrs	r0, r0, #1
 8000bce:	ea4f 0131 	mov.w	r1, r1, rrx
 8000bd2:	f102 0201 	add.w	r2, r2, #1
 8000bd6:	2afe      	cmp	r2, #254	@ 0xfe
 8000bd8:	d251      	bcs.n	8000c7e <__addsf3+0x136>
 8000bda:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000bde:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000be2:	bf08      	it	eq
 8000be4:	f020 0001 	biceq.w	r0, r0, #1
 8000be8:	ea40 0003 	orr.w	r0, r0, r3
 8000bec:	4770      	bx	lr
 8000bee:	0049      	lsls	r1, r1, #1
 8000bf0:	eb40 0000 	adc.w	r0, r0, r0
 8000bf4:	3a01      	subs	r2, #1
 8000bf6:	bf28      	it	cs
 8000bf8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bfc:	d2ed      	bcs.n	8000bda <__addsf3+0x92>
 8000bfe:	fab0 fc80 	clz	ip, r0
 8000c02:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c06:	ebb2 020c 	subs.w	r2, r2, ip
 8000c0a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c0e:	bfaa      	itet	ge
 8000c10:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c14:	4252      	neglt	r2, r2
 8000c16:	4318      	orrge	r0, r3
 8000c18:	bfbc      	itt	lt
 8000c1a:	40d0      	lsrlt	r0, r2
 8000c1c:	4318      	orrlt	r0, r3
 8000c1e:	4770      	bx	lr
 8000c20:	f092 0f00 	teq	r2, #0
 8000c24:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000c28:	bf06      	itte	eq
 8000c2a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000c2e:	3201      	addeq	r2, #1
 8000c30:	3b01      	subne	r3, #1
 8000c32:	e7b5      	b.n	8000ba0 <__addsf3+0x58>
 8000c34:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c38:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c3c:	bf18      	it	ne
 8000c3e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c42:	d021      	beq.n	8000c88 <__addsf3+0x140>
 8000c44:	ea92 0f03 	teq	r2, r3
 8000c48:	d004      	beq.n	8000c54 <__addsf3+0x10c>
 8000c4a:	f092 0f00 	teq	r2, #0
 8000c4e:	bf08      	it	eq
 8000c50:	4608      	moveq	r0, r1
 8000c52:	4770      	bx	lr
 8000c54:	ea90 0f01 	teq	r0, r1
 8000c58:	bf1c      	itt	ne
 8000c5a:	2000      	movne	r0, #0
 8000c5c:	4770      	bxne	lr
 8000c5e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c62:	d104      	bne.n	8000c6e <__addsf3+0x126>
 8000c64:	0040      	lsls	r0, r0, #1
 8000c66:	bf28      	it	cs
 8000c68:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c6c:	4770      	bx	lr
 8000c6e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c72:	bf3c      	itt	cc
 8000c74:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c78:	4770      	bxcc	lr
 8000c7a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c7e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c82:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c86:	4770      	bx	lr
 8000c88:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c8c:	bf16      	itet	ne
 8000c8e:	4608      	movne	r0, r1
 8000c90:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c94:	4601      	movne	r1, r0
 8000c96:	0242      	lsls	r2, r0, #9
 8000c98:	bf06      	itte	eq
 8000c9a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c9e:	ea90 0f01 	teqeq	r0, r1
 8000ca2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000ca6:	4770      	bx	lr

08000ca8 <__aeabi_ui2f>:
 8000ca8:	f04f 0300 	mov.w	r3, #0
 8000cac:	e004      	b.n	8000cb8 <__aeabi_i2f+0x8>
 8000cae:	bf00      	nop

08000cb0 <__aeabi_i2f>:
 8000cb0:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000cb4:	bf48      	it	mi
 8000cb6:	4240      	negmi	r0, r0
 8000cb8:	ea5f 0c00 	movs.w	ip, r0
 8000cbc:	bf08      	it	eq
 8000cbe:	4770      	bxeq	lr
 8000cc0:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000cc4:	4601      	mov	r1, r0
 8000cc6:	f04f 0000 	mov.w	r0, #0
 8000cca:	e01c      	b.n	8000d06 <__aeabi_l2f+0x2a>

08000ccc <__aeabi_ul2f>:
 8000ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f04f 0300 	mov.w	r3, #0
 8000cd8:	e00a      	b.n	8000cf0 <__aeabi_l2f+0x14>
 8000cda:	bf00      	nop

08000cdc <__aeabi_l2f>:
 8000cdc:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce0:	bf08      	it	eq
 8000ce2:	4770      	bxeq	lr
 8000ce4:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000ce8:	d502      	bpl.n	8000cf0 <__aeabi_l2f+0x14>
 8000cea:	4240      	negs	r0, r0
 8000cec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf0:	ea5f 0c01 	movs.w	ip, r1
 8000cf4:	bf02      	ittt	eq
 8000cf6:	4684      	moveq	ip, r0
 8000cf8:	4601      	moveq	r1, r0
 8000cfa:	2000      	moveq	r0, #0
 8000cfc:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000d00:	bf08      	it	eq
 8000d02:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000d06:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000d0a:	fabc f28c 	clz	r2, ip
 8000d0e:	3a08      	subs	r2, #8
 8000d10:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d14:	db10      	blt.n	8000d38 <__aeabi_l2f+0x5c>
 8000d16:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d1a:	4463      	add	r3, ip
 8000d1c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d20:	f1c2 0220 	rsb	r2, r2, #32
 8000d24:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000d28:	fa20 f202 	lsr.w	r2, r0, r2
 8000d2c:	eb43 0002 	adc.w	r0, r3, r2
 8000d30:	bf08      	it	eq
 8000d32:	f020 0001 	biceq.w	r0, r0, #1
 8000d36:	4770      	bx	lr
 8000d38:	f102 0220 	add.w	r2, r2, #32
 8000d3c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d40:	f1c2 0220 	rsb	r2, r2, #32
 8000d44:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d48:	fa21 f202 	lsr.w	r2, r1, r2
 8000d4c:	eb43 0002 	adc.w	r0, r3, r2
 8000d50:	bf08      	it	eq
 8000d52:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d56:	4770      	bx	lr

08000d58 <__aeabi_fmul>:
 8000d58:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d5c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d60:	bf1e      	ittt	ne
 8000d62:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d66:	ea92 0f0c 	teqne	r2, ip
 8000d6a:	ea93 0f0c 	teqne	r3, ip
 8000d6e:	d06f      	beq.n	8000e50 <__aeabi_fmul+0xf8>
 8000d70:	441a      	add	r2, r3
 8000d72:	ea80 0c01 	eor.w	ip, r0, r1
 8000d76:	0240      	lsls	r0, r0, #9
 8000d78:	bf18      	it	ne
 8000d7a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d7e:	d01e      	beq.n	8000dbe <__aeabi_fmul+0x66>
 8000d80:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d84:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d88:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d8c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d90:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d94:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d98:	bf3e      	ittt	cc
 8000d9a:	0049      	lslcc	r1, r1, #1
 8000d9c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000da0:	005b      	lslcc	r3, r3, #1
 8000da2:	ea40 0001 	orr.w	r0, r0, r1
 8000da6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000daa:	2afd      	cmp	r2, #253	@ 0xfd
 8000dac:	d81d      	bhi.n	8000dea <__aeabi_fmul+0x92>
 8000dae:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000db2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000db6:	bf08      	it	eq
 8000db8:	f020 0001 	biceq.w	r0, r0, #1
 8000dbc:	4770      	bx	lr
 8000dbe:	f090 0f00 	teq	r0, #0
 8000dc2:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dc6:	bf08      	it	eq
 8000dc8:	0249      	lsleq	r1, r1, #9
 8000dca:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000dce:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000dd2:	3a7f      	subs	r2, #127	@ 0x7f
 8000dd4:	bfc2      	ittt	gt
 8000dd6:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000dda:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dde:	4770      	bxgt	lr
 8000de0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000de4:	f04f 0300 	mov.w	r3, #0
 8000de8:	3a01      	subs	r2, #1
 8000dea:	dc5d      	bgt.n	8000ea8 <__aeabi_fmul+0x150>
 8000dec:	f112 0f19 	cmn.w	r2, #25
 8000df0:	bfdc      	itt	le
 8000df2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000df6:	4770      	bxle	lr
 8000df8:	f1c2 0200 	rsb	r2, r2, #0
 8000dfc:	0041      	lsls	r1, r0, #1
 8000dfe:	fa21 f102 	lsr.w	r1, r1, r2
 8000e02:	f1c2 0220 	rsb	r2, r2, #32
 8000e06:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e0a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000e0e:	f140 0000 	adc.w	r0, r0, #0
 8000e12:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000e16:	bf08      	it	eq
 8000e18:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e1c:	4770      	bx	lr
 8000e1e:	f092 0f00 	teq	r2, #0
 8000e22:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000e26:	bf02      	ittt	eq
 8000e28:	0040      	lsleq	r0, r0, #1
 8000e2a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000e2e:	3a01      	subeq	r2, #1
 8000e30:	d0f9      	beq.n	8000e26 <__aeabi_fmul+0xce>
 8000e32:	ea40 000c 	orr.w	r0, r0, ip
 8000e36:	f093 0f00 	teq	r3, #0
 8000e3a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000e3e:	bf02      	ittt	eq
 8000e40:	0049      	lsleq	r1, r1, #1
 8000e42:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000e46:	3b01      	subeq	r3, #1
 8000e48:	d0f9      	beq.n	8000e3e <__aeabi_fmul+0xe6>
 8000e4a:	ea41 010c 	orr.w	r1, r1, ip
 8000e4e:	e78f      	b.n	8000d70 <__aeabi_fmul+0x18>
 8000e50:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e54:	ea92 0f0c 	teq	r2, ip
 8000e58:	bf18      	it	ne
 8000e5a:	ea93 0f0c 	teqne	r3, ip
 8000e5e:	d00a      	beq.n	8000e76 <__aeabi_fmul+0x11e>
 8000e60:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e64:	bf18      	it	ne
 8000e66:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e6a:	d1d8      	bne.n	8000e1e <__aeabi_fmul+0xc6>
 8000e6c:	ea80 0001 	eor.w	r0, r0, r1
 8000e70:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e74:	4770      	bx	lr
 8000e76:	f090 0f00 	teq	r0, #0
 8000e7a:	bf17      	itett	ne
 8000e7c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e80:	4608      	moveq	r0, r1
 8000e82:	f091 0f00 	teqne	r1, #0
 8000e86:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e8a:	d014      	beq.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e8c:	ea92 0f0c 	teq	r2, ip
 8000e90:	d101      	bne.n	8000e96 <__aeabi_fmul+0x13e>
 8000e92:	0242      	lsls	r2, r0, #9
 8000e94:	d10f      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000e96:	ea93 0f0c 	teq	r3, ip
 8000e9a:	d103      	bne.n	8000ea4 <__aeabi_fmul+0x14c>
 8000e9c:	024b      	lsls	r3, r1, #9
 8000e9e:	bf18      	it	ne
 8000ea0:	4608      	movne	r0, r1
 8000ea2:	d108      	bne.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ea4:	ea80 0001 	eor.w	r0, r0, r1
 8000ea8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000eac:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eb0:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000eb4:	4770      	bx	lr
 8000eb6:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000eba:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000ebe:	4770      	bx	lr

08000ec0 <__aeabi_fdiv>:
 8000ec0:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000ec4:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000ec8:	bf1e      	ittt	ne
 8000eca:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000ece:	ea92 0f0c 	teqne	r2, ip
 8000ed2:	ea93 0f0c 	teqne	r3, ip
 8000ed6:	d069      	beq.n	8000fac <__aeabi_fdiv+0xec>
 8000ed8:	eba2 0203 	sub.w	r2, r2, r3
 8000edc:	ea80 0c01 	eor.w	ip, r0, r1
 8000ee0:	0249      	lsls	r1, r1, #9
 8000ee2:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000ee6:	d037      	beq.n	8000f58 <__aeabi_fdiv+0x98>
 8000ee8:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000eec:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ef0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ef4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ef8:	428b      	cmp	r3, r1
 8000efa:	bf38      	it	cc
 8000efc:	005b      	lslcc	r3, r3, #1
 8000efe:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000f02:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000f06:	428b      	cmp	r3, r1
 8000f08:	bf24      	itt	cs
 8000f0a:	1a5b      	subcs	r3, r3, r1
 8000f0c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000f10:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000f14:	bf24      	itt	cs
 8000f16:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000f1a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000f1e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000f22:	bf24      	itt	cs
 8000f24:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000f28:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000f2c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000f30:	bf24      	itt	cs
 8000f32:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000f36:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000f3a:	011b      	lsls	r3, r3, #4
 8000f3c:	bf18      	it	ne
 8000f3e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000f42:	d1e0      	bne.n	8000f06 <__aeabi_fdiv+0x46>
 8000f44:	2afd      	cmp	r2, #253	@ 0xfd
 8000f46:	f63f af50 	bhi.w	8000dea <__aeabi_fmul+0x92>
 8000f4a:	428b      	cmp	r3, r1
 8000f4c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f50:	bf08      	it	eq
 8000f52:	f020 0001 	biceq.w	r0, r0, #1
 8000f56:	4770      	bx	lr
 8000f58:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f5c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f60:	327f      	adds	r2, #127	@ 0x7f
 8000f62:	bfc2      	ittt	gt
 8000f64:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f68:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f6c:	4770      	bxgt	lr
 8000f6e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f72:	f04f 0300 	mov.w	r3, #0
 8000f76:	3a01      	subs	r2, #1
 8000f78:	e737      	b.n	8000dea <__aeabi_fmul+0x92>
 8000f7a:	f092 0f00 	teq	r2, #0
 8000f7e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f82:	bf02      	ittt	eq
 8000f84:	0040      	lsleq	r0, r0, #1
 8000f86:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f8a:	3a01      	subeq	r2, #1
 8000f8c:	d0f9      	beq.n	8000f82 <__aeabi_fdiv+0xc2>
 8000f8e:	ea40 000c 	orr.w	r0, r0, ip
 8000f92:	f093 0f00 	teq	r3, #0
 8000f96:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f9a:	bf02      	ittt	eq
 8000f9c:	0049      	lsleq	r1, r1, #1
 8000f9e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000fa2:	3b01      	subeq	r3, #1
 8000fa4:	d0f9      	beq.n	8000f9a <__aeabi_fdiv+0xda>
 8000fa6:	ea41 010c 	orr.w	r1, r1, ip
 8000faa:	e795      	b.n	8000ed8 <__aeabi_fdiv+0x18>
 8000fac:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000fb0:	ea92 0f0c 	teq	r2, ip
 8000fb4:	d108      	bne.n	8000fc8 <__aeabi_fdiv+0x108>
 8000fb6:	0242      	lsls	r2, r0, #9
 8000fb8:	f47f af7d 	bne.w	8000eb6 <__aeabi_fmul+0x15e>
 8000fbc:	ea93 0f0c 	teq	r3, ip
 8000fc0:	f47f af70 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fc4:	4608      	mov	r0, r1
 8000fc6:	e776      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fc8:	ea93 0f0c 	teq	r3, ip
 8000fcc:	d104      	bne.n	8000fd8 <__aeabi_fdiv+0x118>
 8000fce:	024b      	lsls	r3, r1, #9
 8000fd0:	f43f af4c 	beq.w	8000e6c <__aeabi_fmul+0x114>
 8000fd4:	4608      	mov	r0, r1
 8000fd6:	e76e      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000fd8:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000fdc:	bf18      	it	ne
 8000fde:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000fe2:	d1ca      	bne.n	8000f7a <__aeabi_fdiv+0xba>
 8000fe4:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000fe8:	f47f af5c 	bne.w	8000ea4 <__aeabi_fmul+0x14c>
 8000fec:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000ff0:	f47f af3c 	bne.w	8000e6c <__aeabi_fmul+0x114>
 8000ff4:	e75f      	b.n	8000eb6 <__aeabi_fmul+0x15e>
 8000ff6:	bf00      	nop

08000ff8 <_ZN16AdcVoltageSensorC1EP19__ADC_HandleTypeDef>:
#include "AdcVoltageSensor.h"

AdcVoltageSensor::AdcVoltageSensor(ADC_HandleTypeDef* hadc) : m_hadc(hadc) {}
 8000ff8:	b480      	push	{r7}
 8000ffa:	b083      	sub	sp, #12
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
 8001000:	6039      	str	r1, [r7, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	683a      	ldr	r2, [r7, #0]
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	687b      	ldr	r3, [r7, #4]
 800100a:	4618      	mov	r0, r3
 800100c:	370c      	adds	r7, #12
 800100e:	46bd      	mov	sp, r7
 8001010:	bc80      	pop	{r7}
 8001012:	4770      	bx	lr

08001014 <_ZN16AdcVoltageSensor11readVoltageEv>:

float AdcVoltageSensor::readVoltage() {
 8001014:	b580      	push	{r7, lr}
 8001016:	b084      	sub	sp, #16
 8001018:	af00      	add	r7, sp, #0
 800101a:	6078      	str	r0, [r7, #4]
    HAL_ADC_Start(m_hadc);
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	4618      	mov	r0, r3
 8001022:	f001 fa8d 	bl	8002540 <HAL_ADC_Start>
    if (HAL_ADC_PollForConversion(m_hadc, 10) == HAL_OK) {
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	210a      	movs	r1, #10
 800102c:	4618      	mov	r0, r3
 800102e:	f001 fb61 	bl	80026f4 <HAL_ADC_PollForConversion>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	bf0c      	ite	eq
 8001038:	2301      	moveq	r3, #1
 800103a:	2300      	movne	r3, #0
 800103c:	b2db      	uxtb	r3, r3
 800103e:	2b00      	cmp	r3, #0
 8001040:	d01b      	beq.n	800107a <_ZN16AdcVoltageSensor11readVoltageEv+0x66>
        uint32_t adcValue = HAL_ADC_GetValue(m_hadc);
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	4618      	mov	r0, r3
 8001048:	f001 fc5a 	bl	8002900 <HAL_ADC_GetValue>
 800104c:	60f8      	str	r0, [r7, #12]
        float voltage = (adcValue / 4095.0f) * 3.3f;
 800104e:	68f8      	ldr	r0, [r7, #12]
 8001050:	f7ff fe2a 	bl	8000ca8 <__aeabi_ui2f>
 8001054:	4603      	mov	r3, r0
 8001056:	490e      	ldr	r1, [pc, #56]	@ (8001090 <_ZN16AdcVoltageSensor11readVoltageEv+0x7c>)
 8001058:	4618      	mov	r0, r3
 800105a:	f7ff ff31 	bl	8000ec0 <__aeabi_fdiv>
 800105e:	4603      	mov	r3, r0
 8001060:	490c      	ldr	r1, [pc, #48]	@ (8001094 <_ZN16AdcVoltageSensor11readVoltageEv+0x80>)
 8001062:	4618      	mov	r0, r3
 8001064:	f7ff fe78 	bl	8000d58 <__aeabi_fmul>
 8001068:	4603      	mov	r3, r0
 800106a:	60bb      	str	r3, [r7, #8]
        HAL_ADC_Stop(m_hadc);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	4618      	mov	r0, r3
 8001072:	f001 fb13 	bl	800269c <HAL_ADC_Stop>
        return voltage;
 8001076:	68bb      	ldr	r3, [r7, #8]
 8001078:	e006      	b.n	8001088 <_ZN16AdcVoltageSensor11readVoltageEv+0x74>
    }
    HAL_ADC_Stop(m_hadc);
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fb0c 	bl	800269c <HAL_ADC_Stop>
    return 0.0f;
 8001084:	f04f 0300 	mov.w	r3, #0
}
 8001088:	4618      	mov	r0, r3
 800108a:	3710      	adds	r7, #16
 800108c:	46bd      	mov	sp, r7
 800108e:	bd80      	pop	{r7, pc}
 8001090:	457ff000 	.word	0x457ff000
 8001094:	40533333 	.word	0x40533333

08001098 <StartShellTask>:
	snprintf(response, max_len, "Time: %02d:%02d:%02d Date: %02d-%02d-%04d\r\n",
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
			2000 + sDate.Year);
}

void StartShellTask(void *argument) {
 8001098:	b5f0      	push	{r4, r5, r6, r7, lr}
 800109a:	b0d1      	sub	sp, #324	@ 0x144
 800109c:	af06      	add	r7, sp, #24
 800109e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80010a2:	f5a3 7392 	sub.w	r3, r3, #292	@ 0x124
 80010a6:	6018      	str	r0, [r3, #0]
	VirtualTemperatureSensor tempSensor;
 80010a8:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 80010ac:	4618      	mov	r0, r3
 80010ae:	f000 fadf 	bl	8001670 <_ZN24VirtualTemperatureSensorC1Ev>
	VirtualHumiditySensor humiditySensor;
	SolarPanel solarPanel(13);
 80010b2:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80010b6:	210d      	movs	r1, #13
 80010b8:	4618      	mov	r0, r3
 80010ba:	f000 fa57 	bl	800156c <_ZN10SolarPanelC1Ei>
	AdcVoltageSensor adcVoltageSensor(&hadc1);
 80010be:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80010c2:	4989      	ldr	r1, [pc, #548]	@ (80012e8 <StartShellTask+0x250>)
 80010c4:	4618      	mov	r0, r3
 80010c6:	f7ff ff97 	bl	8000ff8 <_ZN16AdcVoltageSensorC1EP19__ADC_HandleTypeDef>
	char rxChar;
	char command[100];
	char response[100];
	unsigned int cmdIndex = 0;
 80010ca:	2300      	movs	r3, #0
 80010cc:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

	while (1) {
		// Read one byte at a time
		if (xStreamBufferReceive(uartRxStreamBuffer, &rxChar, 1, portMAX_DELAY)
 80010d0:	4b86      	ldr	r3, [pc, #536]	@ (80012ec <StartShellTask+0x254>)
 80010d2:	6818      	ldr	r0, [r3, #0]
 80010d4:	f107 01fb 	add.w	r1, r7, #251	@ 0xfb
 80010d8:	f04f 33ff 	mov.w	r3, #4294967295
 80010dc:	2201      	movs	r2, #1
 80010de:	f005 fa40 	bl	8006562 <xStreamBufferReceive>
 80010e2:	4603      	mov	r3, r0
				== 1) {
 80010e4:	2b01      	cmp	r3, #1
 80010e6:	bf0c      	ite	eq
 80010e8:	2301      	moveq	r3, #1
 80010ea:	2300      	movne	r3, #0
 80010ec:	b2db      	uxtb	r3, r3
		if (xStreamBufferReceive(uartRxStreamBuffer, &rxChar, 1, portMAX_DELAY)
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d0ee      	beq.n	80010d0 <StartShellTask+0x38>
			if (rxChar == '\r' || rxChar == '\n') {
 80010f2:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 80010f6:	2b0d      	cmp	r3, #13
 80010f8:	d004      	beq.n	8001104 <StartShellTask+0x6c>
 80010fa:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 80010fe:	2b0a      	cmp	r3, #10
 8001100:	f040 820a 	bne.w	8001518 <StartShellTask+0x480>
				command[cmdIndex] = '\0'; // Null-terminate
 8001104:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8001108:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800110c:	4413      	add	r3, r2
 800110e:	2200      	movs	r2, #0
 8001110:	701a      	strb	r2, [r3, #0]
				cmdIndex = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124

				// Trim any trailing newline or carriage return
				command[strcspn(command, "\r\n")] = 0;
 8001118:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800111c:	4974      	ldr	r1, [pc, #464]	@ (80012f0 <StartShellTask+0x258>)
 800111e:	4618      	mov	r0, r3
 8001120:	f009 fa03 	bl	800a52a <strcspn>
 8001124:	4603      	mov	r3, r0
 8001126:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 800112a:	443b      	add	r3, r7
 800112c:	2200      	movs	r2, #0
 800112e:	f803 2c94 	strb.w	r2, [r3, #-148]

				if (strcmp(command, "GET_TEMPERATURE") == 0) {
 8001132:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001136:	496f      	ldr	r1, [pc, #444]	@ (80012f4 <StartShellTask+0x25c>)
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff f809 	bl	8000150 <strcmp>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d115      	bne.n	8001170 <StartShellTask+0xd8>
					float temp = tempSensor.getTemperature();
 8001144:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001148:	4618      	mov	r0, r3
 800114a:	f000 fa9f 	bl	800168c <_ZN24VirtualTemperatureSensor14getTemperatureEv>
 800114e:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
					snprintf(response, sizeof(response),
 8001152:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8001156:	f7ff f971 	bl	800043c <__aeabi_f2d>
 800115a:	4602      	mov	r2, r0
 800115c:	460b      	mov	r3, r1
 800115e:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001162:	e9cd 2300 	strd	r2, r3, [sp]
 8001166:	4a64      	ldr	r2, [pc, #400]	@ (80012f8 <StartShellTask+0x260>)
 8001168:	2164      	movs	r1, #100	@ 0x64
 800116a:	f009 f933 	bl	800a3d4 <sniprintf>
 800116e:	e1bf      	b.n	80014f0 <StartShellTask+0x458>
							"Temperature: %.2foC\r\n", temp);
				} else if (strcmp(command, "GET_HUMIDITY") == 0) {
 8001170:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001174:	4961      	ldr	r1, [pc, #388]	@ (80012fc <StartShellTask+0x264>)
 8001176:	4618      	mov	r0, r3
 8001178:	f7fe ffea 	bl	8000150 <strcmp>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d115      	bne.n	80011ae <StartShellTask+0x116>
					float hum = humiditySensor.getHumidity();
 8001182:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8001186:	4618      	mov	r0, r3
 8001188:	f000 fa54 	bl	8001634 <_ZNK21VirtualHumiditySensor11getHumidityEv>
 800118c:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
					snprintf(response, sizeof(response), "Humidity: %.2f%%\r\n",
 8001190:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8001194:	f7ff f952 	bl	800043c <__aeabi_f2d>
 8001198:	4602      	mov	r2, r0
 800119a:	460b      	mov	r3, r1
 800119c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80011a0:	e9cd 2300 	strd	r2, r3, [sp]
 80011a4:	4a56      	ldr	r2, [pc, #344]	@ (8001300 <StartShellTask+0x268>)
 80011a6:	2164      	movs	r1, #100	@ 0x64
 80011a8:	f009 f914 	bl	800a3d4 <sniprintf>
 80011ac:	e1a0      	b.n	80014f0 <StartShellTask+0x458>
							hum);
				} else if (strcmp(command, "GET_SOLAR_INTENSITY") == 0) {
 80011ae:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011b2:	4954      	ldr	r1, [pc, #336]	@ (8001304 <StartShellTask+0x26c>)
 80011b4:	4618      	mov	r0, r3
 80011b6:	f7fe ffcb 	bl	8000150 <strcmp>
 80011ba:	4603      	mov	r3, r0
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d115      	bne.n	80011ec <StartShellTask+0x154>
					float intensity = solarPanel.calculateSolarIntensity();
 80011c0:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 80011c4:	4618      	mov	r0, r3
 80011c6:	f000 f9df 	bl	8001588 <_ZN10SolarPanel23calculateSolarIntensityEv>
 80011ca:	f8c7 0114 	str.w	r0, [r7, #276]	@ 0x114
					snprintf(response, sizeof(response),
 80011ce:	f8d7 0114 	ldr.w	r0, [r7, #276]	@ 0x114
 80011d2:	f7ff f933 	bl	800043c <__aeabi_f2d>
 80011d6:	4602      	mov	r2, r0
 80011d8:	460b      	mov	r3, r1
 80011da:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80011de:	e9cd 2300 	strd	r2, r3, [sp]
 80011e2:	4a49      	ldr	r2, [pc, #292]	@ (8001308 <StartShellTask+0x270>)
 80011e4:	2164      	movs	r1, #100	@ 0x64
 80011e6:	f009 f8f5 	bl	800a3d4 <sniprintf>
 80011ea:	e181      	b.n	80014f0 <StartShellTask+0x458>
							"Solar Panel Intensity: %.2f W/m2\r\n", intensity);
				} else if (strcmp(command, "GET_SOLAR_CURRENT") == 0) {
 80011ec:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80011f0:	4946      	ldr	r1, [pc, #280]	@ (800130c <StartShellTask+0x274>)
 80011f2:	4618      	mov	r0, r3
 80011f4:	f7fe ffac 	bl	8000150 <strcmp>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d115      	bne.n	800122a <StartShellTask+0x192>
					float current = solarPanel.calculateSolarCurrent();
 80011fe:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001202:	4618      	mov	r0, r3
 8001204:	f000 f9f0 	bl	80015e8 <_ZN10SolarPanel21calculateSolarCurrentEv>
 8001208:	f8c7 0118 	str.w	r0, [r7, #280]	@ 0x118
					snprintf(response, sizeof(response),
 800120c:	f8d7 0118 	ldr.w	r0, [r7, #280]	@ 0x118
 8001210:	f7ff f914 	bl	800043c <__aeabi_f2d>
 8001214:	4602      	mov	r2, r0
 8001216:	460b      	mov	r3, r1
 8001218:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800121c:	e9cd 2300 	strd	r2, r3, [sp]
 8001220:	4a3b      	ldr	r2, [pc, #236]	@ (8001310 <StartShellTask+0x278>)
 8001222:	2164      	movs	r1, #100	@ 0x64
 8001224:	f009 f8d6 	bl	800a3d4 <sniprintf>
 8001228:	e162      	b.n	80014f0 <StartShellTask+0x458>
							"Solar Panel Current: %.2f A\r\n", current);
				} else if (strcmp(command, "GET_SOLAR_POWER") == 0) {
 800122a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800122e:	4939      	ldr	r1, [pc, #228]	@ (8001314 <StartShellTask+0x27c>)
 8001230:	4618      	mov	r0, r3
 8001232:	f7fe ff8d 	bl	8000150 <strcmp>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d115      	bne.n	8001268 <StartShellTask+0x1d0>
					float power = solarPanel.calculateSolarPower();
 800123c:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8001240:	4618      	mov	r0, r3
 8001242:	f000 f9e3 	bl	800160c <_ZN10SolarPanel19calculateSolarPowerEv>
 8001246:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
					snprintf(response, sizeof(response),
 800124a:	f8d7 011c 	ldr.w	r0, [r7, #284]	@ 0x11c
 800124e:	f7ff f8f5 	bl	800043c <__aeabi_f2d>
 8001252:	4602      	mov	r2, r0
 8001254:	460b      	mov	r3, r1
 8001256:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 800125a:	e9cd 2300 	strd	r2, r3, [sp]
 800125e:	4a2e      	ldr	r2, [pc, #184]	@ (8001318 <StartShellTask+0x280>)
 8001260:	2164      	movs	r1, #100	@ 0x64
 8001262:	f009 f8b7 	bl	800a3d4 <sniprintf>
 8001266:	e143      	b.n	80014f0 <StartShellTask+0x458>
							"Solar Panel Power: %.2f W\r\n", power);
				} else if (strcmp(command, "GET_TIME") == 0) {
 8001268:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800126c:	492b      	ldr	r1, [pc, #172]	@ (800131c <StartShellTask+0x284>)
 800126e:	4618      	mov	r0, r3
 8001270:	f7fe ff6e 	bl	8000150 <strcmp>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d156      	bne.n	8001328 <StartShellTask+0x290>
					RTC_TimeTypeDef time;
					RTC_DateTypeDef date;
					HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 800127a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 800127e:	2200      	movs	r2, #0
 8001280:	4619      	mov	r1, r3
 8001282:	4827      	ldr	r0, [pc, #156]	@ (8001320 <StartShellTask+0x288>)
 8001284:	f002 fe46 	bl	8003f14 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8001288:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800128c:	2200      	movs	r2, #0
 800128e:	4619      	mov	r1, r3
 8001290:	4823      	ldr	r0, [pc, #140]	@ (8001320 <StartShellTask+0x288>)
 8001292:	f002 ffcd 	bl	8004230 <HAL_RTC_GetDate>
					snprintf(response, sizeof(response),
							"Time: %02d:%02d:%02d, Date: %02d/%02d/%04d\r\n",
							time.Hours, time.Minutes, time.Seconds, date.Date,
 8001296:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
					snprintf(response, sizeof(response),
 800129a:	461e      	mov	r6, r3
							time.Hours, time.Minutes, time.Seconds, date.Date,
 800129c:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
					snprintf(response, sizeof(response),
 80012a0:	461a      	mov	r2, r3
							time.Hours, time.Minutes, time.Seconds, date.Date,
 80012a2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
					snprintf(response, sizeof(response),
 80012a6:	4619      	mov	r1, r3
							time.Hours, time.Minutes, time.Seconds, date.Date,
 80012a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80012ac:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012b0:	789b      	ldrb	r3, [r3, #2]
					snprintf(response, sizeof(response),
 80012b2:	461c      	mov	r4, r3
							date.Month, 2000 + date.Year);
 80012b4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80012b8:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012bc:	785b      	ldrb	r3, [r3, #1]
					snprintf(response, sizeof(response),
 80012be:	461d      	mov	r5, r3
							date.Month, 2000 + date.Year);
 80012c0:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80012c4:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80012c8:	78db      	ldrb	r3, [r3, #3]
					snprintf(response, sizeof(response),
 80012ca:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80012ce:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80012d2:	9304      	str	r3, [sp, #16]
 80012d4:	9503      	str	r5, [sp, #12]
 80012d6:	9402      	str	r4, [sp, #8]
 80012d8:	9101      	str	r1, [sp, #4]
 80012da:	9200      	str	r2, [sp, #0]
 80012dc:	4633      	mov	r3, r6
 80012de:	4a11      	ldr	r2, [pc, #68]	@ (8001324 <StartShellTask+0x28c>)
 80012e0:	2164      	movs	r1, #100	@ 0x64
 80012e2:	f009 f877 	bl	800a3d4 <sniprintf>
 80012e6:	e103      	b.n	80014f0 <StartShellTask+0x458>
 80012e8:	2000025c 	.word	0x2000025c
 80012ec:	200001f4 	.word	0x200001f4
 80012f0:	0800d05c 	.word	0x0800d05c
 80012f4:	0800d060 	.word	0x0800d060
 80012f8:	0800d070 	.word	0x0800d070
 80012fc:	0800d088 	.word	0x0800d088
 8001300:	0800d098 	.word	0x0800d098
 8001304:	0800d0ac 	.word	0x0800d0ac
 8001308:	0800d0c0 	.word	0x0800d0c0
 800130c:	0800d0e4 	.word	0x0800d0e4
 8001310:	0800d0f8 	.word	0x0800d0f8
 8001314:	0800d118 	.word	0x0800d118
 8001318:	0800d128 	.word	0x0800d128
 800131c:	0800d144 	.word	0x0800d144
 8001320:	20000248 	.word	0x20000248
 8001324:	0800d150 	.word	0x0800d150
				} else if (strncmp(command, "SET_TIME", 8) == 0) {
 8001328:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 800132c:	2208      	movs	r2, #8
 800132e:	4985      	ldr	r1, [pc, #532]	@ (8001544 <StartShellTask+0x4ac>)
 8001330:	4618      	mov	r0, r3
 8001332:	f009 f90b 	bl	800a54c <strncmp>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	f040 80aa 	bne.w	8001492 <StartShellTask+0x3fa>
					int hh, mm, ss, dd, mo, yyyy;
					if (sscanf(command + 9, "%d %d %d %d %d %d", &hh, &mm, &ss,
 800133e:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8001342:	3009      	adds	r0, #9
 8001344:	f107 0120 	add.w	r1, r7, #32
 8001348:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800134c:	f107 0310 	add.w	r3, r7, #16
 8001350:	9303      	str	r3, [sp, #12]
 8001352:	f107 0314 	add.w	r3, r7, #20
 8001356:	9302      	str	r3, [sp, #8]
 8001358:	f107 0318 	add.w	r3, r7, #24
 800135c:	9301      	str	r3, [sp, #4]
 800135e:	f107 031c 	add.w	r3, r7, #28
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	460b      	mov	r3, r1
 8001366:	4978      	ldr	r1, [pc, #480]	@ (8001548 <StartShellTask+0x4b0>)
 8001368:	f009 f868 	bl	800a43c <siscanf>
 800136c:	4603      	mov	r3, r0
							&dd, &mo, &yyyy) == 6) {
 800136e:	2b06      	cmp	r3, #6
 8001370:	bf0c      	ite	eq
 8001372:	2301      	moveq	r3, #1
 8001374:	2300      	movne	r3, #0
 8001376:	b2db      	uxtb	r3, r3
					if (sscanf(command + 9, "%d %d %d %d %d %d", &hh, &mm, &ss,
 8001378:	2b00      	cmp	r3, #0
 800137a:	f000 8082 	beq.w	8001482 <StartShellTask+0x3ea>
						RTC_TimeTypeDef sTime = { 0 };
 800137e:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001382:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001386:	2100      	movs	r1, #0
 8001388:	460a      	mov	r2, r1
 800138a:	801a      	strh	r2, [r3, #0]
 800138c:	460a      	mov	r2, r1
 800138e:	709a      	strb	r2, [r3, #2]
						RTC_DateTypeDef sDate = { 0 };
 8001390:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001394:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001398:	2200      	movs	r2, #0
 800139a:	601a      	str	r2, [r3, #0]

						sTime.Hours = hh;
 800139c:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013a0:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 80013a4:	681b      	ldr	r3, [r3, #0]
 80013a6:	b2da      	uxtb	r2, r3
 80013a8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ac:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013b0:	701a      	strb	r2, [r3, #0]
						sTime.Minutes = mm;
 80013b2:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013b6:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	b2da      	uxtb	r2, r3
 80013be:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013c2:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013c6:	705a      	strb	r2, [r3, #1]
						sTime.Seconds = ss;
 80013c8:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013cc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 80013d0:	681b      	ldr	r3, [r3, #0]
 80013d2:	b2da      	uxtb	r2, r3
 80013d4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013d8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 80013dc:	709a      	strb	r2, [r3, #2]
						sDate.Date = dd;
 80013de:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013e2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013ee:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 80013f2:	709a      	strb	r2, [r3, #2]
						sDate.Month = mo;
 80013f4:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 80013f8:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001404:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001408:	705a      	strb	r2, [r3, #1]
						sDate.Year = yyyy - 2000;
 800140a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800140e:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	b2db      	uxtb	r3, r3
 8001416:	3330      	adds	r3, #48	@ 0x30
 8001418:	b2da      	uxtb	r2, r3
 800141a:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 800141e:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001422:	70da      	strb	r2, [r3, #3]
						sDate.WeekDay = RTC_WEEKDAY_MONDAY; // Not used by HAL
 8001424:	f507 7394 	add.w	r3, r7, #296	@ 0x128
 8001428:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 800142c:	2201      	movs	r2, #1
 800142e:	701a      	strb	r2, [r3, #0]

						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN)
 8001430:	f107 030c 	add.w	r3, r7, #12
 8001434:	2200      	movs	r2, #0
 8001436:	4619      	mov	r1, r3
 8001438:	4844      	ldr	r0, [pc, #272]	@ (800154c <StartShellTask+0x4b4>)
 800143a:	f002 fcd3 	bl	8003de4 <HAL_RTC_SetTime>
 800143e:	4603      	mov	r3, r0
								== HAL_OK && HAL_RTC_SetDate(&hrtc, &sDate,
 8001440:	2b00      	cmp	r3, #0
 8001442:	d10b      	bne.n	800145c <StartShellTask+0x3c4>
 8001444:	f107 0308 	add.w	r3, r7, #8
 8001448:	2200      	movs	r2, #0
 800144a:	4619      	mov	r1, r3
 800144c:	483f      	ldr	r0, [pc, #252]	@ (800154c <StartShellTask+0x4b4>)
 800144e:	f002 fe39 	bl	80040c4 <HAL_RTC_SetDate>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d101      	bne.n	800145c <StartShellTask+0x3c4>
 8001458:	2301      	movs	r3, #1
 800145a:	e000      	b.n	800145e <StartShellTask+0x3c6>
 800145c:	2300      	movs	r3, #0
						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN)
 800145e:	2b00      	cmp	r3, #0
 8001460:	d007      	beq.n	8001472 <StartShellTask+0x3da>
						RTC_FORMAT_BIN) == HAL_OK) {
							snprintf(response, sizeof(response),
 8001462:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001466:	4a3a      	ldr	r2, [pc, #232]	@ (8001550 <StartShellTask+0x4b8>)
 8001468:	2164      	movs	r1, #100	@ 0x64
 800146a:	4618      	mov	r0, r3
 800146c:	f008 ffb2 	bl	800a3d4 <sniprintf>
 8001470:	e03e      	b.n	80014f0 <StartShellTask+0x458>
									"Time set successfully\r\n");
						} else {
							snprintf(response, sizeof(response),
 8001472:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001476:	4a37      	ldr	r2, [pc, #220]	@ (8001554 <StartShellTask+0x4bc>)
 8001478:	2164      	movs	r1, #100	@ 0x64
 800147a:	4618      	mov	r0, r3
 800147c:	f008 ffaa 	bl	800a3d4 <sniprintf>
 8001480:	e036      	b.n	80014f0 <StartShellTask+0x458>
									"Failed to set time\r\n");
						}
					} else {
						snprintf(response, sizeof(response),
 8001482:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8001486:	4a34      	ldr	r2, [pc, #208]	@ (8001558 <StartShellTask+0x4c0>)
 8001488:	2164      	movs	r1, #100	@ 0x64
 800148a:	4618      	mov	r0, r3
 800148c:	f008 ffa2 	bl	800a3d4 <sniprintf>
 8001490:	e02e      	b.n	80014f0 <StartShellTask+0x458>
								"Usage: SET_TIME hh mm ss dd mm yyyy\r\n");
					}
				} else if (strcmp(command, "GET_VOLTAGE") == 0) {
 8001492:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8001496:	4931      	ldr	r1, [pc, #196]	@ (800155c <StartShellTask+0x4c4>)
 8001498:	4618      	mov	r0, r3
 800149a:	f7fe fe59 	bl	8000150 <strcmp>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d115      	bne.n	80014d0 <StartShellTask+0x438>
					float voltage = adcVoltageSensor.readVoltage();
 80014a4:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 80014a8:	4618      	mov	r0, r3
 80014aa:	f7ff fdb3 	bl	8001014 <_ZN16AdcVoltageSensor11readVoltageEv>
 80014ae:	f8c7 0120 	str.w	r0, [r7, #288]	@ 0x120
					snprintf(response, sizeof(response),
 80014b2:	f8d7 0120 	ldr.w	r0, [r7, #288]	@ 0x120
 80014b6:	f7fe ffc1 	bl	800043c <__aeabi_f2d>
 80014ba:	4602      	mov	r2, r0
 80014bc:	460b      	mov	r3, r1
 80014be:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 80014c2:	e9cd 2300 	strd	r2, r3, [sp]
 80014c6:	4a26      	ldr	r2, [pc, #152]	@ (8001560 <StartShellTask+0x4c8>)
 80014c8:	2164      	movs	r1, #100	@ 0x64
 80014ca:	f008 ff83 	bl	800a3d4 <sniprintf>
 80014ce:	e00f      	b.n	80014f0 <StartShellTask+0x458>
							"ADC Voltage: %.2f V\r\n", voltage);
				} else if (strlen(command) > 0) {
 80014d0:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 80014d4:	781b      	ldrb	r3, [r3, #0]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d007      	beq.n	80014ea <StartShellTask+0x452>
					snprintf(response, sizeof(response), "Unknown command\r\n");
 80014da:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014de:	4a21      	ldr	r2, [pc, #132]	@ (8001564 <StartShellTask+0x4cc>)
 80014e0:	2164      	movs	r1, #100	@ 0x64
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 ff76 	bl	800a3d4 <sniprintf>
 80014e8:	e002      	b.n	80014f0 <StartShellTask+0x458>
				} else {
					response[0] = '\0'; // empty command, don't respond
 80014ea:	2300      	movs	r3, #0
 80014ec:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
				}

				if (strlen(response) > 0) {
 80014f0:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d021      	beq.n	800153e <StartShellTask+0x4a6>
					HAL_UART_Transmit(&huart2, (uint8_t*) response,
							strlen(response), HAL_MAX_DELAY);
 80014fa:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 80014fe:	4618      	mov	r0, r3
 8001500:	f7fe fe30 	bl	8000164 <strlen>
 8001504:	4603      	mov	r3, r0
					HAL_UART_Transmit(&huart2, (uint8_t*) response,
 8001506:	b29a      	uxth	r2, r3
 8001508:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 800150c:	f04f 33ff 	mov.w	r3, #4294967295
 8001510:	4815      	ldr	r0, [pc, #84]	@ (8001568 <StartShellTask+0x4d0>)
 8001512:	f003 f9d3 	bl	80048bc <HAL_UART_Transmit>
				}
			} else if (cmdIndex < sizeof(command) - 1) {
 8001516:	e012      	b.n	800153e <StartShellTask+0x4a6>
 8001518:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800151c:	2b62      	cmp	r3, #98	@ 0x62
 800151e:	f63f add7 	bhi.w	80010d0 <StartShellTask+0x38>
				command[cmdIndex++] = rxChar;
 8001522:	f897 10fb 	ldrb.w	r1, [r7, #251]	@ 0xfb
 8001526:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800152a:	1c5a      	adds	r2, r3, #1
 800152c:	f8c7 2124 	str.w	r2, [r7, #292]	@ 0x124
 8001530:	f503 7394 	add.w	r3, r3, #296	@ 0x128
 8001534:	443b      	add	r3, r7
 8001536:	460a      	mov	r2, r1
 8001538:	f803 2c94 	strb.w	r2, [r3, #-148]
 800153c:	e5c8      	b.n	80010d0 <StartShellTask+0x38>
			} else if (cmdIndex < sizeof(command) - 1) {
 800153e:	bf00      	nop
			}
		}
	}
 8001540:	e5c6      	b.n	80010d0 <StartShellTask+0x38>
 8001542:	bf00      	nop
 8001544:	0800d180 	.word	0x0800d180
 8001548:	0800d18c 	.word	0x0800d18c
 800154c:	20000248 	.word	0x20000248
 8001550:	0800d1a0 	.word	0x0800d1a0
 8001554:	0800d1b8 	.word	0x0800d1b8
 8001558:	0800d1d0 	.word	0x0800d1d0
 800155c:	0800d1f8 	.word	0x0800d1f8
 8001560:	0800d204 	.word	0x0800d204
 8001564:	0800d21c 	.word	0x0800d21c
 8001568:	20000200 	.word	0x20000200

0800156c <_ZN10SolarPanelC1Ei>:

const float SolarPanel::VOLTAGE = 18.0f;
const float SolarPanel::MAX_CURRENT = 2.0f;

// Constructor to initialize the current hour
SolarPanel::SolarPanel(int currentHour) : hour(currentHour) {}
 800156c:	b480      	push	{r7}
 800156e:	b083      	sub	sp, #12
 8001570:	af00      	add	r7, sp, #0
 8001572:	6078      	str	r0, [r7, #4]
 8001574:	6039      	str	r1, [r7, #0]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	683a      	ldr	r2, [r7, #0]
 800157a:	601a      	str	r2, [r3, #0]
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	4618      	mov	r0, r3
 8001580:	370c      	adds	r7, #12
 8001582:	46bd      	mov	sp, r7
 8001584:	bc80      	pop	{r7}
 8001586:	4770      	bx	lr

08001588 <_ZN10SolarPanel23calculateSolarIntensityEv>:

// Function to calculate solar intensity based on the current hour (0-23)
float SolarPanel::calculateSolarIntensity() {
 8001588:	b580      	push	{r7, lr}
 800158a:	b082      	sub	sp, #8
 800158c:	af00      	add	r7, sp, #0
 800158e:	6078      	str	r0, [r7, #4]
    // Intensity is zero before 6 AM and after 6 PM
    if (hour < 6 || hour > 18) {
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	681b      	ldr	r3, [r3, #0]
 8001594:	2b05      	cmp	r3, #5
 8001596:	dd03      	ble.n	80015a0 <_ZN10SolarPanel23calculateSolarIntensityEv+0x18>
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	2b12      	cmp	r3, #18
 800159e:	dd02      	ble.n	80015a6 <_ZN10SolarPanel23calculateSolarIntensityEv+0x1e>
        return 0.0f;
 80015a0:	f04f 0300 	mov.w	r3, #0
 80015a4:	e017      	b.n	80015d6 <_ZN10SolarPanel23calculateSolarIntensityEv+0x4e>
    }

    // Use a sine curve to model the intensity between 6 AM and 6 PM
    return std::sin((2 * M_PI / 12) * (hour - 6));  // 12 hours between 6 AM and 6 PM
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	3b06      	subs	r3, #6
 80015ac:	4618      	mov	r0, r3
 80015ae:	f7fe ff33 	bl	8000418 <__aeabi_i2d>
 80015b2:	a30b      	add	r3, pc, #44	@ (adr r3, 80015e0 <_ZN10SolarPanel23calculateSolarIntensityEv+0x58>)
 80015b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015b8:	f7fe ff98 	bl	80004ec <__aeabi_dmul>
 80015bc:	4602      	mov	r2, r0
 80015be:	460b      	mov	r3, r1
 80015c0:	4610      	mov	r0, r2
 80015c2:	4619      	mov	r1, r3
 80015c4:	f007 fa10 	bl	80089e8 <sin>
 80015c8:	4602      	mov	r2, r0
 80015ca:	460b      	mov	r3, r1
 80015cc:	4610      	mov	r0, r2
 80015ce:	4619      	mov	r1, r3
 80015d0:	f7ff fa64 	bl	8000a9c <__aeabi_d2f>
 80015d4:	4603      	mov	r3, r0
}
 80015d6:	4618      	mov	r0, r3
 80015d8:	3708      	adds	r7, #8
 80015da:	46bd      	mov	sp, r7
 80015dc:	bd80      	pop	{r7, pc}
 80015de:	bf00      	nop
 80015e0:	382d7365 	.word	0x382d7365
 80015e4:	3fe0c152 	.word	0x3fe0c152

080015e8 <_ZN10SolarPanel21calculateSolarCurrentEv>:

// Function to calculate solar current based on intensity
float SolarPanel::calculateSolarCurrent() {
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b084      	sub	sp, #16
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
    // Calculate intensity using sine curve
    float intensity = calculateSolarIntensity();
 80015f0:	6878      	ldr	r0, [r7, #4]
 80015f2:	f7ff ffc9 	bl	8001588 <_ZN10SolarPanel23calculateSolarIntensityEv>
 80015f6:	60f8      	str	r0, [r7, #12]

    // Scale intensity to the max current (0A to MAX_CURRENT)
    return MAX_CURRENT * intensity;
 80015f8:	68fb      	ldr	r3, [r7, #12]
 80015fa:	4619      	mov	r1, r3
 80015fc:	4618      	mov	r0, r3
 80015fe:	f7ff faa3 	bl	8000b48 <__addsf3>
 8001602:	4603      	mov	r3, r0
}
 8001604:	4618      	mov	r0, r3
 8001606:	3710      	adds	r7, #16
 8001608:	46bd      	mov	sp, r7
 800160a:	bd80      	pop	{r7, pc}

0800160c <_ZN10SolarPanel19calculateSolarPowerEv>:

// Function to calculate solar power
float SolarPanel::calculateSolarPower() {
 800160c:	b580      	push	{r7, lr}
 800160e:	b082      	sub	sp, #8
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
    // Power = Voltage * Current
    return VOLTAGE * calculateSolarCurrent();
 8001614:	6878      	ldr	r0, [r7, #4]
 8001616:	f7ff ffe7 	bl	80015e8 <_ZN10SolarPanel21calculateSolarCurrentEv>
 800161a:	4603      	mov	r3, r0
 800161c:	4904      	ldr	r1, [pc, #16]	@ (8001630 <_ZN10SolarPanel19calculateSolarPowerEv+0x24>)
 800161e:	4618      	mov	r0, r3
 8001620:	f7ff fb9a 	bl	8000d58 <__aeabi_fmul>
 8001624:	4603      	mov	r3, r0
}
 8001626:	4618      	mov	r0, r3
 8001628:	3708      	adds	r7, #8
 800162a:	46bd      	mov	sp, r7
 800162c:	bd80      	pop	{r7, pc}
 800162e:	bf00      	nop
 8001630:	41900000 	.word	0x41900000

08001634 <_ZNK21VirtualHumiditySensor11getHumidityEv>:
#include "VirtualHumiditySensor.h"
#include "dht11.h"

extern DHT11 dht;
float VirtualHumiditySensor::getHumidity() const {
 8001634:	b580      	push	{r7, lr}
 8001636:	b084      	sub	sp, #16
 8001638:	af00      	add	r7, sp, #0
 800163a:	6078      	str	r0, [r7, #4]
    dht.init();
 800163c:	480a      	ldr	r0, [pc, #40]	@ (8001668 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x34>)
 800163e:	f000 f874 	bl	800172a <_ZN5DHT114initEv>
    float temp, hum;
    if (dht.read(temp, hum)) {
 8001642:	f107 0208 	add.w	r2, r7, #8
 8001646:	f107 030c 	add.w	r3, r7, #12
 800164a:	4619      	mov	r1, r3
 800164c:	4806      	ldr	r0, [pc, #24]	@ (8001668 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x34>)
 800164e:	f000 f8f3 	bl	8001838 <_ZN5DHT114readERfS0_>
 8001652:	4603      	mov	r3, r0
 8001654:	2b00      	cmp	r3, #0
 8001656:	d001      	beq.n	800165c <_ZNK21VirtualHumiditySensor11getHumidityEv+0x28>
        return hum;
 8001658:	68bb      	ldr	r3, [r7, #8]
 800165a:	e000      	b.n	800165e <_ZNK21VirtualHumiditySensor11getHumidityEv+0x2a>
    } else {
        return -1000.0f;  // or some error value
 800165c:	4b03      	ldr	r3, [pc, #12]	@ (800166c <_ZNK21VirtualHumiditySensor11getHumidityEv+0x38>)
    }
}
 800165e:	4618      	mov	r0, r3
 8001660:	3710      	adds	r7, #16
 8001662:	46bd      	mov	sp, r7
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200001f8 	.word	0x200001f8
 800166c:	c47a0000 	.word	0xc47a0000

08001670 <_ZN24VirtualTemperatureSensorC1Ev>:
#include <cstdlib>
#include "dht11.h"

DHT11 dht(GPIOA, GPIO_PIN_1);

VirtualTemperatureSensor::VirtualTemperatureSensor() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    // Initialization if needed
	dht.init();
 8001678:	4803      	ldr	r0, [pc, #12]	@ (8001688 <_ZN24VirtualTemperatureSensorC1Ev+0x18>)
 800167a:	f000 f856 	bl	800172a <_ZN5DHT114initEv>
}
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	4618      	mov	r0, r3
 8001682:	3708      	adds	r7, #8
 8001684:	46bd      	mov	sp, r7
 8001686:	bd80      	pop	{r7, pc}
 8001688:	200001f8 	.word	0x200001f8

0800168c <_ZN24VirtualTemperatureSensor14getTemperatureEv>:

float VirtualTemperatureSensor::getTemperature() {
 800168c:	b580      	push	{r7, lr}
 800168e:	b084      	sub	sp, #16
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
    float temp, hum;
    if (dht.read(temp, hum)) {
 8001694:	f107 0208 	add.w	r2, r7, #8
 8001698:	f107 030c 	add.w	r3, r7, #12
 800169c:	4619      	mov	r1, r3
 800169e:	4806      	ldr	r0, [pc, #24]	@ (80016b8 <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x2c>)
 80016a0:	f000 f8ca 	bl	8001838 <_ZN5DHT114readERfS0_>
 80016a4:	4603      	mov	r3, r0
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d001      	beq.n	80016ae <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x22>
        return temp;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	e000      	b.n	80016b0 <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x24>
    } else {
        return -1000.0f;  // or some error value
 80016ae:	4b03      	ldr	r3, [pc, #12]	@ (80016bc <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x30>)
    }
}
 80016b0:	4618      	mov	r0, r3
 80016b2:	3710      	adds	r7, #16
 80016b4:	46bd      	mov	sp, r7
 80016b6:	bd80      	pop	{r7, pc}
 80016b8:	200001f8 	.word	0x200001f8
 80016bc:	c47a0000 	.word	0xc47a0000

080016c0 <_Z41__static_initialization_and_destruction_0ii>:
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b082      	sub	sp, #8
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
 80016c8:	6039      	str	r1, [r7, #0]
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2b01      	cmp	r3, #1
 80016ce:	d109      	bne.n	80016e4 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80016d0:	683b      	ldr	r3, [r7, #0]
 80016d2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80016d6:	4293      	cmp	r3, r2
 80016d8:	d104      	bne.n	80016e4 <_Z41__static_initialization_and_destruction_0ii+0x24>
DHT11 dht(GPIOA, GPIO_PIN_1);
 80016da:	2202      	movs	r2, #2
 80016dc:	4903      	ldr	r1, [pc, #12]	@ (80016ec <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 80016de:	4804      	ldr	r0, [pc, #16]	@ (80016f0 <_Z41__static_initialization_and_destruction_0ii+0x30>)
 80016e0:	f000 f810 	bl	8001704 <_ZN5DHT11C1EP12GPIO_TypeDeft>
}
 80016e4:	bf00      	nop
 80016e6:	3708      	adds	r7, #8
 80016e8:	46bd      	mov	sp, r7
 80016ea:	bd80      	pop	{r7, pc}
 80016ec:	40010800 	.word	0x40010800
 80016f0:	200001f8 	.word	0x200001f8

080016f4 <_GLOBAL__sub_I_dht>:
 80016f4:	b580      	push	{r7, lr}
 80016f6:	af00      	add	r7, sp, #0
 80016f8:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 80016fc:	2001      	movs	r0, #1
 80016fe:	f7ff ffdf 	bl	80016c0 <_Z41__static_initialization_and_destruction_0ii>
 8001702:	bd80      	pop	{r7, pc}

08001704 <_ZN5DHT11C1EP12GPIO_TypeDeft>:
#include "cmsis_os.h"
extern UART_HandleTypeDef huart2;

#define CPU_CYCLES_PER_US (SystemCoreClock / 1000000U)

DHT11::DHT11(GPIO_TypeDef* port, uint16_t pin)
 8001704:	b480      	push	{r7}
 8001706:	b085      	sub	sp, #20
 8001708:	af00      	add	r7, sp, #0
 800170a:	60f8      	str	r0, [r7, #12]
 800170c:	60b9      	str	r1, [r7, #8]
 800170e:	4613      	mov	r3, r2
 8001710:	80fb      	strh	r3, [r7, #6]
    : _port(port), _pin(pin) {}
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	68ba      	ldr	r2, [r7, #8]
 8001716:	601a      	str	r2, [r3, #0]
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	88fa      	ldrh	r2, [r7, #6]
 800171c:	809a      	strh	r2, [r3, #4]
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	4618      	mov	r0, r3
 8001722:	3714      	adds	r7, #20
 8001724:	46bd      	mov	sp, r7
 8001726:	bc80      	pop	{r7}
 8001728:	4770      	bx	lr

0800172a <_ZN5DHT114initEv>:

void DHT11::init() {
 800172a:	b580      	push	{r7, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	6078      	str	r0, [r7, #4]
    DWT_Delay_Init();
 8001732:	f000 f955 	bl	80019e0 <DWT_Delay_Init>
}
 8001736:	bf00      	nop
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}

0800173e <_ZN5DHT1112setPinOutputEv>:

void DHT11::setPinOutput() {
 800173e:	b580      	push	{r7, lr}
 8001740:	b086      	sub	sp, #24
 8001742:	af00      	add	r7, sp, #0
 8001744:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {};
 8001746:	f107 0308 	add.w	r3, r7, #8
 800174a:	2200      	movs	r2, #0
 800174c:	601a      	str	r2, [r3, #0]
 800174e:	605a      	str	r2, [r3, #4]
 8001750:	609a      	str	r2, [r3, #8]
 8001752:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = _pin;
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	889b      	ldrh	r3, [r3, #4]
 8001758:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800175a:	2301      	movs	r3, #1
 800175c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800175e:	2303      	movs	r3, #3
 8001760:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	f107 0208 	add.w	r2, r7, #8
 800176a:	4611      	mov	r1, r2
 800176c:	4618      	mov	r0, r3
 800176e:	f001 fc27 	bl	8002fc0 <HAL_GPIO_Init>
}
 8001772:	bf00      	nop
 8001774:	3718      	adds	r7, #24
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}

0800177a <_ZN5DHT1111setPinInputEv>:

void DHT11::setPinInput() {
 800177a:	b580      	push	{r7, lr}
 800177c:	b086      	sub	sp, #24
 800177e:	af00      	add	r7, sp, #0
 8001780:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {};
 8001782:	f107 0308 	add.w	r3, r7, #8
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = _pin;
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	889b      	ldrh	r3, [r3, #4]
 8001794:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001796:	2300      	movs	r3, #0
 8001798:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179a:	2300      	movs	r3, #0
 800179c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port, &GPIO_InitStruct);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f107 0208 	add.w	r2, r7, #8
 80017a6:	4611      	mov	r1, r2
 80017a8:	4618      	mov	r0, r3
 80017aa:	f001 fc09 	bl	8002fc0 <HAL_GPIO_Init>
}
 80017ae:	bf00      	nop
 80017b0:	3718      	adds	r7, #24
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
	...

080017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>:

uint8_t DHT11::waitForLevel(GPIO_PinState level, uint32_t timeout_us) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	60f8      	str	r0, [r7, #12]
 80017c0:	460b      	mov	r3, r1
 80017c2:	607a      	str	r2, [r7, #4]
 80017c4:	72fb      	strb	r3, [r7, #11]
    uint32_t timeout_cycles = timeout_us * CPU_CYCLES_PER_US;
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x74>)
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	4a19      	ldr	r2, [pc, #100]	@ (8001830 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x78>)
 80017cc:	fba2 2303 	umull	r2, r3, r2, r3
 80017d0:	0c9a      	lsrs	r2, r3, #18
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	fb02 f303 	mul.w	r3, r2, r3
 80017d8:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;
 80017da:	4b16      	ldr	r3, [pc, #88]	@ (8001834 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x7c>)
 80017dc:	685b      	ldr	r3, [r3, #4]
 80017de:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(_port, _pin) != level) {
 80017e0:	e00d      	b.n	80017fe <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x46>
        if ((DWT->CYCCNT - start) > timeout_cycles) return 1;
 80017e2:	4b14      	ldr	r3, [pc, #80]	@ (8001834 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x7c>)
 80017e4:	685a      	ldr	r2, [r3, #4]
 80017e6:	693b      	ldr	r3, [r7, #16]
 80017e8:	1ad3      	subs	r3, r2, r3
 80017ea:	697a      	ldr	r2, [r7, #20]
 80017ec:	429a      	cmp	r2, r3
 80017ee:	bf34      	ite	cc
 80017f0:	2301      	movcc	r3, #1
 80017f2:	2300      	movcs	r3, #0
 80017f4:	b2db      	uxtb	r3, r3
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x46>
 80017fa:	2301      	movs	r3, #1
 80017fc:	e012      	b.n	8001824 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x6c>
    while (HAL_GPIO_ReadPin(_port, _pin) != level) {
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681a      	ldr	r2, [r3, #0]
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	889b      	ldrh	r3, [r3, #4]
 8001806:	4619      	mov	r1, r3
 8001808:	4610      	mov	r0, r2
 800180a:	f001 fd5d 	bl	80032c8 <HAL_GPIO_ReadPin>
 800180e:	4603      	mov	r3, r0
 8001810:	461a      	mov	r2, r3
 8001812:	7afb      	ldrb	r3, [r7, #11]
 8001814:	4293      	cmp	r3, r2
 8001816:	bf14      	ite	ne
 8001818:	2301      	movne	r3, #1
 800181a:	2300      	moveq	r3, #0
 800181c:	b2db      	uxtb	r3, r3
 800181e:	2b00      	cmp	r3, #0
 8001820:	d1df      	bne.n	80017e2 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x2a>
    }
    return 0;
 8001822:	2300      	movs	r3, #0
}
 8001824:	4618      	mov	r0, r3
 8001826:	3718      	adds	r7, #24
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	20000000 	.word	0x20000000
 8001830:	431bde83 	.word	0x431bde83
 8001834:	e0001000 	.word	0xe0001000

08001838 <_ZN5DHT114readERfS0_>:

bool DHT11::read(float& temperature, float& humidity) {
 8001838:	b580      	push	{r7, lr}
 800183a:	b088      	sub	sp, #32
 800183c:	af00      	add	r7, sp, #0
 800183e:	60f8      	str	r0, [r7, #12]
 8001840:	60b9      	str	r1, [r7, #8]
 8001842:	607a      	str	r2, [r7, #4]
    uint8_t bits[5] = {0};
 8001844:	2300      	movs	r3, #0
 8001846:	617b      	str	r3, [r7, #20]
 8001848:	2300      	movs	r3, #0
 800184a:	763b      	strb	r3, [r7, #24]

    setPinOutput();
 800184c:	68f8      	ldr	r0, [r7, #12]
 800184e:	f7ff ff76 	bl	800173e <_ZN5DHT1112setPinOutputEv>
    HAL_GPIO_WritePin(_port, _pin, GPIO_PIN_RESET);
 8001852:	68fb      	ldr	r3, [r7, #12]
 8001854:	6818      	ldr	r0, [r3, #0]
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	889b      	ldrh	r3, [r3, #4]
 800185a:	2200      	movs	r2, #0
 800185c:	4619      	mov	r1, r3
 800185e:	f001 fd4a 	bl	80032f6 <HAL_GPIO_WritePin>
    DWT_Delay_us(18000);
 8001862:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001866:	f000 f8d5 	bl	8001a14 <DWT_Delay_us>
    HAL_GPIO_WritePin(_port, _pin, GPIO_PIN_SET);
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	6818      	ldr	r0, [r3, #0]
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	889b      	ldrh	r3, [r3, #4]
 8001872:	2201      	movs	r2, #1
 8001874:	4619      	mov	r1, r3
 8001876:	f001 fd3e 	bl	80032f6 <HAL_GPIO_WritePin>
    DWT_Delay_us(20);
 800187a:	2014      	movs	r0, #20
 800187c:	f000 f8ca 	bl	8001a14 <DWT_Delay_us>
    setPinInput();
 8001880:	68f8      	ldr	r0, [r7, #12]
 8001882:	f7ff ff7a 	bl	800177a <_ZN5DHT1111setPinInputEv>

    if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 8001886:	2264      	movs	r2, #100	@ 0x64
 8001888:	2100      	movs	r1, #0
 800188a:	68f8      	ldr	r0, [r7, #12]
 800188c:	f7ff ff94 	bl	80017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 8001890:	4603      	mov	r3, r0
 8001892:	2b00      	cmp	r3, #0
 8001894:	bf14      	ite	ne
 8001896:	2301      	movne	r3, #1
 8001898:	2300      	moveq	r3, #0
 800189a:	b2db      	uxtb	r3, r3
 800189c:	2b00      	cmp	r3, #0
 800189e:	d001      	beq.n	80018a4 <_ZN5DHT114readERfS0_+0x6c>
 80018a0:	2300      	movs	r3, #0
 80018a2:	e098      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>
    if (waitForLevel(GPIO_PIN_SET, 100)) return false;
 80018a4:	2264      	movs	r2, #100	@ 0x64
 80018a6:	2101      	movs	r1, #1
 80018a8:	68f8      	ldr	r0, [r7, #12]
 80018aa:	f7ff ff85 	bl	80017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80018ae:	4603      	mov	r3, r0
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	bf14      	ite	ne
 80018b4:	2301      	movne	r3, #1
 80018b6:	2300      	moveq	r3, #0
 80018b8:	b2db      	uxtb	r3, r3
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <_ZN5DHT114readERfS0_+0x8a>
 80018be:	2300      	movs	r3, #0
 80018c0:	e089      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>
    if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 80018c2:	2264      	movs	r2, #100	@ 0x64
 80018c4:	2100      	movs	r1, #0
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff ff76 	bl	80017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80018cc:	4603      	mov	r3, r0
 80018ce:	2b00      	cmp	r3, #0
 80018d0:	bf14      	ite	ne
 80018d2:	2301      	movne	r3, #1
 80018d4:	2300      	moveq	r3, #0
 80018d6:	b2db      	uxtb	r3, r3
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d001      	beq.n	80018e0 <_ZN5DHT114readERfS0_+0xa8>
 80018dc:	2300      	movs	r3, #0
 80018de:	e07a      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>

    for (int i = 0; i < 40; i++) {
 80018e0:	2300      	movs	r3, #0
 80018e2:	61fb      	str	r3, [r7, #28]
 80018e4:	e056      	b.n	8001994 <_ZN5DHT114readERfS0_+0x15c>
        if (waitForLevel(GPIO_PIN_SET, 100)) return false;
 80018e6:	2264      	movs	r2, #100	@ 0x64
 80018e8:	2101      	movs	r1, #1
 80018ea:	68f8      	ldr	r0, [r7, #12]
 80018ec:	f7ff ff64 	bl	80017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	bf14      	ite	ne
 80018f6:	2301      	movne	r3, #1
 80018f8:	2300      	moveq	r3, #0
 80018fa:	b2db      	uxtb	r3, r3
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d001      	beq.n	8001904 <_ZN5DHT114readERfS0_+0xcc>
 8001900:	2300      	movs	r3, #0
 8001902:	e068      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>

        DWT_Delay_us(35);
 8001904:	2023      	movs	r0, #35	@ 0x23
 8001906:	f000 f885 	bl	8001a14 <DWT_Delay_us>
        if (HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_SET) {
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	681a      	ldr	r2, [r3, #0]
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	4619      	mov	r1, r3
 8001914:	4610      	mov	r0, r2
 8001916:	f001 fcd7 	bl	80032c8 <HAL_GPIO_ReadPin>
 800191a:	4603      	mov	r3, r0
 800191c:	2b01      	cmp	r3, #1
 800191e:	bf0c      	ite	eq
 8001920:	2301      	moveq	r3, #1
 8001922:	2300      	movne	r3, #0
 8001924:	b2db      	uxtb	r3, r3
 8001926:	2b00      	cmp	r3, #0
 8001928:	d022      	beq.n	8001970 <_ZN5DHT114readERfS0_+0x138>
            bits[i / 8] |= (1 << (7 - (i % 8)));
 800192a:	69fb      	ldr	r3, [r7, #28]
 800192c:	2b00      	cmp	r3, #0
 800192e:	da00      	bge.n	8001932 <_ZN5DHT114readERfS0_+0xfa>
 8001930:	3307      	adds	r3, #7
 8001932:	10db      	asrs	r3, r3, #3
 8001934:	461a      	mov	r2, r3
 8001936:	f102 0320 	add.w	r3, r2, #32
 800193a:	443b      	add	r3, r7
 800193c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001940:	b259      	sxtb	r1, r3
 8001942:	69fb      	ldr	r3, [r7, #28]
 8001944:	4258      	negs	r0, r3
 8001946:	f003 0307 	and.w	r3, r3, #7
 800194a:	f000 0007 	and.w	r0, r0, #7
 800194e:	bf58      	it	pl
 8001950:	4243      	negpl	r3, r0
 8001952:	f1c3 0307 	rsb	r3, r3, #7
 8001956:	2001      	movs	r0, #1
 8001958:	fa00 f303 	lsl.w	r3, r0, r3
 800195c:	b25b      	sxtb	r3, r3
 800195e:	430b      	orrs	r3, r1
 8001960:	b25b      	sxtb	r3, r3
 8001962:	b2d9      	uxtb	r1, r3
 8001964:	f102 0320 	add.w	r3, r2, #32
 8001968:	443b      	add	r3, r7
 800196a:	460a      	mov	r2, r1
 800196c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        }

        if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 8001970:	2264      	movs	r2, #100	@ 0x64
 8001972:	2100      	movs	r1, #0
 8001974:	68f8      	ldr	r0, [r7, #12]
 8001976:	f7ff ff1f 	bl	80017b8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	bf14      	ite	ne
 8001980:	2301      	movne	r3, #1
 8001982:	2300      	moveq	r3, #0
 8001984:	b2db      	uxtb	r3, r3
 8001986:	2b00      	cmp	r3, #0
 8001988:	d001      	beq.n	800198e <_ZN5DHT114readERfS0_+0x156>
 800198a:	2300      	movs	r3, #0
 800198c:	e023      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>
    for (int i = 0; i < 40; i++) {
 800198e:	69fb      	ldr	r3, [r7, #28]
 8001990:	3301      	adds	r3, #1
 8001992:	61fb      	str	r3, [r7, #28]
 8001994:	69fb      	ldr	r3, [r7, #28]
 8001996:	2b27      	cmp	r3, #39	@ 0x27
 8001998:	dda5      	ble.n	80018e6 <_ZN5DHT114readERfS0_+0xae>
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) return false;
 800199a:	7d3a      	ldrb	r2, [r7, #20]
 800199c:	7d7b      	ldrb	r3, [r7, #21]
 800199e:	4413      	add	r3, r2
 80019a0:	b2da      	uxtb	r2, r3
 80019a2:	7dbb      	ldrb	r3, [r7, #22]
 80019a4:	4413      	add	r3, r2
 80019a6:	b2da      	uxtb	r2, r3
 80019a8:	7dfb      	ldrb	r3, [r7, #23]
 80019aa:	4413      	add	r3, r2
 80019ac:	b2da      	uxtb	r2, r3
 80019ae:	7e3b      	ldrb	r3, [r7, #24]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	d001      	beq.n	80019b8 <_ZN5DHT114readERfS0_+0x180>
 80019b4:	2300      	movs	r3, #0
 80019b6:	e00e      	b.n	80019d6 <_ZN5DHT114readERfS0_+0x19e>

    humidity = static_cast<float>(bits[0]);
 80019b8:	7d3b      	ldrb	r3, [r7, #20]
 80019ba:	4618      	mov	r0, r3
 80019bc:	f7ff f974 	bl	8000ca8 <__aeabi_ui2f>
 80019c0:	4602      	mov	r2, r0
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	601a      	str	r2, [r3, #0]
    temperature = static_cast<float>(bits[2]);
 80019c6:	7dbb      	ldrb	r3, [r7, #22]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff f96d 	bl	8000ca8 <__aeabi_ui2f>
 80019ce:	4602      	mov	r2, r0
 80019d0:	68bb      	ldr	r3, [r7, #8]
 80019d2:	601a      	str	r2, [r3, #0]

    return true;
 80019d4:	2301      	movs	r3, #1
}
 80019d6:	4618      	mov	r0, r3
 80019d8:	3720      	adds	r7, #32
 80019da:	46bd      	mov	sp, r7
 80019dc:	bd80      	pop	{r7, pc}
	...

080019e0 <DWT_Delay_Init>:
#include "dwt_delay.h"

void DWT_Delay_Init(void) {
 80019e0:	b480      	push	{r7}
 80019e2:	af00      	add	r7, sp, #0
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
 80019e4:	4b09      	ldr	r3, [pc, #36]	@ (8001a0c <DWT_Delay_Init+0x2c>)
 80019e6:	68db      	ldr	r3, [r3, #12]
 80019e8:	4a08      	ldr	r2, [pc, #32]	@ (8001a0c <DWT_Delay_Init+0x2c>)
 80019ea:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80019ee:	60d3      	str	r3, [r2, #12]
    DWT->CYCCNT = 0;
 80019f0:	4b07      	ldr	r3, [pc, #28]	@ (8001a10 <DWT_Delay_Init+0x30>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	605a      	str	r2, [r3, #4]
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
 80019f6:	4b06      	ldr	r3, [pc, #24]	@ (8001a10 <DWT_Delay_Init+0x30>)
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	4a05      	ldr	r2, [pc, #20]	@ (8001a10 <DWT_Delay_Init+0x30>)
 80019fc:	f043 0301 	orr.w	r3, r3, #1
 8001a00:	6013      	str	r3, [r2, #0]
}
 8001a02:	bf00      	nop
 8001a04:	46bd      	mov	sp, r7
 8001a06:	bc80      	pop	{r7}
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	e000edf0 	.word	0xe000edf0
 8001a10:	e0001000 	.word	0xe0001000

08001a14 <DWT_Delay_us>:

void DWT_Delay_us(uint32_t us) {
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b084      	sub	sp, #16
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8001a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8001a54 <DWT_Delay_us+0x40>)
 8001a1e:	685b      	ldr	r3, [r3, #4]
 8001a20:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 8001a22:	f002 f84d 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8001a26:	4603      	mov	r3, r0
 8001a28:	4a0b      	ldr	r2, [pc, #44]	@ (8001a58 <DWT_Delay_us+0x44>)
 8001a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a2e:	0c9a      	lsrs	r2, r3, #18
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	fb02 f303 	mul.w	r3, r2, r3
 8001a36:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - clk_cycle_start) < ticks);
 8001a38:	bf00      	nop
 8001a3a:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <DWT_Delay_us+0x40>)
 8001a3c:	685a      	ldr	r2, [r3, #4]
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	1ad3      	subs	r3, r2, r3
 8001a42:	68ba      	ldr	r2, [r7, #8]
 8001a44:	429a      	cmp	r2, r3
 8001a46:	d8f8      	bhi.n	8001a3a <DWT_Delay_us+0x26>
}
 8001a48:	bf00      	nop
 8001a4a:	bf00      	nop
 8001a4c:	3710      	adds	r7, #16
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e0001000 	.word	0xe0001000
 8001a58:	431bde83 	.word	0x431bde83

08001a5c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b08a      	sub	sp, #40	@ 0x28
 8001a60:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001a62:	f000 fc45 	bl	80022f0 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_RTC_Init();
 8001a66:	f000 f98d 	bl	8001d84 <_Z11MX_RTC_Initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001a6a:	f000 f847 	bl	8001afc <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */
  void Timer2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001a6e:	f000 f8bf 	bl	8001bf0 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001a72:	f000 f88f 	bl	8001b94 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 8001a76:	2201      	movs	r2, #1
 8001a78:	491b      	ldr	r1, [pc, #108]	@ (8001ae8 <main+0x8c>)
 8001a7a:	481c      	ldr	r0, [pc, #112]	@ (8001aec <main+0x90>)
 8001a7c:	f002 ffa9 	bl	80049d2 <HAL_UART_Receive_IT>
  MX_ADC1_Init();
 8001a80:	f000 f938 	bl	8001cf4 <_ZL12MX_ADC1_Initv>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001a84:	f003 fd78 	bl	8005578 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uartRxStreamBuffer = xStreamBufferCreate(128, 1);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	2101      	movs	r1, #1
 8001a8c:	2080      	movs	r0, #128	@ 0x80
 8001a8e:	f004 fc27 	bl	80062e0 <xStreamBufferGenericCreate>
 8001a92:	4603      	mov	r3, r0
 8001a94:	4a16      	ldr	r2, [pc, #88]	@ (8001af0 <main+0x94>)
 8001a96:	6013      	str	r3, [r2, #0]
  configASSERT(uartRxStreamBuffer != NULL);
 8001a98:	4b15      	ldr	r3, [pc, #84]	@ (8001af0 <main+0x94>)
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	2b00      	cmp	r3, #0
 8001a9e:	d10b      	bne.n	8001ab8 <main+0x5c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001aa0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001aa4:	f383 8811 	msr	BASEPRI, r3
 8001aa8:	f3bf 8f6f 	isb	sy
 8001aac:	f3bf 8f4f 	dsb	sy
 8001ab0:	627b      	str	r3, [r7, #36]	@ 0x24
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8001ab2:	bf00      	nop
 8001ab4:	bf00      	nop
 8001ab6:	e7fd      	b.n	8001ab4 <main+0x58>
//  };
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  const osThreadAttr_t shellTask_attributes = {
 8001ab8:	463b      	mov	r3, r7
 8001aba:	2224      	movs	r2, #36	@ 0x24
 8001abc:	2100      	movs	r1, #0
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f008 fd2b 	bl	800a51a <memset>
 8001ac4:	4b0b      	ldr	r3, [pc, #44]	@ (8001af4 <main+0x98>)
 8001ac6:	603b      	str	r3, [r7, #0]
 8001ac8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001acc:	617b      	str	r3, [r7, #20]
 8001ace:	2318      	movs	r3, #24
 8001ad0:	61bb      	str	r3, [r7, #24]
    .name = "ShellTask",
    .stack_size = 512 * 4,  // 2KB stack
    .priority = (osPriority_t) osPriorityNormal,
  };
  /* add threads, ... */
  osThreadNew(StartShellTask, NULL, &shellTask_attributes);
 8001ad2:	463b      	mov	r3, r7
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2100      	movs	r1, #0
 8001ad8:	4807      	ldr	r0, [pc, #28]	@ (8001af8 <main+0x9c>)
 8001ada:	f003 fd95 	bl	8005608 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001ade:	f003 fd6d 	bl	80055bc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001ae2:	bf00      	nop
 8001ae4:	e7fd      	b.n	8001ae2 <main+0x86>
 8001ae6:	bf00      	nop
 8001ae8:	2000028c 	.word	0x2000028c
 8001aec:	20000200 	.word	0x20000200
 8001af0:	200001f4 	.word	0x200001f4
 8001af4:	0800d230 	.word	0x0800d230
 8001af8:	08001099 	.word	0x08001099

08001afc <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b090      	sub	sp, #64	@ 0x40
 8001b00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001b02:	f107 0318 	add.w	r3, r7, #24
 8001b06:	2228      	movs	r2, #40	@ 0x28
 8001b08:	2100      	movs	r1, #0
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	f008 fd05 	bl	800a51a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001b10:	1d3b      	adds	r3, r7, #4
 8001b12:	2200      	movs	r2, #0
 8001b14:	601a      	str	r2, [r3, #0]
 8001b16:	605a      	str	r2, [r3, #4]
 8001b18:	609a      	str	r2, [r3, #8]
 8001b1a:	60da      	str	r2, [r3, #12]
 8001b1c:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001b22:	2301      	movs	r3, #1
 8001b24:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001b26:	2310      	movs	r3, #16
 8001b28:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001b2a:	2302      	movs	r3, #2
 8001b2c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001b32:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001b36:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001b38:	f107 0318 	add.w	r3, r7, #24
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f001 fbff 	bl	8003340 <HAL_RCC_OscConfig>
 8001b42:	4603      	mov	r3, r0
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	bf14      	ite	ne
 8001b48:	2301      	movne	r3, #1
 8001b4a:	2300      	moveq	r3, #0
 8001b4c:	b2db      	uxtb	r3, r3
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d001      	beq.n	8001b56 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 8001b52:	f000 f9a5 	bl	8001ea0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001b56:	230f      	movs	r3, #15
 8001b58:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001b5a:	2302      	movs	r3, #2
 8001b5c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001b5e:	2300      	movs	r3, #0
 8001b60:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001b62:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001b66:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001b6c:	1d3b      	adds	r3, r7, #4
 8001b6e:	2102      	movs	r1, #2
 8001b70:	4618      	mov	r0, r3
 8001b72:	f001 fe67 	bl	8003844 <HAL_RCC_ClockConfig>
 8001b76:	4603      	mov	r3, r0
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	bf14      	ite	ne
 8001b7c:	2301      	movne	r3, #1
 8001b7e:	2300      	moveq	r3, #0
 8001b80:	b2db      	uxtb	r3, r3
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001b86:	f000 f98b 	bl	8001ea0 <Error_Handler>
  }
}
 8001b8a:	bf00      	nop
 8001b8c:	3740      	adds	r7, #64	@ 0x40
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bd80      	pop	{r7, pc}
	...

08001b94 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001b94:	b580      	push	{r7, lr}
 8001b96:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b98:	4b13      	ldr	r3, [pc, #76]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001b9a:	4a14      	ldr	r2, [pc, #80]	@ (8001bec <_ZL19MX_USART2_UART_Initv+0x58>)
 8001b9c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b9e:	4b12      	ldr	r3, [pc, #72]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ba0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001ba4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001ba6:	4b10      	ldr	r3, [pc, #64]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001ba8:	2200      	movs	r2, #0
 8001baa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001bac:	4b0e      	ldr	r3, [pc, #56]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bae:	2200      	movs	r2, #0
 8001bb0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001bb2:	4b0d      	ldr	r3, [pc, #52]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bb4:	2200      	movs	r2, #0
 8001bb6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bba:	220c      	movs	r2, #12
 8001bbc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001bbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bc0:	2200      	movs	r2, #0
 8001bc2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001bca:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001bcc:	f002 fe26 	bl	800481c <HAL_UART_Init>
 8001bd0:	4603      	mov	r3, r0
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	bf14      	ite	ne
 8001bd6:	2301      	movne	r3, #1
 8001bd8:	2300      	moveq	r3, #0
 8001bda:	b2db      	uxtb	r3, r3
 8001bdc:	2b00      	cmp	r3, #0
 8001bde:	d001      	beq.n	8001be4 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 8001be0:	f000 f95e 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001be4:	bf00      	nop
 8001be6:	bd80      	pop	{r7, pc}
 8001be8:	20000200 	.word	0x20000200
 8001bec:	40004400 	.word	0x40004400

08001bf0 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001bf0:	b580      	push	{r7, lr}
 8001bf2:	b088      	sub	sp, #32
 8001bf4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bf6:	f107 0310 	add.w	r3, r7, #16
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
 8001bfe:	605a      	str	r2, [r3, #4]
 8001c00:	609a      	str	r2, [r3, #8]
 8001c02:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c04:	4b37      	ldr	r3, [pc, #220]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c06:	699b      	ldr	r3, [r3, #24]
 8001c08:	4a36      	ldr	r2, [pc, #216]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c0a:	f043 0310 	orr.w	r3, r3, #16
 8001c0e:	6193      	str	r3, [r2, #24]
 8001c10:	4b34      	ldr	r3, [pc, #208]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c12:	699b      	ldr	r3, [r3, #24]
 8001c14:	f003 0310 	and.w	r3, r3, #16
 8001c18:	60fb      	str	r3, [r7, #12]
 8001c1a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001c1c:	4b31      	ldr	r3, [pc, #196]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a30      	ldr	r2, [pc, #192]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c22:	f043 0320 	orr.w	r3, r3, #32
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b2e      	ldr	r3, [pc, #184]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0320 	and.w	r3, r3, #32
 8001c30:	60bb      	str	r3, [r7, #8]
 8001c32:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c34:	4b2b      	ldr	r3, [pc, #172]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a2a      	ldr	r2, [pc, #168]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c3a:	f043 0304 	orr.w	r3, r3, #4
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b28      	ldr	r3, [pc, #160]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	607b      	str	r3, [r7, #4]
 8001c4a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001c4c:	4b25      	ldr	r3, [pc, #148]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c4e:	699b      	ldr	r3, [r3, #24]
 8001c50:	4a24      	ldr	r2, [pc, #144]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c52:	f043 0308 	orr.w	r3, r3, #8
 8001c56:	6193      	str	r3, [r2, #24]
 8001c58:	4b22      	ldr	r3, [pc, #136]	@ (8001ce4 <_ZL12MX_GPIO_Initv+0xf4>)
 8001c5a:	699b      	ldr	r3, [r3, #24]
 8001c5c:	f003 0308 	and.w	r3, r3, #8
 8001c60:	603b      	str	r3, [r7, #0]
 8001c62:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c64:	2200      	movs	r2, #0
 8001c66:	2120      	movs	r1, #32
 8001c68:	481f      	ldr	r0, [pc, #124]	@ (8001ce8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001c6a:	f001 fb44 	bl	80032f6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c6e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c72:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c74:	4b1d      	ldr	r3, [pc, #116]	@ (8001cec <_ZL12MX_GPIO_Initv+0xfc>)
 8001c76:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c78:	2300      	movs	r3, #0
 8001c7a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c7c:	f107 0310 	add.w	r3, r7, #16
 8001c80:	4619      	mov	r1, r3
 8001c82:	481b      	ldr	r0, [pc, #108]	@ (8001cf0 <_ZL12MX_GPIO_Initv+0x100>)
 8001c84:	f001 f99c 	bl	8002fc0 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c88:	2320      	movs	r3, #32
 8001c8a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c8c:	2301      	movs	r3, #1
 8001c8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c94:	2302      	movs	r3, #2
 8001c96:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c98:	f107 0310 	add.w	r3, r7, #16
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4812      	ldr	r0, [pc, #72]	@ (8001ce8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001ca0:	f001 f98e 	bl	8002fc0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001ca4:	2200      	movs	r2, #0
 8001ca6:	2105      	movs	r1, #5
 8001ca8:	2028      	movs	r0, #40	@ 0x28
 8001caa:	f001 f8a0 	bl	8002dee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cae:	2028      	movs	r0, #40	@ 0x28
 8001cb0:	f001 f8b9 	bl	8002e26 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Set PA1 as Output Push-Pull or Open-Drain
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 8001cb4:	2201      	movs	r2, #1
 8001cb6:	2102      	movs	r1, #2
 8001cb8:	480b      	ldr	r0, [pc, #44]	@ (8001ce8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cba:	f001 fb1c 	bl	80032f6 <HAL_GPIO_WritePin>
  // Configure GPIO PA1 as input with pull-up resistor
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 8001cbe:	2302      	movs	r3, #2
 8001cc0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // Enable pull-up
 8001cc6:	2301      	movs	r3, #1
 8001cc8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Low speed is fine for DHT11
 8001cca:	2302      	movs	r3, #2
 8001ccc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cce:	f107 0310 	add.w	r3, r7, #16
 8001cd2:	4619      	mov	r1, r3
 8001cd4:	4804      	ldr	r0, [pc, #16]	@ (8001ce8 <_ZL12MX_GPIO_Initv+0xf8>)
 8001cd6:	f001 f973 	bl	8002fc0 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 8001cda:	bf00      	nop
 8001cdc:	3720      	adds	r7, #32
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	bd80      	pop	{r7, pc}
 8001ce2:	bf00      	nop
 8001ce4:	40021000 	.word	0x40021000
 8001ce8:	40010800 	.word	0x40010800
 8001cec:	10110000 	.word	0x10110000
 8001cf0:	40011000 	.word	0x40011000

08001cf4 <_ZL12MX_ADC1_Initv>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001cf4:	b580      	push	{r7, lr}
 8001cf6:	b084      	sub	sp, #16
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001cfa:	1d3b      	adds	r3, r7, #4
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	601a      	str	r2, [r3, #0]
 8001d00:	605a      	str	r2, [r3, #4]
 8001d02:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8001d04:	4b1d      	ldr	r3, [pc, #116]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d06:	4a1e      	ldr	r2, [pc, #120]	@ (8001d80 <_ZL12MX_ADC1_Initv+0x8c>)
 8001d08:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8001d0a:	4b1c      	ldr	r3, [pc, #112]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001d10:	4b1a      	ldr	r3, [pc, #104]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001d16:	4b19      	ldr	r3, [pc, #100]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d18:	2200      	movs	r2, #0
 8001d1a:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001d1c:	4b17      	ldr	r3, [pc, #92]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d1e:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 8001d22:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001d24:	4b15      	ldr	r3, [pc, #84]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8001d2a:	4b14      	ldr	r3, [pc, #80]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d2c:	2201      	movs	r2, #1
 8001d2e:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001d30:	4812      	ldr	r0, [pc, #72]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d32:	f000 fb2d 	bl	8002390 <HAL_ADC_Init>
 8001d36:	4603      	mov	r3, r0
 8001d38:	2b00      	cmp	r3, #0
 8001d3a:	bf14      	ite	ne
 8001d3c:	2301      	movne	r3, #1
 8001d3e:	2300      	moveq	r3, #0
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d001      	beq.n	8001d4a <_ZL12MX_ADC1_Initv+0x56>
  {
    Error_Handler();
 8001d46:	f000 f8ab 	bl	8001ea0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8001d52:	2300      	movs	r3, #0
 8001d54:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001d56:	1d3b      	adds	r3, r7, #4
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4808      	ldr	r0, [pc, #32]	@ (8001d7c <_ZL12MX_ADC1_Initv+0x88>)
 8001d5c:	f000 fddc 	bl	8002918 <HAL_ADC_ConfigChannel>
 8001d60:	4603      	mov	r3, r0
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	bf14      	ite	ne
 8001d66:	2301      	movne	r3, #1
 8001d68:	2300      	moveq	r3, #0
 8001d6a:	b2db      	uxtb	r3, r3
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d001      	beq.n	8001d74 <_ZL12MX_ADC1_Initv+0x80>
  {
    Error_Handler();
 8001d70:	f000 f896 	bl	8001ea0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001d74:	bf00      	nop
 8001d76:	3710      	adds	r7, #16
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	bd80      	pop	{r7, pc}
 8001d7c:	2000025c 	.word	0x2000025c
 8001d80:	40012400 	.word	0x40012400

08001d84 <_Z11MX_RTC_Initv>:


/* USER CODE BEGIN 4 */
void MX_RTC_Init() {
 8001d84:	b580      	push	{r7, lr}
 8001d86:	b084      	sub	sp, #16
 8001d88:	af00      	add	r7, sp, #0
    // Enable the RTC clock
    __HAL_RCC_PWR_CLK_ENABLE();
 8001d8a:	4b40      	ldr	r3, [pc, #256]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001d8c:	69db      	ldr	r3, [r3, #28]
 8001d8e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001d90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001d94:	61d3      	str	r3, [r2, #28]
 8001d96:	4b3d      	ldr	r3, [pc, #244]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001d98:	69db      	ldr	r3, [r3, #28]
 8001d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001d9e:	607b      	str	r3, [r7, #4]
 8001da0:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 8001da2:	f001 fac1 	bl	8003328 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKP_CLK_ENABLE();
 8001da6:	4b39      	ldr	r3, [pc, #228]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001da8:	69db      	ldr	r3, [r3, #28]
 8001daa:	4a38      	ldr	r2, [pc, #224]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dac:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001db0:	61d3      	str	r3, [r2, #28]
 8001db2:	4b36      	ldr	r3, [pc, #216]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001db4:	69db      	ldr	r3, [r3, #28]
 8001db6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001dba:	603b      	str	r3, [r7, #0]
 8001dbc:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_RTC_ENABLE();
 8001dbe:	4b34      	ldr	r3, [pc, #208]	@ (8001e90 <_Z11MX_RTC_Initv+0x10c>)
 8001dc0:	2201      	movs	r2, #1
 8001dc2:	601a      	str	r2, [r3, #0]

    // Select LSI as RTC clock source
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);      // Turn off LSE
 8001dc4:	4b31      	ldr	r3, [pc, #196]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dc6:	6a1b      	ldr	r3, [r3, #32]
 8001dc8:	4a30      	ldr	r2, [pc, #192]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dca:	f023 0301 	bic.w	r3, r3, #1
 8001dce:	6213      	str	r3, [r2, #32]
 8001dd0:	4b2e      	ldr	r3, [pc, #184]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dd2:	6a1b      	ldr	r3, [r3, #32]
 8001dd4:	4a2d      	ldr	r2, [pc, #180]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dd6:	f023 0304 	bic.w	r3, r3, #4
 8001dda:	6213      	str	r3, [r2, #32]
    __HAL_RCC_LSI_ENABLE();                 // Turn on LSI
 8001ddc:	4b2d      	ldr	r3, [pc, #180]	@ (8001e94 <_Z11MX_RTC_Initv+0x110>)
 8001dde:	2201      	movs	r2, #1
 8001de0:	601a      	str	r2, [r3, #0]
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET); // Wait until LSI ready
 8001de2:	bf00      	nop
 8001de4:	4b29      	ldr	r3, [pc, #164]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001de6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001de8:	f003 0302 	and.w	r3, r3, #2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	bf0c      	ite	eq
 8001df0:	2301      	moveq	r3, #1
 8001df2:	2300      	movne	r3, #0
 8001df4:	b2db      	uxtb	r3, r3
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d1f4      	bne.n	8001de4 <_Z11MX_RTC_Initv+0x60>
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 8001dfa:	4b24      	ldr	r3, [pc, #144]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001dfc:	6a1b      	ldr	r3, [r3, #32]
 8001dfe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001e02:	4a22      	ldr	r2, [pc, #136]	@ (8001e8c <_Z11MX_RTC_Initv+0x108>)
 8001e04:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e08:	6213      	str	r3, [r2, #32]

    hrtc.Instance = RTC;
 8001e0a:	4b23      	ldr	r3, [pc, #140]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e0c:	4a23      	ldr	r2, [pc, #140]	@ (8001e9c <_Z11MX_RTC_Initv+0x118>)
 8001e0e:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001e10:	4b21      	ldr	r3, [pc, #132]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e12:	f04f 32ff 	mov.w	r2, #4294967295
 8001e16:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001e18:	4b1f      	ldr	r3, [pc, #124]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e1a:	2200      	movs	r2, #0
 8001e1c:	609a      	str	r2, [r3, #8]

    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001e1e:	481e      	ldr	r0, [pc, #120]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e20:	f001 ff54 	bl	8003ccc <HAL_RTC_Init>
 8001e24:	4603      	mov	r3, r0
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	bf14      	ite	ne
 8001e2a:	2301      	movne	r3, #1
 8001e2c:	2300      	moveq	r3, #0
 8001e2e:	b2db      	uxtb	r3, r3
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d001      	beq.n	8001e38 <_Z11MX_RTC_Initv+0xb4>
        Error_Handler();
 8001e34:	f000 f834 	bl	8001ea0 <Error_Handler>
    }

    // Set default time/date once
    RTC_TimeTypeDef sTime = {0};
 8001e38:	f107 030c 	add.w	r3, r7, #12
 8001e3c:	2100      	movs	r1, #0
 8001e3e:	460a      	mov	r2, r1
 8001e40:	801a      	strh	r2, [r3, #0]
 8001e42:	460a      	mov	r2, r1
 8001e44:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {0};
 8001e46:	2300      	movs	r3, #0
 8001e48:	60bb      	str	r3, [r7, #8]

    sTime.Hours = 12;
 8001e4a:	230c      	movs	r3, #12
 8001e4c:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0;
 8001e4e:	2300      	movs	r3, #0
 8001e50:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8001e52:	2300      	movs	r3, #0
 8001e54:	73bb      	strb	r3, [r7, #14]

    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001e56:	2301      	movs	r3, #1
 8001e58:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	727b      	strb	r3, [r7, #9]
    sDate.Date = 1;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 23;
 8001e62:	2317      	movs	r3, #23
 8001e64:	72fb      	strb	r3, [r7, #11]

    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8001e66:	f107 030c 	add.w	r3, r7, #12
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	4619      	mov	r1, r3
 8001e6e:	480a      	ldr	r0, [pc, #40]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e70:	f001 ffb8 	bl	8003de4 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001e74:	f107 0308 	add.w	r3, r7, #8
 8001e78:	2200      	movs	r2, #0
 8001e7a:	4619      	mov	r1, r3
 8001e7c:	4806      	ldr	r0, [pc, #24]	@ (8001e98 <_Z11MX_RTC_Initv+0x114>)
 8001e7e:	f002 f921 	bl	80040c4 <HAL_RTC_SetDate>
}
 8001e82:	bf00      	nop
 8001e84:	3710      	adds	r7, #16
 8001e86:	46bd      	mov	sp, r7
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	40021000 	.word	0x40021000
 8001e90:	4242043c 	.word	0x4242043c
 8001e94:	42420480 	.word	0x42420480
 8001e98:	20000248 	.word	0x20000248
 8001e9c:	40002800 	.word	0x40002800

08001ea0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ea0:	b480      	push	{r7}
 8001ea2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ea4:	b672      	cpsid	i
}
 8001ea6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ea8:	bf00      	nop
 8001eaa:	e7fd      	b.n	8001ea8 <Error_Handler+0x8>

08001eac <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001eac:	b580      	push	{r7, lr}
 8001eae:	b084      	sub	sp, #16
 8001eb0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001eb2:	4b18      	ldr	r3, [pc, #96]	@ (8001f14 <HAL_MspInit+0x68>)
 8001eb4:	699b      	ldr	r3, [r3, #24]
 8001eb6:	4a17      	ldr	r2, [pc, #92]	@ (8001f14 <HAL_MspInit+0x68>)
 8001eb8:	f043 0301 	orr.w	r3, r3, #1
 8001ebc:	6193      	str	r3, [r2, #24]
 8001ebe:	4b15      	ldr	r3, [pc, #84]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ec0:	699b      	ldr	r3, [r3, #24]
 8001ec2:	f003 0301 	and.w	r3, r3, #1
 8001ec6:	60bb      	str	r3, [r7, #8]
 8001ec8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001eca:	4b12      	ldr	r3, [pc, #72]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ecc:	69db      	ldr	r3, [r3, #28]
 8001ece:	4a11      	ldr	r2, [pc, #68]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	61d3      	str	r3, [r2, #28]
 8001ed6:	4b0f      	ldr	r3, [pc, #60]	@ (8001f14 <HAL_MspInit+0x68>)
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	607b      	str	r3, [r7, #4]
 8001ee0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	210f      	movs	r1, #15
 8001ee6:	f06f 0001 	mvn.w	r0, #1
 8001eea:	f000 ff80 	bl	8002dee <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001eee:	4b0a      	ldr	r3, [pc, #40]	@ (8001f18 <HAL_MspInit+0x6c>)
 8001ef0:	685b      	ldr	r3, [r3, #4]
 8001ef2:	60fb      	str	r3, [r7, #12]
 8001ef4:	68fb      	ldr	r3, [r7, #12]
 8001ef6:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001efa:	60fb      	str	r3, [r7, #12]
 8001efc:	68fb      	ldr	r3, [r7, #12]
 8001efe:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001f02:	60fb      	str	r3, [r7, #12]
 8001f04:	4a04      	ldr	r2, [pc, #16]	@ (8001f18 <HAL_MspInit+0x6c>)
 8001f06:	68fb      	ldr	r3, [r7, #12]
 8001f08:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f0a:	bf00      	nop
 8001f0c:	3710      	adds	r7, #16
 8001f0e:	46bd      	mov	sp, r7
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	40021000 	.word	0x40021000
 8001f18:	40010000 	.word	0x40010000

08001f1c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b088      	sub	sp, #32
 8001f20:	af00      	add	r7, sp, #0
 8001f22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f24:	f107 0310 	add.w	r3, r7, #16
 8001f28:	2200      	movs	r2, #0
 8001f2a:	601a      	str	r2, [r3, #0]
 8001f2c:	605a      	str	r2, [r3, #4]
 8001f2e:	609a      	str	r2, [r3, #8]
 8001f30:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	4a14      	ldr	r2, [pc, #80]	@ (8001f88 <HAL_ADC_MspInit+0x6c>)
 8001f38:	4293      	cmp	r3, r2
 8001f3a:	d121      	bne.n	8001f80 <HAL_ADC_MspInit+0x64>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001f3c:	4b13      	ldr	r3, [pc, #76]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f3e:	699b      	ldr	r3, [r3, #24]
 8001f40:	4a12      	ldr	r2, [pc, #72]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f42:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001f46:	6193      	str	r3, [r2, #24]
 8001f48:	4b10      	ldr	r3, [pc, #64]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f4a:	699b      	ldr	r3, [r3, #24]
 8001f4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001f50:	60fb      	str	r3, [r7, #12]
 8001f52:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f54:	4b0d      	ldr	r3, [pc, #52]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f56:	699b      	ldr	r3, [r3, #24]
 8001f58:	4a0c      	ldr	r2, [pc, #48]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f5a:	f043 0304 	orr.w	r3, r3, #4
 8001f5e:	6193      	str	r3, [r2, #24]
 8001f60:	4b0a      	ldr	r3, [pc, #40]	@ (8001f8c <HAL_ADC_MspInit+0x70>)
 8001f62:	699b      	ldr	r3, [r3, #24]
 8001f64:	f003 0304 	and.w	r3, r3, #4
 8001f68:	60bb      	str	r3, [r7, #8]
 8001f6a:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0-WKUP     ------> ADC1_IN0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f70:	2303      	movs	r3, #3
 8001f72:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f74:	f107 0310 	add.w	r3, r7, #16
 8001f78:	4619      	mov	r1, r3
 8001f7a:	4805      	ldr	r0, [pc, #20]	@ (8001f90 <HAL_ADC_MspInit+0x74>)
 8001f7c:	f001 f820 	bl	8002fc0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001f80:	bf00      	nop
 8001f82:	3720      	adds	r7, #32
 8001f84:	46bd      	mov	sp, r7
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40012400 	.word	0x40012400
 8001f8c:	40021000 	.word	0x40021000
 8001f90:	40010800 	.word	0x40010800

08001f94 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b084      	sub	sp, #16
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	4a0b      	ldr	r2, [pc, #44]	@ (8001fd0 <HAL_RTC_MspInit+0x3c>)
 8001fa2:	4293      	cmp	r3, r2
 8001fa4:	d110      	bne.n	8001fc8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001fa6:	f001 f9bf 	bl	8003328 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001faa:	4b0a      	ldr	r3, [pc, #40]	@ (8001fd4 <HAL_RTC_MspInit+0x40>)
 8001fac:	69db      	ldr	r3, [r3, #28]
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_RTC_MspInit+0x40>)
 8001fb0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001fb4:	61d3      	str	r3, [r2, #28]
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <HAL_RTC_MspInit+0x40>)
 8001fb8:	69db      	ldr	r3, [r3, #28]
 8001fba:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001fbe:	60fb      	str	r3, [r7, #12]
 8001fc0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001fc2:	4b05      	ldr	r3, [pc, #20]	@ (8001fd8 <HAL_RTC_MspInit+0x44>)
 8001fc4:	2201      	movs	r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001fc8:	bf00      	nop
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	40002800 	.word	0x40002800
 8001fd4:	40021000 	.word	0x40021000
 8001fd8:	4242043c 	.word	0x4242043c

08001fdc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001fdc:	b580      	push	{r7, lr}
 8001fde:	b088      	sub	sp, #32
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fe4:	f107 0310 	add.w	r3, r7, #16
 8001fe8:	2200      	movs	r2, #0
 8001fea:	601a      	str	r2, [r3, #0]
 8001fec:	605a      	str	r2, [r3, #4]
 8001fee:	609a      	str	r2, [r3, #8]
 8001ff0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	4a19      	ldr	r2, [pc, #100]	@ (800205c <HAL_UART_MspInit+0x80>)
 8001ff8:	4293      	cmp	r3, r2
 8001ffa:	d12b      	bne.n	8002054 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001ffc:	4b18      	ldr	r3, [pc, #96]	@ (8002060 <HAL_UART_MspInit+0x84>)
 8001ffe:	69db      	ldr	r3, [r3, #28]
 8002000:	4a17      	ldr	r2, [pc, #92]	@ (8002060 <HAL_UART_MspInit+0x84>)
 8002002:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002006:	61d3      	str	r3, [r2, #28]
 8002008:	4b15      	ldr	r3, [pc, #84]	@ (8002060 <HAL_UART_MspInit+0x84>)
 800200a:	69db      	ldr	r3, [r3, #28]
 800200c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002014:	4b12      	ldr	r3, [pc, #72]	@ (8002060 <HAL_UART_MspInit+0x84>)
 8002016:	699b      	ldr	r3, [r3, #24]
 8002018:	4a11      	ldr	r2, [pc, #68]	@ (8002060 <HAL_UART_MspInit+0x84>)
 800201a:	f043 0304 	orr.w	r3, r3, #4
 800201e:	6193      	str	r3, [r2, #24]
 8002020:	4b0f      	ldr	r3, [pc, #60]	@ (8002060 <HAL_UART_MspInit+0x84>)
 8002022:	699b      	ldr	r3, [r3, #24]
 8002024:	f003 0304 	and.w	r3, r3, #4
 8002028:	60bb      	str	r3, [r7, #8]
 800202a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800202c:	230c      	movs	r3, #12
 800202e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002030:	2302      	movs	r3, #2
 8002032:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002034:	2302      	movs	r3, #2
 8002036:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002038:	f107 0310 	add.w	r3, r7, #16
 800203c:	4619      	mov	r1, r3
 800203e:	4809      	ldr	r0, [pc, #36]	@ (8002064 <HAL_UART_MspInit+0x88>)
 8002040:	f000 ffbe 	bl	8002fc0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002044:	2200      	movs	r2, #0
 8002046:	2105      	movs	r1, #5
 8002048:	2026      	movs	r0, #38	@ 0x26
 800204a:	f000 fed0 	bl	8002dee <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800204e:	2026      	movs	r0, #38	@ 0x26
 8002050:	f000 fee9 	bl	8002e26 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8002054:	bf00      	nop
 8002056:	3720      	adds	r7, #32
 8002058:	46bd      	mov	sp, r7
 800205a:	bd80      	pop	{r7, pc}
 800205c:	40004400 	.word	0x40004400
 8002060:	40021000 	.word	0x40021000
 8002064:	40010800 	.word	0x40010800

08002068 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002068:	b480      	push	{r7}
 800206a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800206c:	bf00      	nop
 800206e:	e7fd      	b.n	800206c <NMI_Handler+0x4>

08002070 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002070:	b480      	push	{r7}
 8002072:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002074:	bf00      	nop
 8002076:	e7fd      	b.n	8002074 <HardFault_Handler+0x4>

08002078 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002078:	b480      	push	{r7}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800207c:	bf00      	nop
 800207e:	e7fd      	b.n	800207c <MemManage_Handler+0x4>

08002080 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002080:	b480      	push	{r7}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002084:	bf00      	nop
 8002086:	e7fd      	b.n	8002084 <BusFault_Handler+0x4>

08002088 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002088:	b480      	push	{r7}
 800208a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800208c:	bf00      	nop
 800208e:	e7fd      	b.n	800208c <UsageFault_Handler+0x4>

08002090 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002090:	b480      	push	{r7}
 8002092:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002094:	bf00      	nop
 8002096:	46bd      	mov	sp, r7
 8002098:	bc80      	pop	{r7}
 800209a:	4770      	bx	lr

0800209c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80020a0:	4802      	ldr	r0, [pc, #8]	@ (80020ac <USART2_IRQHandler+0x10>)
 80020a2:	f002 fcbb 	bl	8004a1c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80020a6:	bf00      	nop
 80020a8:	bd80      	pop	{r7, pc}
 80020aa:	bf00      	nop
 80020ac:	20000200 	.word	0x20000200

080020b0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */
extern StreamBufferHandle_t uartRxStreamBuffer;
extern UART_HandleTypeDef huart2;
extern uint8_t uartRxByte;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80020b0:	b580      	push	{r7, lr}
 80020b2:	b084      	sub	sp, #16
 80020b4:	af00      	add	r7, sp, #0
 80020b6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a10      	ldr	r2, [pc, #64]	@ (8002100 <HAL_UART_RxCpltCallback+0x50>)
 80020be:	4293      	cmp	r3, r2
 80020c0:	d119      	bne.n	80020f6 <HAL_UART_RxCpltCallback+0x46>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80020c2:	2300      	movs	r3, #0
 80020c4:	60fb      	str	r3, [r7, #12]

        // Push the received byte into the stream buffer (from ISR)
        xStreamBufferSendFromISR(uartRxStreamBuffer, &uartRxByte, 1, &xHigherPriorityTaskWoken);
 80020c6:	4b0f      	ldr	r3, [pc, #60]	@ (8002104 <HAL_UART_RxCpltCallback+0x54>)
 80020c8:	6818      	ldr	r0, [r3, #0]
 80020ca:	f107 030c 	add.w	r3, r7, #12
 80020ce:	2201      	movs	r2, #1
 80020d0:	490d      	ldr	r1, [pc, #52]	@ (8002108 <HAL_UART_RxCpltCallback+0x58>)
 80020d2:	f004 f996 	bl	8006402 <xStreamBufferSendFromISR>

        // Restart UART interrupt for next byte
        HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 80020d6:	2201      	movs	r2, #1
 80020d8:	490b      	ldr	r1, [pc, #44]	@ (8002108 <HAL_UART_RxCpltCallback+0x58>)
 80020da:	480c      	ldr	r0, [pc, #48]	@ (800210c <HAL_UART_RxCpltCallback+0x5c>)
 80020dc:	f002 fc79 	bl	80049d2 <HAL_UART_Receive_IT>

        // Yield if needed
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80020e0:	68fb      	ldr	r3, [r7, #12]
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d007      	beq.n	80020f6 <HAL_UART_RxCpltCallback+0x46>
 80020e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002110 <HAL_UART_RxCpltCallback+0x60>)
 80020e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80020ec:	601a      	str	r2, [r3, #0]
 80020ee:	f3bf 8f4f 	dsb	sy
 80020f2:	f3bf 8f6f 	isb	sy
    }
}
 80020f6:	bf00      	nop
 80020f8:	3710      	adds	r7, #16
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	40004400 	.word	0x40004400
 8002104:	200001f4 	.word	0x200001f4
 8002108:	2000028c 	.word	0x2000028c
 800210c:	20000200 	.word	0x20000200
 8002110:	e000ed04 	.word	0xe000ed04

08002114 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return 1;
 8002118:	2301      	movs	r3, #1
}
 800211a:	4618      	mov	r0, r3
 800211c:	46bd      	mov	sp, r7
 800211e:	bc80      	pop	{r7}
 8002120:	4770      	bx	lr

08002122 <_kill>:

int _kill(int pid, int sig)
{
 8002122:	b580      	push	{r7, lr}
 8002124:	b082      	sub	sp, #8
 8002126:	af00      	add	r7, sp, #0
 8002128:	6078      	str	r0, [r7, #4]
 800212a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800212c:	f008 fa6a 	bl	800a604 <__errno>
 8002130:	4603      	mov	r3, r0
 8002132:	2216      	movs	r2, #22
 8002134:	601a      	str	r2, [r3, #0]
  return -1;
 8002136:	f04f 33ff 	mov.w	r3, #4294967295
}
 800213a:	4618      	mov	r0, r3
 800213c:	3708      	adds	r7, #8
 800213e:	46bd      	mov	sp, r7
 8002140:	bd80      	pop	{r7, pc}

08002142 <_exit>:

void _exit (int status)
{
 8002142:	b580      	push	{r7, lr}
 8002144:	b082      	sub	sp, #8
 8002146:	af00      	add	r7, sp, #0
 8002148:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800214a:	f04f 31ff 	mov.w	r1, #4294967295
 800214e:	6878      	ldr	r0, [r7, #4]
 8002150:	f7ff ffe7 	bl	8002122 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002154:	bf00      	nop
 8002156:	e7fd      	b.n	8002154 <_exit+0x12>

08002158 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002158:	b580      	push	{r7, lr}
 800215a:	b086      	sub	sp, #24
 800215c:	af00      	add	r7, sp, #0
 800215e:	60f8      	str	r0, [r7, #12]
 8002160:	60b9      	str	r1, [r7, #8]
 8002162:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002164:	2300      	movs	r3, #0
 8002166:	617b      	str	r3, [r7, #20]
 8002168:	e00a      	b.n	8002180 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800216a:	f3af 8000 	nop.w
 800216e:	4601      	mov	r1, r0
 8002170:	68bb      	ldr	r3, [r7, #8]
 8002172:	1c5a      	adds	r2, r3, #1
 8002174:	60ba      	str	r2, [r7, #8]
 8002176:	b2ca      	uxtb	r2, r1
 8002178:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800217a:	697b      	ldr	r3, [r7, #20]
 800217c:	3301      	adds	r3, #1
 800217e:	617b      	str	r3, [r7, #20]
 8002180:	697a      	ldr	r2, [r7, #20]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	429a      	cmp	r2, r3
 8002186:	dbf0      	blt.n	800216a <_read+0x12>
  }

  return len;
 8002188:	687b      	ldr	r3, [r7, #4]
}
 800218a:	4618      	mov	r0, r3
 800218c:	3718      	adds	r7, #24
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}

08002192 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002192:	b580      	push	{r7, lr}
 8002194:	b086      	sub	sp, #24
 8002196:	af00      	add	r7, sp, #0
 8002198:	60f8      	str	r0, [r7, #12]
 800219a:	60b9      	str	r1, [r7, #8]
 800219c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800219e:	2300      	movs	r3, #0
 80021a0:	617b      	str	r3, [r7, #20]
 80021a2:	e009      	b.n	80021b8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	1c5a      	adds	r2, r3, #1
 80021a8:	60ba      	str	r2, [r7, #8]
 80021aa:	781b      	ldrb	r3, [r3, #0]
 80021ac:	4618      	mov	r0, r3
 80021ae:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80021b2:	697b      	ldr	r3, [r7, #20]
 80021b4:	3301      	adds	r3, #1
 80021b6:	617b      	str	r3, [r7, #20]
 80021b8:	697a      	ldr	r2, [r7, #20]
 80021ba:	687b      	ldr	r3, [r7, #4]
 80021bc:	429a      	cmp	r2, r3
 80021be:	dbf1      	blt.n	80021a4 <_write+0x12>
  }
  return len;
 80021c0:	687b      	ldr	r3, [r7, #4]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3718      	adds	r7, #24
 80021c6:	46bd      	mov	sp, r7
 80021c8:	bd80      	pop	{r7, pc}

080021ca <_close>:

int _close(int file)
{
 80021ca:	b480      	push	{r7}
 80021cc:	b083      	sub	sp, #12
 80021ce:	af00      	add	r7, sp, #0
 80021d0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80021d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	370c      	adds	r7, #12
 80021da:	46bd      	mov	sp, r7
 80021dc:	bc80      	pop	{r7}
 80021de:	4770      	bx	lr

080021e0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80021e0:	b480      	push	{r7}
 80021e2:	b083      	sub	sp, #12
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
 80021e8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80021ea:	683b      	ldr	r3, [r7, #0]
 80021ec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80021f0:	605a      	str	r2, [r3, #4]
  return 0;
 80021f2:	2300      	movs	r3, #0
}
 80021f4:	4618      	mov	r0, r3
 80021f6:	370c      	adds	r7, #12
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bc80      	pop	{r7}
 80021fc:	4770      	bx	lr

080021fe <_isatty>:

int _isatty(int file)
{
 80021fe:	b480      	push	{r7}
 8002200:	b083      	sub	sp, #12
 8002202:	af00      	add	r7, sp, #0
 8002204:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002206:	2301      	movs	r3, #1
}
 8002208:	4618      	mov	r0, r3
 800220a:	370c      	adds	r7, #12
 800220c:	46bd      	mov	sp, r7
 800220e:	bc80      	pop	{r7}
 8002210:	4770      	bx	lr

08002212 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002212:	b480      	push	{r7}
 8002214:	b085      	sub	sp, #20
 8002216:	af00      	add	r7, sp, #0
 8002218:	60f8      	str	r0, [r7, #12]
 800221a:	60b9      	str	r1, [r7, #8]
 800221c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800221e:	2300      	movs	r3, #0
}
 8002220:	4618      	mov	r0, r3
 8002222:	3714      	adds	r7, #20
 8002224:	46bd      	mov	sp, r7
 8002226:	bc80      	pop	{r7}
 8002228:	4770      	bx	lr
	...

0800222c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800222c:	b580      	push	{r7, lr}
 800222e:	b086      	sub	sp, #24
 8002230:	af00      	add	r7, sp, #0
 8002232:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002234:	4a14      	ldr	r2, [pc, #80]	@ (8002288 <_sbrk+0x5c>)
 8002236:	4b15      	ldr	r3, [pc, #84]	@ (800228c <_sbrk+0x60>)
 8002238:	1ad3      	subs	r3, r2, r3
 800223a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800223c:	697b      	ldr	r3, [r7, #20]
 800223e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002240:	4b13      	ldr	r3, [pc, #76]	@ (8002290 <_sbrk+0x64>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d102      	bne.n	800224e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002248:	4b11      	ldr	r3, [pc, #68]	@ (8002290 <_sbrk+0x64>)
 800224a:	4a12      	ldr	r2, [pc, #72]	@ (8002294 <_sbrk+0x68>)
 800224c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800224e:	4b10      	ldr	r3, [pc, #64]	@ (8002290 <_sbrk+0x64>)
 8002250:	681a      	ldr	r2, [r3, #0]
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	4413      	add	r3, r2
 8002256:	693a      	ldr	r2, [r7, #16]
 8002258:	429a      	cmp	r2, r3
 800225a:	d207      	bcs.n	800226c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800225c:	f008 f9d2 	bl	800a604 <__errno>
 8002260:	4603      	mov	r3, r0
 8002262:	220c      	movs	r2, #12
 8002264:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002266:	f04f 33ff 	mov.w	r3, #4294967295
 800226a:	e009      	b.n	8002280 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800226c:	4b08      	ldr	r3, [pc, #32]	@ (8002290 <_sbrk+0x64>)
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002272:	4b07      	ldr	r3, [pc, #28]	@ (8002290 <_sbrk+0x64>)
 8002274:	681a      	ldr	r2, [r3, #0]
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	4413      	add	r3, r2
 800227a:	4a05      	ldr	r2, [pc, #20]	@ (8002290 <_sbrk+0x64>)
 800227c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800227e:	68fb      	ldr	r3, [r7, #12]
}
 8002280:	4618      	mov	r0, r3
 8002282:	3718      	adds	r7, #24
 8002284:	46bd      	mov	sp, r7
 8002286:	bd80      	pop	{r7, pc}
 8002288:	20005000 	.word	0x20005000
 800228c:	00000400 	.word	0x00000400
 8002290:	20000290 	.word	0x20000290
 8002294:	20001d38 	.word	0x20001d38

08002298 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002298:	b480      	push	{r7}
 800229a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800229c:	bf00      	nop
 800229e:	46bd      	mov	sp, r7
 80022a0:	bc80      	pop	{r7}
 80022a2:	4770      	bx	lr

080022a4 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80022a4:	f7ff fff8 	bl	8002298 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80022a8:	480b      	ldr	r0, [pc, #44]	@ (80022d8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80022aa:	490c      	ldr	r1, [pc, #48]	@ (80022dc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80022ac:	4a0c      	ldr	r2, [pc, #48]	@ (80022e0 <LoopFillZerobss+0x16>)
  movs r3, #0
 80022ae:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022b0:	e002      	b.n	80022b8 <LoopCopyDataInit>

080022b2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022b2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022b4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022b6:	3304      	adds	r3, #4

080022b8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022b8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022ba:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022bc:	d3f9      	bcc.n	80022b2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022be:	4a09      	ldr	r2, [pc, #36]	@ (80022e4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80022c0:	4c09      	ldr	r4, [pc, #36]	@ (80022e8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022c2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022c4:	e001      	b.n	80022ca <LoopFillZerobss>

080022c6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022c6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022c8:	3204      	adds	r2, #4

080022ca <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022ca:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022cc:	d3fb      	bcc.n	80022c6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022ce:	f008 f99f 	bl	800a610 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022d2:	f7ff fbc3 	bl	8001a5c <main>
  bx lr
 80022d6:	4770      	bx	lr
  ldr r0, =_sdata
 80022d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022dc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 80022e0:	0800d818 	.word	0x0800d818
  ldr r2, =_sbss
 80022e4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 80022e8:	20001d34 	.word	0x20001d34

080022ec <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022ec:	e7fe      	b.n	80022ec <ADC1_2_IRQHandler>
	...

080022f0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022f4:	4b08      	ldr	r3, [pc, #32]	@ (8002318 <HAL_Init+0x28>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a07      	ldr	r2, [pc, #28]	@ (8002318 <HAL_Init+0x28>)
 80022fa:	f043 0310 	orr.w	r3, r3, #16
 80022fe:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002300:	2003      	movs	r0, #3
 8002302:	f000 fd69 	bl	8002dd8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002306:	200f      	movs	r0, #15
 8002308:	f000 f808 	bl	800231c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800230c:	f7ff fdce 	bl	8001eac <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002310:	2300      	movs	r3, #0
}
 8002312:	4618      	mov	r0, r3
 8002314:	bd80      	pop	{r7, pc}
 8002316:	bf00      	nop
 8002318:	40022000 	.word	0x40022000

0800231c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b082      	sub	sp, #8
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002324:	4b12      	ldr	r3, [pc, #72]	@ (8002370 <HAL_InitTick+0x54>)
 8002326:	681a      	ldr	r2, [r3, #0]
 8002328:	4b12      	ldr	r3, [pc, #72]	@ (8002374 <HAL_InitTick+0x58>)
 800232a:	781b      	ldrb	r3, [r3, #0]
 800232c:	4619      	mov	r1, r3
 800232e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002332:	fbb3 f3f1 	udiv	r3, r3, r1
 8002336:	fbb2 f3f3 	udiv	r3, r2, r3
 800233a:	4618      	mov	r0, r3
 800233c:	f000 fd81 	bl	8002e42 <HAL_SYSTICK_Config>
 8002340:	4603      	mov	r3, r0
 8002342:	2b00      	cmp	r3, #0
 8002344:	d001      	beq.n	800234a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002346:	2301      	movs	r3, #1
 8002348:	e00e      	b.n	8002368 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	2b0f      	cmp	r3, #15
 800234e:	d80a      	bhi.n	8002366 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002350:	2200      	movs	r2, #0
 8002352:	6879      	ldr	r1, [r7, #4]
 8002354:	f04f 30ff 	mov.w	r0, #4294967295
 8002358:	f000 fd49 	bl	8002dee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800235c:	4a06      	ldr	r2, [pc, #24]	@ (8002378 <HAL_InitTick+0x5c>)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002362:	2300      	movs	r3, #0
 8002364:	e000      	b.n	8002368 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002366:	2301      	movs	r3, #1
}
 8002368:	4618      	mov	r0, r3
 800236a:	3708      	adds	r7, #8
 800236c:	46bd      	mov	sp, r7
 800236e:	bd80      	pop	{r7, pc}
 8002370:	20000000 	.word	0x20000000
 8002374:	20000008 	.word	0x20000008
 8002378:	20000004 	.word	0x20000004

0800237c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b02      	ldr	r3, [pc, #8]	@ (800238c <HAL_GetTick+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	20000294 	.word	0x20000294

08002390 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b086      	sub	sp, #24
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002398:	2300      	movs	r3, #0
 800239a:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 800239c:	2300      	movs	r3, #0
 800239e:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 80023a0:	2300      	movs	r3, #0
 80023a2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 80023a4:	2300      	movs	r3, #0
 80023a6:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	d101      	bne.n	80023b2 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 80023ae:	2301      	movs	r3, #1
 80023b0:	e0be      	b.n	8002530 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	689b      	ldr	r3, [r3, #8]
 80023b6:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d109      	bne.n	80023d4 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	2200      	movs	r2, #0
 80023c4:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	2200      	movs	r2, #0
 80023ca:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80023ce:	6878      	ldr	r0, [r7, #4]
 80023d0:	f7ff fda4 	bl	8001f1c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80023d4:	6878      	ldr	r0, [r7, #4]
 80023d6:	f000 fbf1 	bl	8002bbc <ADC_ConversionStop_Disable>
 80023da:	4603      	mov	r3, r0
 80023dc:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023e2:	f003 0310 	and.w	r3, r3, #16
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	f040 8099 	bne.w	800251e <HAL_ADC_Init+0x18e>
 80023ec:	7dfb      	ldrb	r3, [r7, #23]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	f040 8095 	bne.w	800251e <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80023f8:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80023fc:	f023 0302 	bic.w	r3, r3, #2
 8002400:	f043 0202 	orr.w	r2, r3, #2
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002410:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	7b1b      	ldrb	r3, [r3, #12]
 8002416:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002418:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800241a:	68ba      	ldr	r2, [r7, #8]
 800241c:	4313      	orrs	r3, r2
 800241e:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002428:	d003      	beq.n	8002432 <HAL_ADC_Init+0xa2>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	689b      	ldr	r3, [r3, #8]
 800242e:	2b01      	cmp	r3, #1
 8002430:	d102      	bne.n	8002438 <HAL_ADC_Init+0xa8>
 8002432:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002436:	e000      	b.n	800243a <HAL_ADC_Init+0xaa>
 8002438:	2300      	movs	r3, #0
 800243a:	693a      	ldr	r2, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	7d1b      	ldrb	r3, [r3, #20]
 8002444:	2b01      	cmp	r3, #1
 8002446:	d119      	bne.n	800247c <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	7b1b      	ldrb	r3, [r3, #12]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d109      	bne.n	8002464 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	699b      	ldr	r3, [r3, #24]
 8002454:	3b01      	subs	r3, #1
 8002456:	035a      	lsls	r2, r3, #13
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	4313      	orrs	r3, r2
 800245c:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002460:	613b      	str	r3, [r7, #16]
 8002462:	e00b      	b.n	800247c <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002468:	f043 0220 	orr.w	r2, r3, #32
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002474:	f043 0201 	orr.w	r2, r3, #1
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	685b      	ldr	r3, [r3, #4]
 8002482:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	693a      	ldr	r2, [r7, #16]
 800248c:	430a      	orrs	r2, r1
 800248e:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	689a      	ldr	r2, [r3, #8]
 8002496:	4b28      	ldr	r3, [pc, #160]	@ (8002538 <HAL_ADC_Init+0x1a8>)
 8002498:	4013      	ands	r3, r2
 800249a:	687a      	ldr	r2, [r7, #4]
 800249c:	6812      	ldr	r2, [r2, #0]
 800249e:	68b9      	ldr	r1, [r7, #8]
 80024a0:	430b      	orrs	r3, r1
 80024a2:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	689b      	ldr	r3, [r3, #8]
 80024a8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80024ac:	d003      	beq.n	80024b6 <HAL_ADC_Init+0x126>
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	2b01      	cmp	r3, #1
 80024b4:	d104      	bne.n	80024c0 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	691b      	ldr	r3, [r3, #16]
 80024ba:	3b01      	subs	r3, #1
 80024bc:	051b      	lsls	r3, r3, #20
 80024be:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80024c6:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	68fa      	ldr	r2, [r7, #12]
 80024d0:	430a      	orrs	r2, r1
 80024d2:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	689a      	ldr	r2, [r3, #8]
 80024da:	4b18      	ldr	r3, [pc, #96]	@ (800253c <HAL_ADC_Init+0x1ac>)
 80024dc:	4013      	ands	r3, r2
 80024de:	68ba      	ldr	r2, [r7, #8]
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d10b      	bne.n	80024fc <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	2200      	movs	r2, #0
 80024e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	f043 0201 	orr.w	r2, r3, #1
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80024fa:	e018      	b.n	800252e <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002500:	f023 0312 	bic.w	r3, r3, #18
 8002504:	f043 0210 	orr.w	r2, r3, #16
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002510:	f043 0201 	orr.w	r2, r3, #1
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8002518:	2301      	movs	r3, #1
 800251a:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 800251c:	e007      	b.n	800252e <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002522:	f043 0210 	orr.w	r2, r3, #16
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 800252a:	2301      	movs	r3, #1
 800252c:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 800252e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002530:	4618      	mov	r0, r3
 8002532:	3718      	adds	r7, #24
 8002534:	46bd      	mov	sp, r7
 8002536:	bd80      	pop	{r7, pc}
 8002538:	ffe1f7fd 	.word	0xffe1f7fd
 800253c:	ff1f0efe 	.word	0xff1f0efe

08002540 <HAL_ADC_Start>:
  *         Interruptions enabled in this function: None.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b084      	sub	sp, #16
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002548:	2300      	movs	r3, #0
 800254a:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002552:	2b01      	cmp	r3, #1
 8002554:	d101      	bne.n	800255a <HAL_ADC_Start+0x1a>
 8002556:	2302      	movs	r3, #2
 8002558:	e098      	b.n	800268c <HAL_ADC_Start+0x14c>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2201      	movs	r2, #1
 800255e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
   
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 fad0 	bl	8002b08 <ADC_Enable>
 8002568:	4603      	mov	r3, r0
 800256a:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 800256c:	7bfb      	ldrb	r3, [r7, #15]
 800256e:	2b00      	cmp	r3, #0
 8002570:	f040 8087 	bne.w	8002682 <HAL_ADC_Start+0x142>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002578:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800257c:	f023 0301 	bic.w	r3, r3, #1
 8002580:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4a41      	ldr	r2, [pc, #260]	@ (8002694 <HAL_ADC_Start+0x154>)
 800258e:	4293      	cmp	r3, r2
 8002590:	d105      	bne.n	800259e <HAL_ADC_Start+0x5e>
 8002592:	4b41      	ldr	r3, [pc, #260]	@ (8002698 <HAL_ADC_Start+0x158>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d115      	bne.n	80025ca <HAL_ADC_Start+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025a2:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	685b      	ldr	r3, [r3, #4]
 80025b0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d026      	beq.n	8002606 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025bc:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025c0:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80025c8:	e01d      	b.n	8002606 <HAL_ADC_Start+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025ce:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4a2f      	ldr	r2, [pc, #188]	@ (8002698 <HAL_ADC_Start+0x158>)
 80025dc:	4293      	cmp	r3, r2
 80025de:	d004      	beq.n	80025ea <HAL_ADC_Start+0xaa>
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a2b      	ldr	r2, [pc, #172]	@ (8002694 <HAL_ADC_Start+0x154>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d10d      	bne.n	8002606 <HAL_ADC_Start+0xc6>
 80025ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002698 <HAL_ADC_Start+0x158>)
 80025ec:	685b      	ldr	r3, [r3, #4]
 80025ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d007      	beq.n	8002606 <HAL_ADC_Start+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80025fa:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80025fe:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800260a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800260e:	2b00      	cmp	r3, #0
 8002610:	d006      	beq.n	8002620 <HAL_ADC_Start+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002616:	f023 0206 	bic.w	r2, r3, #6
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800261e:	e002      	b.n	8002626 <HAL_ADC_Start+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2200      	movs	r2, #0
 8002624:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
    /* Clear regular group conversion flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f06f 0202 	mvn.w	r2, #2
 8002636:	601a      	str	r2, [r3, #0]
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    /* If ADC is master, ADC is enabled and conversion is started.            */
    /* Note: Alternate trigger for single conversion could be to force an     */
    /*       additional set of bit ADON "hadc->Instance->CR2 |= ADC_CR2_ADON;"*/
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8002642:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8002646:	d113      	bne.n	8002670 <HAL_ADC_Start+0x130>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800264c:	4a11      	ldr	r2, [pc, #68]	@ (8002694 <HAL_ADC_Start+0x154>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d105      	bne.n	800265e <HAL_ADC_Start+0x11e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8002652:	4b11      	ldr	r3, [pc, #68]	@ (8002698 <HAL_ADC_Start+0x158>)
 8002654:	685b      	ldr	r3, [r3, #4]
 8002656:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800265a:	2b00      	cmp	r3, #0
 800265c:	d108      	bne.n	8002670 <HAL_ADC_Start+0x130>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	689a      	ldr	r2, [r3, #8]
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 800266c:	609a      	str	r2, [r3, #8]
 800266e:	e00c      	b.n	800268a <HAL_ADC_Start+0x14a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	689a      	ldr	r2, [r3, #8]
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800267e:	609a      	str	r2, [r3, #8]
 8002680:	e003      	b.n	800268a <HAL_ADC_Start+0x14a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	2200      	movs	r2, #0
 8002686:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
    
  /* Return function status */
  return tmp_hal_status;
 800268a:	7bfb      	ldrb	r3, [r7, #15]
}
 800268c:	4618      	mov	r0, r3
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	40012800 	.word	0x40012800
 8002698:	40012400 	.word	0x40012400

0800269c <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b084      	sub	sp, #16
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80026a4:	2300      	movs	r3, #0
 80026a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d101      	bne.n	80026b6 <HAL_ADC_Stop+0x1a>
 80026b2:	2302      	movs	r3, #2
 80026b4:	e01a      	b.n	80026ec <HAL_ADC_Stop+0x50>
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2201      	movs	r2, #1
 80026ba:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f000 fa7c 	bl	8002bbc <ADC_ConversionStop_Disable>
 80026c4:	4603      	mov	r3, r0
 80026c6:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80026c8:	7bfb      	ldrb	r3, [r7, #15]
 80026ca:	2b00      	cmp	r3, #0
 80026cc:	d109      	bne.n	80026e2 <HAL_ADC_Stop+0x46>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026d2:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 80026d6:	f023 0301 	bic.w	r3, r3, #1
 80026da:	f043 0201 	orr.w	r2, r3, #1
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80026ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80026ec:	4618      	mov	r0, r3
 80026ee:	3710      	adds	r7, #16
 80026f0:	46bd      	mov	sp, r7
 80026f2:	bd80      	pop	{r7, pc}

080026f4 <HAL_ADC_PollForConversion>:
  * @param  hadc: ADC handle
  * @param  Timeout: Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 80026f4:	b590      	push	{r4, r7, lr}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
 80026fc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80026fe:	2300      	movs	r3, #0
 8002700:	617b      	str	r3, [r7, #20]
  
  /* Variables for polling in case of scan mode enabled and polling for each  */
  /* conversion.                                                              */
  __IO uint32_t Conversion_Timeout_CPU_cycles = 0U;
 8002702:	2300      	movs	r3, #0
 8002704:	60fb      	str	r3, [r7, #12]
  uint32_t Conversion_Timeout_CPU_cycles_max = 0U;
 8002706:	2300      	movs	r3, #0
 8002708:	613b      	str	r3, [r7, #16]
 
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Get tick count */
  tickstart = HAL_GetTick();
 800270a:	f7ff fe37 	bl	800237c <HAL_GetTick>
 800270e:	6178      	str	r0, [r7, #20]
  
  /* Verification that ADC configuration is compliant with polling for        */
  /* each conversion:                                                         */
  /* Particular case is ADC configured in DMA mode                            */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800271a:	2b00      	cmp	r3, #0
 800271c:	d00b      	beq.n	8002736 <HAL_ADC_PollForConversion+0x42>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002722:	f043 0220 	orr.w	r2, r3, #32
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    return HAL_ERROR;
 8002732:	2301      	movs	r3, #1
 8002734:	e0d3      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
  /*    from ADC conversion time (selected sampling time + conversion time of */
  /*    12.5 ADC clock cycles) and APB2/ADC clock prescalers (depending on    */
  /*    settings, conversion time range can be from 28 to 32256 CPU cycles).  */
  /*    As flag EOC is not set after each conversion, no timeout status can   */
  /*    be set.                                                               */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002740:	2b00      	cmp	r3, #0
 8002742:	d131      	bne.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
      HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L)    )
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800274a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 800274e:	2b00      	cmp	r3, #0
 8002750:	d12a      	bne.n	80027a8 <HAL_ADC_PollForConversion+0xb4>
  {
    /* Wait until End of Conversion flag is raised */
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002752:	e021      	b.n	8002798 <HAL_ADC_PollForConversion+0xa4>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800275a:	d01d      	beq.n	8002798 <HAL_ADC_PollForConversion+0xa4>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d007      	beq.n	8002772 <HAL_ADC_PollForConversion+0x7e>
 8002762:	f7ff fe0b 	bl	800237c <HAL_GetTick>
 8002766:	4602      	mov	r2, r0
 8002768:	697b      	ldr	r3, [r7, #20]
 800276a:	1ad3      	subs	r3, r2, r3
 800276c:	683a      	ldr	r2, [r7, #0]
 800276e:	429a      	cmp	r2, r3
 8002770:	d212      	bcs.n	8002798 <HAL_ADC_PollForConversion+0xa4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	681b      	ldr	r3, [r3, #0]
 8002778:	f003 0302 	and.w	r3, r3, #2
 800277c:	2b00      	cmp	r3, #0
 800277e:	d10b      	bne.n	8002798 <HAL_ADC_PollForConversion+0xa4>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002784:	f043 0204 	orr.w	r2, r3, #4
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	629a      	str	r2, [r3, #40]	@ 0x28
            
            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2200      	movs	r2, #0
 8002790:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
            
            return HAL_TIMEOUT;
 8002794:	2303      	movs	r3, #3
 8002796:	e0a2      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
    while(HAL_IS_BIT_CLR(hadc->Instance->SR, ADC_FLAG_EOC))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0302 	and.w	r3, r3, #2
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d0d6      	beq.n	8002754 <HAL_ADC_PollForConversion+0x60>
  if (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_SCAN) &&
 80027a6:	e070      	b.n	800288a <HAL_ADC_PollForConversion+0x196>
    /* Replace polling by wait for maximum conversion time */
    /*  - Computation of CPU clock cycles corresponding to ADC clock cycles   */
    /*    and ADC maximum conversion cycles on all channels.                  */
    /*  - Wait for the expected ADC clock cycles delay                        */
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
                                          / HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC))
 80027a8:	4b4f      	ldr	r3, [pc, #316]	@ (80028e8 <HAL_ADC_PollForConversion+0x1f4>)
 80027aa:	681c      	ldr	r4, [r3, #0]
 80027ac:	2002      	movs	r0, #2
 80027ae:	f001 f9d7 	bl	8003b60 <HAL_RCCEx_GetPeriphCLKFreq>
 80027b2:	4603      	mov	r3, r0
 80027b4:	fbb4 f2f3 	udiv	r2, r4, r3
                                         * ADC_CONVCYCLES_MAX_RANGE(hadc)                 );
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	6919      	ldr	r1, [r3, #16]
 80027be:	4b4b      	ldr	r3, [pc, #300]	@ (80028ec <HAL_ADC_PollForConversion+0x1f8>)
 80027c0:	400b      	ands	r3, r1
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d118      	bne.n	80027f8 <HAL_ADC_PollForConversion+0x104>
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	68d9      	ldr	r1, [r3, #12]
 80027cc:	4b48      	ldr	r3, [pc, #288]	@ (80028f0 <HAL_ADC_PollForConversion+0x1fc>)
 80027ce:	400b      	ands	r3, r1
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d111      	bne.n	80027f8 <HAL_ADC_PollForConversion+0x104>
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	6919      	ldr	r1, [r3, #16]
 80027da:	4b46      	ldr	r3, [pc, #280]	@ (80028f4 <HAL_ADC_PollForConversion+0x200>)
 80027dc:	400b      	ands	r3, r1
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d108      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x100>
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	68d9      	ldr	r1, [r3, #12]
 80027e8:	4b43      	ldr	r3, [pc, #268]	@ (80028f8 <HAL_ADC_PollForConversion+0x204>)
 80027ea:	400b      	ands	r3, r1
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d101      	bne.n	80027f4 <HAL_ADC_PollForConversion+0x100>
 80027f0:	2314      	movs	r3, #20
 80027f2:	e020      	b.n	8002836 <HAL_ADC_PollForConversion+0x142>
 80027f4:	2329      	movs	r3, #41	@ 0x29
 80027f6:	e01e      	b.n	8002836 <HAL_ADC_PollForConversion+0x142>
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6919      	ldr	r1, [r3, #16]
 80027fe:	4b3d      	ldr	r3, [pc, #244]	@ (80028f4 <HAL_ADC_PollForConversion+0x200>)
 8002800:	400b      	ands	r3, r1
 8002802:	2b00      	cmp	r3, #0
 8002804:	d106      	bne.n	8002814 <HAL_ADC_PollForConversion+0x120>
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	68d9      	ldr	r1, [r3, #12]
 800280c:	4b3a      	ldr	r3, [pc, #232]	@ (80028f8 <HAL_ADC_PollForConversion+0x204>)
 800280e:	400b      	ands	r3, r1
 8002810:	2b00      	cmp	r3, #0
 8002812:	d00d      	beq.n	8002830 <HAL_ADC_PollForConversion+0x13c>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	6919      	ldr	r1, [r3, #16]
 800281a:	4b38      	ldr	r3, [pc, #224]	@ (80028fc <HAL_ADC_PollForConversion+0x208>)
 800281c:	400b      	ands	r3, r1
 800281e:	2b00      	cmp	r3, #0
 8002820:	d108      	bne.n	8002834 <HAL_ADC_PollForConversion+0x140>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	68d9      	ldr	r1, [r3, #12]
 8002828:	4b34      	ldr	r3, [pc, #208]	@ (80028fc <HAL_ADC_PollForConversion+0x208>)
 800282a:	400b      	ands	r3, r1
 800282c:	2b00      	cmp	r3, #0
 800282e:	d101      	bne.n	8002834 <HAL_ADC_PollForConversion+0x140>
 8002830:	2354      	movs	r3, #84	@ 0x54
 8002832:	e000      	b.n	8002836 <HAL_ADC_PollForConversion+0x142>
 8002834:	23fc      	movs	r3, #252	@ 0xfc
    Conversion_Timeout_CPU_cycles_max = ((SystemCoreClock
 8002836:	fb02 f303 	mul.w	r3, r2, r3
 800283a:	613b      	str	r3, [r7, #16]
    
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800283c:	e021      	b.n	8002882 <HAL_ADC_PollForConversion+0x18e>
    {
      /* Check if timeout is disabled (set to infinite wait) */
      if(Timeout != HAL_MAX_DELAY)
 800283e:	683b      	ldr	r3, [r7, #0]
 8002840:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002844:	d01a      	beq.n	800287c <HAL_ADC_PollForConversion+0x188>
      {
        if((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002846:	683b      	ldr	r3, [r7, #0]
 8002848:	2b00      	cmp	r3, #0
 800284a:	d007      	beq.n	800285c <HAL_ADC_PollForConversion+0x168>
 800284c:	f7ff fd96 	bl	800237c <HAL_GetTick>
 8002850:	4602      	mov	r2, r0
 8002852:	697b      	ldr	r3, [r7, #20]
 8002854:	1ad3      	subs	r3, r2, r3
 8002856:	683a      	ldr	r2, [r7, #0]
 8002858:	429a      	cmp	r2, r3
 800285a:	d20f      	bcs.n	800287c <HAL_ADC_PollForConversion+0x188>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	693a      	ldr	r2, [r7, #16]
 8002860:	429a      	cmp	r2, r3
 8002862:	d90b      	bls.n	800287c <HAL_ADC_PollForConversion+0x188>
          {
            /* Update ADC state machine to timeout */
            SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002868:	f043 0204 	orr.w	r2, r3, #4
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	629a      	str	r2, [r3, #40]	@ 0x28

            /* Process unlocked */
            __HAL_UNLOCK(hadc);
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	2200      	movs	r2, #0
 8002874:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

            return HAL_TIMEOUT;
 8002878:	2303      	movs	r3, #3
 800287a:	e030      	b.n	80028de <HAL_ADC_PollForConversion+0x1ea>
          }
        }
      }
      Conversion_Timeout_CPU_cycles ++;
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	3301      	adds	r3, #1
 8002880:	60fb      	str	r3, [r7, #12]
    while(Conversion_Timeout_CPU_cycles < Conversion_Timeout_CPU_cycles_max)
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	429a      	cmp	r2, r3
 8002888:	d8d9      	bhi.n	800283e <HAL_ADC_PollForConversion+0x14a>
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f06f 0212 	mvn.w	r2, #18
 8002892:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002898:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	629a      	str	r2, [r3, #40]	@ 0x28
  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F1 devices, in case of sequencer enabled                   */
  /*       (several ranks selected), end of conversion flag is raised         */
  /*       at the end of the sequence.                                        */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	689b      	ldr	r3, [r3, #8]
 80028a6:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80028aa:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80028ae:	d115      	bne.n	80028dc <HAL_ADC_PollForConversion+0x1e8>
     (hadc->Init.ContinuousConvMode == DISABLE)   )
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	7b1b      	ldrb	r3, [r3, #12]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	d111      	bne.n	80028dc <HAL_ADC_PollForConversion+0x1e8>
  {   
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028bc:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	629a      	str	r2, [r3, #40]	@ 0x28

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028c8:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028cc:	2b00      	cmp	r3, #0
 80028ce:	d105      	bne.n	80028dc <HAL_ADC_PollForConversion+0x1e8>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028d4:	f043 0201 	orr.w	r2, r3, #1
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	629a      	str	r2, [r3, #40]	@ 0x28
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 80028dc:	2300      	movs	r3, #0
}
 80028de:	4618      	mov	r0, r3
 80028e0:	371c      	adds	r7, #28
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd90      	pop	{r4, r7, pc}
 80028e6:	bf00      	nop
 80028e8:	20000000 	.word	0x20000000
 80028ec:	24924924 	.word	0x24924924
 80028f0:	00924924 	.word	0x00924924
 80028f4:	12492492 	.word	0x12492492
 80028f8:	00492492 	.word	0x00492492
 80028fc:	00249249 	.word	0x00249249

08002900 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 800290e:	4618      	mov	r0, r3
 8002910:	370c      	adds	r7, #12
 8002912:	46bd      	mov	sp, r7
 8002914:	bc80      	pop	{r7}
 8002916:	4770      	bx	lr

08002918 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8002918:	b480      	push	{r7}
 800291a:	b085      	sub	sp, #20
 800291c:	af00      	add	r7, sp, #0
 800291e:	6078      	str	r0, [r7, #4]
 8002920:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002922:	2300      	movs	r3, #0
 8002924:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8002926:	2300      	movs	r3, #0
 8002928:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002930:	2b01      	cmp	r3, #1
 8002932:	d101      	bne.n	8002938 <HAL_ADC_ConfigChannel+0x20>
 8002934:	2302      	movs	r3, #2
 8002936:	e0dc      	b.n	8002af2 <HAL_ADC_ConfigChannel+0x1da>
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	2b06      	cmp	r3, #6
 8002946:	d81c      	bhi.n	8002982 <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800294e:	683b      	ldr	r3, [r7, #0]
 8002950:	685a      	ldr	r2, [r3, #4]
 8002952:	4613      	mov	r3, r2
 8002954:	009b      	lsls	r3, r3, #2
 8002956:	4413      	add	r3, r2
 8002958:	3b05      	subs	r3, #5
 800295a:	221f      	movs	r2, #31
 800295c:	fa02 f303 	lsl.w	r3, r2, r3
 8002960:	43db      	mvns	r3, r3
 8002962:	4019      	ands	r1, r3
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	6818      	ldr	r0, [r3, #0]
 8002968:	683b      	ldr	r3, [r7, #0]
 800296a:	685a      	ldr	r2, [r3, #4]
 800296c:	4613      	mov	r3, r2
 800296e:	009b      	lsls	r3, r3, #2
 8002970:	4413      	add	r3, r2
 8002972:	3b05      	subs	r3, #5
 8002974:	fa00 f203 	lsl.w	r2, r0, r3
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	430a      	orrs	r2, r1
 800297e:	635a      	str	r2, [r3, #52]	@ 0x34
 8002980:	e03c      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	685b      	ldr	r3, [r3, #4]
 8002986:	2b0c      	cmp	r3, #12
 8002988:	d81c      	bhi.n	80029c4 <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002990:	683b      	ldr	r3, [r7, #0]
 8002992:	685a      	ldr	r2, [r3, #4]
 8002994:	4613      	mov	r3, r2
 8002996:	009b      	lsls	r3, r3, #2
 8002998:	4413      	add	r3, r2
 800299a:	3b23      	subs	r3, #35	@ 0x23
 800299c:	221f      	movs	r2, #31
 800299e:	fa02 f303 	lsl.w	r3, r2, r3
 80029a2:	43db      	mvns	r3, r3
 80029a4:	4019      	ands	r1, r3
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	6818      	ldr	r0, [r3, #0]
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685a      	ldr	r2, [r3, #4]
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	3b23      	subs	r3, #35	@ 0x23
 80029b6:	fa00 f203 	lsl.w	r2, r0, r3
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	430a      	orrs	r2, r1
 80029c0:	631a      	str	r2, [r3, #48]	@ 0x30
 80029c2:	e01b      	b.n	80029fc <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 80029ca:	683b      	ldr	r3, [r7, #0]
 80029cc:	685a      	ldr	r2, [r3, #4]
 80029ce:	4613      	mov	r3, r2
 80029d0:	009b      	lsls	r3, r3, #2
 80029d2:	4413      	add	r3, r2
 80029d4:	3b41      	subs	r3, #65	@ 0x41
 80029d6:	221f      	movs	r2, #31
 80029d8:	fa02 f303 	lsl.w	r3, r2, r3
 80029dc:	43db      	mvns	r3, r3
 80029de:	4019      	ands	r1, r3
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	6818      	ldr	r0, [r3, #0]
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	685a      	ldr	r2, [r3, #4]
 80029e8:	4613      	mov	r3, r2
 80029ea:	009b      	lsls	r3, r3, #2
 80029ec:	4413      	add	r3, r2
 80029ee:	3b41      	subs	r3, #65	@ 0x41
 80029f0:	fa00 f203 	lsl.w	r2, r0, r3
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	430a      	orrs	r2, r1
 80029fa:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b09      	cmp	r3, #9
 8002a02:	d91c      	bls.n	8002a3e <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	68d9      	ldr	r1, [r3, #12]
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43db      	mvns	r3, r3
 8002a1e:	4019      	ands	r1, r3
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	6898      	ldr	r0, [r3, #8]
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	681a      	ldr	r2, [r3, #0]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	005b      	lsls	r3, r3, #1
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b1e      	subs	r3, #30
 8002a30:	fa00 f203 	lsl.w	r2, r0, r3
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	681b      	ldr	r3, [r3, #0]
 8002a38:	430a      	orrs	r2, r1
 8002a3a:	60da      	str	r2, [r3, #12]
 8002a3c:	e019      	b.n	8002a72 <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	6919      	ldr	r1, [r3, #16]
 8002a44:	683b      	ldr	r3, [r7, #0]
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	4613      	mov	r3, r2
 8002a4a:	005b      	lsls	r3, r3, #1
 8002a4c:	4413      	add	r3, r2
 8002a4e:	2207      	movs	r2, #7
 8002a50:	fa02 f303 	lsl.w	r3, r2, r3
 8002a54:	43db      	mvns	r3, r3
 8002a56:	4019      	ands	r1, r3
 8002a58:	683b      	ldr	r3, [r7, #0]
 8002a5a:	6898      	ldr	r0, [r3, #8]
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	681a      	ldr	r2, [r3, #0]
 8002a60:	4613      	mov	r3, r2
 8002a62:	005b      	lsls	r3, r3, #1
 8002a64:	4413      	add	r3, r2
 8002a66:	fa00 f203 	lsl.w	r2, r0, r3
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	430a      	orrs	r2, r1
 8002a70:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a72:	683b      	ldr	r3, [r7, #0]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	2b10      	cmp	r3, #16
 8002a78:	d003      	beq.n	8002a82 <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8002a7e:	2b11      	cmp	r3, #17
 8002a80:	d132      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a1d      	ldr	r2, [pc, #116]	@ (8002afc <HAL_ADC_ConfigChannel+0x1e4>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d125      	bne.n	8002ad8 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	d126      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	689a      	ldr	r2, [r3, #8]
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 8002aa8:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aaa:	683b      	ldr	r3, [r7, #0]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	2b10      	cmp	r3, #16
 8002ab0:	d11a      	bne.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab2:	4b13      	ldr	r3, [pc, #76]	@ (8002b00 <HAL_ADC_ConfigChannel+0x1e8>)
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a13      	ldr	r2, [pc, #76]	@ (8002b04 <HAL_ADC_ConfigChannel+0x1ec>)
 8002ab8:	fba2 2303 	umull	r2, r3, r2, r3
 8002abc:	0c9a      	lsrs	r2, r3, #18
 8002abe:	4613      	mov	r3, r2
 8002ac0:	009b      	lsls	r3, r3, #2
 8002ac2:	4413      	add	r3, r2
 8002ac4:	005b      	lsls	r3, r3, #1
 8002ac6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ac8:	e002      	b.n	8002ad0 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8002aca:	68bb      	ldr	r3, [r7, #8]
 8002acc:	3b01      	subs	r3, #1
 8002ace:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8002ad0:	68bb      	ldr	r3, [r7, #8]
 8002ad2:	2b00      	cmp	r3, #0
 8002ad4:	d1f9      	bne.n	8002aca <HAL_ADC_ConfigChannel+0x1b2>
 8002ad6:	e007      	b.n	8002ae8 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002adc:	f043 0220 	orr.w	r2, r3, #32
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8002af0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002af2:	4618      	mov	r0, r3
 8002af4:	3714      	adds	r7, #20
 8002af6:	46bd      	mov	sp, r7
 8002af8:	bc80      	pop	{r7}
 8002afa:	4770      	bx	lr
 8002afc:	40012400 	.word	0x40012400
 8002b00:	20000000 	.word	0x20000000
 8002b04:	431bde83 	.word	0x431bde83

08002b08 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b084      	sub	sp, #16
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002b10:	2300      	movs	r3, #0
 8002b12:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 8002b14:	2300      	movs	r3, #0
 8002b16:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	689b      	ldr	r3, [r3, #8]
 8002b1e:	f003 0301 	and.w	r3, r3, #1
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d040      	beq.n	8002ba8 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	689a      	ldr	r2, [r3, #8]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f042 0201 	orr.w	r2, r2, #1
 8002b34:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b36:	4b1f      	ldr	r3, [pc, #124]	@ (8002bb4 <ADC_Enable+0xac>)
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a1f      	ldr	r2, [pc, #124]	@ (8002bb8 <ADC_Enable+0xb0>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	0c9b      	lsrs	r3, r3, #18
 8002b42:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b44:	e002      	b.n	8002b4c <ADC_Enable+0x44>
    {
      wait_loop_index--;
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	3b01      	subs	r3, #1
 8002b4a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8002b4c:	68bb      	ldr	r3, [r7, #8]
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d1f9      	bne.n	8002b46 <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002b52:	f7ff fc13 	bl	800237c <HAL_GetTick>
 8002b56:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b58:	e01f      	b.n	8002b9a <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8002b5a:	f7ff fc0f 	bl	800237c <HAL_GetTick>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	68fb      	ldr	r3, [r7, #12]
 8002b62:	1ad3      	subs	r3, r2, r3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d918      	bls.n	8002b9a <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	689b      	ldr	r3, [r3, #8]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d011      	beq.n	8002b9a <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002b7a:	f043 0210 	orr.w	r2, r3, #16
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002b86:	f043 0201 	orr.w	r2, r3, #1
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2200      	movs	r2, #0
 8002b92:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 8002b96:	2301      	movs	r3, #1
 8002b98:	e007      	b.n	8002baa <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	689b      	ldr	r3, [r3, #8]
 8002ba0:	f003 0301 	and.w	r3, r3, #1
 8002ba4:	2b01      	cmp	r3, #1
 8002ba6:	d1d8      	bne.n	8002b5a <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 8002ba8:	2300      	movs	r3, #0
}
 8002baa:	4618      	mov	r0, r3
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}
 8002bb2:	bf00      	nop
 8002bb4:	20000000 	.word	0x20000000
 8002bb8:	431bde83 	.word	0x431bde83

08002bbc <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b084      	sub	sp, #16
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002bc4:	2300      	movs	r3, #0
 8002bc6:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	689b      	ldr	r3, [r3, #8]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	2b01      	cmp	r3, #1
 8002bd4:	d12e      	bne.n	8002c34 <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	689a      	ldr	r2, [r3, #8]
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f022 0201 	bic.w	r2, r2, #1
 8002be4:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 8002be6:	f7ff fbc9 	bl	800237c <HAL_GetTick>
 8002bea:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002bec:	e01b      	b.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8002bee:	f7ff fbc5 	bl	800237c <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d914      	bls.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0301 	and.w	r3, r3, #1
 8002c06:	2b01      	cmp	r3, #1
 8002c08:	d10d      	bne.n	8002c26 <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002c0e:	f043 0210 	orr.w	r2, r3, #16
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002c1a:	f043 0201 	orr.w	r2, r3, #1
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 8002c22:	2301      	movs	r3, #1
 8002c24:	e007      	b.n	8002c36 <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	689b      	ldr	r3, [r3, #8]
 8002c2c:	f003 0301 	and.w	r3, r3, #1
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d0dc      	beq.n	8002bee <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8002c34:	2300      	movs	r3, #0
}
 8002c36:	4618      	mov	r0, r3
 8002c38:	3710      	adds	r7, #16
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	bd80      	pop	{r7, pc}
	...

08002c40 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c40:	b480      	push	{r7}
 8002c42:	b085      	sub	sp, #20
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	f003 0307 	and.w	r3, r3, #7
 8002c4e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c50:	4b0c      	ldr	r3, [pc, #48]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002c5c:	4013      	ands	r3, r2
 8002c5e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c64:	68bb      	ldr	r3, [r7, #8]
 8002c66:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c68:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002c6c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c70:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c72:	4a04      	ldr	r2, [pc, #16]	@ (8002c84 <__NVIC_SetPriorityGrouping+0x44>)
 8002c74:	68bb      	ldr	r3, [r7, #8]
 8002c76:	60d3      	str	r3, [r2, #12]
}
 8002c78:	bf00      	nop
 8002c7a:	3714      	adds	r7, #20
 8002c7c:	46bd      	mov	sp, r7
 8002c7e:	bc80      	pop	{r7}
 8002c80:	4770      	bx	lr
 8002c82:	bf00      	nop
 8002c84:	e000ed00 	.word	0xe000ed00

08002c88 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <__NVIC_GetPriorityGrouping+0x18>)
 8002c8e:	68db      	ldr	r3, [r3, #12]
 8002c90:	0a1b      	lsrs	r3, r3, #8
 8002c92:	f003 0307 	and.w	r3, r3, #7
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bc80      	pop	{r7}
 8002c9c:	4770      	bx	lr
 8002c9e:	bf00      	nop
 8002ca0:	e000ed00 	.word	0xe000ed00

08002ca4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	b083      	sub	sp, #12
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	4603      	mov	r3, r0
 8002cac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cb2:	2b00      	cmp	r3, #0
 8002cb4:	db0b      	blt.n	8002cce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cb6:	79fb      	ldrb	r3, [r7, #7]
 8002cb8:	f003 021f 	and.w	r2, r3, #31
 8002cbc:	4906      	ldr	r1, [pc, #24]	@ (8002cd8 <__NVIC_EnableIRQ+0x34>)
 8002cbe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc2:	095b      	lsrs	r3, r3, #5
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	fa00 f202 	lsl.w	r2, r0, r2
 8002cca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cce:	bf00      	nop
 8002cd0:	370c      	adds	r7, #12
 8002cd2:	46bd      	mov	sp, r7
 8002cd4:	bc80      	pop	{r7}
 8002cd6:	4770      	bx	lr
 8002cd8:	e000e100 	.word	0xe000e100

08002cdc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002cdc:	b480      	push	{r7}
 8002cde:	b083      	sub	sp, #12
 8002ce0:	af00      	add	r7, sp, #0
 8002ce2:	4603      	mov	r3, r0
 8002ce4:	6039      	str	r1, [r7, #0]
 8002ce6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ce8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	db0a      	blt.n	8002d06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	b2da      	uxtb	r2, r3
 8002cf4:	490c      	ldr	r1, [pc, #48]	@ (8002d28 <__NVIC_SetPriority+0x4c>)
 8002cf6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cfa:	0112      	lsls	r2, r2, #4
 8002cfc:	b2d2      	uxtb	r2, r2
 8002cfe:	440b      	add	r3, r1
 8002d00:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d04:	e00a      	b.n	8002d1c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d06:	683b      	ldr	r3, [r7, #0]
 8002d08:	b2da      	uxtb	r2, r3
 8002d0a:	4908      	ldr	r1, [pc, #32]	@ (8002d2c <__NVIC_SetPriority+0x50>)
 8002d0c:	79fb      	ldrb	r3, [r7, #7]
 8002d0e:	f003 030f 	and.w	r3, r3, #15
 8002d12:	3b04      	subs	r3, #4
 8002d14:	0112      	lsls	r2, r2, #4
 8002d16:	b2d2      	uxtb	r2, r2
 8002d18:	440b      	add	r3, r1
 8002d1a:	761a      	strb	r2, [r3, #24]
}
 8002d1c:	bf00      	nop
 8002d1e:	370c      	adds	r7, #12
 8002d20:	46bd      	mov	sp, r7
 8002d22:	bc80      	pop	{r7}
 8002d24:	4770      	bx	lr
 8002d26:	bf00      	nop
 8002d28:	e000e100 	.word	0xe000e100
 8002d2c:	e000ed00 	.word	0xe000ed00

08002d30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b089      	sub	sp, #36	@ 0x24
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	60f8      	str	r0, [r7, #12]
 8002d38:	60b9      	str	r1, [r7, #8]
 8002d3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	f003 0307 	and.w	r3, r3, #7
 8002d42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	f1c3 0307 	rsb	r3, r3, #7
 8002d4a:	2b04      	cmp	r3, #4
 8002d4c:	bf28      	it	cs
 8002d4e:	2304      	movcs	r3, #4
 8002d50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002d52:	69fb      	ldr	r3, [r7, #28]
 8002d54:	3304      	adds	r3, #4
 8002d56:	2b06      	cmp	r3, #6
 8002d58:	d902      	bls.n	8002d60 <NVIC_EncodePriority+0x30>
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3b03      	subs	r3, #3
 8002d5e:	e000      	b.n	8002d62 <NVIC_EncodePriority+0x32>
 8002d60:	2300      	movs	r3, #0
 8002d62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d64:	f04f 32ff 	mov.w	r2, #4294967295
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6e:	43da      	mvns	r2, r3
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	401a      	ands	r2, r3
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002d78:	f04f 31ff 	mov.w	r1, #4294967295
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	fa01 f303 	lsl.w	r3, r1, r3
 8002d82:	43d9      	mvns	r1, r3
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002d88:	4313      	orrs	r3, r2
         );
}
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	3724      	adds	r7, #36	@ 0x24
 8002d8e:	46bd      	mov	sp, r7
 8002d90:	bc80      	pop	{r7}
 8002d92:	4770      	bx	lr

08002d94 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002d94:	b580      	push	{r7, lr}
 8002d96:	b082      	sub	sp, #8
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	3b01      	subs	r3, #1
 8002da0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002da4:	d301      	bcc.n	8002daa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002da6:	2301      	movs	r3, #1
 8002da8:	e00f      	b.n	8002dca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002daa:	4a0a      	ldr	r2, [pc, #40]	@ (8002dd4 <SysTick_Config+0x40>)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	3b01      	subs	r3, #1
 8002db0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002db2:	210f      	movs	r1, #15
 8002db4:	f04f 30ff 	mov.w	r0, #4294967295
 8002db8:	f7ff ff90 	bl	8002cdc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002dbc:	4b05      	ldr	r3, [pc, #20]	@ (8002dd4 <SysTick_Config+0x40>)
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002dc2:	4b04      	ldr	r3, [pc, #16]	@ (8002dd4 <SysTick_Config+0x40>)
 8002dc4:	2207      	movs	r2, #7
 8002dc6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}
 8002dd2:	bf00      	nop
 8002dd4:	e000e010 	.word	0xe000e010

08002dd8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002de0:	6878      	ldr	r0, [r7, #4]
 8002de2:	f7ff ff2d 	bl	8002c40 <__NVIC_SetPriorityGrouping>
}
 8002de6:	bf00      	nop
 8002de8:	3708      	adds	r7, #8
 8002dea:	46bd      	mov	sp, r7
 8002dec:	bd80      	pop	{r7, pc}

08002dee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002dee:	b580      	push	{r7, lr}
 8002df0:	b086      	sub	sp, #24
 8002df2:	af00      	add	r7, sp, #0
 8002df4:	4603      	mov	r3, r0
 8002df6:	60b9      	str	r1, [r7, #8]
 8002df8:	607a      	str	r2, [r7, #4]
 8002dfa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002dfc:	2300      	movs	r3, #0
 8002dfe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e00:	f7ff ff42 	bl	8002c88 <__NVIC_GetPriorityGrouping>
 8002e04:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	6978      	ldr	r0, [r7, #20]
 8002e0c:	f7ff ff90 	bl	8002d30 <NVIC_EncodePriority>
 8002e10:	4602      	mov	r2, r0
 8002e12:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e16:	4611      	mov	r1, r2
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f7ff ff5f 	bl	8002cdc <__NVIC_SetPriority>
}
 8002e1e:	bf00      	nop
 8002e20:	3718      	adds	r7, #24
 8002e22:	46bd      	mov	sp, r7
 8002e24:	bd80      	pop	{r7, pc}

08002e26 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e26:	b580      	push	{r7, lr}
 8002e28:	b082      	sub	sp, #8
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002e30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e34:	4618      	mov	r0, r3
 8002e36:	f7ff ff35 	bl	8002ca4 <__NVIC_EnableIRQ>
}
 8002e3a:	bf00      	nop
 8002e3c:	3708      	adds	r7, #8
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bd80      	pop	{r7, pc}

08002e42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002e42:	b580      	push	{r7, lr}
 8002e44:	b082      	sub	sp, #8
 8002e46:	af00      	add	r7, sp, #0
 8002e48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002e4a:	6878      	ldr	r0, [r7, #4]
 8002e4c:	f7ff ffa2 	bl	8002d94 <SysTick_Config>
 8002e50:	4603      	mov	r3, r0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3708      	adds	r7, #8
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}

08002e5a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	b085      	sub	sp, #20
 8002e5e:	af00      	add	r7, sp, #0
 8002e60:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002e6c:	b2db      	uxtb	r3, r3
 8002e6e:	2b02      	cmp	r3, #2
 8002e70:	d008      	beq.n	8002e84 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2204      	movs	r2, #4
 8002e76:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	2200      	movs	r2, #0
 8002e7c:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e020      	b.n	8002ec6 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	681a      	ldr	r2, [r3, #0]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	f022 020e 	bic.w	r2, r2, #14
 8002e92:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	681a      	ldr	r2, [r3, #0]
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f022 0201 	bic.w	r2, r2, #1
 8002ea2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002eac:	2101      	movs	r1, #1
 8002eae:	fa01 f202 	lsl.w	r2, r1, r2
 8002eb2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2200      	movs	r2, #0
 8002ec0:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8002ec4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	3714      	adds	r7, #20
 8002eca:	46bd      	mov	sp, r7
 8002ecc:	bc80      	pop	{r7}
 8002ece:	4770      	bx	lr

08002ed0 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8002ed0:	b580      	push	{r7, lr}
 8002ed2:	b084      	sub	sp, #16
 8002ed4:	af00      	add	r7, sp, #0
 8002ed6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002ed8:	2300      	movs	r3, #0
 8002eda:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8002ee2:	b2db      	uxtb	r3, r3
 8002ee4:	2b02      	cmp	r3, #2
 8002ee6:	d005      	beq.n	8002ef4 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2204      	movs	r2, #4
 8002eec:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	73fb      	strb	r3, [r7, #15]
 8002ef2:	e051      	b.n	8002f98 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	681a      	ldr	r2, [r3, #0]
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	f022 020e 	bic.w	r2, r2, #14
 8002f02:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	681a      	ldr	r2, [r3, #0]
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	f022 0201 	bic.w	r2, r2, #1
 8002f12:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	4a22      	ldr	r2, [pc, #136]	@ (8002fa4 <HAL_DMA_Abort_IT+0xd4>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d029      	beq.n	8002f72 <HAL_DMA_Abort_IT+0xa2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	4a21      	ldr	r2, [pc, #132]	@ (8002fa8 <HAL_DMA_Abort_IT+0xd8>)
 8002f24:	4293      	cmp	r3, r2
 8002f26:	d022      	beq.n	8002f6e <HAL_DMA_Abort_IT+0x9e>
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4a1f      	ldr	r2, [pc, #124]	@ (8002fac <HAL_DMA_Abort_IT+0xdc>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d01a      	beq.n	8002f68 <HAL_DMA_Abort_IT+0x98>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	4a1e      	ldr	r2, [pc, #120]	@ (8002fb0 <HAL_DMA_Abort_IT+0xe0>)
 8002f38:	4293      	cmp	r3, r2
 8002f3a:	d012      	beq.n	8002f62 <HAL_DMA_Abort_IT+0x92>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	4a1c      	ldr	r2, [pc, #112]	@ (8002fb4 <HAL_DMA_Abort_IT+0xe4>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d00a      	beq.n	8002f5c <HAL_DMA_Abort_IT+0x8c>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a1b      	ldr	r2, [pc, #108]	@ (8002fb8 <HAL_DMA_Abort_IT+0xe8>)
 8002f4c:	4293      	cmp	r3, r2
 8002f4e:	d102      	bne.n	8002f56 <HAL_DMA_Abort_IT+0x86>
 8002f50:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8002f54:	e00e      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f56:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8002f5a:	e00b      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f5c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002f60:	e008      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f62:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8002f66:	e005      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f68:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002f6c:	e002      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f6e:	2310      	movs	r3, #16
 8002f70:	e000      	b.n	8002f74 <HAL_DMA_Abort_IT+0xa4>
 8002f72:	2301      	movs	r3, #1
 8002f74:	4a11      	ldr	r2, [pc, #68]	@ (8002fbc <HAL_DMA_Abort_IT+0xec>)
 8002f76:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2200      	movs	r2, #0
 8002f84:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d003      	beq.n	8002f98 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	4798      	blx	r3
    } 
  }
  return status;
 8002f98:	7bfb      	ldrb	r3, [r7, #15]
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}
 8002fa2:	bf00      	nop
 8002fa4:	40020008 	.word	0x40020008
 8002fa8:	4002001c 	.word	0x4002001c
 8002fac:	40020030 	.word	0x40020030
 8002fb0:	40020044 	.word	0x40020044
 8002fb4:	40020058 	.word	0x40020058
 8002fb8:	4002006c 	.word	0x4002006c
 8002fbc:	40020000 	.word	0x40020000

08002fc0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b08b      	sub	sp, #44	@ 0x2c
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
 8002fc8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fca:	2300      	movs	r3, #0
 8002fcc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fce:	2300      	movs	r3, #0
 8002fd0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fd2:	e169      	b.n	80032a8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fd4:	2201      	movs	r2, #1
 8002fd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fdc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fde:	683b      	ldr	r3, [r7, #0]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69fa      	ldr	r2, [r7, #28]
 8002fe4:	4013      	ands	r3, r2
 8002fe6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fe8:	69ba      	ldr	r2, [r7, #24]
 8002fea:	69fb      	ldr	r3, [r7, #28]
 8002fec:	429a      	cmp	r2, r3
 8002fee:	f040 8158 	bne.w	80032a2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ff2:	683b      	ldr	r3, [r7, #0]
 8002ff4:	685b      	ldr	r3, [r3, #4]
 8002ff6:	4a9a      	ldr	r2, [pc, #616]	@ (8003260 <HAL_GPIO_Init+0x2a0>)
 8002ff8:	4293      	cmp	r3, r2
 8002ffa:	d05e      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8002ffc:	4a98      	ldr	r2, [pc, #608]	@ (8003260 <HAL_GPIO_Init+0x2a0>)
 8002ffe:	4293      	cmp	r3, r2
 8003000:	d875      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003002:	4a98      	ldr	r2, [pc, #608]	@ (8003264 <HAL_GPIO_Init+0x2a4>)
 8003004:	4293      	cmp	r3, r2
 8003006:	d058      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003008:	4a96      	ldr	r2, [pc, #600]	@ (8003264 <HAL_GPIO_Init+0x2a4>)
 800300a:	4293      	cmp	r3, r2
 800300c:	d86f      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800300e:	4a96      	ldr	r2, [pc, #600]	@ (8003268 <HAL_GPIO_Init+0x2a8>)
 8003010:	4293      	cmp	r3, r2
 8003012:	d052      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003014:	4a94      	ldr	r2, [pc, #592]	@ (8003268 <HAL_GPIO_Init+0x2a8>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d869      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800301a:	4a94      	ldr	r2, [pc, #592]	@ (800326c <HAL_GPIO_Init+0x2ac>)
 800301c:	4293      	cmp	r3, r2
 800301e:	d04c      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 8003020:	4a92      	ldr	r2, [pc, #584]	@ (800326c <HAL_GPIO_Init+0x2ac>)
 8003022:	4293      	cmp	r3, r2
 8003024:	d863      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003026:	4a92      	ldr	r2, [pc, #584]	@ (8003270 <HAL_GPIO_Init+0x2b0>)
 8003028:	4293      	cmp	r3, r2
 800302a:	d046      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
 800302c:	4a90      	ldr	r2, [pc, #576]	@ (8003270 <HAL_GPIO_Init+0x2b0>)
 800302e:	4293      	cmp	r3, r2
 8003030:	d85d      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 8003032:	2b12      	cmp	r3, #18
 8003034:	d82a      	bhi.n	800308c <HAL_GPIO_Init+0xcc>
 8003036:	2b12      	cmp	r3, #18
 8003038:	d859      	bhi.n	80030ee <HAL_GPIO_Init+0x12e>
 800303a:	a201      	add	r2, pc, #4	@ (adr r2, 8003040 <HAL_GPIO_Init+0x80>)
 800303c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003040:	080030bb 	.word	0x080030bb
 8003044:	08003095 	.word	0x08003095
 8003048:	080030a7 	.word	0x080030a7
 800304c:	080030e9 	.word	0x080030e9
 8003050:	080030ef 	.word	0x080030ef
 8003054:	080030ef 	.word	0x080030ef
 8003058:	080030ef 	.word	0x080030ef
 800305c:	080030ef 	.word	0x080030ef
 8003060:	080030ef 	.word	0x080030ef
 8003064:	080030ef 	.word	0x080030ef
 8003068:	080030ef 	.word	0x080030ef
 800306c:	080030ef 	.word	0x080030ef
 8003070:	080030ef 	.word	0x080030ef
 8003074:	080030ef 	.word	0x080030ef
 8003078:	080030ef 	.word	0x080030ef
 800307c:	080030ef 	.word	0x080030ef
 8003080:	080030ef 	.word	0x080030ef
 8003084:	0800309d 	.word	0x0800309d
 8003088:	080030b1 	.word	0x080030b1
 800308c:	4a79      	ldr	r2, [pc, #484]	@ (8003274 <HAL_GPIO_Init+0x2b4>)
 800308e:	4293      	cmp	r3, r2
 8003090:	d013      	beq.n	80030ba <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003092:	e02c      	b.n	80030ee <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	68db      	ldr	r3, [r3, #12]
 8003098:	623b      	str	r3, [r7, #32]
          break;
 800309a:	e029      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	3304      	adds	r3, #4
 80030a2:	623b      	str	r3, [r7, #32]
          break;
 80030a4:	e024      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	68db      	ldr	r3, [r3, #12]
 80030aa:	3308      	adds	r3, #8
 80030ac:	623b      	str	r3, [r7, #32]
          break;
 80030ae:	e01f      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	68db      	ldr	r3, [r3, #12]
 80030b4:	330c      	adds	r3, #12
 80030b6:	623b      	str	r3, [r7, #32]
          break;
 80030b8:	e01a      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030ba:	683b      	ldr	r3, [r7, #0]
 80030bc:	689b      	ldr	r3, [r3, #8]
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d102      	bne.n	80030c8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030c2:	2304      	movs	r3, #4
 80030c4:	623b      	str	r3, [r7, #32]
          break;
 80030c6:	e013      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	689b      	ldr	r3, [r3, #8]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d105      	bne.n	80030dc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d0:	2308      	movs	r3, #8
 80030d2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	69fa      	ldr	r2, [r7, #28]
 80030d8:	611a      	str	r2, [r3, #16]
          break;
 80030da:	e009      	b.n	80030f0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030dc:	2308      	movs	r3, #8
 80030de:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	69fa      	ldr	r2, [r7, #28]
 80030e4:	615a      	str	r2, [r3, #20]
          break;
 80030e6:	e003      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030e8:	2300      	movs	r3, #0
 80030ea:	623b      	str	r3, [r7, #32]
          break;
 80030ec:	e000      	b.n	80030f0 <HAL_GPIO_Init+0x130>
          break;
 80030ee:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2bff      	cmp	r3, #255	@ 0xff
 80030f4:	d801      	bhi.n	80030fa <HAL_GPIO_Init+0x13a>
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	e001      	b.n	80030fe <HAL_GPIO_Init+0x13e>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	3304      	adds	r3, #4
 80030fe:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003100:	69bb      	ldr	r3, [r7, #24]
 8003102:	2bff      	cmp	r3, #255	@ 0xff
 8003104:	d802      	bhi.n	800310c <HAL_GPIO_Init+0x14c>
 8003106:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003108:	009b      	lsls	r3, r3, #2
 800310a:	e002      	b.n	8003112 <HAL_GPIO_Init+0x152>
 800310c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800310e:	3b08      	subs	r3, #8
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003114:	697b      	ldr	r3, [r7, #20]
 8003116:	681a      	ldr	r2, [r3, #0]
 8003118:	210f      	movs	r1, #15
 800311a:	693b      	ldr	r3, [r7, #16]
 800311c:	fa01 f303 	lsl.w	r3, r1, r3
 8003120:	43db      	mvns	r3, r3
 8003122:	401a      	ands	r2, r3
 8003124:	6a39      	ldr	r1, [r7, #32]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	fa01 f303 	lsl.w	r3, r1, r3
 800312c:	431a      	orrs	r2, r3
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800313a:	2b00      	cmp	r3, #0
 800313c:	f000 80b1 	beq.w	80032a2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003140:	4b4d      	ldr	r3, [pc, #308]	@ (8003278 <HAL_GPIO_Init+0x2b8>)
 8003142:	699b      	ldr	r3, [r3, #24]
 8003144:	4a4c      	ldr	r2, [pc, #304]	@ (8003278 <HAL_GPIO_Init+0x2b8>)
 8003146:	f043 0301 	orr.w	r3, r3, #1
 800314a:	6193      	str	r3, [r2, #24]
 800314c:	4b4a      	ldr	r3, [pc, #296]	@ (8003278 <HAL_GPIO_Init+0x2b8>)
 800314e:	699b      	ldr	r3, [r3, #24]
 8003150:	f003 0301 	and.w	r3, r3, #1
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003158:	4a48      	ldr	r2, [pc, #288]	@ (800327c <HAL_GPIO_Init+0x2bc>)
 800315a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800315c:	089b      	lsrs	r3, r3, #2
 800315e:	3302      	adds	r3, #2
 8003160:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003164:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003166:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003168:	f003 0303 	and.w	r3, r3, #3
 800316c:	009b      	lsls	r3, r3, #2
 800316e:	220f      	movs	r2, #15
 8003170:	fa02 f303 	lsl.w	r3, r2, r3
 8003174:	43db      	mvns	r3, r3
 8003176:	68fa      	ldr	r2, [r7, #12]
 8003178:	4013      	ands	r3, r2
 800317a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a40      	ldr	r2, [pc, #256]	@ (8003280 <HAL_GPIO_Init+0x2c0>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d013      	beq.n	80031ac <HAL_GPIO_Init+0x1ec>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3f      	ldr	r2, [pc, #252]	@ (8003284 <HAL_GPIO_Init+0x2c4>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d00d      	beq.n	80031a8 <HAL_GPIO_Init+0x1e8>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3e      	ldr	r2, [pc, #248]	@ (8003288 <HAL_GPIO_Init+0x2c8>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d007      	beq.n	80031a4 <HAL_GPIO_Init+0x1e4>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3d      	ldr	r2, [pc, #244]	@ (800328c <HAL_GPIO_Init+0x2cc>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d101      	bne.n	80031a0 <HAL_GPIO_Init+0x1e0>
 800319c:	2303      	movs	r3, #3
 800319e:	e006      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a0:	2304      	movs	r3, #4
 80031a2:	e004      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a4:	2302      	movs	r3, #2
 80031a6:	e002      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031a8:	2301      	movs	r3, #1
 80031aa:	e000      	b.n	80031ae <HAL_GPIO_Init+0x1ee>
 80031ac:	2300      	movs	r3, #0
 80031ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b0:	f002 0203 	and.w	r2, r2, #3
 80031b4:	0092      	lsls	r2, r2, #2
 80031b6:	4093      	lsls	r3, r2
 80031b8:	68fa      	ldr	r2, [r7, #12]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031be:	492f      	ldr	r1, [pc, #188]	@ (800327c <HAL_GPIO_Init+0x2bc>)
 80031c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031c2:	089b      	lsrs	r3, r3, #2
 80031c4:	3302      	adds	r3, #2
 80031c6:	68fa      	ldr	r2, [r7, #12]
 80031c8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d006      	beq.n	80031e6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031d8:	4b2d      	ldr	r3, [pc, #180]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 80031da:	689a      	ldr	r2, [r3, #8]
 80031dc:	492c      	ldr	r1, [pc, #176]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 80031de:	69bb      	ldr	r3, [r7, #24]
 80031e0:	4313      	orrs	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]
 80031e4:	e006      	b.n	80031f4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031e6:	4b2a      	ldr	r3, [pc, #168]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 80031e8:	689a      	ldr	r2, [r3, #8]
 80031ea:	69bb      	ldr	r3, [r7, #24]
 80031ec:	43db      	mvns	r3, r3
 80031ee:	4928      	ldr	r1, [pc, #160]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 80031f0:	4013      	ands	r3, r2
 80031f2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	685b      	ldr	r3, [r3, #4]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d006      	beq.n	800320e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003200:	4b23      	ldr	r3, [pc, #140]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003202:	68da      	ldr	r2, [r3, #12]
 8003204:	4922      	ldr	r1, [pc, #136]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003206:	69bb      	ldr	r3, [r7, #24]
 8003208:	4313      	orrs	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
 800320c:	e006      	b.n	800321c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800320e:	4b20      	ldr	r3, [pc, #128]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003210:	68da      	ldr	r2, [r3, #12]
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	43db      	mvns	r3, r3
 8003216:	491e      	ldr	r1, [pc, #120]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003218:	4013      	ands	r3, r2
 800321a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	685b      	ldr	r3, [r3, #4]
 8003220:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d006      	beq.n	8003236 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003228:	4b19      	ldr	r3, [pc, #100]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 800322a:	685a      	ldr	r2, [r3, #4]
 800322c:	4918      	ldr	r1, [pc, #96]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 800322e:	69bb      	ldr	r3, [r7, #24]
 8003230:	4313      	orrs	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
 8003234:	e006      	b.n	8003244 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003236:	4b16      	ldr	r3, [pc, #88]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003238:	685a      	ldr	r2, [r3, #4]
 800323a:	69bb      	ldr	r3, [r7, #24]
 800323c:	43db      	mvns	r3, r3
 800323e:	4914      	ldr	r1, [pc, #80]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003240:	4013      	ands	r3, r2
 8003242:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003244:	683b      	ldr	r3, [r7, #0]
 8003246:	685b      	ldr	r3, [r3, #4]
 8003248:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800324c:	2b00      	cmp	r3, #0
 800324e:	d021      	beq.n	8003294 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003250:	4b0f      	ldr	r3, [pc, #60]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	490e      	ldr	r1, [pc, #56]	@ (8003290 <HAL_GPIO_Init+0x2d0>)
 8003256:	69bb      	ldr	r3, [r7, #24]
 8003258:	4313      	orrs	r3, r2
 800325a:	600b      	str	r3, [r1, #0]
 800325c:	e021      	b.n	80032a2 <HAL_GPIO_Init+0x2e2>
 800325e:	bf00      	nop
 8003260:	10320000 	.word	0x10320000
 8003264:	10310000 	.word	0x10310000
 8003268:	10220000 	.word	0x10220000
 800326c:	10210000 	.word	0x10210000
 8003270:	10120000 	.word	0x10120000
 8003274:	10110000 	.word	0x10110000
 8003278:	40021000 	.word	0x40021000
 800327c:	40010000 	.word	0x40010000
 8003280:	40010800 	.word	0x40010800
 8003284:	40010c00 	.word	0x40010c00
 8003288:	40011000 	.word	0x40011000
 800328c:	40011400 	.word	0x40011400
 8003290:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003294:	4b0b      	ldr	r3, [pc, #44]	@ (80032c4 <HAL_GPIO_Init+0x304>)
 8003296:	681a      	ldr	r2, [r3, #0]
 8003298:	69bb      	ldr	r3, [r7, #24]
 800329a:	43db      	mvns	r3, r3
 800329c:	4909      	ldr	r1, [pc, #36]	@ (80032c4 <HAL_GPIO_Init+0x304>)
 800329e:	4013      	ands	r3, r2
 80032a0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032a4:	3301      	adds	r3, #1
 80032a6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032a8:	683b      	ldr	r3, [r7, #0]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ae:	fa22 f303 	lsr.w	r3, r2, r3
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	f47f ae8e 	bne.w	8002fd4 <HAL_GPIO_Init+0x14>
  }
}
 80032b8:	bf00      	nop
 80032ba:	bf00      	nop
 80032bc:	372c      	adds	r7, #44	@ 0x2c
 80032be:	46bd      	mov	sp, r7
 80032c0:	bc80      	pop	{r7}
 80032c2:	4770      	bx	lr
 80032c4:	40010400 	.word	0x40010400

080032c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032c8:	b480      	push	{r7}
 80032ca:	b085      	sub	sp, #20
 80032cc:	af00      	add	r7, sp, #0
 80032ce:	6078      	str	r0, [r7, #4]
 80032d0:	460b      	mov	r3, r1
 80032d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	689a      	ldr	r2, [r3, #8]
 80032d8:	887b      	ldrh	r3, [r7, #2]
 80032da:	4013      	ands	r3, r2
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d002      	beq.n	80032e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e0:	2301      	movs	r3, #1
 80032e2:	73fb      	strb	r3, [r7, #15]
 80032e4:	e001      	b.n	80032ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032e6:	2300      	movs	r3, #0
 80032e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80032ec:	4618      	mov	r0, r3
 80032ee:	3714      	adds	r7, #20
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bc80      	pop	{r7}
 80032f4:	4770      	bx	lr

080032f6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032f6:	b480      	push	{r7}
 80032f8:	b083      	sub	sp, #12
 80032fa:	af00      	add	r7, sp, #0
 80032fc:	6078      	str	r0, [r7, #4]
 80032fe:	460b      	mov	r3, r1
 8003300:	807b      	strh	r3, [r7, #2]
 8003302:	4613      	mov	r3, r2
 8003304:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8003306:	787b      	ldrb	r3, [r7, #1]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d003      	beq.n	8003314 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800330c:	887a      	ldrh	r2, [r7, #2]
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003312:	e003      	b.n	800331c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003314:	887b      	ldrh	r3, [r7, #2]
 8003316:	041a      	lsls	r2, r3, #16
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	611a      	str	r2, [r3, #16]
}
 800331c:	bf00      	nop
 800331e:	370c      	adds	r7, #12
 8003320:	46bd      	mov	sp, r7
 8003322:	bc80      	pop	{r7}
 8003324:	4770      	bx	lr
	...

08003328 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003328:	b480      	push	{r7}
 800332a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800332c:	4b03      	ldr	r3, [pc, #12]	@ (800333c <HAL_PWR_EnableBkUpAccess+0x14>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]
}
 8003332:	bf00      	nop
 8003334:	46bd      	mov	sp, r7
 8003336:	bc80      	pop	{r7}
 8003338:	4770      	bx	lr
 800333a:	bf00      	nop
 800333c:	420e0020 	.word	0x420e0020

08003340 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003340:	b580      	push	{r7, lr}
 8003342:	b086      	sub	sp, #24
 8003344:	af00      	add	r7, sp, #0
 8003346:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d101      	bne.n	8003352 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e272      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f003 0301 	and.w	r3, r3, #1
 800335a:	2b00      	cmp	r3, #0
 800335c:	f000 8087 	beq.w	800346e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003360:	4b92      	ldr	r3, [pc, #584]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f003 030c 	and.w	r3, r3, #12
 8003368:	2b04      	cmp	r3, #4
 800336a:	d00c      	beq.n	8003386 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800336c:	4b8f      	ldr	r3, [pc, #572]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 800336e:	685b      	ldr	r3, [r3, #4]
 8003370:	f003 030c 	and.w	r3, r3, #12
 8003374:	2b08      	cmp	r3, #8
 8003376:	d112      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
 8003378:	4b8c      	ldr	r3, [pc, #560]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003380:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003384:	d10b      	bne.n	800339e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003386:	4b89      	ldr	r3, [pc, #548]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d06c      	beq.n	800346c <HAL_RCC_OscConfig+0x12c>
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d168      	bne.n	800346c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e24c      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	685b      	ldr	r3, [r3, #4]
 80033a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80033a6:	d106      	bne.n	80033b6 <HAL_RCC_OscConfig+0x76>
 80033a8:	4b80      	ldr	r3, [pc, #512]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	4a7f      	ldr	r2, [pc, #508]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033b2:	6013      	str	r3, [r2, #0]
 80033b4:	e02e      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	2b00      	cmp	r3, #0
 80033bc:	d10c      	bne.n	80033d8 <HAL_RCC_OscConfig+0x98>
 80033be:	4b7b      	ldr	r3, [pc, #492]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	4a7a      	ldr	r2, [pc, #488]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033c8:	6013      	str	r3, [r2, #0]
 80033ca:	4b78      	ldr	r3, [pc, #480]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	4a77      	ldr	r2, [pc, #476]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033d4:	6013      	str	r3, [r2, #0]
 80033d6:	e01d      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033e0:	d10c      	bne.n	80033fc <HAL_RCC_OscConfig+0xbc>
 80033e2:	4b72      	ldr	r3, [pc, #456]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a71      	ldr	r2, [pc, #452]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033ec:	6013      	str	r3, [r2, #0]
 80033ee:	4b6f      	ldr	r3, [pc, #444]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	4a6e      	ldr	r2, [pc, #440]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033f8:	6013      	str	r3, [r2, #0]
 80033fa:	e00b      	b.n	8003414 <HAL_RCC_OscConfig+0xd4>
 80033fc:	4b6b      	ldr	r3, [pc, #428]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	4a6a      	ldr	r2, [pc, #424]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003402:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003406:	6013      	str	r3, [r2, #0]
 8003408:	4b68      	ldr	r3, [pc, #416]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	4a67      	ldr	r2, [pc, #412]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 800340e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003412:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	2b00      	cmp	r3, #0
 800341a:	d013      	beq.n	8003444 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7fe ffae 	bl	800237c <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7fe ffaa 	bl	800237c <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e200      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003436:	4b5d      	ldr	r3, [pc, #372]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d0f0      	beq.n	8003424 <HAL_RCC_OscConfig+0xe4>
 8003442:	e014      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003444:	f7fe ff9a 	bl	800237c <HAL_GetTick>
 8003448:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344a:	e008      	b.n	800345e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800344c:	f7fe ff96 	bl	800237c <HAL_GetTick>
 8003450:	4602      	mov	r2, r0
 8003452:	693b      	ldr	r3, [r7, #16]
 8003454:	1ad3      	subs	r3, r2, r3
 8003456:	2b64      	cmp	r3, #100	@ 0x64
 8003458:	d901      	bls.n	800345e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800345a:	2303      	movs	r3, #3
 800345c:	e1ec      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800345e:	4b53      	ldr	r3, [pc, #332]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003466:	2b00      	cmp	r3, #0
 8003468:	d1f0      	bne.n	800344c <HAL_RCC_OscConfig+0x10c>
 800346a:	e000      	b.n	800346e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800346c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f003 0302 	and.w	r3, r3, #2
 8003476:	2b00      	cmp	r3, #0
 8003478:	d063      	beq.n	8003542 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800347a:	4b4c      	ldr	r3, [pc, #304]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 800347c:	685b      	ldr	r3, [r3, #4]
 800347e:	f003 030c 	and.w	r3, r3, #12
 8003482:	2b00      	cmp	r3, #0
 8003484:	d00b      	beq.n	800349e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003486:	4b49      	ldr	r3, [pc, #292]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f003 030c 	and.w	r3, r3, #12
 800348e:	2b08      	cmp	r3, #8
 8003490:	d11c      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
 8003492:	4b46      	ldr	r3, [pc, #280]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800349a:	2b00      	cmp	r3, #0
 800349c:	d116      	bne.n	80034cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800349e:	4b43      	ldr	r3, [pc, #268]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f003 0302 	and.w	r3, r3, #2
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d005      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	691b      	ldr	r3, [r3, #16]
 80034ae:	2b01      	cmp	r3, #1
 80034b0:	d001      	beq.n	80034b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e1c0      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034b6:	4b3d      	ldr	r3, [pc, #244]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	00db      	lsls	r3, r3, #3
 80034c4:	4939      	ldr	r1, [pc, #228]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034c6:	4313      	orrs	r3, r2
 80034c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ca:	e03a      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034cc:	687b      	ldr	r3, [r7, #4]
 80034ce:	691b      	ldr	r3, [r3, #16]
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d020      	beq.n	8003516 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034d4:	4b36      	ldr	r3, [pc, #216]	@ (80035b0 <HAL_RCC_OscConfig+0x270>)
 80034d6:	2201      	movs	r2, #1
 80034d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034da:	f7fe ff4f 	bl	800237c <HAL_GetTick>
 80034de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e0:	e008      	b.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034e2:	f7fe ff4b 	bl	800237c <HAL_GetTick>
 80034e6:	4602      	mov	r2, r0
 80034e8:	693b      	ldr	r3, [r7, #16]
 80034ea:	1ad3      	subs	r3, r2, r3
 80034ec:	2b02      	cmp	r3, #2
 80034ee:	d901      	bls.n	80034f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034f0:	2303      	movs	r3, #3
 80034f2:	e1a1      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034f4:	4b2d      	ldr	r3, [pc, #180]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	f003 0302 	and.w	r3, r3, #2
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d0f0      	beq.n	80034e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003500:	4b2a      	ldr	r3, [pc, #168]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	695b      	ldr	r3, [r3, #20]
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4927      	ldr	r1, [pc, #156]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003510:	4313      	orrs	r3, r2
 8003512:	600b      	str	r3, [r1, #0]
 8003514:	e015      	b.n	8003542 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003516:	4b26      	ldr	r3, [pc, #152]	@ (80035b0 <HAL_RCC_OscConfig+0x270>)
 8003518:	2200      	movs	r2, #0
 800351a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800351c:	f7fe ff2e 	bl	800237c <HAL_GetTick>
 8003520:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003524:	f7fe ff2a 	bl	800237c <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	693b      	ldr	r3, [r7, #16]
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e180      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003536:	4b1d      	ldr	r3, [pc, #116]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0302 	and.w	r3, r3, #2
 800353e:	2b00      	cmp	r3, #0
 8003540:	d1f0      	bne.n	8003524 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0308 	and.w	r3, r3, #8
 800354a:	2b00      	cmp	r3, #0
 800354c:	d03a      	beq.n	80035c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	699b      	ldr	r3, [r3, #24]
 8003552:	2b00      	cmp	r3, #0
 8003554:	d019      	beq.n	800358a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003556:	4b17      	ldr	r3, [pc, #92]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 8003558:	2201      	movs	r2, #1
 800355a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800355c:	f7fe ff0e 	bl	800237c <HAL_GetTick>
 8003560:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003562:	e008      	b.n	8003576 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003564:	f7fe ff0a 	bl	800237c <HAL_GetTick>
 8003568:	4602      	mov	r2, r0
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	1ad3      	subs	r3, r2, r3
 800356e:	2b02      	cmp	r3, #2
 8003570:	d901      	bls.n	8003576 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003572:	2303      	movs	r3, #3
 8003574:	e160      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003576:	4b0d      	ldr	r3, [pc, #52]	@ (80035ac <HAL_RCC_OscConfig+0x26c>)
 8003578:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800357a:	f003 0302 	and.w	r3, r3, #2
 800357e:	2b00      	cmp	r3, #0
 8003580:	d0f0      	beq.n	8003564 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003582:	2001      	movs	r0, #1
 8003584:	f000 face 	bl	8003b24 <RCC_Delay>
 8003588:	e01c      	b.n	80035c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800358a:	4b0a      	ldr	r3, [pc, #40]	@ (80035b4 <HAL_RCC_OscConfig+0x274>)
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003590:	f7fe fef4 	bl	800237c <HAL_GetTick>
 8003594:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003596:	e00f      	b.n	80035b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003598:	f7fe fef0 	bl	800237c <HAL_GetTick>
 800359c:	4602      	mov	r2, r0
 800359e:	693b      	ldr	r3, [r7, #16]
 80035a0:	1ad3      	subs	r3, r2, r3
 80035a2:	2b02      	cmp	r3, #2
 80035a4:	d908      	bls.n	80035b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80035a6:	2303      	movs	r3, #3
 80035a8:	e146      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
 80035aa:	bf00      	nop
 80035ac:	40021000 	.word	0x40021000
 80035b0:	42420000 	.word	0x42420000
 80035b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035b8:	4b92      	ldr	r3, [pc, #584]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035bc:	f003 0302 	and.w	r3, r3, #2
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d1e9      	bne.n	8003598 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035c4:	687b      	ldr	r3, [r7, #4]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f003 0304 	and.w	r3, r3, #4
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	f000 80a6 	beq.w	800371e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035d2:	2300      	movs	r3, #0
 80035d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035d6:	4b8b      	ldr	r3, [pc, #556]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	69db      	ldr	r3, [r3, #28]
 80035da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d10d      	bne.n	80035fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035e2:	4b88      	ldr	r3, [pc, #544]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a87      	ldr	r2, [pc, #540]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]
 80035ee:	4b85      	ldr	r3, [pc, #532]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035f6:	60bb      	str	r3, [r7, #8]
 80035f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035fa:	2301      	movs	r3, #1
 80035fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035fe:	4b82      	ldr	r3, [pc, #520]	@ (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003600:	681b      	ldr	r3, [r3, #0]
 8003602:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003606:	2b00      	cmp	r3, #0
 8003608:	d118      	bne.n	800363c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800360a:	4b7f      	ldr	r3, [pc, #508]	@ (8003808 <HAL_RCC_OscConfig+0x4c8>)
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	4a7e      	ldr	r2, [pc, #504]	@ (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003610:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003614:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003616:	f7fe feb1 	bl	800237c <HAL_GetTick>
 800361a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800361c:	e008      	b.n	8003630 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800361e:	f7fe fead 	bl	800237c <HAL_GetTick>
 8003622:	4602      	mov	r2, r0
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	2b64      	cmp	r3, #100	@ 0x64
 800362a:	d901      	bls.n	8003630 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800362c:	2303      	movs	r3, #3
 800362e:	e103      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003630:	4b75      	ldr	r3, [pc, #468]	@ (8003808 <HAL_RCC_OscConfig+0x4c8>)
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003638:	2b00      	cmp	r3, #0
 800363a:	d0f0      	beq.n	800361e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	68db      	ldr	r3, [r3, #12]
 8003640:	2b01      	cmp	r3, #1
 8003642:	d106      	bne.n	8003652 <HAL_RCC_OscConfig+0x312>
 8003644:	4b6f      	ldr	r3, [pc, #444]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003646:	6a1b      	ldr	r3, [r3, #32]
 8003648:	4a6e      	ldr	r2, [pc, #440]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800364a:	f043 0301 	orr.w	r3, r3, #1
 800364e:	6213      	str	r3, [r2, #32]
 8003650:	e02d      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	68db      	ldr	r3, [r3, #12]
 8003656:	2b00      	cmp	r3, #0
 8003658:	d10c      	bne.n	8003674 <HAL_RCC_OscConfig+0x334>
 800365a:	4b6a      	ldr	r3, [pc, #424]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	6a1b      	ldr	r3, [r3, #32]
 800365e:	4a69      	ldr	r2, [pc, #420]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003660:	f023 0301 	bic.w	r3, r3, #1
 8003664:	6213      	str	r3, [r2, #32]
 8003666:	4b67      	ldr	r3, [pc, #412]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	6a1b      	ldr	r3, [r3, #32]
 800366a:	4a66      	ldr	r2, [pc, #408]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800366c:	f023 0304 	bic.w	r3, r3, #4
 8003670:	6213      	str	r3, [r2, #32]
 8003672:	e01c      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	68db      	ldr	r3, [r3, #12]
 8003678:	2b05      	cmp	r3, #5
 800367a:	d10c      	bne.n	8003696 <HAL_RCC_OscConfig+0x356>
 800367c:	4b61      	ldr	r3, [pc, #388]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	6a1b      	ldr	r3, [r3, #32]
 8003680:	4a60      	ldr	r2, [pc, #384]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003682:	f043 0304 	orr.w	r3, r3, #4
 8003686:	6213      	str	r3, [r2, #32]
 8003688:	4b5e      	ldr	r3, [pc, #376]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800368a:	6a1b      	ldr	r3, [r3, #32]
 800368c:	4a5d      	ldr	r2, [pc, #372]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	f043 0301 	orr.w	r3, r3, #1
 8003692:	6213      	str	r3, [r2, #32]
 8003694:	e00b      	b.n	80036ae <HAL_RCC_OscConfig+0x36e>
 8003696:	4b5b      	ldr	r3, [pc, #364]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	6a1b      	ldr	r3, [r3, #32]
 800369a:	4a5a      	ldr	r2, [pc, #360]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800369c:	f023 0301 	bic.w	r3, r3, #1
 80036a0:	6213      	str	r3, [r2, #32]
 80036a2:	4b58      	ldr	r3, [pc, #352]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	6a1b      	ldr	r3, [r3, #32]
 80036a6:	4a57      	ldr	r2, [pc, #348]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 0304 	bic.w	r3, r3, #4
 80036ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	68db      	ldr	r3, [r3, #12]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d015      	beq.n	80036e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036b6:	f7fe fe61 	bl	800237c <HAL_GetTick>
 80036ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036bc:	e00a      	b.n	80036d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036be:	f7fe fe5d 	bl	800237c <HAL_GetTick>
 80036c2:	4602      	mov	r2, r0
 80036c4:	693b      	ldr	r3, [r7, #16]
 80036c6:	1ad3      	subs	r3, r2, r3
 80036c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036cc:	4293      	cmp	r3, r2
 80036ce:	d901      	bls.n	80036d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036d0:	2303      	movs	r3, #3
 80036d2:	e0b1      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036d4:	4b4b      	ldr	r3, [pc, #300]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0302 	and.w	r3, r3, #2
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d0ee      	beq.n	80036be <HAL_RCC_OscConfig+0x37e>
 80036e0:	e014      	b.n	800370c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036e2:	f7fe fe4b 	bl	800237c <HAL_GetTick>
 80036e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036e8:	e00a      	b.n	8003700 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ea:	f7fe fe47 	bl	800237c <HAL_GetTick>
 80036ee:	4602      	mov	r2, r0
 80036f0:	693b      	ldr	r3, [r7, #16]
 80036f2:	1ad3      	subs	r3, r2, r3
 80036f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036f8:	4293      	cmp	r3, r2
 80036fa:	d901      	bls.n	8003700 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036fc:	2303      	movs	r3, #3
 80036fe:	e09b      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003700:	4b40      	ldr	r3, [pc, #256]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003702:	6a1b      	ldr	r3, [r3, #32]
 8003704:	f003 0302 	and.w	r3, r3, #2
 8003708:	2b00      	cmp	r3, #0
 800370a:	d1ee      	bne.n	80036ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800370c:	7dfb      	ldrb	r3, [r7, #23]
 800370e:	2b01      	cmp	r3, #1
 8003710:	d105      	bne.n	800371e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003712:	4b3c      	ldr	r3, [pc, #240]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003714:	69db      	ldr	r3, [r3, #28]
 8003716:	4a3b      	ldr	r2, [pc, #236]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003718:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800371c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	69db      	ldr	r3, [r3, #28]
 8003722:	2b00      	cmp	r3, #0
 8003724:	f000 8087 	beq.w	8003836 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003728:	4b36      	ldr	r3, [pc, #216]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800372a:	685b      	ldr	r3, [r3, #4]
 800372c:	f003 030c 	and.w	r3, r3, #12
 8003730:	2b08      	cmp	r3, #8
 8003732:	d061      	beq.n	80037f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	69db      	ldr	r3, [r3, #28]
 8003738:	2b02      	cmp	r3, #2
 800373a:	d146      	bne.n	80037ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800373c:	4b33      	ldr	r3, [pc, #204]	@ (800380c <HAL_RCC_OscConfig+0x4cc>)
 800373e:	2200      	movs	r2, #0
 8003740:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003742:	f7fe fe1b 	bl	800237c <HAL_GetTick>
 8003746:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003748:	e008      	b.n	800375c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800374a:	f7fe fe17 	bl	800237c <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	693b      	ldr	r3, [r7, #16]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	2b02      	cmp	r3, #2
 8003756:	d901      	bls.n	800375c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003758:	2303      	movs	r3, #3
 800375a:	e06d      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800375c:	4b29      	ldr	r3, [pc, #164]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1f0      	bne.n	800374a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a1b      	ldr	r3, [r3, #32]
 800376c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003770:	d108      	bne.n	8003784 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003772:	4b24      	ldr	r3, [pc, #144]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003774:	685b      	ldr	r3, [r3, #4]
 8003776:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	689b      	ldr	r3, [r3, #8]
 800377e:	4921      	ldr	r1, [pc, #132]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003780:	4313      	orrs	r3, r2
 8003782:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003784:	4b1f      	ldr	r3, [pc, #124]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	6a19      	ldr	r1, [r3, #32]
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003794:	430b      	orrs	r3, r1
 8003796:	491b      	ldr	r1, [pc, #108]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 8003798:	4313      	orrs	r3, r2
 800379a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800379c:	4b1b      	ldr	r3, [pc, #108]	@ (800380c <HAL_RCC_OscConfig+0x4cc>)
 800379e:	2201      	movs	r2, #1
 80037a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a2:	f7fe fdeb 	bl	800237c <HAL_GetTick>
 80037a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037a8:	e008      	b.n	80037bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037aa:	f7fe fde7 	bl	800237c <HAL_GetTick>
 80037ae:	4602      	mov	r2, r0
 80037b0:	693b      	ldr	r3, [r7, #16]
 80037b2:	1ad3      	subs	r3, r2, r3
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d901      	bls.n	80037bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037b8:	2303      	movs	r3, #3
 80037ba:	e03d      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037bc:	4b11      	ldr	r3, [pc, #68]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d0f0      	beq.n	80037aa <HAL_RCC_OscConfig+0x46a>
 80037c8:	e035      	b.n	8003836 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ca:	4b10      	ldr	r3, [pc, #64]	@ (800380c <HAL_RCC_OscConfig+0x4cc>)
 80037cc:	2200      	movs	r2, #0
 80037ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037d0:	f7fe fdd4 	bl	800237c <HAL_GetTick>
 80037d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037d6:	e008      	b.n	80037ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037d8:	f7fe fdd0 	bl	800237c <HAL_GetTick>
 80037dc:	4602      	mov	r2, r0
 80037de:	693b      	ldr	r3, [r7, #16]
 80037e0:	1ad3      	subs	r3, r2, r3
 80037e2:	2b02      	cmp	r3, #2
 80037e4:	d901      	bls.n	80037ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037e6:	2303      	movs	r3, #3
 80037e8:	e026      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ea:	4b06      	ldr	r3, [pc, #24]	@ (8003804 <HAL_RCC_OscConfig+0x4c4>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d1f0      	bne.n	80037d8 <HAL_RCC_OscConfig+0x498>
 80037f6:	e01e      	b.n	8003836 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	69db      	ldr	r3, [r3, #28]
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d107      	bne.n	8003810 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e019      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
 8003804:	40021000 	.word	0x40021000
 8003808:	40007000 	.word	0x40007000
 800380c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003810:	4b0b      	ldr	r3, [pc, #44]	@ (8003840 <HAL_RCC_OscConfig+0x500>)
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	6a1b      	ldr	r3, [r3, #32]
 8003820:	429a      	cmp	r2, r3
 8003822:	d106      	bne.n	8003832 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800382e:	429a      	cmp	r2, r3
 8003830:	d001      	beq.n	8003836 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003832:	2301      	movs	r3, #1
 8003834:	e000      	b.n	8003838 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003836:	2300      	movs	r3, #0
}
 8003838:	4618      	mov	r0, r3
 800383a:	3718      	adds	r7, #24
 800383c:	46bd      	mov	sp, r7
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40021000 	.word	0x40021000

08003844 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	b084      	sub	sp, #16
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]
 800384c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	2b00      	cmp	r3, #0
 8003852:	d101      	bne.n	8003858 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003854:	2301      	movs	r3, #1
 8003856:	e0d0      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003858:	4b6a      	ldr	r3, [pc, #424]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 0307 	and.w	r3, r3, #7
 8003860:	683a      	ldr	r2, [r7, #0]
 8003862:	429a      	cmp	r2, r3
 8003864:	d910      	bls.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003866:	4b67      	ldr	r3, [pc, #412]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f023 0207 	bic.w	r2, r3, #7
 800386e:	4965      	ldr	r1, [pc, #404]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003870:	683b      	ldr	r3, [r7, #0]
 8003872:	4313      	orrs	r3, r2
 8003874:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003876:	4b63      	ldr	r3, [pc, #396]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f003 0307 	and.w	r3, r3, #7
 800387e:	683a      	ldr	r2, [r7, #0]
 8003880:	429a      	cmp	r2, r3
 8003882:	d001      	beq.n	8003888 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003884:	2301      	movs	r3, #1
 8003886:	e0b8      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b00      	cmp	r3, #0
 8003892:	d020      	beq.n	80038d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	f003 0304 	and.w	r3, r3, #4
 800389c:	2b00      	cmp	r3, #0
 800389e:	d005      	beq.n	80038ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80038a0:	4b59      	ldr	r3, [pc, #356]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a2:	685b      	ldr	r3, [r3, #4]
 80038a4:	4a58      	ldr	r2, [pc, #352]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80038aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f003 0308 	and.w	r3, r3, #8
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d005      	beq.n	80038c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038b8:	4b53      	ldr	r3, [pc, #332]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	4a52      	ldr	r2, [pc, #328]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038c4:	4b50      	ldr	r3, [pc, #320]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	689b      	ldr	r3, [r3, #8]
 80038d0:	494d      	ldr	r1, [pc, #308]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038d2:	4313      	orrs	r3, r2
 80038d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d040      	beq.n	8003964 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d107      	bne.n	80038fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038ea:	4b47      	ldr	r3, [pc, #284]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d115      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e07f      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	2b02      	cmp	r3, #2
 8003900:	d107      	bne.n	8003912 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003902:	4b41      	ldr	r3, [pc, #260]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e073      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003912:	4b3d      	ldr	r3, [pc, #244]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0302 	and.w	r3, r3, #2
 800391a:	2b00      	cmp	r3, #0
 800391c:	d101      	bne.n	8003922 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800391e:	2301      	movs	r3, #1
 8003920:	e06b      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003922:	4b39      	ldr	r3, [pc, #228]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f023 0203 	bic.w	r2, r3, #3
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	4936      	ldr	r1, [pc, #216]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003930:	4313      	orrs	r3, r2
 8003932:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003934:	f7fe fd22 	bl	800237c <HAL_GetTick>
 8003938:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800393a:	e00a      	b.n	8003952 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800393c:	f7fe fd1e 	bl	800237c <HAL_GetTick>
 8003940:	4602      	mov	r2, r0
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	1ad3      	subs	r3, r2, r3
 8003946:	f241 3288 	movw	r2, #5000	@ 0x1388
 800394a:	4293      	cmp	r3, r2
 800394c:	d901      	bls.n	8003952 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800394e:	2303      	movs	r3, #3
 8003950:	e053      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003952:	4b2d      	ldr	r3, [pc, #180]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 8003954:	685b      	ldr	r3, [r3, #4]
 8003956:	f003 020c 	and.w	r2, r3, #12
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	685b      	ldr	r3, [r3, #4]
 800395e:	009b      	lsls	r3, r3, #2
 8003960:	429a      	cmp	r2, r3
 8003962:	d1eb      	bne.n	800393c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003964:	4b27      	ldr	r3, [pc, #156]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	f003 0307 	and.w	r3, r3, #7
 800396c:	683a      	ldr	r2, [r7, #0]
 800396e:	429a      	cmp	r2, r3
 8003970:	d210      	bcs.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003972:	4b24      	ldr	r3, [pc, #144]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f023 0207 	bic.w	r2, r3, #7
 800397a:	4922      	ldr	r1, [pc, #136]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	4313      	orrs	r3, r2
 8003980:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003982:	4b20      	ldr	r3, [pc, #128]	@ (8003a04 <HAL_RCC_ClockConfig+0x1c0>)
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f003 0307 	and.w	r3, r3, #7
 800398a:	683a      	ldr	r2, [r7, #0]
 800398c:	429a      	cmp	r2, r3
 800398e:	d001      	beq.n	8003994 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003990:	2301      	movs	r3, #1
 8003992:	e032      	b.n	80039fa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	f003 0304 	and.w	r3, r3, #4
 800399c:	2b00      	cmp	r3, #0
 800399e:	d008      	beq.n	80039b2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80039a0:	4b19      	ldr	r3, [pc, #100]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039a2:	685b      	ldr	r3, [r3, #4]
 80039a4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	68db      	ldr	r3, [r3, #12]
 80039ac:	4916      	ldr	r1, [pc, #88]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ae:	4313      	orrs	r3, r2
 80039b0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	f003 0308 	and.w	r3, r3, #8
 80039ba:	2b00      	cmp	r3, #0
 80039bc:	d009      	beq.n	80039d2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039be:	4b12      	ldr	r3, [pc, #72]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039c0:	685b      	ldr	r3, [r3, #4]
 80039c2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	00db      	lsls	r3, r3, #3
 80039cc:	490e      	ldr	r1, [pc, #56]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039d2:	f000 f821 	bl	8003a18 <HAL_RCC_GetSysClockFreq>
 80039d6:	4602      	mov	r2, r0
 80039d8:	4b0b      	ldr	r3, [pc, #44]	@ (8003a08 <HAL_RCC_ClockConfig+0x1c4>)
 80039da:	685b      	ldr	r3, [r3, #4]
 80039dc:	091b      	lsrs	r3, r3, #4
 80039de:	f003 030f 	and.w	r3, r3, #15
 80039e2:	490a      	ldr	r1, [pc, #40]	@ (8003a0c <HAL_RCC_ClockConfig+0x1c8>)
 80039e4:	5ccb      	ldrb	r3, [r1, r3]
 80039e6:	fa22 f303 	lsr.w	r3, r2, r3
 80039ea:	4a09      	ldr	r2, [pc, #36]	@ (8003a10 <HAL_RCC_ClockConfig+0x1cc>)
 80039ec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039ee:	4b09      	ldr	r3, [pc, #36]	@ (8003a14 <HAL_RCC_ClockConfig+0x1d0>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	4618      	mov	r0, r3
 80039f4:	f7fe fc92 	bl	800231c <HAL_InitTick>

  return HAL_OK;
 80039f8:	2300      	movs	r3, #0
}
 80039fa:	4618      	mov	r0, r3
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}
 8003a02:	bf00      	nop
 8003a04:	40022000 	.word	0x40022000
 8003a08:	40021000 	.word	0x40021000
 8003a0c:	0800d260 	.word	0x0800d260
 8003a10:	20000000 	.word	0x20000000
 8003a14:	20000004 	.word	0x20000004

08003a18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a18:	b480      	push	{r7}
 8003a1a:	b087      	sub	sp, #28
 8003a1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	60fb      	str	r3, [r7, #12]
 8003a22:	2300      	movs	r3, #0
 8003a24:	60bb      	str	r3, [r7, #8]
 8003a26:	2300      	movs	r3, #0
 8003a28:	617b      	str	r3, [r7, #20]
 8003a2a:	2300      	movs	r3, #0
 8003a2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a2e:	2300      	movs	r3, #0
 8003a30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a32:	4b1e      	ldr	r3, [pc, #120]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x94>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 030c 	and.w	r3, r3, #12
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d002      	beq.n	8003a48 <HAL_RCC_GetSysClockFreq+0x30>
 8003a42:	2b08      	cmp	r3, #8
 8003a44:	d003      	beq.n	8003a4e <HAL_RCC_GetSysClockFreq+0x36>
 8003a46:	e027      	b.n	8003a98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a48:	4b19      	ldr	r3, [pc, #100]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a4a:	613b      	str	r3, [r7, #16]
      break;
 8003a4c:	e027      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	0c9b      	lsrs	r3, r3, #18
 8003a52:	f003 030f 	and.w	r3, r3, #15
 8003a56:	4a17      	ldr	r2, [pc, #92]	@ (8003ab4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a58:	5cd3      	ldrb	r3, [r2, r3]
 8003a5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d010      	beq.n	8003a88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a66:	4b11      	ldr	r3, [pc, #68]	@ (8003aac <HAL_RCC_GetSysClockFreq+0x94>)
 8003a68:	685b      	ldr	r3, [r3, #4]
 8003a6a:	0c5b      	lsrs	r3, r3, #17
 8003a6c:	f003 0301 	and.w	r3, r3, #1
 8003a70:	4a11      	ldr	r2, [pc, #68]	@ (8003ab8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a72:	5cd3      	ldrb	r3, [r2, r3]
 8003a74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a0d      	ldr	r2, [pc, #52]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a7a:	fb03 f202 	mul.w	r2, r3, r2
 8003a7e:	68bb      	ldr	r3, [r7, #8]
 8003a80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a84:	617b      	str	r3, [r7, #20]
 8003a86:	e004      	b.n	8003a92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	4a0c      	ldr	r2, [pc, #48]	@ (8003abc <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a8c:	fb02 f303 	mul.w	r3, r2, r3
 8003a90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	613b      	str	r3, [r7, #16]
      break;
 8003a96:	e002      	b.n	8003a9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a98:	4b05      	ldr	r3, [pc, #20]	@ (8003ab0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a9a:	613b      	str	r3, [r7, #16]
      break;
 8003a9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a9e:	693b      	ldr	r3, [r7, #16]
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	371c      	adds	r7, #28
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bc80      	pop	{r7}
 8003aa8:	4770      	bx	lr
 8003aaa:	bf00      	nop
 8003aac:	40021000 	.word	0x40021000
 8003ab0:	007a1200 	.word	0x007a1200
 8003ab4:	0800d278 	.word	0x0800d278
 8003ab8:	0800d288 	.word	0x0800d288
 8003abc:	003d0900 	.word	0x003d0900

08003ac0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ac4:	4b02      	ldr	r3, [pc, #8]	@ (8003ad0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003ac6:	681b      	ldr	r3, [r3, #0]
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bc80      	pop	{r7}
 8003ace:	4770      	bx	lr
 8003ad0:	20000000 	.word	0x20000000

08003ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ad8:	f7ff fff2 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003adc:	4602      	mov	r2, r0
 8003ade:	4b05      	ldr	r3, [pc, #20]	@ (8003af4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	0a1b      	lsrs	r3, r3, #8
 8003ae4:	f003 0307 	and.w	r3, r3, #7
 8003ae8:	4903      	ldr	r1, [pc, #12]	@ (8003af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003aea:	5ccb      	ldrb	r3, [r1, r3]
 8003aec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	bd80      	pop	{r7, pc}
 8003af4:	40021000 	.word	0x40021000
 8003af8:	0800d270 	.word	0x0800d270

08003afc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003afc:	b580      	push	{r7, lr}
 8003afe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003b00:	f7ff ffde 	bl	8003ac0 <HAL_RCC_GetHCLKFreq>
 8003b04:	4602      	mov	r2, r0
 8003b06:	4b05      	ldr	r3, [pc, #20]	@ (8003b1c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	0adb      	lsrs	r3, r3, #11
 8003b0c:	f003 0307 	and.w	r3, r3, #7
 8003b10:	4903      	ldr	r1, [pc, #12]	@ (8003b20 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b12:	5ccb      	ldrb	r3, [r1, r3]
 8003b14:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b18:	4618      	mov	r0, r3
 8003b1a:	bd80      	pop	{r7, pc}
 8003b1c:	40021000 	.word	0x40021000
 8003b20:	0800d270 	.word	0x0800d270

08003b24 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003b24:	b480      	push	{r7}
 8003b26:	b085      	sub	sp, #20
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003b2c:	4b0a      	ldr	r3, [pc, #40]	@ (8003b58 <RCC_Delay+0x34>)
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	4a0a      	ldr	r2, [pc, #40]	@ (8003b5c <RCC_Delay+0x38>)
 8003b32:	fba2 2303 	umull	r2, r3, r2, r3
 8003b36:	0a5b      	lsrs	r3, r3, #9
 8003b38:	687a      	ldr	r2, [r7, #4]
 8003b3a:	fb02 f303 	mul.w	r3, r2, r3
 8003b3e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003b40:	bf00      	nop
  }
  while (Delay --);
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	1e5a      	subs	r2, r3, #1
 8003b46:	60fa      	str	r2, [r7, #12]
 8003b48:	2b00      	cmp	r3, #0
 8003b4a:	d1f9      	bne.n	8003b40 <RCC_Delay+0x1c>
}
 8003b4c:	bf00      	nop
 8003b4e:	bf00      	nop
 8003b50:	3714      	adds	r7, #20
 8003b52:	46bd      	mov	sp, r7
 8003b54:	bc80      	pop	{r7}
 8003b56:	4770      	bx	lr
 8003b58:	20000000 	.word	0x20000000
 8003b5c:	10624dd3 	.word	0x10624dd3

08003b60 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	b088      	sub	sp, #32
 8003b64:	af00      	add	r7, sp, #0
 8003b66:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003b68:	2300      	movs	r3, #0
 8003b6a:	617b      	str	r3, [r7, #20]
 8003b6c:	2300      	movs	r3, #0
 8003b6e:	61fb      	str	r3, [r7, #28]
 8003b70:	2300      	movs	r3, #0
 8003b72:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8003b74:	2300      	movs	r3, #0
 8003b76:	60fb      	str	r3, [r7, #12]
 8003b78:	2300      	movs	r3, #0
 8003b7a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2b10      	cmp	r3, #16
 8003b80:	d00a      	beq.n	8003b98 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2b10      	cmp	r3, #16
 8003b86:	f200 808a 	bhi.w	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	2b01      	cmp	r3, #1
 8003b8e:	d045      	beq.n	8003c1c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b02      	cmp	r3, #2
 8003b94:	d075      	beq.n	8003c82 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003b96:	e082      	b.n	8003c9e <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8003b98:	4b46      	ldr	r3, [pc, #280]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003b9e:	4b45      	ldr	r3, [pc, #276]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003ba6:	2b00      	cmp	r3, #0
 8003ba8:	d07b      	beq.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	0c9b      	lsrs	r3, r3, #18
 8003bae:	f003 030f 	and.w	r3, r3, #15
 8003bb2:	4a41      	ldr	r2, [pc, #260]	@ (8003cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8003bb4:	5cd3      	ldrb	r3, [r2, r3]
 8003bb6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d015      	beq.n	8003bee <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003bc2:	4b3c      	ldr	r3, [pc, #240]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bc4:	685b      	ldr	r3, [r3, #4]
 8003bc6:	0c5b      	lsrs	r3, r3, #17
 8003bc8:	f003 0301 	and.w	r3, r3, #1
 8003bcc:	4a3b      	ldr	r2, [pc, #236]	@ (8003cbc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8003bce:	5cd3      	ldrb	r3, [r2, r3]
 8003bd0:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d00d      	beq.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003bdc:	4a38      	ldr	r2, [pc, #224]	@ (8003cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	fbb2 f2f3 	udiv	r2, r2, r3
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	fb02 f303 	mul.w	r3, r2, r3
 8003bea:	61fb      	str	r3, [r7, #28]
 8003bec:	e004      	b.n	8003bf8 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	4a34      	ldr	r2, [pc, #208]	@ (8003cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8003bf2:	fb02 f303 	mul.w	r3, r2, r3
 8003bf6:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8003bf8:	4b2e      	ldr	r3, [pc, #184]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003c00:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003c04:	d102      	bne.n	8003c0c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8003c06:	69fb      	ldr	r3, [r7, #28]
 8003c08:	61bb      	str	r3, [r7, #24]
      break;
 8003c0a:	e04a      	b.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8003c0c:	69fb      	ldr	r3, [r7, #28]
 8003c0e:	005b      	lsls	r3, r3, #1
 8003c10:	4a2d      	ldr	r2, [pc, #180]	@ (8003cc8 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8003c12:	fba2 2303 	umull	r2, r3, r2, r3
 8003c16:	085b      	lsrs	r3, r3, #1
 8003c18:	61bb      	str	r3, [r7, #24]
      break;
 8003c1a:	e042      	b.n	8003ca2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8003c1c:	4b25      	ldr	r3, [pc, #148]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c1e:	6a1b      	ldr	r3, [r3, #32]
 8003c20:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c28:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003c2c:	d108      	bne.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d003      	beq.n	8003c40 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8003c38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8003c3c:	61bb      	str	r3, [r7, #24]
 8003c3e:	e01f      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c46:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003c4a:	d109      	bne.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8003c4c:	4b19      	ldr	r3, [pc, #100]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c50:	f003 0302 	and.w	r3, r3, #2
 8003c54:	2b00      	cmp	r3, #0
 8003c56:	d003      	beq.n	8003c60 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8003c58:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8003c5c:	61bb      	str	r3, [r7, #24]
 8003c5e:	e00f      	b.n	8003c80 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c66:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003c6a:	d11c      	bne.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c6c:	4b11      	ldr	r3, [pc, #68]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	d016      	beq.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8003c78:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8003c7c:	61bb      	str	r3, [r7, #24]
      break;
 8003c7e:	e012      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8003c80:	e011      	b.n	8003ca6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8003c82:	f7ff ff3b 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8003c86:	4602      	mov	r2, r0
 8003c88:	4b0a      	ldr	r3, [pc, #40]	@ (8003cb4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8003c8a:	685b      	ldr	r3, [r3, #4]
 8003c8c:	0b9b      	lsrs	r3, r3, #14
 8003c8e:	f003 0303 	and.w	r3, r3, #3
 8003c92:	3301      	adds	r3, #1
 8003c94:	005b      	lsls	r3, r3, #1
 8003c96:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9a:	61bb      	str	r3, [r7, #24]
      break;
 8003c9c:	e004      	b.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003c9e:	bf00      	nop
 8003ca0:	e002      	b.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ca2:	bf00      	nop
 8003ca4:	e000      	b.n	8003ca8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8003ca6:	bf00      	nop
    }
  }
  return (frequency);
 8003ca8:	69bb      	ldr	r3, [r7, #24]
}
 8003caa:	4618      	mov	r0, r3
 8003cac:	3720      	adds	r7, #32
 8003cae:	46bd      	mov	sp, r7
 8003cb0:	bd80      	pop	{r7, pc}
 8003cb2:	bf00      	nop
 8003cb4:	40021000 	.word	0x40021000
 8003cb8:	0800d28c 	.word	0x0800d28c
 8003cbc:	0800d29c 	.word	0x0800d29c
 8003cc0:	007a1200 	.word	0x007a1200
 8003cc4:	003d0900 	.word	0x003d0900
 8003cc8:	aaaaaaab 	.word	0xaaaaaaab

08003ccc <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003ccc:	b580      	push	{r7, lr}
 8003cce:	b084      	sub	sp, #16
 8003cd0:	af00      	add	r7, sp, #0
 8003cd2:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003cd4:	2300      	movs	r3, #0
 8003cd6:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d101      	bne.n	8003ce2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e07a      	b.n	8003dd8 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	7c5b      	ldrb	r3, [r3, #17]
 8003ce6:	b2db      	uxtb	r3, r3
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d105      	bne.n	8003cf8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	2200      	movs	r2, #0
 8003cf0:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7fe f94e 	bl	8001f94 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2202      	movs	r2, #2
 8003cfc:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 faea 	bl	80042d8 <HAL_RTC_WaitForSynchro>
 8003d04:	4603      	mov	r3, r0
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d004      	beq.n	8003d14 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2204      	movs	r2, #4
 8003d0e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e061      	b.n	8003dd8 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003d14:	6878      	ldr	r0, [r7, #4]
 8003d16:	f000 fba3 	bl	8004460 <RTC_EnterInitMode>
 8003d1a:	4603      	mov	r3, r0
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d004      	beq.n	8003d2a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2204      	movs	r2, #4
 8003d24:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8003d26:	2301      	movs	r3, #1
 8003d28:	e056      	b.n	8003dd8 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	685a      	ldr	r2, [r3, #4]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	f022 0207 	bic.w	r2, r2, #7
 8003d38:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d005      	beq.n	8003d4e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8003d42:	4b27      	ldr	r3, [pc, #156]	@ (8003de0 <HAL_RTC_Init+0x114>)
 8003d44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d46:	4a26      	ldr	r2, [pc, #152]	@ (8003de0 <HAL_RTC_Init+0x114>)
 8003d48:	f023 0301 	bic.w	r3, r3, #1
 8003d4c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8003d4e:	4b24      	ldr	r3, [pc, #144]	@ (8003de0 <HAL_RTC_Init+0x114>)
 8003d50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d52:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	689b      	ldr	r3, [r3, #8]
 8003d5a:	4921      	ldr	r1, [pc, #132]	@ (8003de0 <HAL_RTC_Init+0x114>)
 8003d5c:	4313      	orrs	r3, r2
 8003d5e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d68:	d003      	beq.n	8003d72 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	685b      	ldr	r3, [r3, #4]
 8003d6e:	60fb      	str	r3, [r7, #12]
 8003d70:	e00e      	b.n	8003d90 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003d72:	2001      	movs	r0, #1
 8003d74:	f7ff fef4 	bl	8003b60 <HAL_RCCEx_GetPeriphCLKFreq>
 8003d78:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d104      	bne.n	8003d8a <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2204      	movs	r2, #4
 8003d84:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8003d86:	2301      	movs	r3, #1
 8003d88:	e026      	b.n	8003dd8 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	3b01      	subs	r3, #1
 8003d8e:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	0c1a      	lsrs	r2, r3, #16
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	f002 020f 	and.w	r2, r2, #15
 8003d9c:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	68fa      	ldr	r2, [r7, #12]
 8003da4:	b292      	uxth	r2, r2
 8003da6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003da8:	6878      	ldr	r0, [r7, #4]
 8003daa:	f000 fb81 	bl	80044b0 <RTC_ExitInitMode>
 8003dae:	4603      	mov	r3, r0
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d004      	beq.n	8003dbe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2204      	movs	r2, #4
 8003db8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e00c      	b.n	8003dd8 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	2200      	movs	r2, #0
 8003dc2:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2201      	movs	r2, #1
 8003dce:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2201      	movs	r2, #1
 8003dd4:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
  }
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3710      	adds	r7, #16
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	40006c00 	.word	0x40006c00

08003de4 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003de4:	b590      	push	{r4, r7, lr}
 8003de6:	b087      	sub	sp, #28
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8003df0:	2300      	movs	r3, #0
 8003df2:	617b      	str	r3, [r7, #20]
 8003df4:	2300      	movs	r3, #0
 8003df6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d002      	beq.n	8003e04 <HAL_RTC_SetTime+0x20>
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	2b00      	cmp	r3, #0
 8003e02:	d101      	bne.n	8003e08 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8003e04:	2301      	movs	r3, #1
 8003e06:	e080      	b.n	8003f0a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	7c1b      	ldrb	r3, [r3, #16]
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_RTC_SetTime+0x30>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e07a      	b.n	8003f0a <HAL_RTC_SetTime+0x126>
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	2201      	movs	r2, #1
 8003e18:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2202      	movs	r2, #2
 8003e1e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d113      	bne.n	8003e4e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e26:	68bb      	ldr	r3, [r7, #8]
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	461a      	mov	r2, r3
 8003e2c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003e30:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8003e34:	68bb      	ldr	r3, [r7, #8]
 8003e36:	785b      	ldrb	r3, [r3, #1]
 8003e38:	4619      	mov	r1, r3
 8003e3a:	460b      	mov	r3, r1
 8003e3c:	011b      	lsls	r3, r3, #4
 8003e3e:	1a5b      	subs	r3, r3, r1
 8003e40:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e42:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8003e44:	68ba      	ldr	r2, [r7, #8]
 8003e46:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003e48:	4413      	add	r3, r2
 8003e4a:	617b      	str	r3, [r7, #20]
 8003e4c:	e01e      	b.n	8003e8c <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e4e:	68bb      	ldr	r3, [r7, #8]
 8003e50:	781b      	ldrb	r3, [r3, #0]
 8003e52:	4618      	mov	r0, r3
 8003e54:	f000 fb71 	bl	800453a <RTC_Bcd2ToByte>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8003e60:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8003e64:	68bb      	ldr	r3, [r7, #8]
 8003e66:	785b      	ldrb	r3, [r3, #1]
 8003e68:	4618      	mov	r0, r3
 8003e6a:	f000 fb66 	bl	800453a <RTC_Bcd2ToByte>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	461a      	mov	r2, r3
 8003e72:	4613      	mov	r3, r2
 8003e74:	011b      	lsls	r3, r3, #4
 8003e76:	1a9b      	subs	r3, r3, r2
 8003e78:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e7a:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	789b      	ldrb	r3, [r3, #2]
 8003e80:	4618      	mov	r0, r3
 8003e82:	f000 fb5a 	bl	800453a <RTC_Bcd2ToByte>
 8003e86:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003e88:	4423      	add	r3, r4
 8003e8a:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003e8c:	6979      	ldr	r1, [r7, #20]
 8003e8e:	68f8      	ldr	r0, [r7, #12]
 8003e90:	f000 fa7f 	bl	8004392 <RTC_WriteTimeCounter>
 8003e94:	4603      	mov	r3, r0
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d007      	beq.n	8003eaa <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	2204      	movs	r2, #4
 8003e9e:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	2200      	movs	r2, #0
 8003ea4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8003ea6:	2301      	movs	r3, #1
 8003ea8:	e02f      	b.n	8003f0a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	685a      	ldr	r2, [r3, #4]
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f022 0205 	bic.w	r2, r2, #5
 8003eb8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003eba:	68f8      	ldr	r0, [r7, #12]
 8003ebc:	f000 fa90 	bl	80043e0 <RTC_ReadAlarmCounter>
 8003ec0:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ec8:	d018      	beq.n	8003efc <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003eca:	693a      	ldr	r2, [r7, #16]
 8003ecc:	697b      	ldr	r3, [r7, #20]
 8003ece:	429a      	cmp	r2, r3
 8003ed0:	d214      	bcs.n	8003efc <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003ed2:	693b      	ldr	r3, [r7, #16]
 8003ed4:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8003ed8:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8003edc:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003ede:	6939      	ldr	r1, [r7, #16]
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f000 fa96 	bl	8004412 <RTC_WriteAlarmCounter>
 8003ee6:	4603      	mov	r3, r0
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2204      	movs	r2, #4
 8003ef0:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2200      	movs	r2, #0
 8003ef6:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8003ef8:	2301      	movs	r3, #1
 8003efa:	e006      	b.n	8003f0a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8003f08:	2300      	movs	r3, #0
  }
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	371c      	adds	r7, #28
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd90      	pop	{r4, r7, pc}
	...

08003f14 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8003f20:	2300      	movs	r3, #0
 8003f22:	61bb      	str	r3, [r7, #24]
 8003f24:	2300      	movs	r3, #0
 8003f26:	61fb      	str	r3, [r7, #28]
 8003f28:	2300      	movs	r3, #0
 8003f2a:	617b      	str	r3, [r7, #20]
 8003f2c:	2300      	movs	r3, #0
 8003f2e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d002      	beq.n	8003f3c <HAL_RTC_GetTime+0x28>
 8003f36:	68bb      	ldr	r3, [r7, #8]
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d101      	bne.n	8003f40 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	e0b5      	b.n	80040ac <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	685b      	ldr	r3, [r3, #4]
 8003f46:	f003 0304 	and.w	r3, r3, #4
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d001      	beq.n	8003f52 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003f4e:	2301      	movs	r3, #1
 8003f50:	e0ac      	b.n	80040ac <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f000 f9ed 	bl	8004332 <RTC_ReadTimeCounter>
 8003f58:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	4a55      	ldr	r2, [pc, #340]	@ (80040b4 <HAL_RTC_GetTime+0x1a0>)
 8003f5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f62:	0adb      	lsrs	r3, r3, #11
 8003f64:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8003f66:	69ba      	ldr	r2, [r7, #24]
 8003f68:	4b52      	ldr	r3, [pc, #328]	@ (80040b4 <HAL_RTC_GetTime+0x1a0>)
 8003f6a:	fba3 1302 	umull	r1, r3, r3, r2
 8003f6e:	0adb      	lsrs	r3, r3, #11
 8003f70:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003f74:	fb01 f303 	mul.w	r3, r1, r3
 8003f78:	1ad3      	subs	r3, r2, r3
 8003f7a:	4a4f      	ldr	r2, [pc, #316]	@ (80040b8 <HAL_RTC_GetTime+0x1a4>)
 8003f7c:	fba2 2303 	umull	r2, r3, r2, r3
 8003f80:	095b      	lsrs	r3, r3, #5
 8003f82:	b2da      	uxtb	r2, r3
 8003f84:	68bb      	ldr	r3, [r7, #8]
 8003f86:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003f88:	69bb      	ldr	r3, [r7, #24]
 8003f8a:	4a4a      	ldr	r2, [pc, #296]	@ (80040b4 <HAL_RTC_GetTime+0x1a0>)
 8003f8c:	fba2 1203 	umull	r1, r2, r2, r3
 8003f90:	0ad2      	lsrs	r2, r2, #11
 8003f92:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8003f96:	fb01 f202 	mul.w	r2, r1, r2
 8003f9a:	1a9a      	subs	r2, r3, r2
 8003f9c:	4b46      	ldr	r3, [pc, #280]	@ (80040b8 <HAL_RTC_GetTime+0x1a4>)
 8003f9e:	fba3 1302 	umull	r1, r3, r3, r2
 8003fa2:	0959      	lsrs	r1, r3, #5
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	011b      	lsls	r3, r3, #4
 8003fa8:	1a5b      	subs	r3, r3, r1
 8003faa:	009b      	lsls	r3, r3, #2
 8003fac:	1ad1      	subs	r1, r2, r3
 8003fae:	b2ca      	uxtb	r2, r1
 8003fb0:	68bb      	ldr	r3, [r7, #8]
 8003fb2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8003fb4:	693b      	ldr	r3, [r7, #16]
 8003fb6:	2b17      	cmp	r3, #23
 8003fb8:	d955      	bls.n	8004066 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003fba:	693b      	ldr	r3, [r7, #16]
 8003fbc:	4a3f      	ldr	r2, [pc, #252]	@ (80040bc <HAL_RTC_GetTime+0x1a8>)
 8003fbe:	fba2 2303 	umull	r2, r3, r2, r3
 8003fc2:	091b      	lsrs	r3, r3, #4
 8003fc4:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003fc6:	6939      	ldr	r1, [r7, #16]
 8003fc8:	4b3c      	ldr	r3, [pc, #240]	@ (80040bc <HAL_RTC_GetTime+0x1a8>)
 8003fca:	fba3 2301 	umull	r2, r3, r3, r1
 8003fce:	091a      	lsrs	r2, r3, #4
 8003fd0:	4613      	mov	r3, r2
 8003fd2:	005b      	lsls	r3, r3, #1
 8003fd4:	4413      	add	r3, r2
 8003fd6:	00db      	lsls	r3, r3, #3
 8003fd8:	1aca      	subs	r2, r1, r3
 8003fda:	b2d2      	uxtb	r2, r2
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003fe0:	68f8      	ldr	r0, [r7, #12]
 8003fe2:	f000 f9fd 	bl	80043e0 <RTC_ReadAlarmCounter>
 8003fe6:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003fe8:	69fb      	ldr	r3, [r7, #28]
 8003fea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fee:	d008      	beq.n	8004002 <HAL_RTC_GetTime+0xee>
 8003ff0:	69fa      	ldr	r2, [r7, #28]
 8003ff2:	69bb      	ldr	r3, [r7, #24]
 8003ff4:	429a      	cmp	r2, r3
 8003ff6:	d904      	bls.n	8004002 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003ff8:	69fa      	ldr	r2, [r7, #28]
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	61fb      	str	r3, [r7, #28]
 8004000:	e002      	b.n	8004008 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8004002:	f04f 33ff 	mov.w	r3, #4294967295
 8004006:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8004008:	697b      	ldr	r3, [r7, #20]
 800400a:	4a2d      	ldr	r2, [pc, #180]	@ (80040c0 <HAL_RTC_GetTime+0x1ac>)
 800400c:	fb02 f303 	mul.w	r3, r2, r3
 8004010:	69ba      	ldr	r2, [r7, #24]
 8004012:	1ad3      	subs	r3, r2, r3
 8004014:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8004016:	69b9      	ldr	r1, [r7, #24]
 8004018:	68f8      	ldr	r0, [r7, #12]
 800401a:	f000 f9ba 	bl	8004392 <RTC_WriteTimeCounter>
 800401e:	4603      	mov	r3, r0
 8004020:	2b00      	cmp	r3, #0
 8004022:	d001      	beq.n	8004028 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8004024:	2301      	movs	r3, #1
 8004026:	e041      	b.n	80040ac <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800402e:	d00c      	beq.n	800404a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8004030:	69fa      	ldr	r2, [r7, #28]
 8004032:	69bb      	ldr	r3, [r7, #24]
 8004034:	4413      	add	r3, r2
 8004036:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8004038:	69f9      	ldr	r1, [r7, #28]
 800403a:	68f8      	ldr	r0, [r7, #12]
 800403c:	f000 f9e9 	bl	8004412 <RTC_WriteAlarmCounter>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d00a      	beq.n	800405c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004046:	2301      	movs	r3, #1
 8004048:	e030      	b.n	80040ac <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800404a:	69f9      	ldr	r1, [r7, #28]
 800404c:	68f8      	ldr	r0, [r7, #12]
 800404e:	f000 f9e0 	bl	8004412 <RTC_WriteAlarmCounter>
 8004052:	4603      	mov	r3, r0
 8004054:	2b00      	cmp	r3, #0
 8004056:	d001      	beq.n	800405c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8004058:	2301      	movs	r3, #1
 800405a:	e027      	b.n	80040ac <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800405c:	6979      	ldr	r1, [r7, #20]
 800405e:	68f8      	ldr	r0, [r7, #12]
 8004060:	f000 fa88 	bl	8004574 <RTC_DateUpdate>
 8004064:	e003      	b.n	800406e <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8004066:	693b      	ldr	r3, [r7, #16]
 8004068:	b2da      	uxtb	r2, r3
 800406a:	68bb      	ldr	r3, [r7, #8]
 800406c:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2b00      	cmp	r3, #0
 8004072:	d01a      	beq.n	80040aa <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8004074:	68bb      	ldr	r3, [r7, #8]
 8004076:	781b      	ldrb	r3, [r3, #0]
 8004078:	4618      	mov	r0, r3
 800407a:	f000 fa41 	bl	8004500 <RTC_ByteToBcd2>
 800407e:	4603      	mov	r3, r0
 8004080:	461a      	mov	r2, r3
 8004082:	68bb      	ldr	r3, [r7, #8]
 8004084:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	785b      	ldrb	r3, [r3, #1]
 800408a:	4618      	mov	r0, r3
 800408c:	f000 fa38 	bl	8004500 <RTC_ByteToBcd2>
 8004090:	4603      	mov	r3, r0
 8004092:	461a      	mov	r2, r3
 8004094:	68bb      	ldr	r3, [r7, #8]
 8004096:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8004098:	68bb      	ldr	r3, [r7, #8]
 800409a:	789b      	ldrb	r3, [r3, #2]
 800409c:	4618      	mov	r0, r3
 800409e:	f000 fa2f 	bl	8004500 <RTC_ByteToBcd2>
 80040a2:	4603      	mov	r3, r0
 80040a4:	461a      	mov	r2, r3
 80040a6:	68bb      	ldr	r3, [r7, #8]
 80040a8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80040aa:	2300      	movs	r3, #0
}
 80040ac:	4618      	mov	r0, r3
 80040ae:	3720      	adds	r7, #32
 80040b0:	46bd      	mov	sp, r7
 80040b2:	bd80      	pop	{r7, pc}
 80040b4:	91a2b3c5 	.word	0x91a2b3c5
 80040b8:	88888889 	.word	0x88888889
 80040bc:	aaaaaaab 	.word	0xaaaaaaab
 80040c0:	00015180 	.word	0x00015180

080040c4 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80040c4:	b580      	push	{r7, lr}
 80040c6:	b088      	sub	sp, #32
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	60f8      	str	r0, [r7, #12]
 80040cc:	60b9      	str	r1, [r7, #8]
 80040ce:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 80040d0:	2300      	movs	r3, #0
 80040d2:	61fb      	str	r3, [r7, #28]
 80040d4:	2300      	movs	r3, #0
 80040d6:	61bb      	str	r3, [r7, #24]
 80040d8:	2300      	movs	r3, #0
 80040da:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d002      	beq.n	80040e8 <HAL_RTC_SetDate+0x24>
 80040e2:	68bb      	ldr	r3, [r7, #8]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	d101      	bne.n	80040ec <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80040e8:	2301      	movs	r3, #1
 80040ea:	e097      	b.n	800421c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	7c1b      	ldrb	r3, [r3, #16]
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_RTC_SetDate+0x34>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e091      	b.n	800421c <HAL_RTC_SetDate+0x158>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	2202      	movs	r2, #2
 8004102:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2b00      	cmp	r3, #0
 8004108:	d10c      	bne.n	8004124 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800410a:	68bb      	ldr	r3, [r7, #8]
 800410c:	78da      	ldrb	r2, [r3, #3]
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8004112:	68bb      	ldr	r3, [r7, #8]
 8004114:	785a      	ldrb	r2, [r3, #1]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800411a:	68bb      	ldr	r3, [r7, #8]
 800411c:	789a      	ldrb	r2, [r3, #2]
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	739a      	strb	r2, [r3, #14]
 8004122:	e01a      	b.n	800415a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8004124:	68bb      	ldr	r3, [r7, #8]
 8004126:	78db      	ldrb	r3, [r3, #3]
 8004128:	4618      	mov	r0, r3
 800412a:	f000 fa06 	bl	800453a <RTC_Bcd2ToByte>
 800412e:	4603      	mov	r3, r0
 8004130:	461a      	mov	r2, r3
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8004136:	68bb      	ldr	r3, [r7, #8]
 8004138:	785b      	ldrb	r3, [r3, #1]
 800413a:	4618      	mov	r0, r3
 800413c:	f000 f9fd 	bl	800453a <RTC_Bcd2ToByte>
 8004140:	4603      	mov	r3, r0
 8004142:	461a      	mov	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	789b      	ldrb	r3, [r3, #2]
 800414c:	4618      	mov	r0, r3
 800414e:	f000 f9f4 	bl	800453a <RTC_Bcd2ToByte>
 8004152:	4603      	mov	r3, r0
 8004154:	461a      	mov	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	7bdb      	ldrb	r3, [r3, #15]
 800415e:	4618      	mov	r0, r3
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	7b59      	ldrb	r1, [r3, #13]
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	7b9b      	ldrb	r3, [r3, #14]
 8004168:	461a      	mov	r2, r3
 800416a:	f000 fadf 	bl	800472c <RTC_WeekDayNum>
 800416e:	4603      	mov	r3, r0
 8004170:	461a      	mov	r2, r3
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	7b1a      	ldrb	r2, [r3, #12]
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800417e:	68f8      	ldr	r0, [r7, #12]
 8004180:	f000 f8d7 	bl	8004332 <RTC_ReadTimeCounter>
 8004184:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8004186:	69fb      	ldr	r3, [r7, #28]
 8004188:	4a26      	ldr	r2, [pc, #152]	@ (8004224 <HAL_RTC_SetDate+0x160>)
 800418a:	fba2 2303 	umull	r2, r3, r2, r3
 800418e:	0adb      	lsrs	r3, r3, #11
 8004190:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	2b18      	cmp	r3, #24
 8004196:	d93a      	bls.n	800420e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8004198:	697b      	ldr	r3, [r7, #20]
 800419a:	4a23      	ldr	r2, [pc, #140]	@ (8004228 <HAL_RTC_SetDate+0x164>)
 800419c:	fba2 2303 	umull	r2, r3, r2, r3
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	4a22      	ldr	r2, [pc, #136]	@ (800422c <HAL_RTC_SetDate+0x168>)
 80041a4:	fb02 f303 	mul.w	r3, r2, r3
 80041a8:	69fa      	ldr	r2, [r7, #28]
 80041aa:	1ad3      	subs	r3, r2, r3
 80041ac:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80041ae:	69f9      	ldr	r1, [r7, #28]
 80041b0:	68f8      	ldr	r0, [r7, #12]
 80041b2:	f000 f8ee 	bl	8004392 <RTC_WriteTimeCounter>
 80041b6:	4603      	mov	r3, r0
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d007      	beq.n	80041cc <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	2204      	movs	r2, #4
 80041c0:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	2200      	movs	r2, #0
 80041c6:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80041c8:	2301      	movs	r3, #1
 80041ca:	e027      	b.n	800421c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f907 	bl	80043e0 <RTC_ReadAlarmCounter>
 80041d2:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80041d4:	69bb      	ldr	r3, [r7, #24]
 80041d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041da:	d018      	beq.n	800420e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 80041dc:	69ba      	ldr	r2, [r7, #24]
 80041de:	69fb      	ldr	r3, [r7, #28]
 80041e0:	429a      	cmp	r2, r3
 80041e2:	d214      	bcs.n	800420e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 80041e4:	69bb      	ldr	r3, [r7, #24]
 80041e6:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 80041ea:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 80041ee:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80041f0:	69b9      	ldr	r1, [r7, #24]
 80041f2:	68f8      	ldr	r0, [r7, #12]
 80041f4:	f000 f90d 	bl	8004412 <RTC_WriteAlarmCounter>
 80041f8:	4603      	mov	r3, r0
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d007      	beq.n	800420e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	2204      	movs	r2, #4
 8004202:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800420a:	2301      	movs	r3, #1
 800420c:	e006      	b.n	800421c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	2201      	movs	r2, #1
 8004212:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	2200      	movs	r2, #0
 8004218:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800421a:	2300      	movs	r3, #0
}
 800421c:	4618      	mov	r0, r3
 800421e:	3720      	adds	r7, #32
 8004220:	46bd      	mov	sp, r7
 8004222:	bd80      	pop	{r7, pc}
 8004224:	91a2b3c5 	.word	0x91a2b3c5
 8004228:	aaaaaaab 	.word	0xaaaaaaab
 800422c:	00015180 	.word	0x00015180

08004230 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8004230:	b580      	push	{r7, lr}
 8004232:	b086      	sub	sp, #24
 8004234:	af00      	add	r7, sp, #0
 8004236:	60f8      	str	r0, [r7, #12]
 8004238:	60b9      	str	r1, [r7, #8]
 800423a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800423c:	f107 0314 	add.w	r3, r7, #20
 8004240:	2100      	movs	r1, #0
 8004242:	460a      	mov	r2, r1
 8004244:	801a      	strh	r2, [r3, #0]
 8004246:	460a      	mov	r2, r1
 8004248:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2b00      	cmp	r3, #0
 800424e:	d002      	beq.n	8004256 <HAL_RTC_GetDate+0x26>
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	2b00      	cmp	r3, #0
 8004254:	d101      	bne.n	800425a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8004256:	2301      	movs	r3, #1
 8004258:	e03a      	b.n	80042d0 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800425a:	f107 0314 	add.w	r3, r7, #20
 800425e:	2200      	movs	r2, #0
 8004260:	4619      	mov	r1, r3
 8004262:	68f8      	ldr	r0, [r7, #12]
 8004264:	f7ff fe56 	bl	8003f14 <HAL_RTC_GetTime>
 8004268:	4603      	mov	r3, r0
 800426a:	2b00      	cmp	r3, #0
 800426c:	d001      	beq.n	8004272 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e02e      	b.n	80042d0 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	7b1a      	ldrb	r2, [r3, #12]
 8004276:	68bb      	ldr	r3, [r7, #8]
 8004278:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	7bda      	ldrb	r2, [r3, #15]
 800427e:	68bb      	ldr	r3, [r7, #8]
 8004280:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	7b5a      	ldrb	r2, [r3, #13]
 8004286:	68bb      	ldr	r3, [r7, #8]
 8004288:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	7b9a      	ldrb	r2, [r3, #14]
 800428e:	68bb      	ldr	r3, [r7, #8]
 8004290:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d01a      	beq.n	80042ce <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	78db      	ldrb	r3, [r3, #3]
 800429c:	4618      	mov	r0, r3
 800429e:	f000 f92f 	bl	8004500 <RTC_ByteToBcd2>
 80042a2:	4603      	mov	r3, r0
 80042a4:	461a      	mov	r2, r3
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80042aa:	68bb      	ldr	r3, [r7, #8]
 80042ac:	785b      	ldrb	r3, [r3, #1]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f000 f926 	bl	8004500 <RTC_ByteToBcd2>
 80042b4:	4603      	mov	r3, r0
 80042b6:	461a      	mov	r2, r3
 80042b8:	68bb      	ldr	r3, [r7, #8]
 80042ba:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80042bc:	68bb      	ldr	r3, [r7, #8]
 80042be:	789b      	ldrb	r3, [r3, #2]
 80042c0:	4618      	mov	r0, r3
 80042c2:	f000 f91d 	bl	8004500 <RTC_ByteToBcd2>
 80042c6:	4603      	mov	r3, r0
 80042c8:	461a      	mov	r2, r3
 80042ca:	68bb      	ldr	r3, [r7, #8]
 80042cc:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80042ce:	2300      	movs	r3, #0
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	3718      	adds	r7, #24
 80042d4:	46bd      	mov	sp, r7
 80042d6:	bd80      	pop	{r7, pc}

080042d8 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80042d8:	b580      	push	{r7, lr}
 80042da:	b084      	sub	sp, #16
 80042dc:	af00      	add	r7, sp, #0
 80042de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80042e0:	2300      	movs	r3, #0
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d101      	bne.n	80042ee <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80042ea:	2301      	movs	r3, #1
 80042ec:	e01d      	b.n	800432a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	681b      	ldr	r3, [r3, #0]
 80042f2:	685a      	ldr	r2, [r3, #4]
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f022 0208 	bic.w	r2, r2, #8
 80042fc:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80042fe:	f7fe f83d 	bl	800237c <HAL_GetTick>
 8004302:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8004304:	e009      	b.n	800431a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004306:	f7fe f839 	bl	800237c <HAL_GetTick>
 800430a:	4602      	mov	r2, r0
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	1ad3      	subs	r3, r2, r3
 8004310:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004314:	d901      	bls.n	800431a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e007      	b.n	800432a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	f003 0308 	and.w	r3, r3, #8
 8004324:	2b00      	cmp	r3, #0
 8004326:	d0ee      	beq.n	8004306 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8004328:	2300      	movs	r3, #0
}
 800432a:	4618      	mov	r0, r3
 800432c:	3710      	adds	r7, #16
 800432e:	46bd      	mov	sp, r7
 8004330:	bd80      	pop	{r7, pc}

08004332 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8004332:	b480      	push	{r7}
 8004334:	b087      	sub	sp, #28
 8004336:	af00      	add	r7, sp, #0
 8004338:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800433a:	2300      	movs	r3, #0
 800433c:	827b      	strh	r3, [r7, #18]
 800433e:	2300      	movs	r3, #0
 8004340:	823b      	strh	r3, [r7, #16]
 8004342:	2300      	movs	r3, #0
 8004344:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8004346:	2300      	movs	r3, #0
 8004348:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	699b      	ldr	r3, [r3, #24]
 8004350:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	69db      	ldr	r3, [r3, #28]
 8004358:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	699b      	ldr	r3, [r3, #24]
 8004360:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8004362:	8a7a      	ldrh	r2, [r7, #18]
 8004364:	8a3b      	ldrh	r3, [r7, #16]
 8004366:	429a      	cmp	r2, r3
 8004368:	d008      	beq.n	800437c <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 800436a:	8a3b      	ldrh	r3, [r7, #16]
 800436c:	041a      	lsls	r2, r3, #16
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	69db      	ldr	r3, [r3, #28]
 8004374:	b29b      	uxth	r3, r3
 8004376:	4313      	orrs	r3, r2
 8004378:	617b      	str	r3, [r7, #20]
 800437a:	e004      	b.n	8004386 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 800437c:	8a7b      	ldrh	r3, [r7, #18]
 800437e:	041a      	lsls	r2, r3, #16
 8004380:	89fb      	ldrh	r3, [r7, #14]
 8004382:	4313      	orrs	r3, r2
 8004384:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8004386:	697b      	ldr	r3, [r7, #20]
}
 8004388:	4618      	mov	r0, r3
 800438a:	371c      	adds	r7, #28
 800438c:	46bd      	mov	sp, r7
 800438e:	bc80      	pop	{r7}
 8004390:	4770      	bx	lr

08004392 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 8004392:	b580      	push	{r7, lr}
 8004394:	b084      	sub	sp, #16
 8004396:	af00      	add	r7, sp, #0
 8004398:	6078      	str	r0, [r7, #4]
 800439a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800439c:	2300      	movs	r3, #0
 800439e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80043a0:	6878      	ldr	r0, [r7, #4]
 80043a2:	f000 f85d 	bl	8004460 <RTC_EnterInitMode>
 80043a6:	4603      	mov	r3, r0
 80043a8:	2b00      	cmp	r3, #0
 80043aa:	d002      	beq.n	80043b2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80043ac:	2301      	movs	r3, #1
 80043ae:	73fb      	strb	r3, [r7, #15]
 80043b0:	e011      	b.n	80043d6 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	681b      	ldr	r3, [r3, #0]
 80043b6:	683a      	ldr	r2, [r7, #0]
 80043b8:	0c12      	lsrs	r2, r2, #16
 80043ba:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	683a      	ldr	r2, [r7, #0]
 80043c2:	b292      	uxth	r2, r2
 80043c4:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80043c6:	6878      	ldr	r0, [r7, #4]
 80043c8:	f000 f872 	bl	80044b0 <RTC_ExitInitMode>
 80043cc:	4603      	mov	r3, r0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	d001      	beq.n	80043d6 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 80043d2:	2301      	movs	r3, #1
 80043d4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80043d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d8:	4618      	mov	r0, r3
 80043da:	3710      	adds	r7, #16
 80043dc:	46bd      	mov	sp, r7
 80043de:	bd80      	pop	{r7, pc}

080043e0 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 80043e0:	b480      	push	{r7}
 80043e2:	b085      	sub	sp, #20
 80043e4:	af00      	add	r7, sp, #0
 80043e6:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80043e8:	2300      	movs	r3, #0
 80043ea:	81fb      	strh	r3, [r7, #14]
 80043ec:	2300      	movs	r3, #0
 80043ee:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	6a1b      	ldr	r3, [r3, #32]
 80043f6:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80043fe:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8004400:	89fb      	ldrh	r3, [r7, #14]
 8004402:	041a      	lsls	r2, r3, #16
 8004404:	89bb      	ldrh	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
}
 8004408:	4618      	mov	r0, r3
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8004412:	b580      	push	{r7, lr}
 8004414:	b084      	sub	sp, #16
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
 800441a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800441c:	2300      	movs	r3, #0
 800441e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 f81d 	bl	8004460 <RTC_EnterInitMode>
 8004426:	4603      	mov	r3, r0
 8004428:	2b00      	cmp	r3, #0
 800442a:	d002      	beq.n	8004432 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
 8004430:	e011      	b.n	8004456 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	683a      	ldr	r2, [r7, #0]
 8004438:	0c12      	lsrs	r2, r2, #16
 800443a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	b292      	uxth	r2, r2
 8004444:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 f832 	bl	80044b0 <RTC_ExitInitMode>
 800444c:	4603      	mov	r3, r0
 800444e:	2b00      	cmp	r3, #0
 8004450:	d001      	beq.n	8004456 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8004452:	2301      	movs	r3, #1
 8004454:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8004456:	7bfb      	ldrb	r3, [r7, #15]
}
 8004458:	4618      	mov	r0, r3
 800445a:	3710      	adds	r7, #16
 800445c:	46bd      	mov	sp, r7
 800445e:	bd80      	pop	{r7, pc}

08004460 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8004460:	b580      	push	{r7, lr}
 8004462:	b084      	sub	sp, #16
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004468:	2300      	movs	r3, #0
 800446a:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 800446c:	f7fd ff86 	bl	800237c <HAL_GetTick>
 8004470:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004472:	e009      	b.n	8004488 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8004474:	f7fd ff82 	bl	800237c <HAL_GetTick>
 8004478:	4602      	mov	r2, r0
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	1ad3      	subs	r3, r2, r3
 800447e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8004482:	d901      	bls.n	8004488 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8004484:	2303      	movs	r3, #3
 8004486:	e00f      	b.n	80044a8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f003 0320 	and.w	r3, r3, #32
 8004492:	2b00      	cmp	r3, #0
 8004494:	d0ee      	beq.n	8004474 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	685a      	ldr	r2, [r3, #4]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f042 0210 	orr.w	r2, r2, #16
 80044a4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80044a6:	2300      	movs	r3, #0
}
 80044a8:	4618      	mov	r0, r3
 80044aa:	3710      	adds	r7, #16
 80044ac:	46bd      	mov	sp, r7
 80044ae:	bd80      	pop	{r7, pc}

080044b0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b084      	sub	sp, #16
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80044b8:	2300      	movs	r3, #0
 80044ba:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	685a      	ldr	r2, [r3, #4]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0210 	bic.w	r2, r2, #16
 80044ca:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80044cc:	f7fd ff56 	bl	800237c <HAL_GetTick>
 80044d0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044d2:	e009      	b.n	80044e8 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80044d4:	f7fd ff52 	bl	800237c <HAL_GetTick>
 80044d8:	4602      	mov	r2, r0
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	1ad3      	subs	r3, r2, r3
 80044de:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80044e2:	d901      	bls.n	80044e8 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 80044e4:	2303      	movs	r3, #3
 80044e6:	e007      	b.n	80044f8 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	685b      	ldr	r3, [r3, #4]
 80044ee:	f003 0320 	and.w	r3, r3, #32
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d0ee      	beq.n	80044d4 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 80044f6:	2300      	movs	r3, #0
}
 80044f8:	4618      	mov	r0, r3
 80044fa:	3710      	adds	r7, #16
 80044fc:	46bd      	mov	sp, r7
 80044fe:	bd80      	pop	{r7, pc}

08004500 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8004500:	b480      	push	{r7}
 8004502:	b085      	sub	sp, #20
 8004504:	af00      	add	r7, sp, #0
 8004506:	4603      	mov	r3, r0
 8004508:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800450a:	2300      	movs	r3, #0
 800450c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800450e:	e005      	b.n	800451c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	3301      	adds	r3, #1
 8004514:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8004516:	79fb      	ldrb	r3, [r7, #7]
 8004518:	3b0a      	subs	r3, #10
 800451a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800451c:	79fb      	ldrb	r3, [r7, #7]
 800451e:	2b09      	cmp	r3, #9
 8004520:	d8f6      	bhi.n	8004510 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	b2db      	uxtb	r3, r3
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	b2da      	uxtb	r2, r3
 800452a:	79fb      	ldrb	r3, [r7, #7]
 800452c:	4313      	orrs	r3, r2
 800452e:	b2db      	uxtb	r3, r3
}
 8004530:	4618      	mov	r0, r3
 8004532:	3714      	adds	r7, #20
 8004534:	46bd      	mov	sp, r7
 8004536:	bc80      	pop	{r7}
 8004538:	4770      	bx	lr

0800453a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800453a:	b480      	push	{r7}
 800453c:	b085      	sub	sp, #20
 800453e:	af00      	add	r7, sp, #0
 8004540:	4603      	mov	r3, r0
 8004542:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8004544:	2300      	movs	r3, #0
 8004546:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8004548:	79fb      	ldrb	r3, [r7, #7]
 800454a:	091b      	lsrs	r3, r3, #4
 800454c:	b2db      	uxtb	r3, r3
 800454e:	461a      	mov	r2, r3
 8004550:	4613      	mov	r3, r2
 8004552:	009b      	lsls	r3, r3, #2
 8004554:	4413      	add	r3, r2
 8004556:	005b      	lsls	r3, r3, #1
 8004558:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800455a:	79fb      	ldrb	r3, [r7, #7]
 800455c:	f003 030f 	and.w	r3, r3, #15
 8004560:	b2da      	uxtb	r2, r3
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	b2db      	uxtb	r3, r3
 8004566:	4413      	add	r3, r2
 8004568:	b2db      	uxtb	r3, r3
}
 800456a:	4618      	mov	r0, r3
 800456c:	3714      	adds	r7, #20
 800456e:	46bd      	mov	sp, r7
 8004570:	bc80      	pop	{r7}
 8004572:	4770      	bx	lr

08004574 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8004574:	b580      	push	{r7, lr}
 8004576:	b086      	sub	sp, #24
 8004578:	af00      	add	r7, sp, #0
 800457a:	6078      	str	r0, [r7, #4]
 800457c:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800457e:	2300      	movs	r3, #0
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	2300      	movs	r3, #0
 8004584:	613b      	str	r3, [r7, #16]
 8004586:	2300      	movs	r3, #0
 8004588:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 800458a:	2300      	movs	r3, #0
 800458c:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	7bdb      	ldrb	r3, [r3, #15]
 8004592:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	7b5b      	ldrb	r3, [r3, #13]
 8004598:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	7b9b      	ldrb	r3, [r3, #14]
 800459e:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80045a0:	2300      	movs	r3, #0
 80045a2:	60bb      	str	r3, [r7, #8]
 80045a4:	e06f      	b.n	8004686 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80045a6:	693b      	ldr	r3, [r7, #16]
 80045a8:	2b01      	cmp	r3, #1
 80045aa:	d011      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
 80045ac:	693b      	ldr	r3, [r7, #16]
 80045ae:	2b03      	cmp	r3, #3
 80045b0:	d00e      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	2b05      	cmp	r3, #5
 80045b6:	d00b      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
 80045b8:	693b      	ldr	r3, [r7, #16]
 80045ba:	2b07      	cmp	r3, #7
 80045bc:	d008      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	2b08      	cmp	r3, #8
 80045c2:	d005      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 80045c4:	693b      	ldr	r3, [r7, #16]
 80045c6:	2b0a      	cmp	r3, #10
 80045c8:	d002      	beq.n	80045d0 <RTC_DateUpdate+0x5c>
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	2b0c      	cmp	r3, #12
 80045ce:	d117      	bne.n	8004600 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	2b1e      	cmp	r3, #30
 80045d4:	d803      	bhi.n	80045de <RTC_DateUpdate+0x6a>
      {
        day++;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	3301      	adds	r3, #1
 80045da:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80045dc:	e050      	b.n	8004680 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 80045de:	693b      	ldr	r3, [r7, #16]
 80045e0:	2b0c      	cmp	r3, #12
 80045e2:	d005      	beq.n	80045f0 <RTC_DateUpdate+0x7c>
        {
          month++;
 80045e4:	693b      	ldr	r3, [r7, #16]
 80045e6:	3301      	adds	r3, #1
 80045e8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045ea:	2301      	movs	r3, #1
 80045ec:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 80045ee:	e047      	b.n	8004680 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 80045f0:	2301      	movs	r3, #1
 80045f2:	613b      	str	r3, [r7, #16]
          day = 1U;
 80045f4:	2301      	movs	r3, #1
 80045f6:	60fb      	str	r3, [r7, #12]
          year++;
 80045f8:	697b      	ldr	r3, [r7, #20]
 80045fa:	3301      	adds	r3, #1
 80045fc:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 80045fe:	e03f      	b.n	8004680 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8004600:	693b      	ldr	r3, [r7, #16]
 8004602:	2b04      	cmp	r3, #4
 8004604:	d008      	beq.n	8004618 <RTC_DateUpdate+0xa4>
 8004606:	693b      	ldr	r3, [r7, #16]
 8004608:	2b06      	cmp	r3, #6
 800460a:	d005      	beq.n	8004618 <RTC_DateUpdate+0xa4>
 800460c:	693b      	ldr	r3, [r7, #16]
 800460e:	2b09      	cmp	r3, #9
 8004610:	d002      	beq.n	8004618 <RTC_DateUpdate+0xa4>
 8004612:	693b      	ldr	r3, [r7, #16]
 8004614:	2b0b      	cmp	r3, #11
 8004616:	d10c      	bne.n	8004632 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	2b1d      	cmp	r3, #29
 800461c:	d803      	bhi.n	8004626 <RTC_DateUpdate+0xb2>
      {
        day++;
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	3301      	adds	r3, #1
 8004622:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004624:	e02c      	b.n	8004680 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8004626:	693b      	ldr	r3, [r7, #16]
 8004628:	3301      	adds	r3, #1
 800462a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800462c:	2301      	movs	r3, #1
 800462e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8004630:	e026      	b.n	8004680 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8004632:	693b      	ldr	r3, [r7, #16]
 8004634:	2b02      	cmp	r3, #2
 8004636:	d123      	bne.n	8004680 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	2b1b      	cmp	r3, #27
 800463c:	d803      	bhi.n	8004646 <RTC_DateUpdate+0xd2>
      {
        day++;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	3301      	adds	r3, #1
 8004642:	60fb      	str	r3, [r7, #12]
 8004644:	e01c      	b.n	8004680 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	2b1c      	cmp	r3, #28
 800464a:	d111      	bne.n	8004670 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	b29b      	uxth	r3, r3
 8004650:	4618      	mov	r0, r3
 8004652:	f000 f839 	bl	80046c8 <RTC_IsLeapYear>
 8004656:	4603      	mov	r3, r0
 8004658:	2b00      	cmp	r3, #0
 800465a:	d003      	beq.n	8004664 <RTC_DateUpdate+0xf0>
        {
          day++;
 800465c:	68fb      	ldr	r3, [r7, #12]
 800465e:	3301      	adds	r3, #1
 8004660:	60fb      	str	r3, [r7, #12]
 8004662:	e00d      	b.n	8004680 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	3301      	adds	r3, #1
 8004668:	613b      	str	r3, [r7, #16]
          day = 1U;
 800466a:	2301      	movs	r3, #1
 800466c:	60fb      	str	r3, [r7, #12]
 800466e:	e007      	b.n	8004680 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	2b1d      	cmp	r3, #29
 8004674:	d104      	bne.n	8004680 <RTC_DateUpdate+0x10c>
      {
        month++;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	3301      	adds	r3, #1
 800467a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800467c:	2301      	movs	r3, #1
 800467e:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	3301      	adds	r3, #1
 8004684:	60bb      	str	r3, [r7, #8]
 8004686:	68ba      	ldr	r2, [r7, #8]
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	429a      	cmp	r2, r3
 800468c:	d38b      	bcc.n	80045a6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800468e:	697b      	ldr	r3, [r7, #20]
 8004690:	b2da      	uxtb	r2, r3
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8004696:	693b      	ldr	r3, [r7, #16]
 8004698:	b2da      	uxtb	r2, r3
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	b2da      	uxtb	r2, r3
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	b2db      	uxtb	r3, r3
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	b2d2      	uxtb	r2, r2
 80046ae:	4619      	mov	r1, r3
 80046b0:	6978      	ldr	r0, [r7, #20]
 80046b2:	f000 f83b 	bl	800472c <RTC_WeekDayNum>
 80046b6:	4603      	mov	r3, r0
 80046b8:	461a      	mov	r2, r3
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	731a      	strb	r2, [r3, #12]
}
 80046be:	bf00      	nop
 80046c0:	3718      	adds	r7, #24
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
	...

080046c8 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 80046c8:	b480      	push	{r7}
 80046ca:	b083      	sub	sp, #12
 80046cc:	af00      	add	r7, sp, #0
 80046ce:	4603      	mov	r3, r0
 80046d0:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 80046d2:	88fb      	ldrh	r3, [r7, #6]
 80046d4:	f003 0303 	and.w	r3, r3, #3
 80046d8:	b29b      	uxth	r3, r3
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d001      	beq.n	80046e2 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 80046de:	2300      	movs	r3, #0
 80046e0:	e01d      	b.n	800471e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 80046e2:	88fb      	ldrh	r3, [r7, #6]
 80046e4:	4a10      	ldr	r2, [pc, #64]	@ (8004728 <RTC_IsLeapYear+0x60>)
 80046e6:	fba2 1203 	umull	r1, r2, r2, r3
 80046ea:	0952      	lsrs	r2, r2, #5
 80046ec:	2164      	movs	r1, #100	@ 0x64
 80046ee:	fb01 f202 	mul.w	r2, r1, r2
 80046f2:	1a9b      	subs	r3, r3, r2
 80046f4:	b29b      	uxth	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d001      	beq.n	80046fe <RTC_IsLeapYear+0x36>
  {
    return 1U;
 80046fa:	2301      	movs	r3, #1
 80046fc:	e00f      	b.n	800471e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 80046fe:	88fb      	ldrh	r3, [r7, #6]
 8004700:	4a09      	ldr	r2, [pc, #36]	@ (8004728 <RTC_IsLeapYear+0x60>)
 8004702:	fba2 1203 	umull	r1, r2, r2, r3
 8004706:	09d2      	lsrs	r2, r2, #7
 8004708:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800470c:	fb01 f202 	mul.w	r2, r1, r2
 8004710:	1a9b      	subs	r3, r3, r2
 8004712:	b29b      	uxth	r3, r3
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8004718:	2301      	movs	r3, #1
 800471a:	e000      	b.n	800471e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800471c:	2300      	movs	r3, #0
  }
}
 800471e:	4618      	mov	r0, r3
 8004720:	370c      	adds	r7, #12
 8004722:	46bd      	mov	sp, r7
 8004724:	bc80      	pop	{r7}
 8004726:	4770      	bx	lr
 8004728:	51eb851f 	.word	0x51eb851f

0800472c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800472c:	b480      	push	{r7}
 800472e:	b085      	sub	sp, #20
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
 8004734:	460b      	mov	r3, r1
 8004736:	70fb      	strb	r3, [r7, #3]
 8004738:	4613      	mov	r3, r2
 800473a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800473c:	2300      	movs	r3, #0
 800473e:	60bb      	str	r3, [r7, #8]
 8004740:	2300      	movs	r3, #0
 8004742:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800474a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800474c:	78fb      	ldrb	r3, [r7, #3]
 800474e:	2b02      	cmp	r3, #2
 8004750:	d82d      	bhi.n	80047ae <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8004752:	78fa      	ldrb	r2, [r7, #3]
 8004754:	4613      	mov	r3, r2
 8004756:	005b      	lsls	r3, r3, #1
 8004758:	4413      	add	r3, r2
 800475a:	00db      	lsls	r3, r3, #3
 800475c:	1a9b      	subs	r3, r3, r2
 800475e:	4a2c      	ldr	r2, [pc, #176]	@ (8004810 <RTC_WeekDayNum+0xe4>)
 8004760:	fba2 2303 	umull	r2, r3, r2, r3
 8004764:	085a      	lsrs	r2, r3, #1
 8004766:	78bb      	ldrb	r3, [r7, #2]
 8004768:	441a      	add	r2, r3
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	441a      	add	r2, r3
 800476e:	68bb      	ldr	r3, [r7, #8]
 8004770:	3b01      	subs	r3, #1
 8004772:	089b      	lsrs	r3, r3, #2
 8004774:	441a      	add	r2, r3
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	3b01      	subs	r3, #1
 800477a:	4926      	ldr	r1, [pc, #152]	@ (8004814 <RTC_WeekDayNum+0xe8>)
 800477c:	fba1 1303 	umull	r1, r3, r1, r3
 8004780:	095b      	lsrs	r3, r3, #5
 8004782:	1ad2      	subs	r2, r2, r3
 8004784:	68bb      	ldr	r3, [r7, #8]
 8004786:	3b01      	subs	r3, #1
 8004788:	4922      	ldr	r1, [pc, #136]	@ (8004814 <RTC_WeekDayNum+0xe8>)
 800478a:	fba1 1303 	umull	r1, r3, r1, r3
 800478e:	09db      	lsrs	r3, r3, #7
 8004790:	4413      	add	r3, r2
 8004792:	1d1a      	adds	r2, r3, #4
 8004794:	4b20      	ldr	r3, [pc, #128]	@ (8004818 <RTC_WeekDayNum+0xec>)
 8004796:	fba3 1302 	umull	r1, r3, r3, r2
 800479a:	1ad1      	subs	r1, r2, r3
 800479c:	0849      	lsrs	r1, r1, #1
 800479e:	440b      	add	r3, r1
 80047a0:	0899      	lsrs	r1, r3, #2
 80047a2:	460b      	mov	r3, r1
 80047a4:	00db      	lsls	r3, r3, #3
 80047a6:	1a5b      	subs	r3, r3, r1
 80047a8:	1ad3      	subs	r3, r2, r3
 80047aa:	60fb      	str	r3, [r7, #12]
 80047ac:	e029      	b.n	8004802 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80047ae:	78fa      	ldrb	r2, [r7, #3]
 80047b0:	4613      	mov	r3, r2
 80047b2:	005b      	lsls	r3, r3, #1
 80047b4:	4413      	add	r3, r2
 80047b6:	00db      	lsls	r3, r3, #3
 80047b8:	1a9b      	subs	r3, r3, r2
 80047ba:	4a15      	ldr	r2, [pc, #84]	@ (8004810 <RTC_WeekDayNum+0xe4>)
 80047bc:	fba2 2303 	umull	r2, r3, r2, r3
 80047c0:	085a      	lsrs	r2, r3, #1
 80047c2:	78bb      	ldrb	r3, [r7, #2]
 80047c4:	441a      	add	r2, r3
 80047c6:	68bb      	ldr	r3, [r7, #8]
 80047c8:	441a      	add	r2, r3
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	089b      	lsrs	r3, r3, #2
 80047ce:	441a      	add	r2, r3
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	4910      	ldr	r1, [pc, #64]	@ (8004814 <RTC_WeekDayNum+0xe8>)
 80047d4:	fba1 1303 	umull	r1, r3, r1, r3
 80047d8:	095b      	lsrs	r3, r3, #5
 80047da:	1ad2      	subs	r2, r2, r3
 80047dc:	68bb      	ldr	r3, [r7, #8]
 80047de:	490d      	ldr	r1, [pc, #52]	@ (8004814 <RTC_WeekDayNum+0xe8>)
 80047e0:	fba1 1303 	umull	r1, r3, r1, r3
 80047e4:	09db      	lsrs	r3, r3, #7
 80047e6:	4413      	add	r3, r2
 80047e8:	1c9a      	adds	r2, r3, #2
 80047ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004818 <RTC_WeekDayNum+0xec>)
 80047ec:	fba3 1302 	umull	r1, r3, r3, r2
 80047f0:	1ad1      	subs	r1, r2, r3
 80047f2:	0849      	lsrs	r1, r1, #1
 80047f4:	440b      	add	r3, r1
 80047f6:	0899      	lsrs	r1, r3, #2
 80047f8:	460b      	mov	r3, r1
 80047fa:	00db      	lsls	r3, r3, #3
 80047fc:	1a5b      	subs	r3, r3, r1
 80047fe:	1ad3      	subs	r3, r2, r3
 8004800:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	b2db      	uxtb	r3, r3
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	bc80      	pop	{r7}
 800480e:	4770      	bx	lr
 8004810:	38e38e39 	.word	0x38e38e39
 8004814:	51eb851f 	.word	0x51eb851f
 8004818:	24924925 	.word	0x24924925

0800481c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b082      	sub	sp, #8
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2b00      	cmp	r3, #0
 8004828:	d101      	bne.n	800482e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800482a:	2301      	movs	r3, #1
 800482c:	e042      	b.n	80048b4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004834:	b2db      	uxtb	r3, r3
 8004836:	2b00      	cmp	r3, #0
 8004838:	d106      	bne.n	8004848 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	2200      	movs	r2, #0
 800483e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004842:	6878      	ldr	r0, [r7, #4]
 8004844:	f7fd fbca 	bl	8001fdc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	2224      	movs	r2, #36	@ 0x24
 800484c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	68da      	ldr	r2, [r3, #12]
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	681b      	ldr	r3, [r3, #0]
 800485a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800485e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004860:	6878      	ldr	r0, [r7, #4]
 8004862:	f000 fdb7 	bl	80053d4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	691a      	ldr	r2, [r3, #16]
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004874:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	695a      	ldr	r2, [r3, #20]
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004884:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	68da      	ldr	r2, [r3, #12]
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	681b      	ldr	r3, [r3, #0]
 8004890:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004894:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	2200      	movs	r2, #0
 800489a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	2220      	movs	r2, #32
 80048a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2220      	movs	r2, #32
 80048a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	2200      	movs	r2, #0
 80048b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	3708      	adds	r7, #8
 80048b8:	46bd      	mov	sp, r7
 80048ba:	bd80      	pop	{r7, pc}

080048bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048bc:	b580      	push	{r7, lr}
 80048be:	b08a      	sub	sp, #40	@ 0x28
 80048c0:	af02      	add	r7, sp, #8
 80048c2:	60f8      	str	r0, [r7, #12]
 80048c4:	60b9      	str	r1, [r7, #8]
 80048c6:	603b      	str	r3, [r7, #0]
 80048c8:	4613      	mov	r3, r2
 80048ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80048cc:	2300      	movs	r3, #0
 80048ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80048d6:	b2db      	uxtb	r3, r3
 80048d8:	2b20      	cmp	r3, #32
 80048da:	d175      	bne.n	80049c8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d002      	beq.n	80048e8 <HAL_UART_Transmit+0x2c>
 80048e2:	88fb      	ldrh	r3, [r7, #6]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d101      	bne.n	80048ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80048e8:	2301      	movs	r3, #1
 80048ea:	e06e      	b.n	80049ca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048ec:	68fb      	ldr	r3, [r7, #12]
 80048ee:	2200      	movs	r2, #0
 80048f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	2221      	movs	r2, #33	@ 0x21
 80048f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80048fa:	f7fd fd3f 	bl	800237c <HAL_GetTick>
 80048fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	88fa      	ldrh	r2, [r7, #6]
 8004904:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	88fa      	ldrh	r2, [r7, #6]
 800490a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004914:	d108      	bne.n	8004928 <HAL_UART_Transmit+0x6c>
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	691b      	ldr	r3, [r3, #16]
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800491e:	2300      	movs	r3, #0
 8004920:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	61bb      	str	r3, [r7, #24]
 8004926:	e003      	b.n	8004930 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004928:	68bb      	ldr	r3, [r7, #8]
 800492a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800492c:	2300      	movs	r3, #0
 800492e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004930:	e02e      	b.n	8004990 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	9300      	str	r3, [sp, #0]
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	2200      	movs	r2, #0
 800493a:	2180      	movs	r1, #128	@ 0x80
 800493c:	68f8      	ldr	r0, [r7, #12]
 800493e:	f000 fb1c 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d005      	beq.n	8004954 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	2220      	movs	r2, #32
 800494c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004950:	2303      	movs	r3, #3
 8004952:	e03a      	b.n	80049ca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004954:	69fb      	ldr	r3, [r7, #28]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d10b      	bne.n	8004972 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800495a:	69bb      	ldr	r3, [r7, #24]
 800495c:	881b      	ldrh	r3, [r3, #0]
 800495e:	461a      	mov	r2, r3
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004968:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800496a:	69bb      	ldr	r3, [r7, #24]
 800496c:	3302      	adds	r3, #2
 800496e:	61bb      	str	r3, [r7, #24]
 8004970:	e007      	b.n	8004982 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	781a      	ldrb	r2, [r3, #0]
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 800497c:	69fb      	ldr	r3, [r7, #28]
 800497e:	3301      	adds	r3, #1
 8004980:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004986:	b29b      	uxth	r3, r3
 8004988:	3b01      	subs	r3, #1
 800498a:	b29a      	uxth	r2, r3
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004994:	b29b      	uxth	r3, r3
 8004996:	2b00      	cmp	r3, #0
 8004998:	d1cb      	bne.n	8004932 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	9300      	str	r3, [sp, #0]
 800499e:	697b      	ldr	r3, [r7, #20]
 80049a0:	2200      	movs	r2, #0
 80049a2:	2140      	movs	r1, #64	@ 0x40
 80049a4:	68f8      	ldr	r0, [r7, #12]
 80049a6:	f000 fae8 	bl	8004f7a <UART_WaitOnFlagUntilTimeout>
 80049aa:	4603      	mov	r3, r0
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d005      	beq.n	80049bc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	2220      	movs	r2, #32
 80049b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80049b8:	2303      	movs	r3, #3
 80049ba:	e006      	b.n	80049ca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80049c4:	2300      	movs	r3, #0
 80049c6:	e000      	b.n	80049ca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80049c8:	2302      	movs	r3, #2
  }
}
 80049ca:	4618      	mov	r0, r3
 80049cc:	3720      	adds	r7, #32
 80049ce:	46bd      	mov	sp, r7
 80049d0:	bd80      	pop	{r7, pc}

080049d2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80049d2:	b580      	push	{r7, lr}
 80049d4:	b084      	sub	sp, #16
 80049d6:	af00      	add	r7, sp, #0
 80049d8:	60f8      	str	r0, [r7, #12]
 80049da:	60b9      	str	r1, [r7, #8]
 80049dc:	4613      	mov	r3, r2
 80049de:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80049e6:	b2db      	uxtb	r3, r3
 80049e8:	2b20      	cmp	r3, #32
 80049ea:	d112      	bne.n	8004a12 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d002      	beq.n	80049f8 <HAL_UART_Receive_IT+0x26>
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d101      	bne.n	80049fc <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80049f8:	2301      	movs	r3, #1
 80049fa:	e00b      	b.n	8004a14 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	2200      	movs	r2, #0
 8004a00:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a02:	88fb      	ldrh	r3, [r7, #6]
 8004a04:	461a      	mov	r2, r3
 8004a06:	68b9      	ldr	r1, [r7, #8]
 8004a08:	68f8      	ldr	r0, [r7, #12]
 8004a0a:	f000 fb0f 	bl	800502c <UART_Start_Receive_IT>
 8004a0e:	4603      	mov	r3, r0
 8004a10:	e000      	b.n	8004a14 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a12:	2302      	movs	r3, #2
  }
}
 8004a14:	4618      	mov	r0, r3
 8004a16:	3710      	adds	r7, #16
 8004a18:	46bd      	mov	sp, r7
 8004a1a:	bd80      	pop	{r7, pc}

08004a1c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a1c:	b580      	push	{r7, lr}
 8004a1e:	b0ba      	sub	sp, #232	@ 0xe8
 8004a20:	af00      	add	r7, sp, #0
 8004a22:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	68db      	ldr	r3, [r3, #12]
 8004a34:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	695b      	ldr	r3, [r3, #20]
 8004a3e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a42:	2300      	movs	r3, #0
 8004a44:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a48:	2300      	movs	r3, #0
 8004a4a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004a5a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a5e:	2b00      	cmp	r3, #0
 8004a60:	d10f      	bne.n	8004a82 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004a62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a66:	f003 0320 	and.w	r3, r3, #32
 8004a6a:	2b00      	cmp	r3, #0
 8004a6c:	d009      	beq.n	8004a82 <HAL_UART_IRQHandler+0x66>
 8004a6e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a72:	f003 0320 	and.w	r3, r3, #32
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 fbec 	bl	8005258 <UART_Receive_IT>
      return;
 8004a80:	e25b      	b.n	8004f3a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004a82:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	f000 80de 	beq.w	8004c48 <HAL_UART_IRQHandler+0x22c>
 8004a8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004a90:	f003 0301 	and.w	r3, r3, #1
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d106      	bne.n	8004aa6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a9c:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 80d1 	beq.w	8004c48 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aaa:	f003 0301 	and.w	r3, r3, #1
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d00b      	beq.n	8004aca <HAL_UART_IRQHandler+0xae>
 8004ab2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ab6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d005      	beq.n	8004aca <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ac2:	f043 0201 	orr.w	r2, r3, #1
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ace:	f003 0304 	and.w	r3, r3, #4
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00b      	beq.n	8004aee <HAL_UART_IRQHandler+0xd2>
 8004ad6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d005      	beq.n	8004aee <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ae6:	f043 0202 	orr.w	r2, r3, #2
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0302 	and.w	r3, r3, #2
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0xf6>
 8004afa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004afe:	f003 0301 	and.w	r3, r3, #1
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0204 	orr.w	r2, r3, #4
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 0308 	and.w	r3, r3, #8
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d011      	beq.n	8004b42 <HAL_UART_IRQHandler+0x126>
 8004b1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b22:	f003 0320 	and.w	r3, r3, #32
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d105      	bne.n	8004b36 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b2e:	f003 0301 	and.w	r3, r3, #1
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d005      	beq.n	8004b42 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b3a:	f043 0208 	orr.w	r2, r3, #8
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	f000 81f2 	beq.w	8004f30 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b50:	f003 0320 	and.w	r3, r3, #32
 8004b54:	2b00      	cmp	r3, #0
 8004b56:	d008      	beq.n	8004b6a <HAL_UART_IRQHandler+0x14e>
 8004b58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b5c:	f003 0320 	and.w	r3, r3, #32
 8004b60:	2b00      	cmp	r3, #0
 8004b62:	d002      	beq.n	8004b6a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004b64:	6878      	ldr	r0, [r7, #4]
 8004b66:	f000 fb77 	bl	8005258 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	695b      	ldr	r3, [r3, #20]
 8004b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	bf14      	ite	ne
 8004b78:	2301      	movne	r3, #1
 8004b7a:	2300      	moveq	r3, #0
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b86:	f003 0308 	and.w	r3, r3, #8
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d103      	bne.n	8004b96 <HAL_UART_IRQHandler+0x17a>
 8004b8e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d04f      	beq.n	8004c36 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f000 fa81 	bl	800509e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d041      	beq.n	8004c2e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	681b      	ldr	r3, [r3, #0]
 8004bae:	3314      	adds	r3, #20
 8004bb0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bb4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004bb8:	e853 3f00 	ldrex	r3, [r3]
 8004bbc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004bc0:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004bc4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004bc8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	3314      	adds	r3, #20
 8004bd2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004bd6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004bda:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bde:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004be2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004be6:	e841 2300 	strex	r3, r2, [r1]
 8004bea:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004bee:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	d1d9      	bne.n	8004baa <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bfa:	2b00      	cmp	r3, #0
 8004bfc:	d013      	beq.n	8004c26 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c02:	4a7e      	ldr	r2, [pc, #504]	@ (8004dfc <HAL_UART_IRQHandler+0x3e0>)
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fe f960 	bl	8002ed0 <HAL_DMA_Abort_IT>
 8004c10:	4603      	mov	r3, r0
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d016      	beq.n	8004c44 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c1a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004c1c:	687a      	ldr	r2, [r7, #4]
 8004c1e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c20:	4610      	mov	r0, r2
 8004c22:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c24:	e00e      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f000 f993 	bl	8004f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c2c:	e00a      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c2e:	6878      	ldr	r0, [r7, #4]
 8004c30:	f000 f98f 	bl	8004f52 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c34:	e006      	b.n	8004c44 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c36:	6878      	ldr	r0, [r7, #4]
 8004c38:	f000 f98b 	bl	8004f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	2200      	movs	r2, #0
 8004c40:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c42:	e175      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c44:	bf00      	nop
    return;
 8004c46:	e173      	b.n	8004f30 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	f040 814f 	bne.w	8004ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c56:	f003 0310 	and.w	r3, r3, #16
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	f000 8148 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004c64:	f003 0310 	and.w	r3, r3, #16
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	f000 8141 	beq.w	8004ef0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004c6e:	2300      	movs	r3, #0
 8004c70:	60bb      	str	r3, [r7, #8]
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	60bb      	str	r3, [r7, #8]
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	681b      	ldr	r3, [r3, #0]
 8004c7e:	685b      	ldr	r3, [r3, #4]
 8004c80:	60bb      	str	r3, [r7, #8]
 8004c82:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	695b      	ldr	r3, [r3, #20]
 8004c8a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	f000 80b6 	beq.w	8004e00 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	685b      	ldr	r3, [r3, #4]
 8004c9c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ca0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004ca4:	2b00      	cmp	r3, #0
 8004ca6:	f000 8145 	beq.w	8004f34 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cae:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cb2:	429a      	cmp	r2, r3
 8004cb4:	f080 813e 	bcs.w	8004f34 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cbe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004cc4:	699b      	ldr	r3, [r3, #24]
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	f000 8088 	beq.w	8004ddc <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	330c      	adds	r3, #12
 8004cd2:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cd6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004cda:	e853 3f00 	ldrex	r3, [r3]
 8004cde:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004ce2:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ce6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004cea:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	330c      	adds	r3, #12
 8004cf4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004cf8:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004cfc:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d00:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d04:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d10:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d1d9      	bne.n	8004ccc <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	3314      	adds	r3, #20
 8004d1e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d22:	e853 3f00 	ldrex	r3, [r3]
 8004d26:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d28:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d2a:	f023 0301 	bic.w	r3, r3, #1
 8004d2e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	3314      	adds	r3, #20
 8004d38:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d3c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d40:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d42:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d44:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d48:	e841 2300 	strex	r3, r2, [r1]
 8004d4c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d4e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d1e1      	bne.n	8004d18 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	3314      	adds	r3, #20
 8004d5a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d5c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004d5e:	e853 3f00 	ldrex	r3, [r3]
 8004d62:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004d64:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004d66:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004d6a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	3314      	adds	r3, #20
 8004d74:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004d78:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004d7a:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d7c:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004d7e:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004d80:	e841 2300 	strex	r3, r2, [r1]
 8004d84:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004d86:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d1e3      	bne.n	8004d54 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2220      	movs	r2, #32
 8004d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	2200      	movs	r2, #0
 8004d98:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	330c      	adds	r3, #12
 8004da0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004da4:	e853 3f00 	ldrex	r3, [r3]
 8004da8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004daa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004dac:	f023 0310 	bic.w	r3, r3, #16
 8004db0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	330c      	adds	r3, #12
 8004dba:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004dbe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004dc0:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004dc4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004dc6:	e841 2300 	strex	r3, r2, [r1]
 8004dca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004dcc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d1e3      	bne.n	8004d9a <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f7fe f83f 	bl	8002e5a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2202      	movs	r2, #2
 8004de0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	1ad3      	subs	r3, r2, r3
 8004dee:	b29b      	uxth	r3, r3
 8004df0:	4619      	mov	r1, r3
 8004df2:	6878      	ldr	r0, [r7, #4]
 8004df4:	f000 f8b6 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004df8:	e09c      	b.n	8004f34 <HAL_UART_IRQHandler+0x518>
 8004dfa:	bf00      	nop
 8004dfc:	08005163 	.word	0x08005163
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e08:	b29b      	uxth	r3, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e14:	b29b      	uxth	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 808e 	beq.w	8004f38 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e1c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	f000 8089 	beq.w	8004f38 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	330c      	adds	r3, #12
 8004e2c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	e853 3f00 	ldrex	r3, [r3]
 8004e34:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e36:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e38:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e3c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	330c      	adds	r3, #12
 8004e46:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e4a:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e4c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e4e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e50:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e52:	e841 2300 	strex	r3, r2, [r1]
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004e58:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d1e3      	bne.n	8004e26 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	3314      	adds	r3, #20
 8004e64:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e68:	e853 3f00 	ldrex	r3, [r3]
 8004e6c:	623b      	str	r3, [r7, #32]
   return(result);
 8004e6e:	6a3b      	ldr	r3, [r7, #32]
 8004e70:	f023 0301 	bic.w	r3, r3, #1
 8004e74:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	681b      	ldr	r3, [r3, #0]
 8004e7c:	3314      	adds	r3, #20
 8004e7e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004e82:	633a      	str	r2, [r7, #48]	@ 0x30
 8004e84:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e86:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004e88:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004e8a:	e841 2300 	strex	r3, r2, [r1]
 8004e8e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004e90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e92:	2b00      	cmp	r3, #0
 8004e94:	d1e3      	bne.n	8004e5e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	2220      	movs	r2, #32
 8004e9a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60fb      	str	r3, [r7, #12]
   return(result);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	330c      	adds	r3, #12
 8004ec4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ec8:	61fa      	str	r2, [r7, #28]
 8004eca:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ecc:	69b9      	ldr	r1, [r7, #24]
 8004ece:	69fa      	ldr	r2, [r7, #28]
 8004ed0:	e841 2300 	strex	r3, r2, [r1]
 8004ed4:	617b      	str	r3, [r7, #20]
   return(result);
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	d1e3      	bne.n	8004ea4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2202      	movs	r2, #2
 8004ee0:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004ee2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004ee6:	4619      	mov	r1, r3
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f000 f83b 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004eee:	e023      	b.n	8004f38 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004ef0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004ef4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d009      	beq.n	8004f10 <HAL_UART_IRQHandler+0x4f4>
 8004efc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f00:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d003      	beq.n	8004f10 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f08:	6878      	ldr	r0, [r7, #4]
 8004f0a:	f000 f93e 	bl	800518a <UART_Transmit_IT>
    return;
 8004f0e:	e014      	b.n	8004f3a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00e      	beq.n	8004f3a <HAL_UART_IRQHandler+0x51e>
 8004f1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d008      	beq.n	8004f3a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f28:	6878      	ldr	r0, [r7, #4]
 8004f2a:	f000 f97d 	bl	8005228 <UART_EndTransmit_IT>
    return;
 8004f2e:	e004      	b.n	8004f3a <HAL_UART_IRQHandler+0x51e>
    return;
 8004f30:	bf00      	nop
 8004f32:	e002      	b.n	8004f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f34:	bf00      	nop
 8004f36:	e000      	b.n	8004f3a <HAL_UART_IRQHandler+0x51e>
      return;
 8004f38:	bf00      	nop
  }
}
 8004f3a:	37e8      	adds	r7, #232	@ 0xe8
 8004f3c:	46bd      	mov	sp, r7
 8004f3e:	bd80      	pop	{r7, pc}

08004f40 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f40:	b480      	push	{r7}
 8004f42:	b083      	sub	sp, #12
 8004f44:	af00      	add	r7, sp, #0
 8004f46:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f48:	bf00      	nop
 8004f4a:	370c      	adds	r7, #12
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	bc80      	pop	{r7}
 8004f50:	4770      	bx	lr

08004f52 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f52:	b480      	push	{r7}
 8004f54:	b083      	sub	sp, #12
 8004f56:	af00      	add	r7, sp, #0
 8004f58:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004f5a:	bf00      	nop
 8004f5c:	370c      	adds	r7, #12
 8004f5e:	46bd      	mov	sp, r7
 8004f60:	bc80      	pop	{r7}
 8004f62:	4770      	bx	lr

08004f64 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004f64:	b480      	push	{r7}
 8004f66:	b083      	sub	sp, #12
 8004f68:	af00      	add	r7, sp, #0
 8004f6a:	6078      	str	r0, [r7, #4]
 8004f6c:	460b      	mov	r3, r1
 8004f6e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004f70:	bf00      	nop
 8004f72:	370c      	adds	r7, #12
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bc80      	pop	{r7}
 8004f78:	4770      	bx	lr

08004f7a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004f7a:	b580      	push	{r7, lr}
 8004f7c:	b086      	sub	sp, #24
 8004f7e:	af00      	add	r7, sp, #0
 8004f80:	60f8      	str	r0, [r7, #12]
 8004f82:	60b9      	str	r1, [r7, #8]
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	4613      	mov	r3, r2
 8004f88:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f8a:	e03b      	b.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f8c:	6a3b      	ldr	r3, [r7, #32]
 8004f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f92:	d037      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f94:	f7fd f9f2 	bl	800237c <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	6a3a      	ldr	r2, [r7, #32]
 8004fa0:	429a      	cmp	r2, r3
 8004fa2:	d302      	bcc.n	8004faa <UART_WaitOnFlagUntilTimeout+0x30>
 8004fa4:	6a3b      	ldr	r3, [r7, #32]
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d101      	bne.n	8004fae <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004faa:	2303      	movs	r3, #3
 8004fac:	e03a      	b.n	8005024 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	68db      	ldr	r3, [r3, #12]
 8004fb4:	f003 0304 	and.w	r3, r3, #4
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d023      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	2b80      	cmp	r3, #128	@ 0x80
 8004fc0:	d020      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	2b40      	cmp	r3, #64	@ 0x40
 8004fc6:	d01d      	beq.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f003 0308 	and.w	r3, r3, #8
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d116      	bne.n	8005004 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	617b      	str	r3, [r7, #20]
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	617b      	str	r3, [r7, #20]
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	685b      	ldr	r3, [r3, #4]
 8004fe8:	617b      	str	r3, [r7, #20]
 8004fea:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004fec:	68f8      	ldr	r0, [r7, #12]
 8004fee:	f000 f856 	bl	800509e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	2208      	movs	r2, #8
 8004ff6:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	2200      	movs	r2, #0
 8004ffc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005000:	2301      	movs	r3, #1
 8005002:	e00f      	b.n	8005024 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681a      	ldr	r2, [r3, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	4013      	ands	r3, r2
 800500e:	68ba      	ldr	r2, [r7, #8]
 8005010:	429a      	cmp	r2, r3
 8005012:	bf0c      	ite	eq
 8005014:	2301      	moveq	r3, #1
 8005016:	2300      	movne	r3, #0
 8005018:	b2db      	uxtb	r3, r3
 800501a:	461a      	mov	r2, r3
 800501c:	79fb      	ldrb	r3, [r7, #7]
 800501e:	429a      	cmp	r2, r3
 8005020:	d0b4      	beq.n	8004f8c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005022:	2300      	movs	r3, #0
}
 8005024:	4618      	mov	r0, r3
 8005026:	3718      	adds	r7, #24
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800502c:	b480      	push	{r7}
 800502e:	b085      	sub	sp, #20
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	4613      	mov	r3, r2
 8005038:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	88fa      	ldrh	r2, [r7, #6]
 8005044:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	88fa      	ldrh	r2, [r7, #6]
 800504a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800504c:	68fb      	ldr	r3, [r7, #12]
 800504e:	2200      	movs	r2, #0
 8005050:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2222      	movs	r2, #34	@ 0x22
 8005056:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	2b00      	cmp	r3, #0
 8005060:	d007      	beq.n	8005072 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	68da      	ldr	r2, [r3, #12]
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005070:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	681b      	ldr	r3, [r3, #0]
 8005076:	695a      	ldr	r2, [r3, #20]
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	f042 0201 	orr.w	r2, r2, #1
 8005080:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	68da      	ldr	r2, [r3, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f042 0220 	orr.w	r2, r2, #32
 8005090:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005092:	2300      	movs	r3, #0
}
 8005094:	4618      	mov	r0, r3
 8005096:	3714      	adds	r7, #20
 8005098:	46bd      	mov	sp, r7
 800509a:	bc80      	pop	{r7}
 800509c:	4770      	bx	lr

0800509e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800509e:	b480      	push	{r7}
 80050a0:	b095      	sub	sp, #84	@ 0x54
 80050a2:	af00      	add	r7, sp, #0
 80050a4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	330c      	adds	r3, #12
 80050ac:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050b0:	e853 3f00 	ldrex	r3, [r3]
 80050b4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80050b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80050bc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	330c      	adds	r3, #12
 80050c4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80050c6:	643a      	str	r2, [r7, #64]	@ 0x40
 80050c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050ca:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80050cc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80050ce:	e841 2300 	strex	r3, r2, [r1]
 80050d2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80050d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050d6:	2b00      	cmp	r3, #0
 80050d8:	d1e5      	bne.n	80050a6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	3314      	adds	r3, #20
 80050e0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050e2:	6a3b      	ldr	r3, [r7, #32]
 80050e4:	e853 3f00 	ldrex	r3, [r3]
 80050e8:	61fb      	str	r3, [r7, #28]
   return(result);
 80050ea:	69fb      	ldr	r3, [r7, #28]
 80050ec:	f023 0301 	bic.w	r3, r3, #1
 80050f0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	3314      	adds	r3, #20
 80050f8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80050fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80050fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050fe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005100:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005102:	e841 2300 	strex	r3, r2, [r1]
 8005106:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005108:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800510a:	2b00      	cmp	r3, #0
 800510c:	d1e5      	bne.n	80050da <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005112:	2b01      	cmp	r3, #1
 8005114:	d119      	bne.n	800514a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	330c      	adds	r3, #12
 800511c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	e853 3f00 	ldrex	r3, [r3]
 8005124:	60bb      	str	r3, [r7, #8]
   return(result);
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	f023 0310 	bic.w	r3, r3, #16
 800512c:	647b      	str	r3, [r7, #68]	@ 0x44
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	330c      	adds	r3, #12
 8005134:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005136:	61ba      	str	r2, [r7, #24]
 8005138:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800513a:	6979      	ldr	r1, [r7, #20]
 800513c:	69ba      	ldr	r2, [r7, #24]
 800513e:	e841 2300 	strex	r3, r2, [r1]
 8005142:	613b      	str	r3, [r7, #16]
   return(result);
 8005144:	693b      	ldr	r3, [r7, #16]
 8005146:	2b00      	cmp	r3, #0
 8005148:	d1e5      	bne.n	8005116 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2220      	movs	r2, #32
 800514e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	2200      	movs	r2, #0
 8005156:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005158:	bf00      	nop
 800515a:	3754      	adds	r7, #84	@ 0x54
 800515c:	46bd      	mov	sp, r7
 800515e:	bc80      	pop	{r7}
 8005160:	4770      	bx	lr

08005162 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	b084      	sub	sp, #16
 8005166:	af00      	add	r7, sp, #0
 8005168:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800516a:	687b      	ldr	r3, [r7, #4]
 800516c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800516e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	2200      	movs	r2, #0
 8005174:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	2200      	movs	r2, #0
 800517a:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800517c:	68f8      	ldr	r0, [r7, #12]
 800517e:	f7ff fee8 	bl	8004f52 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005182:	bf00      	nop
 8005184:	3710      	adds	r7, #16
 8005186:	46bd      	mov	sp, r7
 8005188:	bd80      	pop	{r7, pc}

0800518a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800518a:	b480      	push	{r7}
 800518c:	b085      	sub	sp, #20
 800518e:	af00      	add	r7, sp, #0
 8005190:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005198:	b2db      	uxtb	r3, r3
 800519a:	2b21      	cmp	r3, #33	@ 0x21
 800519c:	d13e      	bne.n	800521c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	689b      	ldr	r3, [r3, #8]
 80051a2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051a6:	d114      	bne.n	80051d2 <UART_Transmit_IT+0x48>
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d110      	bne.n	80051d2 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	881b      	ldrh	r3, [r3, #0]
 80051ba:	461a      	mov	r2, r3
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80051c4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a1b      	ldr	r3, [r3, #32]
 80051ca:	1c9a      	adds	r2, r3, #2
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	621a      	str	r2, [r3, #32]
 80051d0:	e008      	b.n	80051e4 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	6a1b      	ldr	r3, [r3, #32]
 80051d6:	1c59      	adds	r1, r3, #1
 80051d8:	687a      	ldr	r2, [r7, #4]
 80051da:	6211      	str	r1, [r2, #32]
 80051dc:	781a      	ldrb	r2, [r3, #0]
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80051e8:	b29b      	uxth	r3, r3
 80051ea:	3b01      	subs	r3, #1
 80051ec:	b29b      	uxth	r3, r3
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	4619      	mov	r1, r3
 80051f2:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d10f      	bne.n	8005218 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	68da      	ldr	r2, [r3, #12]
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005206:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	68da      	ldr	r2, [r3, #12]
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005216:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005218:	2300      	movs	r3, #0
 800521a:	e000      	b.n	800521e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800521c:	2302      	movs	r3, #2
  }
}
 800521e:	4618      	mov	r0, r3
 8005220:	3714      	adds	r7, #20
 8005222:	46bd      	mov	sp, r7
 8005224:	bc80      	pop	{r7}
 8005226:	4770      	bx	lr

08005228 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005228:	b580      	push	{r7, lr}
 800522a:	b082      	sub	sp, #8
 800522c:	af00      	add	r7, sp, #0
 800522e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68da      	ldr	r2, [r3, #12]
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800523e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2220      	movs	r2, #32
 8005244:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005248:	6878      	ldr	r0, [r7, #4]
 800524a:	f7ff fe79 	bl	8004f40 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800524e:	2300      	movs	r3, #0
}
 8005250:	4618      	mov	r0, r3
 8005252:	3708      	adds	r7, #8
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005258:	b580      	push	{r7, lr}
 800525a:	b08c      	sub	sp, #48	@ 0x30
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005266:	b2db      	uxtb	r3, r3
 8005268:	2b22      	cmp	r3, #34	@ 0x22
 800526a:	f040 80ae 	bne.w	80053ca <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	689b      	ldr	r3, [r3, #8]
 8005272:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005276:	d117      	bne.n	80052a8 <UART_Receive_IT+0x50>
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	691b      	ldr	r3, [r3, #16]
 800527c:	2b00      	cmp	r3, #0
 800527e:	d113      	bne.n	80052a8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005280:	2300      	movs	r3, #0
 8005282:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005288:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	685b      	ldr	r3, [r3, #4]
 8005290:	b29b      	uxth	r3, r3
 8005292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005296:	b29a      	uxth	r2, r3
 8005298:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800529a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052a0:	1c9a      	adds	r2, r3, #2
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	629a      	str	r2, [r3, #40]	@ 0x28
 80052a6:	e026      	b.n	80052f6 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80052ae:	2300      	movs	r3, #0
 80052b0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ba:	d007      	beq.n	80052cc <UART_Receive_IT+0x74>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d10a      	bne.n	80052da <UART_Receive_IT+0x82>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	691b      	ldr	r3, [r3, #16]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d106      	bne.n	80052da <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	685b      	ldr	r3, [r3, #4]
 80052d2:	b2da      	uxtb	r2, r3
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	701a      	strb	r2, [r3, #0]
 80052d8:	e008      	b.n	80052ec <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	b2db      	uxtb	r3, r3
 80052e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80052e6:	b2da      	uxtb	r2, r3
 80052e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ea:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f0:	1c5a      	adds	r2, r3, #1
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80052fa:	b29b      	uxth	r3, r3
 80052fc:	3b01      	subs	r3, #1
 80052fe:	b29b      	uxth	r3, r3
 8005300:	687a      	ldr	r2, [r7, #4]
 8005302:	4619      	mov	r1, r3
 8005304:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005306:	2b00      	cmp	r3, #0
 8005308:	d15d      	bne.n	80053c6 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	68da      	ldr	r2, [r3, #12]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f022 0220 	bic.w	r2, r2, #32
 8005318:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	681b      	ldr	r3, [r3, #0]
 800531e:	68da      	ldr	r2, [r3, #12]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005328:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	695a      	ldr	r2, [r3, #20]
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	681b      	ldr	r3, [r3, #0]
 8005334:	f022 0201 	bic.w	r2, r2, #1
 8005338:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	2220      	movs	r2, #32
 800533e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800534c:	2b01      	cmp	r3, #1
 800534e:	d135      	bne.n	80053bc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	330c      	adds	r3, #12
 800535c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800535e:	697b      	ldr	r3, [r7, #20]
 8005360:	e853 3f00 	ldrex	r3, [r3]
 8005364:	613b      	str	r3, [r7, #16]
   return(result);
 8005366:	693b      	ldr	r3, [r7, #16]
 8005368:	f023 0310 	bic.w	r3, r3, #16
 800536c:	627b      	str	r3, [r7, #36]	@ 0x24
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	330c      	adds	r3, #12
 8005374:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005376:	623a      	str	r2, [r7, #32]
 8005378:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800537a:	69f9      	ldr	r1, [r7, #28]
 800537c:	6a3a      	ldr	r2, [r7, #32]
 800537e:	e841 2300 	strex	r3, r2, [r1]
 8005382:	61bb      	str	r3, [r7, #24]
   return(result);
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b00      	cmp	r3, #0
 8005388:	d1e5      	bne.n	8005356 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f003 0310 	and.w	r3, r3, #16
 8005394:	2b10      	cmp	r3, #16
 8005396:	d10a      	bne.n	80053ae <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005398:	2300      	movs	r3, #0
 800539a:	60fb      	str	r3, [r7, #12]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	60fb      	str	r3, [r7, #12]
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	685b      	ldr	r3, [r3, #4]
 80053aa:	60fb      	str	r3, [r7, #12]
 80053ac:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80053b2:	4619      	mov	r1, r3
 80053b4:	6878      	ldr	r0, [r7, #4]
 80053b6:	f7ff fdd5 	bl	8004f64 <HAL_UARTEx_RxEventCallback>
 80053ba:	e002      	b.n	80053c2 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f7fc fe77 	bl	80020b0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80053c2:	2300      	movs	r3, #0
 80053c4:	e002      	b.n	80053cc <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80053c6:	2300      	movs	r3, #0
 80053c8:	e000      	b.n	80053cc <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80053ca:	2302      	movs	r3, #2
  }
}
 80053cc:	4618      	mov	r0, r3
 80053ce:	3730      	adds	r7, #48	@ 0x30
 80053d0:	46bd      	mov	sp, r7
 80053d2:	bd80      	pop	{r7, pc}

080053d4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b084      	sub	sp, #16
 80053d8:	af00      	add	r7, sp, #0
 80053da:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	691b      	ldr	r3, [r3, #16]
 80053e2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68da      	ldr	r2, [r3, #12]
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	430a      	orrs	r2, r1
 80053f0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	689a      	ldr	r2, [r3, #8]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	691b      	ldr	r3, [r3, #16]
 80053fa:	431a      	orrs	r2, r3
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	695b      	ldr	r3, [r3, #20]
 8005400:	4313      	orrs	r3, r2
 8005402:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	68db      	ldr	r3, [r3, #12]
 800540a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800540e:	f023 030c 	bic.w	r3, r3, #12
 8005412:	687a      	ldr	r2, [r7, #4]
 8005414:	6812      	ldr	r2, [r2, #0]
 8005416:	68b9      	ldr	r1, [r7, #8]
 8005418:	430b      	orrs	r3, r1
 800541a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	695b      	ldr	r3, [r3, #20]
 8005422:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	699a      	ldr	r2, [r3, #24]
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	430a      	orrs	r2, r1
 8005430:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	4a2c      	ldr	r2, [pc, #176]	@ (80054e8 <UART_SetConfig+0x114>)
 8005438:	4293      	cmp	r3, r2
 800543a:	d103      	bne.n	8005444 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800543c:	f7fe fb5e 	bl	8003afc <HAL_RCC_GetPCLK2Freq>
 8005440:	60f8      	str	r0, [r7, #12]
 8005442:	e002      	b.n	800544a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005444:	f7fe fb46 	bl	8003ad4 <HAL_RCC_GetPCLK1Freq>
 8005448:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800544a:	68fa      	ldr	r2, [r7, #12]
 800544c:	4613      	mov	r3, r2
 800544e:	009b      	lsls	r3, r3, #2
 8005450:	4413      	add	r3, r2
 8005452:	009a      	lsls	r2, r3, #2
 8005454:	441a      	add	r2, r3
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	685b      	ldr	r3, [r3, #4]
 800545a:	009b      	lsls	r3, r3, #2
 800545c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005460:	4a22      	ldr	r2, [pc, #136]	@ (80054ec <UART_SetConfig+0x118>)
 8005462:	fba2 2303 	umull	r2, r3, r2, r3
 8005466:	095b      	lsrs	r3, r3, #5
 8005468:	0119      	lsls	r1, r3, #4
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	4613      	mov	r3, r2
 800546e:	009b      	lsls	r3, r3, #2
 8005470:	4413      	add	r3, r2
 8005472:	009a      	lsls	r2, r3, #2
 8005474:	441a      	add	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	685b      	ldr	r3, [r3, #4]
 800547a:	009b      	lsls	r3, r3, #2
 800547c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005480:	4b1a      	ldr	r3, [pc, #104]	@ (80054ec <UART_SetConfig+0x118>)
 8005482:	fba3 0302 	umull	r0, r3, r3, r2
 8005486:	095b      	lsrs	r3, r3, #5
 8005488:	2064      	movs	r0, #100	@ 0x64
 800548a:	fb00 f303 	mul.w	r3, r0, r3
 800548e:	1ad3      	subs	r3, r2, r3
 8005490:	011b      	lsls	r3, r3, #4
 8005492:	3332      	adds	r3, #50	@ 0x32
 8005494:	4a15      	ldr	r2, [pc, #84]	@ (80054ec <UART_SetConfig+0x118>)
 8005496:	fba2 2303 	umull	r2, r3, r2, r3
 800549a:	095b      	lsrs	r3, r3, #5
 800549c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80054a0:	4419      	add	r1, r3
 80054a2:	68fa      	ldr	r2, [r7, #12]
 80054a4:	4613      	mov	r3, r2
 80054a6:	009b      	lsls	r3, r3, #2
 80054a8:	4413      	add	r3, r2
 80054aa:	009a      	lsls	r2, r3, #2
 80054ac:	441a      	add	r2, r3
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	fbb2 f2f3 	udiv	r2, r2, r3
 80054b8:	4b0c      	ldr	r3, [pc, #48]	@ (80054ec <UART_SetConfig+0x118>)
 80054ba:	fba3 0302 	umull	r0, r3, r3, r2
 80054be:	095b      	lsrs	r3, r3, #5
 80054c0:	2064      	movs	r0, #100	@ 0x64
 80054c2:	fb00 f303 	mul.w	r3, r0, r3
 80054c6:	1ad3      	subs	r3, r2, r3
 80054c8:	011b      	lsls	r3, r3, #4
 80054ca:	3332      	adds	r3, #50	@ 0x32
 80054cc:	4a07      	ldr	r2, [pc, #28]	@ (80054ec <UART_SetConfig+0x118>)
 80054ce:	fba2 2303 	umull	r2, r3, r2, r3
 80054d2:	095b      	lsrs	r3, r3, #5
 80054d4:	f003 020f 	and.w	r2, r3, #15
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	440a      	add	r2, r1
 80054de:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80054e0:	bf00      	nop
 80054e2:	3710      	adds	r7, #16
 80054e4:	46bd      	mov	sp, r7
 80054e6:	bd80      	pop	{r7, pc}
 80054e8:	40013800 	.word	0x40013800
 80054ec:	51eb851f 	.word	0x51eb851f

080054f0 <__NVIC_SetPriority>:
{
 80054f0:	b480      	push	{r7}
 80054f2:	b083      	sub	sp, #12
 80054f4:	af00      	add	r7, sp, #0
 80054f6:	4603      	mov	r3, r0
 80054f8:	6039      	str	r1, [r7, #0]
 80054fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80054fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005500:	2b00      	cmp	r3, #0
 8005502:	db0a      	blt.n	800551a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	b2da      	uxtb	r2, r3
 8005508:	490c      	ldr	r1, [pc, #48]	@ (800553c <__NVIC_SetPriority+0x4c>)
 800550a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800550e:	0112      	lsls	r2, r2, #4
 8005510:	b2d2      	uxtb	r2, r2
 8005512:	440b      	add	r3, r1
 8005514:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005518:	e00a      	b.n	8005530 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800551a:	683b      	ldr	r3, [r7, #0]
 800551c:	b2da      	uxtb	r2, r3
 800551e:	4908      	ldr	r1, [pc, #32]	@ (8005540 <__NVIC_SetPriority+0x50>)
 8005520:	79fb      	ldrb	r3, [r7, #7]
 8005522:	f003 030f 	and.w	r3, r3, #15
 8005526:	3b04      	subs	r3, #4
 8005528:	0112      	lsls	r2, r2, #4
 800552a:	b2d2      	uxtb	r2, r2
 800552c:	440b      	add	r3, r1
 800552e:	761a      	strb	r2, [r3, #24]
}
 8005530:	bf00      	nop
 8005532:	370c      	adds	r7, #12
 8005534:	46bd      	mov	sp, r7
 8005536:	bc80      	pop	{r7}
 8005538:	4770      	bx	lr
 800553a:	bf00      	nop
 800553c:	e000e100 	.word	0xe000e100
 8005540:	e000ed00 	.word	0xe000ed00

08005544 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005544:	b580      	push	{r7, lr}
 8005546:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005548:	4b05      	ldr	r3, [pc, #20]	@ (8005560 <SysTick_Handler+0x1c>)
 800554a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800554c:	f002 f818 	bl	8007580 <xTaskGetSchedulerState>
 8005550:	4603      	mov	r3, r0
 8005552:	2b01      	cmp	r3, #1
 8005554:	d001      	beq.n	800555a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005556:	f002 ffd7 	bl	8008508 <xPortSysTickHandler>
  }
}
 800555a:	bf00      	nop
 800555c:	bd80      	pop	{r7, pc}
 800555e:	bf00      	nop
 8005560:	e000e010 	.word	0xe000e010

08005564 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005564:	b580      	push	{r7, lr}
 8005566:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005568:	2100      	movs	r1, #0
 800556a:	f06f 0004 	mvn.w	r0, #4
 800556e:	f7ff ffbf 	bl	80054f0 <__NVIC_SetPriority>
#endif
}
 8005572:	bf00      	nop
 8005574:	bd80      	pop	{r7, pc}
	...

08005578 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005578:	b480      	push	{r7}
 800557a:	b083      	sub	sp, #12
 800557c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800557e:	f3ef 8305 	mrs	r3, IPSR
 8005582:	603b      	str	r3, [r7, #0]
  return(result);
 8005584:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005586:	2b00      	cmp	r3, #0
 8005588:	d003      	beq.n	8005592 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800558a:	f06f 0305 	mvn.w	r3, #5
 800558e:	607b      	str	r3, [r7, #4]
 8005590:	e00c      	b.n	80055ac <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8005592:	4b09      	ldr	r3, [pc, #36]	@ (80055b8 <osKernelInitialize+0x40>)
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d105      	bne.n	80055a6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800559a:	4b07      	ldr	r3, [pc, #28]	@ (80055b8 <osKernelInitialize+0x40>)
 800559c:	2201      	movs	r2, #1
 800559e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80055a0:	2300      	movs	r3, #0
 80055a2:	607b      	str	r3, [r7, #4]
 80055a4:	e002      	b.n	80055ac <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80055a6:	f04f 33ff 	mov.w	r3, #4294967295
 80055aa:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055ac:	687b      	ldr	r3, [r7, #4]
}
 80055ae:	4618      	mov	r0, r3
 80055b0:	370c      	adds	r7, #12
 80055b2:	46bd      	mov	sp, r7
 80055b4:	bc80      	pop	{r7}
 80055b6:	4770      	bx	lr
 80055b8:	20000298 	.word	0x20000298

080055bc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80055bc:	b580      	push	{r7, lr}
 80055be:	b082      	sub	sp, #8
 80055c0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80055c2:	f3ef 8305 	mrs	r3, IPSR
 80055c6:	603b      	str	r3, [r7, #0]
  return(result);
 80055c8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80055ce:	f06f 0305 	mvn.w	r3, #5
 80055d2:	607b      	str	r3, [r7, #4]
 80055d4:	e010      	b.n	80055f8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80055d6:	4b0b      	ldr	r3, [pc, #44]	@ (8005604 <osKernelStart+0x48>)
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d109      	bne.n	80055f2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80055de:	f7ff ffc1 	bl	8005564 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80055e2:	4b08      	ldr	r3, [pc, #32]	@ (8005604 <osKernelStart+0x48>)
 80055e4:	2202      	movs	r2, #2
 80055e6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80055e8:	f001 fb70 	bl	8006ccc <vTaskStartScheduler>
      stat = osOK;
 80055ec:	2300      	movs	r3, #0
 80055ee:	607b      	str	r3, [r7, #4]
 80055f0:	e002      	b.n	80055f8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80055f2:	f04f 33ff 	mov.w	r3, #4294967295
 80055f6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80055f8:	687b      	ldr	r3, [r7, #4]
}
 80055fa:	4618      	mov	r0, r3
 80055fc:	3708      	adds	r7, #8
 80055fe:	46bd      	mov	sp, r7
 8005600:	bd80      	pop	{r7, pc}
 8005602:	bf00      	nop
 8005604:	20000298 	.word	0x20000298

08005608 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005608:	b580      	push	{r7, lr}
 800560a:	b08e      	sub	sp, #56	@ 0x38
 800560c:	af04      	add	r7, sp, #16
 800560e:	60f8      	str	r0, [r7, #12]
 8005610:	60b9      	str	r1, [r7, #8]
 8005612:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005618:	f3ef 8305 	mrs	r3, IPSR
 800561c:	617b      	str	r3, [r7, #20]
  return(result);
 800561e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005620:	2b00      	cmp	r3, #0
 8005622:	d17e      	bne.n	8005722 <osThreadNew+0x11a>
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	2b00      	cmp	r3, #0
 8005628:	d07b      	beq.n	8005722 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800562a:	2380      	movs	r3, #128	@ 0x80
 800562c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800562e:	2318      	movs	r3, #24
 8005630:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005632:	2300      	movs	r3, #0
 8005634:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005636:	f04f 33ff 	mov.w	r3, #4294967295
 800563a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d045      	beq.n	80056ce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	2b00      	cmp	r3, #0
 8005648:	d002      	beq.n	8005650 <osThreadNew+0x48>
        name = attr->name;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	699b      	ldr	r3, [r3, #24]
 8005654:	2b00      	cmp	r3, #0
 8005656:	d002      	beq.n	800565e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	699b      	ldr	r3, [r3, #24]
 800565c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800565e:	69fb      	ldr	r3, [r7, #28]
 8005660:	2b00      	cmp	r3, #0
 8005662:	d008      	beq.n	8005676 <osThreadNew+0x6e>
 8005664:	69fb      	ldr	r3, [r7, #28]
 8005666:	2b38      	cmp	r3, #56	@ 0x38
 8005668:	d805      	bhi.n	8005676 <osThreadNew+0x6e>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	685b      	ldr	r3, [r3, #4]
 800566e:	f003 0301 	and.w	r3, r3, #1
 8005672:	2b00      	cmp	r3, #0
 8005674:	d001      	beq.n	800567a <osThreadNew+0x72>
        return (NULL);
 8005676:	2300      	movs	r3, #0
 8005678:	e054      	b.n	8005724 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	695b      	ldr	r3, [r3, #20]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	695b      	ldr	r3, [r3, #20]
 8005686:	089b      	lsrs	r3, r3, #2
 8005688:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	689b      	ldr	r3, [r3, #8]
 800568e:	2b00      	cmp	r3, #0
 8005690:	d00e      	beq.n	80056b0 <osThreadNew+0xa8>
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	68db      	ldr	r3, [r3, #12]
 8005696:	2b5b      	cmp	r3, #91	@ 0x5b
 8005698:	d90a      	bls.n	80056b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d006      	beq.n	80056b0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	695b      	ldr	r3, [r3, #20]
 80056a6:	2b00      	cmp	r3, #0
 80056a8:	d002      	beq.n	80056b0 <osThreadNew+0xa8>
        mem = 1;
 80056aa:	2301      	movs	r3, #1
 80056ac:	61bb      	str	r3, [r7, #24]
 80056ae:	e010      	b.n	80056d2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d10c      	bne.n	80056d2 <osThreadNew+0xca>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	68db      	ldr	r3, [r3, #12]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d108      	bne.n	80056d2 <osThreadNew+0xca>
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	691b      	ldr	r3, [r3, #16]
 80056c4:	2b00      	cmp	r3, #0
 80056c6:	d104      	bne.n	80056d2 <osThreadNew+0xca>
          mem = 0;
 80056c8:	2300      	movs	r3, #0
 80056ca:	61bb      	str	r3, [r7, #24]
 80056cc:	e001      	b.n	80056d2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80056ce:	2300      	movs	r3, #0
 80056d0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80056d2:	69bb      	ldr	r3, [r7, #24]
 80056d4:	2b01      	cmp	r3, #1
 80056d6:	d110      	bne.n	80056fa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80056dc:	687a      	ldr	r2, [r7, #4]
 80056de:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80056e0:	9202      	str	r2, [sp, #8]
 80056e2:	9301      	str	r3, [sp, #4]
 80056e4:	69fb      	ldr	r3, [r7, #28]
 80056e6:	9300      	str	r3, [sp, #0]
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	6a3a      	ldr	r2, [r7, #32]
 80056ec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80056ee:	68f8      	ldr	r0, [r7, #12]
 80056f0:	f001 f946 	bl	8006980 <xTaskCreateStatic>
 80056f4:	4603      	mov	r3, r0
 80056f6:	613b      	str	r3, [r7, #16]
 80056f8:	e013      	b.n	8005722 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80056fa:	69bb      	ldr	r3, [r7, #24]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d110      	bne.n	8005722 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005700:	6a3b      	ldr	r3, [r7, #32]
 8005702:	b29a      	uxth	r2, r3
 8005704:	f107 0310 	add.w	r3, r7, #16
 8005708:	9301      	str	r3, [sp, #4]
 800570a:	69fb      	ldr	r3, [r7, #28]
 800570c:	9300      	str	r3, [sp, #0]
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005712:	68f8      	ldr	r0, [r7, #12]
 8005714:	f001 f994 	bl	8006a40 <xTaskCreate>
 8005718:	4603      	mov	r3, r0
 800571a:	2b01      	cmp	r3, #1
 800571c:	d001      	beq.n	8005722 <osThreadNew+0x11a>
            hTask = NULL;
 800571e:	2300      	movs	r3, #0
 8005720:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005722:	693b      	ldr	r3, [r7, #16]
}
 8005724:	4618      	mov	r0, r3
 8005726:	3728      	adds	r7, #40	@ 0x28
 8005728:	46bd      	mov	sp, r7
 800572a:	bd80      	pop	{r7, pc}

0800572c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800572c:	b480      	push	{r7}
 800572e:	b085      	sub	sp, #20
 8005730:	af00      	add	r7, sp, #0
 8005732:	60f8      	str	r0, [r7, #12]
 8005734:	60b9      	str	r1, [r7, #8]
 8005736:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	4a06      	ldr	r2, [pc, #24]	@ (8005754 <vApplicationGetIdleTaskMemory+0x28>)
 800573c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800573e:	68bb      	ldr	r3, [r7, #8]
 8005740:	4a05      	ldr	r2, [pc, #20]	@ (8005758 <vApplicationGetIdleTaskMemory+0x2c>)
 8005742:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	2280      	movs	r2, #128	@ 0x80
 8005748:	601a      	str	r2, [r3, #0]
}
 800574a:	bf00      	nop
 800574c:	3714      	adds	r7, #20
 800574e:	46bd      	mov	sp, r7
 8005750:	bc80      	pop	{r7}
 8005752:	4770      	bx	lr
 8005754:	2000029c 	.word	0x2000029c
 8005758:	200002f8 	.word	0x200002f8

0800575c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800575c:	b480      	push	{r7}
 800575e:	b085      	sub	sp, #20
 8005760:	af00      	add	r7, sp, #0
 8005762:	60f8      	str	r0, [r7, #12]
 8005764:	60b9      	str	r1, [r7, #8]
 8005766:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	4a07      	ldr	r2, [pc, #28]	@ (8005788 <vApplicationGetTimerTaskMemory+0x2c>)
 800576c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	4a06      	ldr	r2, [pc, #24]	@ (800578c <vApplicationGetTimerTaskMemory+0x30>)
 8005772:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3714      	adds	r7, #20
 8005780:	46bd      	mov	sp, r7
 8005782:	bc80      	pop	{r7}
 8005784:	4770      	bx	lr
 8005786:	bf00      	nop
 8005788:	200004f8 	.word	0x200004f8
 800578c:	20000554 	.word	0x20000554

08005790 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005790:	b480      	push	{r7}
 8005792:	b083      	sub	sp, #12
 8005794:	af00      	add	r7, sp, #0
 8005796:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f103 0208 	add.w	r2, r3, #8
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f04f 32ff 	mov.w	r2, #4294967295
 80057a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	f103 0208 	add.w	r2, r3, #8
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f103 0208 	add.w	r2, r3, #8
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2200      	movs	r2, #0
 80057c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80057c4:	bf00      	nop
 80057c6:	370c      	adds	r7, #12
 80057c8:	46bd      	mov	sp, r7
 80057ca:	bc80      	pop	{r7}
 80057cc:	4770      	bx	lr

080057ce <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80057ce:	b480      	push	{r7}
 80057d0:	b083      	sub	sp, #12
 80057d2:	af00      	add	r7, sp, #0
 80057d4:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	2200      	movs	r2, #0
 80057da:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80057dc:	bf00      	nop
 80057de:	370c      	adds	r7, #12
 80057e0:	46bd      	mov	sp, r7
 80057e2:	bc80      	pop	{r7}
 80057e4:	4770      	bx	lr

080057e6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057e6:	b480      	push	{r7}
 80057e8:	b085      	sub	sp, #20
 80057ea:	af00      	add	r7, sp, #0
 80057ec:	6078      	str	r0, [r7, #4]
 80057ee:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	685b      	ldr	r3, [r3, #4]
 80057f4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057f6:	683b      	ldr	r3, [r7, #0]
 80057f8:	68fa      	ldr	r2, [r7, #12]
 80057fa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689a      	ldr	r2, [r3, #8]
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005804:	68fb      	ldr	r3, [r7, #12]
 8005806:	689b      	ldr	r3, [r3, #8]
 8005808:	683a      	ldr	r2, [r7, #0]
 800580a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	683a      	ldr	r2, [r7, #0]
 8005810:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005812:	683b      	ldr	r3, [r7, #0]
 8005814:	687a      	ldr	r2, [r7, #4]
 8005816:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	1c5a      	adds	r2, r3, #1
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	601a      	str	r2, [r3, #0]
}
 8005822:	bf00      	nop
 8005824:	3714      	adds	r7, #20
 8005826:	46bd      	mov	sp, r7
 8005828:	bc80      	pop	{r7}
 800582a:	4770      	bx	lr

0800582c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800582c:	b480      	push	{r7}
 800582e:	b085      	sub	sp, #20
 8005830:	af00      	add	r7, sp, #0
 8005832:	6078      	str	r0, [r7, #4]
 8005834:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800583c:	68bb      	ldr	r3, [r7, #8]
 800583e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005842:	d103      	bne.n	800584c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	691b      	ldr	r3, [r3, #16]
 8005848:	60fb      	str	r3, [r7, #12]
 800584a:	e00c      	b.n	8005866 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	3308      	adds	r3, #8
 8005850:	60fb      	str	r3, [r7, #12]
 8005852:	e002      	b.n	800585a <vListInsert+0x2e>
 8005854:	68fb      	ldr	r3, [r7, #12]
 8005856:	685b      	ldr	r3, [r3, #4]
 8005858:	60fb      	str	r3, [r7, #12]
 800585a:	68fb      	ldr	r3, [r7, #12]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	681b      	ldr	r3, [r3, #0]
 8005860:	68ba      	ldr	r2, [r7, #8]
 8005862:	429a      	cmp	r2, r3
 8005864:	d2f6      	bcs.n	8005854 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	685a      	ldr	r2, [r3, #4]
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	683a      	ldr	r2, [r7, #0]
 8005874:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005876:	683b      	ldr	r3, [r7, #0]
 8005878:	68fa      	ldr	r2, [r7, #12]
 800587a:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	683a      	ldr	r2, [r7, #0]
 8005880:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005882:	683b      	ldr	r3, [r7, #0]
 8005884:	687a      	ldr	r2, [r7, #4]
 8005886:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	1c5a      	adds	r2, r3, #1
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	601a      	str	r2, [r3, #0]
}
 8005892:	bf00      	nop
 8005894:	3714      	adds	r7, #20
 8005896:	46bd      	mov	sp, r7
 8005898:	bc80      	pop	{r7}
 800589a:	4770      	bx	lr

0800589c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	691b      	ldr	r3, [r3, #16]
 80058a8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	685b      	ldr	r3, [r3, #4]
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	6892      	ldr	r2, [r2, #8]
 80058b2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	687a      	ldr	r2, [r7, #4]
 80058ba:	6852      	ldr	r2, [r2, #4]
 80058bc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80058be:	68fb      	ldr	r3, [r7, #12]
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	687a      	ldr	r2, [r7, #4]
 80058c4:	429a      	cmp	r2, r3
 80058c6:	d103      	bne.n	80058d0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	689a      	ldr	r2, [r3, #8]
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	2200      	movs	r2, #0
 80058d4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	1e5a      	subs	r2, r3, #1
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	681b      	ldr	r3, [r3, #0]
}
 80058e4:	4618      	mov	r0, r3
 80058e6:	3714      	adds	r7, #20
 80058e8:	46bd      	mov	sp, r7
 80058ea:	bc80      	pop	{r7}
 80058ec:	4770      	bx	lr
	...

080058f0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	6078      	str	r0, [r7, #4]
 80058f8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058fe:	68fb      	ldr	r3, [r7, #12]
 8005900:	2b00      	cmp	r3, #0
 8005902:	d10b      	bne.n	800591c <xQueueGenericReset+0x2c>
	__asm volatile
 8005904:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005908:	f383 8811 	msr	BASEPRI, r3
 800590c:	f3bf 8f6f 	isb	sy
 8005910:	f3bf 8f4f 	dsb	sy
 8005914:	60bb      	str	r3, [r7, #8]
}
 8005916:	bf00      	nop
 8005918:	bf00      	nop
 800591a:	e7fd      	b.n	8005918 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800591c:	f002 fd76 	bl	800840c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005920:	68fb      	ldr	r3, [r7, #12]
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005928:	68f9      	ldr	r1, [r7, #12]
 800592a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800592c:	fb01 f303 	mul.w	r3, r1, r3
 8005930:	441a      	add	r2, r3
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005936:	68fb      	ldr	r3, [r7, #12]
 8005938:	2200      	movs	r2, #0
 800593a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	681a      	ldr	r2, [r3, #0]
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800594c:	3b01      	subs	r3, #1
 800594e:	68f9      	ldr	r1, [r7, #12]
 8005950:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005952:	fb01 f303 	mul.w	r3, r1, r3
 8005956:	441a      	add	r2, r3
 8005958:	68fb      	ldr	r3, [r7, #12]
 800595a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	22ff      	movs	r2, #255	@ 0xff
 8005960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	22ff      	movs	r2, #255	@ 0xff
 8005968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800596c:	683b      	ldr	r3, [r7, #0]
 800596e:	2b00      	cmp	r3, #0
 8005970:	d114      	bne.n	800599c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d01a      	beq.n	80059b0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	3310      	adds	r3, #16
 800597e:	4618      	mov	r0, r3
 8005980:	f001 fc30 	bl	80071e4 <xTaskRemoveFromEventList>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d012      	beq.n	80059b0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800598a:	4b0d      	ldr	r3, [pc, #52]	@ (80059c0 <xQueueGenericReset+0xd0>)
 800598c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005990:	601a      	str	r2, [r3, #0]
 8005992:	f3bf 8f4f 	dsb	sy
 8005996:	f3bf 8f6f 	isb	sy
 800599a:	e009      	b.n	80059b0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	3310      	adds	r3, #16
 80059a0:	4618      	mov	r0, r3
 80059a2:	f7ff fef5 	bl	8005790 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	3324      	adds	r3, #36	@ 0x24
 80059aa:	4618      	mov	r0, r3
 80059ac:	f7ff fef0 	bl	8005790 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80059b0:	f002 fd5c 	bl	800846c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80059b4:	2301      	movs	r3, #1
}
 80059b6:	4618      	mov	r0, r3
 80059b8:	3710      	adds	r7, #16
 80059ba:	46bd      	mov	sp, r7
 80059bc:	bd80      	pop	{r7, pc}
 80059be:	bf00      	nop
 80059c0:	e000ed04 	.word	0xe000ed04

080059c4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	@ 0x38
 80059c8:	af02      	add	r7, sp, #8
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d10b      	bne.n	8005a0e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059fa:	f383 8811 	msr	BASEPRI, r3
 80059fe:	f3bf 8f6f 	isb	sy
 8005a02:	f3bf 8f4f 	dsb	sy
 8005a06:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a08:	bf00      	nop
 8005a0a:	bf00      	nop
 8005a0c:	e7fd      	b.n	8005a0a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d002      	beq.n	8005a1a <xQueueGenericCreateStatic+0x56>
 8005a14:	68bb      	ldr	r3, [r7, #8]
 8005a16:	2b00      	cmp	r3, #0
 8005a18:	d001      	beq.n	8005a1e <xQueueGenericCreateStatic+0x5a>
 8005a1a:	2301      	movs	r3, #1
 8005a1c:	e000      	b.n	8005a20 <xQueueGenericCreateStatic+0x5c>
 8005a1e:	2300      	movs	r3, #0
 8005a20:	2b00      	cmp	r3, #0
 8005a22:	d10b      	bne.n	8005a3c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	623b      	str	r3, [r7, #32]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d102      	bne.n	8005a48 <xQueueGenericCreateStatic+0x84>
 8005a42:	68bb      	ldr	r3, [r7, #8]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d101      	bne.n	8005a4c <xQueueGenericCreateStatic+0x88>
 8005a48:	2301      	movs	r3, #1
 8005a4a:	e000      	b.n	8005a4e <xQueueGenericCreateStatic+0x8a>
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d10b      	bne.n	8005a6a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a56:	f383 8811 	msr	BASEPRI, r3
 8005a5a:	f3bf 8f6f 	isb	sy
 8005a5e:	f3bf 8f4f 	dsb	sy
 8005a62:	61fb      	str	r3, [r7, #28]
}
 8005a64:	bf00      	nop
 8005a66:	bf00      	nop
 8005a68:	e7fd      	b.n	8005a66 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a6a:	2350      	movs	r3, #80	@ 0x50
 8005a6c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a6e:	697b      	ldr	r3, [r7, #20]
 8005a70:	2b50      	cmp	r3, #80	@ 0x50
 8005a72:	d00b      	beq.n	8005a8c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a78:	f383 8811 	msr	BASEPRI, r3
 8005a7c:	f3bf 8f6f 	isb	sy
 8005a80:	f3bf 8f4f 	dsb	sy
 8005a84:	61bb      	str	r3, [r7, #24]
}
 8005a86:	bf00      	nop
 8005a88:	bf00      	nop
 8005a8a:	e7fd      	b.n	8005a88 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a8c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a8e:	683b      	ldr	r3, [r7, #0]
 8005a90:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d00d      	beq.n	8005ab4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a9a:	2201      	movs	r2, #1
 8005a9c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005aa0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005aa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa6:	9300      	str	r3, [sp, #0]
 8005aa8:	4613      	mov	r3, r2
 8005aaa:	687a      	ldr	r2, [r7, #4]
 8005aac:	68b9      	ldr	r1, [r7, #8]
 8005aae:	68f8      	ldr	r0, [r7, #12]
 8005ab0:	f000 f805 	bl	8005abe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ab4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3730      	adds	r7, #48	@ 0x30
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}

08005abe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005abe:	b580      	push	{r7, lr}
 8005ac0:	b084      	sub	sp, #16
 8005ac2:	af00      	add	r7, sp, #0
 8005ac4:	60f8      	str	r0, [r7, #12]
 8005ac6:	60b9      	str	r1, [r7, #8]
 8005ac8:	607a      	str	r2, [r7, #4]
 8005aca:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005acc:	68bb      	ldr	r3, [r7, #8]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d103      	bne.n	8005ada <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005ad2:	69bb      	ldr	r3, [r7, #24]
 8005ad4:	69ba      	ldr	r2, [r7, #24]
 8005ad6:	601a      	str	r2, [r3, #0]
 8005ad8:	e002      	b.n	8005ae0 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005ada:	69bb      	ldr	r3, [r7, #24]
 8005adc:	687a      	ldr	r2, [r7, #4]
 8005ade:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005ae0:	69bb      	ldr	r3, [r7, #24]
 8005ae2:	68fa      	ldr	r2, [r7, #12]
 8005ae4:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005ae6:	69bb      	ldr	r3, [r7, #24]
 8005ae8:	68ba      	ldr	r2, [r7, #8]
 8005aea:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005aec:	2101      	movs	r1, #1
 8005aee:	69b8      	ldr	r0, [r7, #24]
 8005af0:	f7ff fefe 	bl	80058f0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	78fa      	ldrb	r2, [r7, #3]
 8005af8:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005afc:	bf00      	nop
 8005afe:	3710      	adds	r7, #16
 8005b00:	46bd      	mov	sp, r7
 8005b02:	bd80      	pop	{r7, pc}

08005b04 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b08e      	sub	sp, #56	@ 0x38
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	60f8      	str	r0, [r7, #12]
 8005b0c:	60b9      	str	r1, [r7, #8]
 8005b0e:	607a      	str	r2, [r7, #4]
 8005b10:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b12:	2300      	movs	r3, #0
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b16:	68fb      	ldr	r3, [r7, #12]
 8005b18:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d10b      	bne.n	8005b38 <xQueueGenericSend+0x34>
	__asm volatile
 8005b20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b24:	f383 8811 	msr	BASEPRI, r3
 8005b28:	f3bf 8f6f 	isb	sy
 8005b2c:	f3bf 8f4f 	dsb	sy
 8005b30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b32:	bf00      	nop
 8005b34:	bf00      	nop
 8005b36:	e7fd      	b.n	8005b34 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d103      	bne.n	8005b46 <xQueueGenericSend+0x42>
 8005b3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d101      	bne.n	8005b4a <xQueueGenericSend+0x46>
 8005b46:	2301      	movs	r3, #1
 8005b48:	e000      	b.n	8005b4c <xQueueGenericSend+0x48>
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10b      	bne.n	8005b68 <xQueueGenericSend+0x64>
	__asm volatile
 8005b50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b54:	f383 8811 	msr	BASEPRI, r3
 8005b58:	f3bf 8f6f 	isb	sy
 8005b5c:	f3bf 8f4f 	dsb	sy
 8005b60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b62:	bf00      	nop
 8005b64:	bf00      	nop
 8005b66:	e7fd      	b.n	8005b64 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	2b02      	cmp	r3, #2
 8005b6c:	d103      	bne.n	8005b76 <xQueueGenericSend+0x72>
 8005b6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b72:	2b01      	cmp	r3, #1
 8005b74:	d101      	bne.n	8005b7a <xQueueGenericSend+0x76>
 8005b76:	2301      	movs	r3, #1
 8005b78:	e000      	b.n	8005b7c <xQueueGenericSend+0x78>
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <xQueueGenericSend+0x94>
	__asm volatile
 8005b80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b84:	f383 8811 	msr	BASEPRI, r3
 8005b88:	f3bf 8f6f 	isb	sy
 8005b8c:	f3bf 8f4f 	dsb	sy
 8005b90:	623b      	str	r3, [r7, #32]
}
 8005b92:	bf00      	nop
 8005b94:	bf00      	nop
 8005b96:	e7fd      	b.n	8005b94 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005b98:	f001 fcf2 	bl	8007580 <xTaskGetSchedulerState>
 8005b9c:	4603      	mov	r3, r0
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d102      	bne.n	8005ba8 <xQueueGenericSend+0xa4>
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d101      	bne.n	8005bac <xQueueGenericSend+0xa8>
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e000      	b.n	8005bae <xQueueGenericSend+0xaa>
 8005bac:	2300      	movs	r3, #0
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d10b      	bne.n	8005bca <xQueueGenericSend+0xc6>
	__asm volatile
 8005bb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bb6:	f383 8811 	msr	BASEPRI, r3
 8005bba:	f3bf 8f6f 	isb	sy
 8005bbe:	f3bf 8f4f 	dsb	sy
 8005bc2:	61fb      	str	r3, [r7, #28]
}
 8005bc4:	bf00      	nop
 8005bc6:	bf00      	nop
 8005bc8:	e7fd      	b.n	8005bc6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bca:	f002 fc1f 	bl	800840c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bd6:	429a      	cmp	r2, r3
 8005bd8:	d302      	bcc.n	8005be0 <xQueueGenericSend+0xdc>
 8005bda:	683b      	ldr	r3, [r7, #0]
 8005bdc:	2b02      	cmp	r3, #2
 8005bde:	d129      	bne.n	8005c34 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005be0:	683a      	ldr	r2, [r7, #0]
 8005be2:	68b9      	ldr	r1, [r7, #8]
 8005be4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005be6:	f000 fa0f 	bl	8006008 <prvCopyDataToQueue>
 8005bea:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005bec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d010      	beq.n	8005c16 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005bf4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf6:	3324      	adds	r3, #36	@ 0x24
 8005bf8:	4618      	mov	r0, r3
 8005bfa:	f001 faf3 	bl	80071e4 <xTaskRemoveFromEventList>
 8005bfe:	4603      	mov	r3, r0
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d013      	beq.n	8005c2c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c04:	4b3f      	ldr	r3, [pc, #252]	@ (8005d04 <xQueueGenericSend+0x200>)
 8005c06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c0a:	601a      	str	r2, [r3, #0]
 8005c0c:	f3bf 8f4f 	dsb	sy
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	e00a      	b.n	8005c2c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d007      	beq.n	8005c2c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c1c:	4b39      	ldr	r3, [pc, #228]	@ (8005d04 <xQueueGenericSend+0x200>)
 8005c1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c22:	601a      	str	r2, [r3, #0]
 8005c24:	f3bf 8f4f 	dsb	sy
 8005c28:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c2c:	f002 fc1e 	bl	800846c <vPortExitCritical>
				return pdPASS;
 8005c30:	2301      	movs	r3, #1
 8005c32:	e063      	b.n	8005cfc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d103      	bne.n	8005c42 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c3a:	f002 fc17 	bl	800846c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c3e:	2300      	movs	r3, #0
 8005c40:	e05c      	b.n	8005cfc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c42:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c44:	2b00      	cmp	r3, #0
 8005c46:	d106      	bne.n	8005c56 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c48:	f107 0314 	add.w	r3, r7, #20
 8005c4c:	4618      	mov	r0, r3
 8005c4e:	f001 fb2d 	bl	80072ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c52:	2301      	movs	r3, #1
 8005c54:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c56:	f002 fc09 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c5a:	f001 f89f 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c5e:	f002 fbd5 	bl	800840c <vPortEnterCritical>
 8005c62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c64:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c68:	b25b      	sxtb	r3, r3
 8005c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c6e:	d103      	bne.n	8005c78 <xQueueGenericSend+0x174>
 8005c70:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c72:	2200      	movs	r2, #0
 8005c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c78:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c7a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c7e:	b25b      	sxtb	r3, r3
 8005c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c84:	d103      	bne.n	8005c8e <xQueueGenericSend+0x18a>
 8005c86:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c88:	2200      	movs	r2, #0
 8005c8a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c8e:	f002 fbed 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005c92:	1d3a      	adds	r2, r7, #4
 8005c94:	f107 0314 	add.w	r3, r7, #20
 8005c98:	4611      	mov	r1, r2
 8005c9a:	4618      	mov	r0, r3
 8005c9c:	f001 fb1c 	bl	80072d8 <xTaskCheckForTimeOut>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	2b00      	cmp	r3, #0
 8005ca4:	d124      	bne.n	8005cf0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005ca6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ca8:	f000 faa6 	bl	80061f8 <prvIsQueueFull>
 8005cac:	4603      	mov	r3, r0
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d018      	beq.n	8005ce4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb4:	3310      	adds	r3, #16
 8005cb6:	687a      	ldr	r2, [r7, #4]
 8005cb8:	4611      	mov	r1, r2
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f001 fa40 	bl	8007140 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005cc0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cc2:	f000 fa31 	bl	8006128 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cc6:	f001 f877 	bl	8006db8 <xTaskResumeAll>
 8005cca:	4603      	mov	r3, r0
 8005ccc:	2b00      	cmp	r3, #0
 8005cce:	f47f af7c 	bne.w	8005bca <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005cd2:	4b0c      	ldr	r3, [pc, #48]	@ (8005d04 <xQueueGenericSend+0x200>)
 8005cd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cd8:	601a      	str	r2, [r3, #0]
 8005cda:	f3bf 8f4f 	dsb	sy
 8005cde:	f3bf 8f6f 	isb	sy
 8005ce2:	e772      	b.n	8005bca <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ce4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ce6:	f000 fa1f 	bl	8006128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005cea:	f001 f865 	bl	8006db8 <xTaskResumeAll>
 8005cee:	e76c      	b.n	8005bca <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005cf0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cf2:	f000 fa19 	bl	8006128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005cf6:	f001 f85f 	bl	8006db8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005cfa:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3738      	adds	r7, #56	@ 0x38
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}
 8005d04:	e000ed04 	.word	0xe000ed04

08005d08 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d08:	b580      	push	{r7, lr}
 8005d0a:	b090      	sub	sp, #64	@ 0x40
 8005d0c:	af00      	add	r7, sp, #0
 8005d0e:	60f8      	str	r0, [r7, #12]
 8005d10:	60b9      	str	r1, [r7, #8]
 8005d12:	607a      	str	r2, [r7, #4]
 8005d14:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d10b      	bne.n	8005d38 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d24:	f383 8811 	msr	BASEPRI, r3
 8005d28:	f3bf 8f6f 	isb	sy
 8005d2c:	f3bf 8f4f 	dsb	sy
 8005d30:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d32:	bf00      	nop
 8005d34:	bf00      	nop
 8005d36:	e7fd      	b.n	8005d34 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d38:	68bb      	ldr	r3, [r7, #8]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d103      	bne.n	8005d46 <xQueueGenericSendFromISR+0x3e>
 8005d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d40:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d101      	bne.n	8005d4a <xQueueGenericSendFromISR+0x42>
 8005d46:	2301      	movs	r3, #1
 8005d48:	e000      	b.n	8005d4c <xQueueGenericSendFromISR+0x44>
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10b      	bne.n	8005d68 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d54:	f383 8811 	msr	BASEPRI, r3
 8005d58:	f3bf 8f6f 	isb	sy
 8005d5c:	f3bf 8f4f 	dsb	sy
 8005d60:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d62:	bf00      	nop
 8005d64:	bf00      	nop
 8005d66:	e7fd      	b.n	8005d64 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d68:	683b      	ldr	r3, [r7, #0]
 8005d6a:	2b02      	cmp	r3, #2
 8005d6c:	d103      	bne.n	8005d76 <xQueueGenericSendFromISR+0x6e>
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d70:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d101      	bne.n	8005d7a <xQueueGenericSendFromISR+0x72>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueGenericSendFromISR+0x74>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	623b      	str	r3, [r7, #32]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005d98:	f002 fbfa 	bl	8008590 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005d9c:	f3ef 8211 	mrs	r2, BASEPRI
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	61fa      	str	r2, [r7, #28]
 8005db2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005db4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005db6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005db8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005dbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005dc0:	429a      	cmp	r2, r3
 8005dc2:	d302      	bcc.n	8005dca <xQueueGenericSendFromISR+0xc2>
 8005dc4:	683b      	ldr	r3, [r7, #0]
 8005dc6:	2b02      	cmp	r3, #2
 8005dc8:	d12f      	bne.n	8005e2a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005dca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dcc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dd0:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005dd8:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005dda:	683a      	ldr	r2, [r7, #0]
 8005ddc:	68b9      	ldr	r1, [r7, #8]
 8005dde:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005de0:	f000 f912 	bl	8006008 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005de4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005de8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dec:	d112      	bne.n	8005e14 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005dee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d016      	beq.n	8005e24 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005df6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df8:	3324      	adds	r3, #36	@ 0x24
 8005dfa:	4618      	mov	r0, r3
 8005dfc:	f001 f9f2 	bl	80071e4 <xTaskRemoveFromEventList>
 8005e00:	4603      	mov	r3, r0
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d00e      	beq.n	8005e24 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	2b00      	cmp	r3, #0
 8005e0a:	d00b      	beq.n	8005e24 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	2201      	movs	r2, #1
 8005e10:	601a      	str	r2, [r3, #0]
 8005e12:	e007      	b.n	8005e24 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e14:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e18:	3301      	adds	r3, #1
 8005e1a:	b2db      	uxtb	r3, r3
 8005e1c:	b25a      	sxtb	r2, r3
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e24:	2301      	movs	r3, #1
 8005e26:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e28:	e001      	b.n	8005e2e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e2e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e30:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e32:	697b      	ldr	r3, [r7, #20]
 8005e34:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e38:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e3a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e3c:	4618      	mov	r0, r3
 8005e3e:	3740      	adds	r7, #64	@ 0x40
 8005e40:	46bd      	mov	sp, r7
 8005e42:	bd80      	pop	{r7, pc}

08005e44 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e44:	b580      	push	{r7, lr}
 8005e46:	b08c      	sub	sp, #48	@ 0x30
 8005e48:	af00      	add	r7, sp, #0
 8005e4a:	60f8      	str	r0, [r7, #12]
 8005e4c:	60b9      	str	r1, [r7, #8]
 8005e4e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e50:	2300      	movs	r3, #0
 8005e52:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e5a:	2b00      	cmp	r3, #0
 8005e5c:	d10b      	bne.n	8005e76 <xQueueReceive+0x32>
	__asm volatile
 8005e5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e62:	f383 8811 	msr	BASEPRI, r3
 8005e66:	f3bf 8f6f 	isb	sy
 8005e6a:	f3bf 8f4f 	dsb	sy
 8005e6e:	623b      	str	r3, [r7, #32]
}
 8005e70:	bf00      	nop
 8005e72:	bf00      	nop
 8005e74:	e7fd      	b.n	8005e72 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e76:	68bb      	ldr	r3, [r7, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d103      	bne.n	8005e84 <xQueueReceive+0x40>
 8005e7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d101      	bne.n	8005e88 <xQueueReceive+0x44>
 8005e84:	2301      	movs	r3, #1
 8005e86:	e000      	b.n	8005e8a <xQueueReceive+0x46>
 8005e88:	2300      	movs	r3, #0
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d10b      	bne.n	8005ea6 <xQueueReceive+0x62>
	__asm volatile
 8005e8e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e92:	f383 8811 	msr	BASEPRI, r3
 8005e96:	f3bf 8f6f 	isb	sy
 8005e9a:	f3bf 8f4f 	dsb	sy
 8005e9e:	61fb      	str	r3, [r7, #28]
}
 8005ea0:	bf00      	nop
 8005ea2:	bf00      	nop
 8005ea4:	e7fd      	b.n	8005ea2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ea6:	f001 fb6b 	bl	8007580 <xTaskGetSchedulerState>
 8005eaa:	4603      	mov	r3, r0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d102      	bne.n	8005eb6 <xQueueReceive+0x72>
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d101      	bne.n	8005eba <xQueueReceive+0x76>
 8005eb6:	2301      	movs	r3, #1
 8005eb8:	e000      	b.n	8005ebc <xQueueReceive+0x78>
 8005eba:	2300      	movs	r3, #0
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d10b      	bne.n	8005ed8 <xQueueReceive+0x94>
	__asm volatile
 8005ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ec4:	f383 8811 	msr	BASEPRI, r3
 8005ec8:	f3bf 8f6f 	isb	sy
 8005ecc:	f3bf 8f4f 	dsb	sy
 8005ed0:	61bb      	str	r3, [r7, #24]
}
 8005ed2:	bf00      	nop
 8005ed4:	bf00      	nop
 8005ed6:	e7fd      	b.n	8005ed4 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005ed8:	f002 fa98 	bl	800840c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005edc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ede:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005ee0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005ee2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d01f      	beq.n	8005f28 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005ee8:	68b9      	ldr	r1, [r7, #8]
 8005eea:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eec:	f000 f8f6 	bl	80060dc <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005ef0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ef2:	1e5a      	subs	r2, r3, #1
 8005ef4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ef6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005ef8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005efa:	691b      	ldr	r3, [r3, #16]
 8005efc:	2b00      	cmp	r3, #0
 8005efe:	d00f      	beq.n	8005f20 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f02:	3310      	adds	r3, #16
 8005f04:	4618      	mov	r0, r3
 8005f06:	f001 f96d 	bl	80071e4 <xTaskRemoveFromEventList>
 8005f0a:	4603      	mov	r3, r0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d007      	beq.n	8005f20 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f10:	4b3c      	ldr	r3, [pc, #240]	@ (8006004 <xQueueReceive+0x1c0>)
 8005f12:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f16:	601a      	str	r2, [r3, #0]
 8005f18:	f3bf 8f4f 	dsb	sy
 8005f1c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f20:	f002 faa4 	bl	800846c <vPortExitCritical>
				return pdPASS;
 8005f24:	2301      	movs	r3, #1
 8005f26:	e069      	b.n	8005ffc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d103      	bne.n	8005f36 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f2e:	f002 fa9d 	bl	800846c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f32:	2300      	movs	r3, #0
 8005f34:	e062      	b.n	8005ffc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d106      	bne.n	8005f4a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f3c:	f107 0310 	add.w	r3, r7, #16
 8005f40:	4618      	mov	r0, r3
 8005f42:	f001 f9b3 	bl	80072ac <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f46:	2301      	movs	r3, #1
 8005f48:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f4a:	f002 fa8f 	bl	800846c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f4e:	f000 ff25 	bl	8006d9c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f52:	f002 fa5b 	bl	800840c <vPortEnterCritical>
 8005f56:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f58:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f5c:	b25b      	sxtb	r3, r3
 8005f5e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f62:	d103      	bne.n	8005f6c <xQueueReceive+0x128>
 8005f64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f66:	2200      	movs	r2, #0
 8005f68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f6e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f72:	b25b      	sxtb	r3, r3
 8005f74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f78:	d103      	bne.n	8005f82 <xQueueReceive+0x13e>
 8005f7a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005f82:	f002 fa73 	bl	800846c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005f86:	1d3a      	adds	r2, r7, #4
 8005f88:	f107 0310 	add.w	r3, r7, #16
 8005f8c:	4611      	mov	r1, r2
 8005f8e:	4618      	mov	r0, r3
 8005f90:	f001 f9a2 	bl	80072d8 <xTaskCheckForTimeOut>
 8005f94:	4603      	mov	r3, r0
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d123      	bne.n	8005fe2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005f9a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f9c:	f000 f916 	bl	80061cc <prvIsQueueEmpty>
 8005fa0:	4603      	mov	r3, r0
 8005fa2:	2b00      	cmp	r3, #0
 8005fa4:	d017      	beq.n	8005fd6 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa8:	3324      	adds	r3, #36	@ 0x24
 8005faa:	687a      	ldr	r2, [r7, #4]
 8005fac:	4611      	mov	r1, r2
 8005fae:	4618      	mov	r0, r3
 8005fb0:	f001 f8c6 	bl	8007140 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fb4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fb6:	f000 f8b7 	bl	8006128 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fba:	f000 fefd 	bl	8006db8 <xTaskResumeAll>
 8005fbe:	4603      	mov	r3, r0
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d189      	bne.n	8005ed8 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005fc4:	4b0f      	ldr	r3, [pc, #60]	@ (8006004 <xQueueReceive+0x1c0>)
 8005fc6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fca:	601a      	str	r2, [r3, #0]
 8005fcc:	f3bf 8f4f 	dsb	sy
 8005fd0:	f3bf 8f6f 	isb	sy
 8005fd4:	e780      	b.n	8005ed8 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005fd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fd8:	f000 f8a6 	bl	8006128 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005fdc:	f000 feec 	bl	8006db8 <xTaskResumeAll>
 8005fe0:	e77a      	b.n	8005ed8 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005fe2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fe4:	f000 f8a0 	bl	8006128 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005fe8:	f000 fee6 	bl	8006db8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fee:	f000 f8ed 	bl	80061cc <prvIsQueueEmpty>
 8005ff2:	4603      	mov	r3, r0
 8005ff4:	2b00      	cmp	r3, #0
 8005ff6:	f43f af6f 	beq.w	8005ed8 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005ffa:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ffc:	4618      	mov	r0, r3
 8005ffe:	3730      	adds	r7, #48	@ 0x30
 8006000:	46bd      	mov	sp, r7
 8006002:	bd80      	pop	{r7, pc}
 8006004:	e000ed04 	.word	0xe000ed04

08006008 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006008:	b580      	push	{r7, lr}
 800600a:	b086      	sub	sp, #24
 800600c:	af00      	add	r7, sp, #0
 800600e:	60f8      	str	r0, [r7, #12]
 8006010:	60b9      	str	r1, [r7, #8]
 8006012:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006014:	2300      	movs	r3, #0
 8006016:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800601c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006022:	2b00      	cmp	r3, #0
 8006024:	d10d      	bne.n	8006042 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d14d      	bne.n	80060ca <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	689b      	ldr	r3, [r3, #8]
 8006032:	4618      	mov	r0, r3
 8006034:	f001 fac2 	bl	80075bc <xTaskPriorityDisinherit>
 8006038:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800603a:	68fb      	ldr	r3, [r7, #12]
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
 8006040:	e043      	b.n	80060ca <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	2b00      	cmp	r3, #0
 8006046:	d119      	bne.n	800607c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	6858      	ldr	r0, [r3, #4]
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006050:	461a      	mov	r2, r3
 8006052:	68b9      	ldr	r1, [r7, #8]
 8006054:	f004 fb11 	bl	800a67a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	685a      	ldr	r2, [r3, #4]
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006060:	441a      	add	r2, r3
 8006062:	68fb      	ldr	r3, [r7, #12]
 8006064:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	685a      	ldr	r2, [r3, #4]
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	689b      	ldr	r3, [r3, #8]
 800606e:	429a      	cmp	r2, r3
 8006070:	d32b      	bcc.n	80060ca <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8006072:	68fb      	ldr	r3, [r7, #12]
 8006074:	681a      	ldr	r2, [r3, #0]
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	605a      	str	r2, [r3, #4]
 800607a:	e026      	b.n	80060ca <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800607c:	68fb      	ldr	r3, [r7, #12]
 800607e:	68d8      	ldr	r0, [r3, #12]
 8006080:	68fb      	ldr	r3, [r7, #12]
 8006082:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006084:	461a      	mov	r2, r3
 8006086:	68b9      	ldr	r1, [r7, #8]
 8006088:	f004 faf7 	bl	800a67a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	68da      	ldr	r2, [r3, #12]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006094:	425b      	negs	r3, r3
 8006096:	441a      	add	r2, r3
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	68da      	ldr	r2, [r3, #12]
 80060a0:	68fb      	ldr	r3, [r7, #12]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	429a      	cmp	r2, r3
 80060a6:	d207      	bcs.n	80060b8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80060a8:	68fb      	ldr	r3, [r7, #12]
 80060aa:	689a      	ldr	r2, [r3, #8]
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060b0:	425b      	negs	r3, r3
 80060b2:	441a      	add	r2, r3
 80060b4:	68fb      	ldr	r3, [r7, #12]
 80060b6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2b02      	cmp	r3, #2
 80060bc:	d105      	bne.n	80060ca <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060be:	693b      	ldr	r3, [r7, #16]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d002      	beq.n	80060ca <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80060c4:	693b      	ldr	r3, [r7, #16]
 80060c6:	3b01      	subs	r3, #1
 80060c8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80060ca:	693b      	ldr	r3, [r7, #16]
 80060cc:	1c5a      	adds	r2, r3, #1
 80060ce:	68fb      	ldr	r3, [r7, #12]
 80060d0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80060d2:	697b      	ldr	r3, [r7, #20]
}
 80060d4:	4618      	mov	r0, r3
 80060d6:	3718      	adds	r7, #24
 80060d8:	46bd      	mov	sp, r7
 80060da:	bd80      	pop	{r7, pc}

080060dc <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b082      	sub	sp, #8
 80060e0:	af00      	add	r7, sp, #0
 80060e2:	6078      	str	r0, [r7, #4]
 80060e4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d018      	beq.n	8006120 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	68da      	ldr	r2, [r3, #12]
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060f6:	441a      	add	r2, r3
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	68da      	ldr	r2, [r3, #12]
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	689b      	ldr	r3, [r3, #8]
 8006104:	429a      	cmp	r2, r3
 8006106:	d303      	bcc.n	8006110 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	687b      	ldr	r3, [r7, #4]
 800610e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	68d9      	ldr	r1, [r3, #12]
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006118:	461a      	mov	r2, r3
 800611a:	6838      	ldr	r0, [r7, #0]
 800611c:	f004 faad 	bl	800a67a <memcpy>
	}
}
 8006120:	bf00      	nop
 8006122:	3708      	adds	r7, #8
 8006124:	46bd      	mov	sp, r7
 8006126:	bd80      	pop	{r7, pc}

08006128 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006128:	b580      	push	{r7, lr}
 800612a:	b084      	sub	sp, #16
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006130:	f002 f96c 	bl	800840c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800613a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800613c:	e011      	b.n	8006162 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	2b00      	cmp	r3, #0
 8006144:	d012      	beq.n	800616c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	3324      	adds	r3, #36	@ 0x24
 800614a:	4618      	mov	r0, r3
 800614c:	f001 f84a 	bl	80071e4 <xTaskRemoveFromEventList>
 8006150:	4603      	mov	r3, r0
 8006152:	2b00      	cmp	r3, #0
 8006154:	d001      	beq.n	800615a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006156:	f001 f923 	bl	80073a0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	3b01      	subs	r3, #1
 800615e:	b2db      	uxtb	r3, r3
 8006160:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006162:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006166:	2b00      	cmp	r3, #0
 8006168:	dce9      	bgt.n	800613e <prvUnlockQueue+0x16>
 800616a:	e000      	b.n	800616e <prvUnlockQueue+0x46>
					break;
 800616c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	22ff      	movs	r2, #255	@ 0xff
 8006172:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006176:	f002 f979 	bl	800846c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800617a:	f002 f947 	bl	800840c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006184:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006186:	e011      	b.n	80061ac <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	691b      	ldr	r3, [r3, #16]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d012      	beq.n	80061b6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	3310      	adds	r3, #16
 8006194:	4618      	mov	r0, r3
 8006196:	f001 f825 	bl	80071e4 <xTaskRemoveFromEventList>
 800619a:	4603      	mov	r3, r0
 800619c:	2b00      	cmp	r3, #0
 800619e:	d001      	beq.n	80061a4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80061a0:	f001 f8fe 	bl	80073a0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80061a4:	7bbb      	ldrb	r3, [r7, #14]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	b2db      	uxtb	r3, r3
 80061aa:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80061ac:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	dce9      	bgt.n	8006188 <prvUnlockQueue+0x60>
 80061b4:	e000      	b.n	80061b8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80061b6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	22ff      	movs	r2, #255	@ 0xff
 80061bc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80061c0:	f002 f954 	bl	800846c <vPortExitCritical>
}
 80061c4:	bf00      	nop
 80061c6:	3710      	adds	r7, #16
 80061c8:	46bd      	mov	sp, r7
 80061ca:	bd80      	pop	{r7, pc}

080061cc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b084      	sub	sp, #16
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80061d4:	f002 f91a 	bl	800840c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80061e0:	2301      	movs	r3, #1
 80061e2:	60fb      	str	r3, [r7, #12]
 80061e4:	e001      	b.n	80061ea <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80061e6:	2300      	movs	r3, #0
 80061e8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061ea:	f002 f93f 	bl	800846c <vPortExitCritical>

	return xReturn;
 80061ee:	68fb      	ldr	r3, [r7, #12]
}
 80061f0:	4618      	mov	r0, r3
 80061f2:	3710      	adds	r7, #16
 80061f4:	46bd      	mov	sp, r7
 80061f6:	bd80      	pop	{r7, pc}

080061f8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80061f8:	b580      	push	{r7, lr}
 80061fa:	b084      	sub	sp, #16
 80061fc:	af00      	add	r7, sp, #0
 80061fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006200:	f002 f904 	bl	800840c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800620c:	429a      	cmp	r2, r3
 800620e:	d102      	bne.n	8006216 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006210:	2301      	movs	r3, #1
 8006212:	60fb      	str	r3, [r7, #12]
 8006214:	e001      	b.n	800621a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006216:	2300      	movs	r3, #0
 8006218:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800621a:	f002 f927 	bl	800846c <vPortExitCritical>

	return xReturn;
 800621e:	68fb      	ldr	r3, [r7, #12]
}
 8006220:	4618      	mov	r0, r3
 8006222:	3710      	adds	r7, #16
 8006224:	46bd      	mov	sp, r7
 8006226:	bd80      	pop	{r7, pc}

08006228 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006228:	b480      	push	{r7}
 800622a:	b085      	sub	sp, #20
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006232:	2300      	movs	r3, #0
 8006234:	60fb      	str	r3, [r7, #12]
 8006236:	e014      	b.n	8006262 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006238:	4a0e      	ldr	r2, [pc, #56]	@ (8006274 <vQueueAddToRegistry+0x4c>)
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006240:	2b00      	cmp	r3, #0
 8006242:	d10b      	bne.n	800625c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006244:	490b      	ldr	r1, [pc, #44]	@ (8006274 <vQueueAddToRegistry+0x4c>)
 8006246:	68fb      	ldr	r3, [r7, #12]
 8006248:	683a      	ldr	r2, [r7, #0]
 800624a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800624e:	4a09      	ldr	r2, [pc, #36]	@ (8006274 <vQueueAddToRegistry+0x4c>)
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	00db      	lsls	r3, r3, #3
 8006254:	4413      	add	r3, r2
 8006256:	687a      	ldr	r2, [r7, #4]
 8006258:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800625a:	e006      	b.n	800626a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	3301      	adds	r3, #1
 8006260:	60fb      	str	r3, [r7, #12]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	2b07      	cmp	r3, #7
 8006266:	d9e7      	bls.n	8006238 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006268:	bf00      	nop
 800626a:	bf00      	nop
 800626c:	3714      	adds	r7, #20
 800626e:	46bd      	mov	sp, r7
 8006270:	bc80      	pop	{r7}
 8006272:	4770      	bx	lr
 8006274:	20000954 	.word	0x20000954

08006278 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006278:	b580      	push	{r7, lr}
 800627a:	b086      	sub	sp, #24
 800627c:	af00      	add	r7, sp, #0
 800627e:	60f8      	str	r0, [r7, #12]
 8006280:	60b9      	str	r1, [r7, #8]
 8006282:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006288:	f002 f8c0 	bl	800840c <vPortEnterCritical>
 800628c:	697b      	ldr	r3, [r7, #20]
 800628e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006292:	b25b      	sxtb	r3, r3
 8006294:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006298:	d103      	bne.n	80062a2 <vQueueWaitForMessageRestricted+0x2a>
 800629a:	697b      	ldr	r3, [r7, #20]
 800629c:	2200      	movs	r2, #0
 800629e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80062a2:	697b      	ldr	r3, [r7, #20]
 80062a4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a8:	b25b      	sxtb	r3, r3
 80062aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062ae:	d103      	bne.n	80062b8 <vQueueWaitForMessageRestricted+0x40>
 80062b0:	697b      	ldr	r3, [r7, #20]
 80062b2:	2200      	movs	r2, #0
 80062b4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b8:	f002 f8d8 	bl	800846c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80062bc:	697b      	ldr	r3, [r7, #20]
 80062be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062c0:	2b00      	cmp	r3, #0
 80062c2:	d106      	bne.n	80062d2 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80062c4:	697b      	ldr	r3, [r7, #20]
 80062c6:	3324      	adds	r3, #36	@ 0x24
 80062c8:	687a      	ldr	r2, [r7, #4]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	4618      	mov	r0, r3
 80062ce:	f000 ff5d 	bl	800718c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 80062d2:	6978      	ldr	r0, [r7, #20]
 80062d4:	f7ff ff28 	bl	8006128 <prvUnlockQueue>
	}
 80062d8:	bf00      	nop
 80062da:	3718      	adds	r7, #24
 80062dc:	46bd      	mov	sp, r7
 80062de:	bd80      	pop	{r7, pc}

080062e0 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 80062e0:	b580      	push	{r7, lr}
 80062e2:	b08c      	sub	sp, #48	@ 0x30
 80062e4:	af02      	add	r7, sp, #8
 80062e6:	60f8      	str	r0, [r7, #12]
 80062e8:	60b9      	str	r1, [r7, #8]
 80062ea:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2b01      	cmp	r3, #1
 80062f0:	d111      	bne.n	8006316 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 80062f2:	2301      	movs	r3, #1
 80062f4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	2b04      	cmp	r3, #4
 80062fc:	d81d      	bhi.n	800633a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 80062fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006302:	f383 8811 	msr	BASEPRI, r3
 8006306:	f3bf 8f6f 	isb	sy
 800630a:	f3bf 8f4f 	dsb	sy
 800630e:	61fb      	str	r3, [r7, #28]
}
 8006310:	bf00      	nop
 8006312:	bf00      	nop
 8006314:	e7fd      	b.n	8006312 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8006316:	2300      	movs	r3, #0
 8006318:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	2b00      	cmp	r3, #0
 8006320:	d10b      	bne.n	800633a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8006322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006326:	f383 8811 	msr	BASEPRI, r3
 800632a:	f3bf 8f6f 	isb	sy
 800632e:	f3bf 8f4f 	dsb	sy
 8006332:	61bb      	str	r3, [r7, #24]
}
 8006334:	bf00      	nop
 8006336:	bf00      	nop
 8006338:	e7fd      	b.n	8006336 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800633a:	68ba      	ldr	r2, [r7, #8]
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	429a      	cmp	r2, r3
 8006340:	d90b      	bls.n	800635a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8006342:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006346:	f383 8811 	msr	BASEPRI, r3
 800634a:	f3bf 8f6f 	isb	sy
 800634e:	f3bf 8f4f 	dsb	sy
 8006352:	617b      	str	r3, [r7, #20]
}
 8006354:	bf00      	nop
 8006356:	bf00      	nop
 8006358:	e7fd      	b.n	8006356 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800635a:	68bb      	ldr	r3, [r7, #8]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d101      	bne.n	8006364 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8006360:	2301      	movs	r3, #1
 8006362:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	3301      	adds	r3, #1
 8006368:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	3324      	adds	r3, #36	@ 0x24
 800636e:	4618      	mov	r0, r3
 8006370:	f002 f94e 	bl	8008610 <pvPortMalloc>
 8006374:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8006376:	6a3b      	ldr	r3, [r7, #32]
 8006378:	2b00      	cmp	r3, #0
 800637a:	d00a      	beq.n	8006392 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 800637c:	6a3b      	ldr	r3, [r7, #32]
 800637e:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 8006382:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006386:	9300      	str	r3, [sp, #0]
 8006388:	68bb      	ldr	r3, [r7, #8]
 800638a:	68fa      	ldr	r2, [r7, #12]
 800638c:	6a38      	ldr	r0, [r7, #32]
 800638e:	f000 fac3 	bl	8006918 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 8006392:	6a3b      	ldr	r3, [r7, #32]
	}
 8006394:	4618      	mov	r0, r3
 8006396:	3728      	adds	r7, #40	@ 0x28
 8006398:	46bd      	mov	sp, r7
 800639a:	bd80      	pop	{r7, pc}

0800639c <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 800639c:	b480      	push	{r7}
 800639e:	b087      	sub	sp, #28
 80063a0:	af00      	add	r7, sp, #0
 80063a2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d10b      	bne.n	80063c6 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 80063ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063b2:	f383 8811 	msr	BASEPRI, r3
 80063b6:	f3bf 8f6f 	isb	sy
 80063ba:	f3bf 8f4f 	dsb	sy
 80063be:	60fb      	str	r3, [r7, #12]
}
 80063c0:	bf00      	nop
 80063c2:	bf00      	nop
 80063c4:	e7fd      	b.n	80063c2 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 80063c6:	693b      	ldr	r3, [r7, #16]
 80063c8:	689a      	ldr	r2, [r3, #8]
 80063ca:	693b      	ldr	r3, [r7, #16]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	4413      	add	r3, r2
 80063d0:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	685b      	ldr	r3, [r3, #4]
 80063d6:	697a      	ldr	r2, [r7, #20]
 80063d8:	1ad3      	subs	r3, r2, r3
 80063da:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	3b01      	subs	r3, #1
 80063e0:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 80063e2:	693b      	ldr	r3, [r7, #16]
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	697a      	ldr	r2, [r7, #20]
 80063e8:	429a      	cmp	r2, r3
 80063ea:	d304      	bcc.n	80063f6 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 80063ec:	693b      	ldr	r3, [r7, #16]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	697a      	ldr	r2, [r7, #20]
 80063f2:	1ad3      	subs	r3, r2, r3
 80063f4:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 80063f6:	697b      	ldr	r3, [r7, #20]
}
 80063f8:	4618      	mov	r0, r3
 80063fa:	371c      	adds	r7, #28
 80063fc:	46bd      	mov	sp, r7
 80063fe:	bc80      	pop	{r7}
 8006400:	4770      	bx	lr

08006402 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006402:	b580      	push	{r7, lr}
 8006404:	b090      	sub	sp, #64	@ 0x40
 8006406:	af02      	add	r7, sp, #8
 8006408:	60f8      	str	r0, [r7, #12]
 800640a:	60b9      	str	r1, [r7, #8]
 800640c:	607a      	str	r2, [r7, #4]
 800640e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8006418:	68bb      	ldr	r3, [r7, #8]
 800641a:	2b00      	cmp	r3, #0
 800641c:	d10b      	bne.n	8006436 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 800641e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006422:	f383 8811 	msr	BASEPRI, r3
 8006426:	f3bf 8f6f 	isb	sy
 800642a:	f3bf 8f4f 	dsb	sy
 800642e:	623b      	str	r3, [r7, #32]
}
 8006430:	bf00      	nop
 8006432:	bf00      	nop
 8006434:	e7fd      	b.n	8006432 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8006436:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10b      	bne.n	8006454 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	61fb      	str	r3, [r7, #28]
}
 800644e:	bf00      	nop
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8006454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006456:	7f1b      	ldrb	r3, [r3, #28]
 8006458:	f003 0301 	and.w	r3, r3, #1
 800645c:	2b00      	cmp	r3, #0
 800645e:	d002      	beq.n	8006466 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8006460:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006462:	3304      	adds	r3, #4
 8006464:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 8006466:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006468:	f7ff ff98 	bl	800639c <xStreamBufferSpacesAvailable>
 800646c:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 800646e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006470:	9300      	str	r3, [sp, #0]
 8006472:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006474:	687a      	ldr	r2, [r7, #4]
 8006476:	68b9      	ldr	r1, [r7, #8]
 8006478:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800647a:	f000 f835 	bl	80064e8 <prvWriteMessageToBuffer>
 800647e:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 8006480:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006482:	2b00      	cmp	r3, #0
 8006484:	d02b      	beq.n	80064de <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8006486:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006488:	f000 fa27 	bl	80068da <prvBytesInBuffer>
 800648c:	4602      	mov	r2, r0
 800648e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	429a      	cmp	r2, r3
 8006494:	d323      	bcc.n	80064de <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 8006496:	f3ef 8211 	mrs	r2, BASEPRI
 800649a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800649e:	f383 8811 	msr	BASEPRI, r3
 80064a2:	f3bf 8f6f 	isb	sy
 80064a6:	f3bf 8f4f 	dsb	sy
 80064aa:	61ba      	str	r2, [r7, #24]
 80064ac:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80064ae:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80064b0:	627b      	str	r3, [r7, #36]	@ 0x24
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	691b      	ldr	r3, [r3, #16]
 80064b6:	2b00      	cmp	r3, #0
 80064b8:	d00b      	beq.n	80064d2 <xStreamBufferSendFromISR+0xd0>
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	6918      	ldr	r0, [r3, #16]
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	9300      	str	r3, [sp, #0]
 80064c2:	2300      	movs	r3, #0
 80064c4:	2200      	movs	r2, #0
 80064c6:	2100      	movs	r1, #0
 80064c8:	f001 f9fc 	bl	80078c4 <xTaskGenericNotifyFromISR>
 80064cc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ce:	2200      	movs	r2, #0
 80064d0:	611a      	str	r2, [r3, #16]
 80064d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064d4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80064d6:	693b      	ldr	r3, [r7, #16]
 80064d8:	f383 8811 	msr	BASEPRI, r3
}
 80064dc:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 80064de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 80064e0:	4618      	mov	r0, r3
 80064e2:	3738      	adds	r7, #56	@ 0x38
 80064e4:	46bd      	mov	sp, r7
 80064e6:	bd80      	pop	{r7, pc}

080064e8 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 80064e8:	b580      	push	{r7, lr}
 80064ea:	b086      	sub	sp, #24
 80064ec:	af00      	add	r7, sp, #0
 80064ee:	60f8      	str	r0, [r7, #12]
 80064f0:	60b9      	str	r1, [r7, #8]
 80064f2:	607a      	str	r2, [r7, #4]
 80064f4:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 80064f6:	683b      	ldr	r3, [r7, #0]
 80064f8:	2b00      	cmp	r3, #0
 80064fa:	d102      	bne.n	8006502 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 80064fc:	2300      	movs	r3, #0
 80064fe:	617b      	str	r3, [r7, #20]
 8006500:	e01d      	b.n	800653e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	7f1b      	ldrb	r3, [r3, #28]
 8006506:	f003 0301 	and.w	r3, r3, #1
 800650a:	2b00      	cmp	r3, #0
 800650c:	d108      	bne.n	8006520 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800650e:	2301      	movs	r3, #1
 8006510:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	683b      	ldr	r3, [r7, #0]
 8006516:	4293      	cmp	r3, r2
 8006518:	bf28      	it	cs
 800651a:	4613      	movcs	r3, r2
 800651c:	607b      	str	r3, [r7, #4]
 800651e:	e00e      	b.n	800653e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8006520:	683a      	ldr	r2, [r7, #0]
 8006522:	6a3b      	ldr	r3, [r7, #32]
 8006524:	429a      	cmp	r2, r3
 8006526:	d308      	bcc.n	800653a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8006528:	2301      	movs	r3, #1
 800652a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800652c:	1d3b      	adds	r3, r7, #4
 800652e:	2204      	movs	r2, #4
 8006530:	4619      	mov	r1, r3
 8006532:	68f8      	ldr	r0, [r7, #12]
 8006534:	f000 f8df 	bl	80066f6 <prvWriteBytesToBuffer>
 8006538:	e001      	b.n	800653e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800653a:	2300      	movs	r3, #0
 800653c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	461a      	mov	r2, r3
 8006548:	68b9      	ldr	r1, [r7, #8]
 800654a:	68f8      	ldr	r0, [r7, #12]
 800654c:	f000 f8d3 	bl	80066f6 <prvWriteBytesToBuffer>
 8006550:	6138      	str	r0, [r7, #16]
 8006552:	e001      	b.n	8006558 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8006554:	2300      	movs	r3, #0
 8006556:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8006558:	693b      	ldr	r3, [r7, #16]
}
 800655a:	4618      	mov	r0, r3
 800655c:	3718      	adds	r7, #24
 800655e:	46bd      	mov	sp, r7
 8006560:	bd80      	pop	{r7, pc}

08006562 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 8006562:	b580      	push	{r7, lr}
 8006564:	b08e      	sub	sp, #56	@ 0x38
 8006566:	af02      	add	r7, sp, #8
 8006568:	60f8      	str	r0, [r7, #12]
 800656a:	60b9      	str	r1, [r7, #8]
 800656c:	607a      	str	r2, [r7, #4]
 800656e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8006570:	68fb      	ldr	r3, [r7, #12]
 8006572:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8006574:	2300      	movs	r3, #0
 8006576:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8006578:	68bb      	ldr	r3, [r7, #8]
 800657a:	2b00      	cmp	r3, #0
 800657c:	d10b      	bne.n	8006596 <xStreamBufferReceive+0x34>
	__asm volatile
 800657e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006582:	f383 8811 	msr	BASEPRI, r3
 8006586:	f3bf 8f6f 	isb	sy
 800658a:	f3bf 8f4f 	dsb	sy
 800658e:	61fb      	str	r3, [r7, #28]
}
 8006590:	bf00      	nop
 8006592:	bf00      	nop
 8006594:	e7fd      	b.n	8006592 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8006596:	6a3b      	ldr	r3, [r7, #32]
 8006598:	2b00      	cmp	r3, #0
 800659a:	d10b      	bne.n	80065b4 <xStreamBufferReceive+0x52>
	__asm volatile
 800659c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a0:	f383 8811 	msr	BASEPRI, r3
 80065a4:	f3bf 8f6f 	isb	sy
 80065a8:	f3bf 8f4f 	dsb	sy
 80065ac:	61bb      	str	r3, [r7, #24]
}
 80065ae:	bf00      	nop
 80065b0:	bf00      	nop
 80065b2:	e7fd      	b.n	80065b0 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80065b4:	6a3b      	ldr	r3, [r7, #32]
 80065b6:	7f1b      	ldrb	r3, [r3, #28]
 80065b8:	f003 0301 	and.w	r3, r3, #1
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d002      	beq.n	80065c6 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80065c0:	2304      	movs	r3, #4
 80065c2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065c4:	e001      	b.n	80065ca <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 80065c6:	2300      	movs	r3, #0
 80065c8:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 80065ca:	683b      	ldr	r3, [r7, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d035      	beq.n	800663c <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 80065d0:	f001 ff1c 	bl	800840c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80065d4:	6a38      	ldr	r0, [r7, #32]
 80065d6:	f000 f980 	bl	80068da <prvBytesInBuffer>
 80065da:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 80065dc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80065de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065e0:	429a      	cmp	r2, r3
 80065e2:	d817      	bhi.n	8006614 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 80065e4:	2000      	movs	r0, #0
 80065e6:	f001 fa4d 	bl	8007a84 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 80065ea:	6a3b      	ldr	r3, [r7, #32]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d00b      	beq.n	800660a <xStreamBufferReceive+0xa8>
	__asm volatile
 80065f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f6:	f383 8811 	msr	BASEPRI, r3
 80065fa:	f3bf 8f6f 	isb	sy
 80065fe:	f3bf 8f4f 	dsb	sy
 8006602:	617b      	str	r3, [r7, #20]
}
 8006604:	bf00      	nop
 8006606:	bf00      	nop
 8006608:	e7fd      	b.n	8006606 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800660a:	f000 ffab 	bl	8007564 <xTaskGetCurrentTaskHandle>
 800660e:	4602      	mov	r2, r0
 8006610:	6a3b      	ldr	r3, [r7, #32]
 8006612:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006614:	f001 ff2a 	bl	800846c <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8006618:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800661a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800661c:	429a      	cmp	r2, r3
 800661e:	d811      	bhi.n	8006644 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8006620:	683b      	ldr	r3, [r7, #0]
 8006622:	2200      	movs	r2, #0
 8006624:	2100      	movs	r1, #0
 8006626:	2000      	movs	r0, #0
 8006628:	f001 f838 	bl	800769c <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800662c:	6a3b      	ldr	r3, [r7, #32]
 800662e:	2200      	movs	r2, #0
 8006630:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8006632:	6a38      	ldr	r0, [r7, #32]
 8006634:	f000 f951 	bl	80068da <prvBytesInBuffer>
 8006638:	62b8      	str	r0, [r7, #40]	@ 0x28
 800663a:	e003      	b.n	8006644 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800663c:	6a38      	ldr	r0, [r7, #32]
 800663e:	f000 f94c 	bl	80068da <prvBytesInBuffer>
 8006642:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8006644:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006646:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006648:	429a      	cmp	r2, r3
 800664a:	d91d      	bls.n	8006688 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800664c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800664e:	9300      	str	r3, [sp, #0]
 8006650:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006652:	687a      	ldr	r2, [r7, #4]
 8006654:	68b9      	ldr	r1, [r7, #8]
 8006656:	6a38      	ldr	r0, [r7, #32]
 8006658:	f000 f81b 	bl	8006692 <prvReadMessageFromBuffer>
 800665c:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800665e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006660:	2b00      	cmp	r3, #0
 8006662:	d011      	beq.n	8006688 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 8006664:	f000 fb9a 	bl	8006d9c <vTaskSuspendAll>
 8006668:	6a3b      	ldr	r3, [r7, #32]
 800666a:	695b      	ldr	r3, [r3, #20]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d009      	beq.n	8006684 <xStreamBufferReceive+0x122>
 8006670:	6a3b      	ldr	r3, [r7, #32]
 8006672:	6958      	ldr	r0, [r3, #20]
 8006674:	2300      	movs	r3, #0
 8006676:	2200      	movs	r2, #0
 8006678:	2100      	movs	r1, #0
 800667a:	f001 f869 	bl	8007750 <xTaskGenericNotify>
 800667e:	6a3b      	ldr	r3, [r7, #32]
 8006680:	2200      	movs	r2, #0
 8006682:	615a      	str	r2, [r3, #20]
 8006684:	f000 fb98 	bl	8006db8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8006688:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 800668a:	4618      	mov	r0, r3
 800668c:	3730      	adds	r7, #48	@ 0x30
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}

08006692 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 8006692:	b580      	push	{r7, lr}
 8006694:	b088      	sub	sp, #32
 8006696:	af00      	add	r7, sp, #0
 8006698:	60f8      	str	r0, [r7, #12]
 800669a:	60b9      	str	r1, [r7, #8]
 800669c:	607a      	str	r2, [r7, #4]
 800669e:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80066a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d019      	beq.n	80066da <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80066ac:	f107 0110 	add.w	r1, r7, #16
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80066b4:	68f8      	ldr	r0, [r7, #12]
 80066b6:	f000 f893 	bl	80067e0 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80066be:	683a      	ldr	r2, [r7, #0]
 80066c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066c2:	1ad3      	subs	r3, r2, r3
 80066c4:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 80066c6:	69fa      	ldr	r2, [r7, #28]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d907      	bls.n	80066de <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	69ba      	ldr	r2, [r7, #24]
 80066d2:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	61fb      	str	r3, [r7, #28]
 80066d8:	e001      	b.n	80066de <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	69fa      	ldr	r2, [r7, #28]
 80066e2:	68b9      	ldr	r1, [r7, #8]
 80066e4:	68f8      	ldr	r0, [r7, #12]
 80066e6:	f000 f87b 	bl	80067e0 <prvReadBytesFromBuffer>
 80066ea:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 80066ec:	697b      	ldr	r3, [r7, #20]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3720      	adds	r7, #32
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}

080066f6 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 80066f6:	b580      	push	{r7, lr}
 80066f8:	b08a      	sub	sp, #40	@ 0x28
 80066fa:	af00      	add	r7, sp, #0
 80066fc:	60f8      	str	r0, [r7, #12]
 80066fe:	60b9      	str	r1, [r7, #8]
 8006700:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8006702:	687b      	ldr	r3, [r7, #4]
 8006704:	2b00      	cmp	r3, #0
 8006706:	d10b      	bne.n	8006720 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8006708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800670c:	f383 8811 	msr	BASEPRI, r3
 8006710:	f3bf 8f6f 	isb	sy
 8006714:	f3bf 8f4f 	dsb	sy
 8006718:	61fb      	str	r3, [r7, #28]
}
 800671a:	bf00      	nop
 800671c:	bf00      	nop
 800671e:	e7fd      	b.n	800671c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8006720:	68fb      	ldr	r3, [r7, #12]
 8006722:	685b      	ldr	r3, [r3, #4]
 8006724:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	689a      	ldr	r2, [r3, #8]
 800672a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800672c:	1ad3      	subs	r3, r2, r3
 800672e:	687a      	ldr	r2, [r7, #4]
 8006730:	4293      	cmp	r3, r2
 8006732:	bf28      	it	cs
 8006734:	4613      	movcs	r3, r2
 8006736:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8006738:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800673a:	6a3b      	ldr	r3, [r7, #32]
 800673c:	441a      	add	r2, r3
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	689b      	ldr	r3, [r3, #8]
 8006742:	429a      	cmp	r2, r3
 8006744:	d90b      	bls.n	800675e <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8006746:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800674a:	f383 8811 	msr	BASEPRI, r3
 800674e:	f3bf 8f6f 	isb	sy
 8006752:	f3bf 8f4f 	dsb	sy
 8006756:	61bb      	str	r3, [r7, #24]
}
 8006758:	bf00      	nop
 800675a:	bf00      	nop
 800675c:	e7fd      	b.n	800675a <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	699a      	ldr	r2, [r3, #24]
 8006762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006764:	4413      	add	r3, r2
 8006766:	6a3a      	ldr	r2, [r7, #32]
 8006768:	68b9      	ldr	r1, [r7, #8]
 800676a:	4618      	mov	r0, r3
 800676c:	f003 ff85 	bl	800a67a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 8006770:	687a      	ldr	r2, [r7, #4]
 8006772:	6a3b      	ldr	r3, [r7, #32]
 8006774:	429a      	cmp	r2, r3
 8006776:	d91d      	bls.n	80067b4 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8006778:	687a      	ldr	r2, [r7, #4]
 800677a:	6a3b      	ldr	r3, [r7, #32]
 800677c:	1ad2      	subs	r2, r2, r3
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	689b      	ldr	r3, [r3, #8]
 8006782:	429a      	cmp	r2, r3
 8006784:	d90b      	bls.n	800679e <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8006786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800678a:	f383 8811 	msr	BASEPRI, r3
 800678e:	f3bf 8f6f 	isb	sy
 8006792:	f3bf 8f4f 	dsb	sy
 8006796:	617b      	str	r3, [r7, #20]
}
 8006798:	bf00      	nop
 800679a:	bf00      	nop
 800679c:	e7fd      	b.n	800679a <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800679e:	68fb      	ldr	r3, [r7, #12]
 80067a0:	6998      	ldr	r0, [r3, #24]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	6a3b      	ldr	r3, [r7, #32]
 80067a6:	18d1      	adds	r1, r2, r3
 80067a8:	687a      	ldr	r2, [r7, #4]
 80067aa:	6a3b      	ldr	r3, [r7, #32]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	461a      	mov	r2, r3
 80067b0:	f003 ff63 	bl	800a67a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80067b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067b6:	687b      	ldr	r3, [r7, #4]
 80067b8:	4413      	add	r3, r2
 80067ba:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	689b      	ldr	r3, [r3, #8]
 80067c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067c2:	429a      	cmp	r2, r3
 80067c4:	d304      	bcc.n	80067d0 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	689b      	ldr	r3, [r3, #8]
 80067ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067cc:	1ad3      	subs	r3, r2, r3
 80067ce:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80067d4:	605a      	str	r2, [r3, #4]

	return xCount;
 80067d6:	687b      	ldr	r3, [r7, #4]
}
 80067d8:	4618      	mov	r0, r3
 80067da:	3728      	adds	r7, #40	@ 0x28
 80067dc:	46bd      	mov	sp, r7
 80067de:	bd80      	pop	{r7, pc}

080067e0 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b08a      	sub	sp, #40	@ 0x28
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	60f8      	str	r0, [r7, #12]
 80067e8:	60b9      	str	r1, [r7, #8]
 80067ea:	607a      	str	r2, [r7, #4]
 80067ec:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 80067ee:	687a      	ldr	r2, [r7, #4]
 80067f0:	683b      	ldr	r3, [r7, #0]
 80067f2:	4293      	cmp	r3, r2
 80067f4:	bf28      	it	cs
 80067f6:	4613      	movcs	r3, r2
 80067f8:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 80067fa:	6a3b      	ldr	r3, [r7, #32]
 80067fc:	2b00      	cmp	r3, #0
 80067fe:	d067      	beq.n	80068d0 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8006800:	68fb      	ldr	r3, [r7, #12]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8006806:	68fb      	ldr	r3, [r7, #12]
 8006808:	689a      	ldr	r2, [r3, #8]
 800680a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800680c:	1ad3      	subs	r3, r2, r3
 800680e:	6a3a      	ldr	r2, [r7, #32]
 8006810:	4293      	cmp	r3, r2
 8006812:	bf28      	it	cs
 8006814:	4613      	movcs	r3, r2
 8006816:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8006818:	69fa      	ldr	r2, [r7, #28]
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	429a      	cmp	r2, r3
 800681e:	d90b      	bls.n	8006838 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8006820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006824:	f383 8811 	msr	BASEPRI, r3
 8006828:	f3bf 8f6f 	isb	sy
 800682c:	f3bf 8f4f 	dsb	sy
 8006830:	61bb      	str	r3, [r7, #24]
}
 8006832:	bf00      	nop
 8006834:	bf00      	nop
 8006836:	e7fd      	b.n	8006834 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8006838:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800683a:	69fb      	ldr	r3, [r7, #28]
 800683c:	441a      	add	r2, r3
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	689b      	ldr	r3, [r3, #8]
 8006842:	429a      	cmp	r2, r3
 8006844:	d90b      	bls.n	800685e <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8006846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684a:	f383 8811 	msr	BASEPRI, r3
 800684e:	f3bf 8f6f 	isb	sy
 8006852:	f3bf 8f4f 	dsb	sy
 8006856:	617b      	str	r3, [r7, #20]
}
 8006858:	bf00      	nop
 800685a:	bf00      	nop
 800685c:	e7fd      	b.n	800685a <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800685e:	68fb      	ldr	r3, [r7, #12]
 8006860:	699a      	ldr	r2, [r3, #24]
 8006862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006864:	4413      	add	r3, r2
 8006866:	69fa      	ldr	r2, [r7, #28]
 8006868:	4619      	mov	r1, r3
 800686a:	68b8      	ldr	r0, [r7, #8]
 800686c:	f003 ff05 	bl	800a67a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 8006870:	6a3a      	ldr	r2, [r7, #32]
 8006872:	69fb      	ldr	r3, [r7, #28]
 8006874:	429a      	cmp	r2, r3
 8006876:	d91a      	bls.n	80068ae <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8006878:	6a3a      	ldr	r2, [r7, #32]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	429a      	cmp	r2, r3
 800687e:	d90b      	bls.n	8006898 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 8006880:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006884:	f383 8811 	msr	BASEPRI, r3
 8006888:	f3bf 8f6f 	isb	sy
 800688c:	f3bf 8f4f 	dsb	sy
 8006890:	613b      	str	r3, [r7, #16]
}
 8006892:	bf00      	nop
 8006894:	bf00      	nop
 8006896:	e7fd      	b.n	8006894 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8006898:	68ba      	ldr	r2, [r7, #8]
 800689a:	69fb      	ldr	r3, [r7, #28]
 800689c:	18d0      	adds	r0, r2, r3
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	6999      	ldr	r1, [r3, #24]
 80068a2:	6a3a      	ldr	r2, [r7, #32]
 80068a4:	69fb      	ldr	r3, [r7, #28]
 80068a6:	1ad3      	subs	r3, r2, r3
 80068a8:	461a      	mov	r2, r3
 80068aa:	f003 fee6 	bl	800a67a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80068ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068b0:	6a3b      	ldr	r3, [r7, #32]
 80068b2:	4413      	add	r3, r2
 80068b4:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	689b      	ldr	r3, [r3, #8]
 80068ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068bc:	429a      	cmp	r2, r3
 80068be:	d304      	bcc.n	80068ca <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 80068c0:	68fb      	ldr	r3, [r7, #12]
 80068c2:	689b      	ldr	r3, [r3, #8]
 80068c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068c6:	1ad3      	subs	r3, r2, r3
 80068c8:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 80068ca:	68fb      	ldr	r3, [r7, #12]
 80068cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80068ce:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 80068d0:	6a3b      	ldr	r3, [r7, #32]
}
 80068d2:	4618      	mov	r0, r3
 80068d4:	3728      	adds	r7, #40	@ 0x28
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 80068da:	b480      	push	{r7}
 80068dc:	b085      	sub	sp, #20
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	689a      	ldr	r2, [r3, #8]
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	685b      	ldr	r3, [r3, #4]
 80068ea:	4413      	add	r3, r2
 80068ec:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	68fa      	ldr	r2, [r7, #12]
 80068f4:	1ad3      	subs	r3, r2, r3
 80068f6:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	689b      	ldr	r3, [r3, #8]
 80068fc:	68fa      	ldr	r2, [r7, #12]
 80068fe:	429a      	cmp	r2, r3
 8006900:	d304      	bcc.n	800690c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	689b      	ldr	r3, [r3, #8]
 8006906:	68fa      	ldr	r2, [r7, #12]
 8006908:	1ad3      	subs	r3, r2, r3
 800690a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800690c:	68fb      	ldr	r3, [r7, #12]
}
 800690e:	4618      	mov	r0, r3
 8006910:	3714      	adds	r7, #20
 8006912:	46bd      	mov	sp, r7
 8006914:	bc80      	pop	{r7}
 8006916:	4770      	bx	lr

08006918 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8006918:	b580      	push	{r7, lr}
 800691a:	b086      	sub	sp, #24
 800691c:	af00      	add	r7, sp, #0
 800691e:	60f8      	str	r0, [r7, #12]
 8006920:	60b9      	str	r1, [r7, #8]
 8006922:	607a      	str	r2, [r7, #4]
 8006924:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8006926:	2355      	movs	r3, #85	@ 0x55
 8006928:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	6979      	ldr	r1, [r7, #20]
 800692e:	68b8      	ldr	r0, [r7, #8]
 8006930:	f003 fdf3 	bl	800a51a <memset>
 8006934:	4602      	mov	r2, r0
 8006936:	68bb      	ldr	r3, [r7, #8]
 8006938:	4293      	cmp	r3, r2
 800693a:	d00b      	beq.n	8006954 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800693c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006940:	f383 8811 	msr	BASEPRI, r3
 8006944:	f3bf 8f6f 	isb	sy
 8006948:	f3bf 8f4f 	dsb	sy
 800694c:	613b      	str	r3, [r7, #16]
}
 800694e:	bf00      	nop
 8006950:	bf00      	nop
 8006952:	e7fd      	b.n	8006950 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8006954:	2224      	movs	r2, #36	@ 0x24
 8006956:	2100      	movs	r1, #0
 8006958:	68f8      	ldr	r0, [r7, #12]
 800695a:	f003 fdde 	bl	800a51a <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	68ba      	ldr	r2, [r7, #8]
 8006962:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	687a      	ldr	r2, [r7, #4]
 8006968:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	683a      	ldr	r2, [r7, #0]
 800696e:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	f897 2020 	ldrb.w	r2, [r7, #32]
 8006976:	771a      	strb	r2, [r3, #28]
}
 8006978:	bf00      	nop
 800697a:	3718      	adds	r7, #24
 800697c:	46bd      	mov	sp, r7
 800697e:	bd80      	pop	{r7, pc}

08006980 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006980:	b580      	push	{r7, lr}
 8006982:	b08e      	sub	sp, #56	@ 0x38
 8006984:	af04      	add	r7, sp, #16
 8006986:	60f8      	str	r0, [r7, #12]
 8006988:	60b9      	str	r1, [r7, #8]
 800698a:	607a      	str	r2, [r7, #4]
 800698c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800698e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006990:	2b00      	cmp	r3, #0
 8006992:	d10b      	bne.n	80069ac <xTaskCreateStatic+0x2c>
	__asm volatile
 8006994:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006998:	f383 8811 	msr	BASEPRI, r3
 800699c:	f3bf 8f6f 	isb	sy
 80069a0:	f3bf 8f4f 	dsb	sy
 80069a4:	623b      	str	r3, [r7, #32]
}
 80069a6:	bf00      	nop
 80069a8:	bf00      	nop
 80069aa:	e7fd      	b.n	80069a8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80069ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	d10b      	bne.n	80069ca <xTaskCreateStatic+0x4a>
	__asm volatile
 80069b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069b6:	f383 8811 	msr	BASEPRI, r3
 80069ba:	f3bf 8f6f 	isb	sy
 80069be:	f3bf 8f4f 	dsb	sy
 80069c2:	61fb      	str	r3, [r7, #28]
}
 80069c4:	bf00      	nop
 80069c6:	bf00      	nop
 80069c8:	e7fd      	b.n	80069c6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80069ca:	235c      	movs	r3, #92	@ 0x5c
 80069cc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80069ce:	693b      	ldr	r3, [r7, #16]
 80069d0:	2b5c      	cmp	r3, #92	@ 0x5c
 80069d2:	d00b      	beq.n	80069ec <xTaskCreateStatic+0x6c>
	__asm volatile
 80069d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069d8:	f383 8811 	msr	BASEPRI, r3
 80069dc:	f3bf 8f6f 	isb	sy
 80069e0:	f3bf 8f4f 	dsb	sy
 80069e4:	61bb      	str	r3, [r7, #24]
}
 80069e6:	bf00      	nop
 80069e8:	bf00      	nop
 80069ea:	e7fd      	b.n	80069e8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80069ec:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80069ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d01e      	beq.n	8006a32 <xTaskCreateStatic+0xb2>
 80069f4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d01b      	beq.n	8006a32 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80069fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80069fc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80069fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006a02:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006a04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a06:	2202      	movs	r2, #2
 8006a08:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006a0c:	2300      	movs	r3, #0
 8006a0e:	9303      	str	r3, [sp, #12]
 8006a10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a12:	9302      	str	r3, [sp, #8]
 8006a14:	f107 0314 	add.w	r3, r7, #20
 8006a18:	9301      	str	r3, [sp, #4]
 8006a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a1c:	9300      	str	r3, [sp, #0]
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	687a      	ldr	r2, [r7, #4]
 8006a22:	68b9      	ldr	r1, [r7, #8]
 8006a24:	68f8      	ldr	r0, [r7, #12]
 8006a26:	f000 f850 	bl	8006aca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006a2a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006a2c:	f000 f8de 	bl	8006bec <prvAddNewTaskToReadyList>
 8006a30:	e001      	b.n	8006a36 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006a32:	2300      	movs	r3, #0
 8006a34:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006a36:	697b      	ldr	r3, [r7, #20]
	}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3728      	adds	r7, #40	@ 0x28
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b08c      	sub	sp, #48	@ 0x30
 8006a44:	af04      	add	r7, sp, #16
 8006a46:	60f8      	str	r0, [r7, #12]
 8006a48:	60b9      	str	r1, [r7, #8]
 8006a4a:	603b      	str	r3, [r7, #0]
 8006a4c:	4613      	mov	r3, r2
 8006a4e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006a50:	88fb      	ldrh	r3, [r7, #6]
 8006a52:	009b      	lsls	r3, r3, #2
 8006a54:	4618      	mov	r0, r3
 8006a56:	f001 fddb 	bl	8008610 <pvPortMalloc>
 8006a5a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006a5c:	697b      	ldr	r3, [r7, #20]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	d00e      	beq.n	8006a80 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006a62:	205c      	movs	r0, #92	@ 0x5c
 8006a64:	f001 fdd4 	bl	8008610 <pvPortMalloc>
 8006a68:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006a6a:	69fb      	ldr	r3, [r7, #28]
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d003      	beq.n	8006a78 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006a70:	69fb      	ldr	r3, [r7, #28]
 8006a72:	697a      	ldr	r2, [r7, #20]
 8006a74:	631a      	str	r2, [r3, #48]	@ 0x30
 8006a76:	e005      	b.n	8006a84 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006a78:	6978      	ldr	r0, [r7, #20]
 8006a7a:	f001 fe97 	bl	80087ac <vPortFree>
 8006a7e:	e001      	b.n	8006a84 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006a80:	2300      	movs	r3, #0
 8006a82:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006a84:	69fb      	ldr	r3, [r7, #28]
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d017      	beq.n	8006aba <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006a8a:	69fb      	ldr	r3, [r7, #28]
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006a92:	88fa      	ldrh	r2, [r7, #6]
 8006a94:	2300      	movs	r3, #0
 8006a96:	9303      	str	r3, [sp, #12]
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	9302      	str	r3, [sp, #8]
 8006a9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a9e:	9301      	str	r3, [sp, #4]
 8006aa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006aa2:	9300      	str	r3, [sp, #0]
 8006aa4:	683b      	ldr	r3, [r7, #0]
 8006aa6:	68b9      	ldr	r1, [r7, #8]
 8006aa8:	68f8      	ldr	r0, [r7, #12]
 8006aaa:	f000 f80e 	bl	8006aca <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006aae:	69f8      	ldr	r0, [r7, #28]
 8006ab0:	f000 f89c 	bl	8006bec <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006ab4:	2301      	movs	r3, #1
 8006ab6:	61bb      	str	r3, [r7, #24]
 8006ab8:	e002      	b.n	8006ac0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8006aba:	f04f 33ff 	mov.w	r3, #4294967295
 8006abe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006ac0:	69bb      	ldr	r3, [r7, #24]
	}
 8006ac2:	4618      	mov	r0, r3
 8006ac4:	3720      	adds	r7, #32
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006aca:	b580      	push	{r7, lr}
 8006acc:	b088      	sub	sp, #32
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	60f8      	str	r0, [r7, #12]
 8006ad2:	60b9      	str	r1, [r7, #8]
 8006ad4:	607a      	str	r2, [r7, #4]
 8006ad6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8006ad8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ada:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	009b      	lsls	r3, r3, #2
 8006ae0:	461a      	mov	r2, r3
 8006ae2:	21a5      	movs	r1, #165	@ 0xa5
 8006ae4:	f003 fd19 	bl	800a51a <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8006ae8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006aea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006af2:	3b01      	subs	r3, #1
 8006af4:	009b      	lsls	r3, r3, #2
 8006af6:	4413      	add	r3, r2
 8006af8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006afa:	69bb      	ldr	r3, [r7, #24]
 8006afc:	f023 0307 	bic.w	r3, r3, #7
 8006b00:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006b02:	69bb      	ldr	r3, [r7, #24]
 8006b04:	f003 0307 	and.w	r3, r3, #7
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d00b      	beq.n	8006b24 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006b0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b10:	f383 8811 	msr	BASEPRI, r3
 8006b14:	f3bf 8f6f 	isb	sy
 8006b18:	f3bf 8f4f 	dsb	sy
 8006b1c:	617b      	str	r3, [r7, #20]
}
 8006b1e:	bf00      	nop
 8006b20:	bf00      	nop
 8006b22:	e7fd      	b.n	8006b20 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006b24:	68bb      	ldr	r3, [r7, #8]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d01f      	beq.n	8006b6a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	61fb      	str	r3, [r7, #28]
 8006b2e:	e012      	b.n	8006b56 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006b30:	68ba      	ldr	r2, [r7, #8]
 8006b32:	69fb      	ldr	r3, [r7, #28]
 8006b34:	4413      	add	r3, r2
 8006b36:	7819      	ldrb	r1, [r3, #0]
 8006b38:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006b3a:	69fb      	ldr	r3, [r7, #28]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	3334      	adds	r3, #52	@ 0x34
 8006b40:	460a      	mov	r2, r1
 8006b42:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006b44:	68ba      	ldr	r2, [r7, #8]
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	4413      	add	r3, r2
 8006b4a:	781b      	ldrb	r3, [r3, #0]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d006      	beq.n	8006b5e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006b50:	69fb      	ldr	r3, [r7, #28]
 8006b52:	3301      	adds	r3, #1
 8006b54:	61fb      	str	r3, [r7, #28]
 8006b56:	69fb      	ldr	r3, [r7, #28]
 8006b58:	2b0f      	cmp	r3, #15
 8006b5a:	d9e9      	bls.n	8006b30 <prvInitialiseNewTask+0x66>
 8006b5c:	e000      	b.n	8006b60 <prvInitialiseNewTask+0x96>
			{
				break;
 8006b5e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006b60:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b62:	2200      	movs	r2, #0
 8006b64:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8006b68:	e003      	b.n	8006b72 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006b6a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006b72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b74:	2b37      	cmp	r3, #55	@ 0x37
 8006b76:	d901      	bls.n	8006b7c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006b78:	2337      	movs	r3, #55	@ 0x37
 8006b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b7e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b80:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006b82:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b84:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006b86:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006b8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b90:	3304      	adds	r3, #4
 8006b92:	4618      	mov	r0, r3
 8006b94:	f7fe fe1b 	bl	80057ce <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006b98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006b9a:	3318      	adds	r3, #24
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fe16 	bl	80057ce <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006ba4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006ba6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ba8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006baa:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006bb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bb4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bb6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8006bb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bba:	2200      	movs	r2, #0
 8006bbc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006bbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bc0:	2200      	movs	r2, #0
 8006bc2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8006bc6:	683a      	ldr	r2, [r7, #0]
 8006bc8:	68f9      	ldr	r1, [r7, #12]
 8006bca:	69b8      	ldr	r0, [r7, #24]
 8006bcc:	f001 fb2c 	bl	8008228 <pxPortInitialiseStack>
 8006bd0:	4602      	mov	r2, r0
 8006bd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006bd4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8006bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd8:	2b00      	cmp	r3, #0
 8006bda:	d002      	beq.n	8006be2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006bdc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bde:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006be0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006be2:	bf00      	nop
 8006be4:	3720      	adds	r7, #32
 8006be6:	46bd      	mov	sp, r7
 8006be8:	bd80      	pop	{r7, pc}
	...

08006bec <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b082      	sub	sp, #8
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006bf4:	f001 fc0a 	bl	800840c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006bf8:	4b2d      	ldr	r3, [pc, #180]	@ (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006bfa:	681b      	ldr	r3, [r3, #0]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	4a2c      	ldr	r2, [pc, #176]	@ (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c00:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006c02:	4b2c      	ldr	r3, [pc, #176]	@ (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d109      	bne.n	8006c1e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8006c0a:	4a2a      	ldr	r2, [pc, #168]	@ (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006c10:	4b27      	ldr	r3, [pc, #156]	@ (8006cb0 <prvAddNewTaskToReadyList+0xc4>)
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	2b01      	cmp	r3, #1
 8006c16:	d110      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006c18:	f000 fbe6 	bl	80073e8 <prvInitialiseTaskLists>
 8006c1c:	e00d      	b.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006c1e:	4b26      	ldr	r3, [pc, #152]	@ (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d109      	bne.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006c26:	4b23      	ldr	r3, [pc, #140]	@ (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c30:	429a      	cmp	r2, r3
 8006c32:	d802      	bhi.n	8006c3a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006c34:	4a1f      	ldr	r2, [pc, #124]	@ (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8006c3a:	4b20      	ldr	r3, [pc, #128]	@ (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	3301      	adds	r3, #1
 8006c40:	4a1e      	ldr	r2, [pc, #120]	@ (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c42:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006c44:	4b1d      	ldr	r3, [pc, #116]	@ (8006cbc <prvAddNewTaskToReadyList+0xd0>)
 8006c46:	681a      	ldr	r2, [r3, #0]
 8006c48:	687b      	ldr	r3, [r7, #4]
 8006c4a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c50:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc0 <prvAddNewTaskToReadyList+0xd4>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	429a      	cmp	r2, r3
 8006c56:	d903      	bls.n	8006c60 <prvAddNewTaskToReadyList+0x74>
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	4a18      	ldr	r2, [pc, #96]	@ (8006cc0 <prvAddNewTaskToReadyList+0xd4>)
 8006c5e:	6013      	str	r3, [r2, #0]
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c64:	4613      	mov	r3, r2
 8006c66:	009b      	lsls	r3, r3, #2
 8006c68:	4413      	add	r3, r2
 8006c6a:	009b      	lsls	r3, r3, #2
 8006c6c:	4a15      	ldr	r2, [pc, #84]	@ (8006cc4 <prvAddNewTaskToReadyList+0xd8>)
 8006c6e:	441a      	add	r2, r3
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	3304      	adds	r3, #4
 8006c74:	4619      	mov	r1, r3
 8006c76:	4610      	mov	r0, r2
 8006c78:	f7fe fdb5 	bl	80057e6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006c7c:	f001 fbf6 	bl	800846c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006c80:	4b0d      	ldr	r3, [pc, #52]	@ (8006cb8 <prvAddNewTaskToReadyList+0xcc>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d00e      	beq.n	8006ca6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006c88:	4b0a      	ldr	r3, [pc, #40]	@ (8006cb4 <prvAddNewTaskToReadyList+0xc8>)
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c92:	429a      	cmp	r2, r3
 8006c94:	d207      	bcs.n	8006ca6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006c96:	4b0c      	ldr	r3, [pc, #48]	@ (8006cc8 <prvAddNewTaskToReadyList+0xdc>)
 8006c98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006c9c:	601a      	str	r2, [r3, #0]
 8006c9e:	f3bf 8f4f 	dsb	sy
 8006ca2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006ca6:	bf00      	nop
 8006ca8:	3708      	adds	r7, #8
 8006caa:	46bd      	mov	sp, r7
 8006cac:	bd80      	pop	{r7, pc}
 8006cae:	bf00      	nop
 8006cb0:	20000e68 	.word	0x20000e68
 8006cb4:	20000994 	.word	0x20000994
 8006cb8:	20000e74 	.word	0x20000e74
 8006cbc:	20000e84 	.word	0x20000e84
 8006cc0:	20000e70 	.word	0x20000e70
 8006cc4:	20000998 	.word	0x20000998
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b08a      	sub	sp, #40	@ 0x28
 8006cd0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006cd6:	2300      	movs	r3, #0
 8006cd8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006cda:	463a      	mov	r2, r7
 8006cdc:	1d39      	adds	r1, r7, #4
 8006cde:	f107 0308 	add.w	r3, r7, #8
 8006ce2:	4618      	mov	r0, r3
 8006ce4:	f7fe fd22 	bl	800572c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006ce8:	6839      	ldr	r1, [r7, #0]
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	68ba      	ldr	r2, [r7, #8]
 8006cee:	9202      	str	r2, [sp, #8]
 8006cf0:	9301      	str	r3, [sp, #4]
 8006cf2:	2300      	movs	r3, #0
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	460a      	mov	r2, r1
 8006cfa:	4922      	ldr	r1, [pc, #136]	@ (8006d84 <vTaskStartScheduler+0xb8>)
 8006cfc:	4822      	ldr	r0, [pc, #136]	@ (8006d88 <vTaskStartScheduler+0xbc>)
 8006cfe:	f7ff fe3f 	bl	8006980 <xTaskCreateStatic>
 8006d02:	4603      	mov	r3, r0
 8006d04:	4a21      	ldr	r2, [pc, #132]	@ (8006d8c <vTaskStartScheduler+0xc0>)
 8006d06:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006d08:	4b20      	ldr	r3, [pc, #128]	@ (8006d8c <vTaskStartScheduler+0xc0>)
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d002      	beq.n	8006d16 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006d10:	2301      	movs	r3, #1
 8006d12:	617b      	str	r3, [r7, #20]
 8006d14:	e001      	b.n	8006d1a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006d1a:	697b      	ldr	r3, [r7, #20]
 8006d1c:	2b01      	cmp	r3, #1
 8006d1e:	d102      	bne.n	8006d26 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006d20:	f000 ff2a 	bl	8007b78 <xTimerCreateTimerTask>
 8006d24:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006d26:	697b      	ldr	r3, [r7, #20]
 8006d28:	2b01      	cmp	r3, #1
 8006d2a:	d116      	bne.n	8006d5a <vTaskStartScheduler+0x8e>
	__asm volatile
 8006d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d30:	f383 8811 	msr	BASEPRI, r3
 8006d34:	f3bf 8f6f 	isb	sy
 8006d38:	f3bf 8f4f 	dsb	sy
 8006d3c:	613b      	str	r3, [r7, #16]
}
 8006d3e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006d40:	4b13      	ldr	r3, [pc, #76]	@ (8006d90 <vTaskStartScheduler+0xc4>)
 8006d42:	f04f 32ff 	mov.w	r2, #4294967295
 8006d46:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006d48:	4b12      	ldr	r3, [pc, #72]	@ (8006d94 <vTaskStartScheduler+0xc8>)
 8006d4a:	2201      	movs	r2, #1
 8006d4c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006d4e:	4b12      	ldr	r3, [pc, #72]	@ (8006d98 <vTaskStartScheduler+0xcc>)
 8006d50:	2200      	movs	r2, #0
 8006d52:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006d54:	f001 fae8 	bl	8008328 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006d58:	e00f      	b.n	8006d7a <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006d5a:	697b      	ldr	r3, [r7, #20]
 8006d5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006d60:	d10b      	bne.n	8006d7a <vTaskStartScheduler+0xae>
	__asm volatile
 8006d62:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d66:	f383 8811 	msr	BASEPRI, r3
 8006d6a:	f3bf 8f6f 	isb	sy
 8006d6e:	f3bf 8f4f 	dsb	sy
 8006d72:	60fb      	str	r3, [r7, #12]
}
 8006d74:	bf00      	nop
 8006d76:	bf00      	nop
 8006d78:	e7fd      	b.n	8006d76 <vTaskStartScheduler+0xaa>
}
 8006d7a:	bf00      	nop
 8006d7c:	3718      	adds	r7, #24
 8006d7e:	46bd      	mov	sp, r7
 8006d80:	bd80      	pop	{r7, pc}
 8006d82:	bf00      	nop
 8006d84:	0800d23c 	.word	0x0800d23c
 8006d88:	080073b9 	.word	0x080073b9
 8006d8c:	20000e8c 	.word	0x20000e8c
 8006d90:	20000e88 	.word	0x20000e88
 8006d94:	20000e74 	.word	0x20000e74
 8006d98:	20000e6c 	.word	0x20000e6c

08006d9c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006da0:	4b04      	ldr	r3, [pc, #16]	@ (8006db4 <vTaskSuspendAll+0x18>)
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	3301      	adds	r3, #1
 8006da6:	4a03      	ldr	r2, [pc, #12]	@ (8006db4 <vTaskSuspendAll+0x18>)
 8006da8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006daa:	bf00      	nop
 8006dac:	46bd      	mov	sp, r7
 8006dae:	bc80      	pop	{r7}
 8006db0:	4770      	bx	lr
 8006db2:	bf00      	nop
 8006db4:	20000e90 	.word	0x20000e90

08006db8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b084      	sub	sp, #16
 8006dbc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006dbe:	2300      	movs	r3, #0
 8006dc0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006dc6:	4b42      	ldr	r3, [pc, #264]	@ (8006ed0 <xTaskResumeAll+0x118>)
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d10b      	bne.n	8006de6 <xTaskResumeAll+0x2e>
	__asm volatile
 8006dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dd2:	f383 8811 	msr	BASEPRI, r3
 8006dd6:	f3bf 8f6f 	isb	sy
 8006dda:	f3bf 8f4f 	dsb	sy
 8006dde:	603b      	str	r3, [r7, #0]
}
 8006de0:	bf00      	nop
 8006de2:	bf00      	nop
 8006de4:	e7fd      	b.n	8006de2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006de6:	f001 fb11 	bl	800840c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006dea:	4b39      	ldr	r3, [pc, #228]	@ (8006ed0 <xTaskResumeAll+0x118>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	3b01      	subs	r3, #1
 8006df0:	4a37      	ldr	r2, [pc, #220]	@ (8006ed0 <xTaskResumeAll+0x118>)
 8006df2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006df4:	4b36      	ldr	r3, [pc, #216]	@ (8006ed0 <xTaskResumeAll+0x118>)
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d162      	bne.n	8006ec2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006dfc:	4b35      	ldr	r3, [pc, #212]	@ (8006ed4 <xTaskResumeAll+0x11c>)
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d05e      	beq.n	8006ec2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e04:	e02f      	b.n	8006e66 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e06:	4b34      	ldr	r3, [pc, #208]	@ (8006ed8 <xTaskResumeAll+0x120>)
 8006e08:	68db      	ldr	r3, [r3, #12]
 8006e0a:	68db      	ldr	r3, [r3, #12]
 8006e0c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006e0e:	68fb      	ldr	r3, [r7, #12]
 8006e10:	3318      	adds	r3, #24
 8006e12:	4618      	mov	r0, r3
 8006e14:	f7fe fd42 	bl	800589c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	4618      	mov	r0, r3
 8006e1e:	f7fe fd3d 	bl	800589c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e26:	4b2d      	ldr	r3, [pc, #180]	@ (8006edc <xTaskResumeAll+0x124>)
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d903      	bls.n	8006e36 <xTaskResumeAll+0x7e>
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e32:	4a2a      	ldr	r2, [pc, #168]	@ (8006edc <xTaskResumeAll+0x124>)
 8006e34:	6013      	str	r3, [r2, #0]
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e3a:	4613      	mov	r3, r2
 8006e3c:	009b      	lsls	r3, r3, #2
 8006e3e:	4413      	add	r3, r2
 8006e40:	009b      	lsls	r3, r3, #2
 8006e42:	4a27      	ldr	r2, [pc, #156]	@ (8006ee0 <xTaskResumeAll+0x128>)
 8006e44:	441a      	add	r2, r3
 8006e46:	68fb      	ldr	r3, [r7, #12]
 8006e48:	3304      	adds	r3, #4
 8006e4a:	4619      	mov	r1, r3
 8006e4c:	4610      	mov	r0, r2
 8006e4e:	f7fe fcca 	bl	80057e6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e56:	4b23      	ldr	r3, [pc, #140]	@ (8006ee4 <xTaskResumeAll+0x12c>)
 8006e58:	681b      	ldr	r3, [r3, #0]
 8006e5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5c:	429a      	cmp	r2, r3
 8006e5e:	d302      	bcc.n	8006e66 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006e60:	4b21      	ldr	r3, [pc, #132]	@ (8006ee8 <xTaskResumeAll+0x130>)
 8006e62:	2201      	movs	r2, #1
 8006e64:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006e66:	4b1c      	ldr	r3, [pc, #112]	@ (8006ed8 <xTaskResumeAll+0x120>)
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d1cb      	bne.n	8006e06 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d001      	beq.n	8006e78 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006e74:	f000 fb56 	bl	8007524 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006e78:	4b1c      	ldr	r3, [pc, #112]	@ (8006eec <xTaskResumeAll+0x134>)
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006e7e:	687b      	ldr	r3, [r7, #4]
 8006e80:	2b00      	cmp	r3, #0
 8006e82:	d010      	beq.n	8006ea6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006e84:	f000 f844 	bl	8006f10 <xTaskIncrementTick>
 8006e88:	4603      	mov	r3, r0
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d002      	beq.n	8006e94 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006e8e:	4b16      	ldr	r3, [pc, #88]	@ (8006ee8 <xTaskResumeAll+0x130>)
 8006e90:	2201      	movs	r2, #1
 8006e92:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	3b01      	subs	r3, #1
 8006e98:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2b00      	cmp	r3, #0
 8006e9e:	d1f1      	bne.n	8006e84 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006ea0:	4b12      	ldr	r3, [pc, #72]	@ (8006eec <xTaskResumeAll+0x134>)
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006ea6:	4b10      	ldr	r3, [pc, #64]	@ (8006ee8 <xTaskResumeAll+0x130>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d009      	beq.n	8006ec2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006eb2:	4b0f      	ldr	r3, [pc, #60]	@ (8006ef0 <xTaskResumeAll+0x138>)
 8006eb4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006eb8:	601a      	str	r2, [r3, #0]
 8006eba:	f3bf 8f4f 	dsb	sy
 8006ebe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006ec2:	f001 fad3 	bl	800846c <vPortExitCritical>

	return xAlreadyYielded;
 8006ec6:	68bb      	ldr	r3, [r7, #8]
}
 8006ec8:	4618      	mov	r0, r3
 8006eca:	3710      	adds	r7, #16
 8006ecc:	46bd      	mov	sp, r7
 8006ece:	bd80      	pop	{r7, pc}
 8006ed0:	20000e90 	.word	0x20000e90
 8006ed4:	20000e68 	.word	0x20000e68
 8006ed8:	20000e28 	.word	0x20000e28
 8006edc:	20000e70 	.word	0x20000e70
 8006ee0:	20000998 	.word	0x20000998
 8006ee4:	20000994 	.word	0x20000994
 8006ee8:	20000e7c 	.word	0x20000e7c
 8006eec:	20000e78 	.word	0x20000e78
 8006ef0:	e000ed04 	.word	0xe000ed04

08006ef4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006ef4:	b480      	push	{r7}
 8006ef6:	b083      	sub	sp, #12
 8006ef8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006efa:	4b04      	ldr	r3, [pc, #16]	@ (8006f0c <xTaskGetTickCount+0x18>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006f00:	687b      	ldr	r3, [r7, #4]
}
 8006f02:	4618      	mov	r0, r3
 8006f04:	370c      	adds	r7, #12
 8006f06:	46bd      	mov	sp, r7
 8006f08:	bc80      	pop	{r7}
 8006f0a:	4770      	bx	lr
 8006f0c:	20000e6c 	.word	0x20000e6c

08006f10 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006f10:	b580      	push	{r7, lr}
 8006f12:	b086      	sub	sp, #24
 8006f14:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006f16:	2300      	movs	r3, #0
 8006f18:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f1a:	4b4f      	ldr	r3, [pc, #316]	@ (8007058 <xTaskIncrementTick+0x148>)
 8006f1c:	681b      	ldr	r3, [r3, #0]
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	f040 8090 	bne.w	8007044 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006f24:	4b4d      	ldr	r3, [pc, #308]	@ (800705c <xTaskIncrementTick+0x14c>)
 8006f26:	681b      	ldr	r3, [r3, #0]
 8006f28:	3301      	adds	r3, #1
 8006f2a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006f2c:	4a4b      	ldr	r2, [pc, #300]	@ (800705c <xTaskIncrementTick+0x14c>)
 8006f2e:	693b      	ldr	r3, [r7, #16]
 8006f30:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006f32:	693b      	ldr	r3, [r7, #16]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d121      	bne.n	8006f7c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006f38:	4b49      	ldr	r3, [pc, #292]	@ (8007060 <xTaskIncrementTick+0x150>)
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	681b      	ldr	r3, [r3, #0]
 8006f3e:	2b00      	cmp	r3, #0
 8006f40:	d00b      	beq.n	8006f5a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f46:	f383 8811 	msr	BASEPRI, r3
 8006f4a:	f3bf 8f6f 	isb	sy
 8006f4e:	f3bf 8f4f 	dsb	sy
 8006f52:	603b      	str	r3, [r7, #0]
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	e7fd      	b.n	8006f56 <xTaskIncrementTick+0x46>
 8006f5a:	4b41      	ldr	r3, [pc, #260]	@ (8007060 <xTaskIncrementTick+0x150>)
 8006f5c:	681b      	ldr	r3, [r3, #0]
 8006f5e:	60fb      	str	r3, [r7, #12]
 8006f60:	4b40      	ldr	r3, [pc, #256]	@ (8007064 <xTaskIncrementTick+0x154>)
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	4a3e      	ldr	r2, [pc, #248]	@ (8007060 <xTaskIncrementTick+0x150>)
 8006f66:	6013      	str	r3, [r2, #0]
 8006f68:	4a3e      	ldr	r2, [pc, #248]	@ (8007064 <xTaskIncrementTick+0x154>)
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	6013      	str	r3, [r2, #0]
 8006f6e:	4b3e      	ldr	r3, [pc, #248]	@ (8007068 <xTaskIncrementTick+0x158>)
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	3301      	adds	r3, #1
 8006f74:	4a3c      	ldr	r2, [pc, #240]	@ (8007068 <xTaskIncrementTick+0x158>)
 8006f76:	6013      	str	r3, [r2, #0]
 8006f78:	f000 fad4 	bl	8007524 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006f7c:	4b3b      	ldr	r3, [pc, #236]	@ (800706c <xTaskIncrementTick+0x15c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	693a      	ldr	r2, [r7, #16]
 8006f82:	429a      	cmp	r2, r3
 8006f84:	d349      	bcc.n	800701a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006f86:	4b36      	ldr	r3, [pc, #216]	@ (8007060 <xTaskIncrementTick+0x150>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f90:	4b36      	ldr	r3, [pc, #216]	@ (800706c <xTaskIncrementTick+0x15c>)
 8006f92:	f04f 32ff 	mov.w	r2, #4294967295
 8006f96:	601a      	str	r2, [r3, #0]
					break;
 8006f98:	e03f      	b.n	800701a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f9a:	4b31      	ldr	r3, [pc, #196]	@ (8007060 <xTaskIncrementTick+0x150>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	68db      	ldr	r3, [r3, #12]
 8006fa2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	685b      	ldr	r3, [r3, #4]
 8006fa8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006faa:	693a      	ldr	r2, [r7, #16]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d203      	bcs.n	8006fba <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006fb2:	4a2e      	ldr	r2, [pc, #184]	@ (800706c <xTaskIncrementTick+0x15c>)
 8006fb4:	687b      	ldr	r3, [r7, #4]
 8006fb6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006fb8:	e02f      	b.n	800701a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fba:	68bb      	ldr	r3, [r7, #8]
 8006fbc:	3304      	adds	r3, #4
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	f7fe fc6c 	bl	800589c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006fc4:	68bb      	ldr	r3, [r7, #8]
 8006fc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006fc8:	2b00      	cmp	r3, #0
 8006fca:	d004      	beq.n	8006fd6 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006fcc:	68bb      	ldr	r3, [r7, #8]
 8006fce:	3318      	adds	r3, #24
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fc63 	bl	800589c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006fd6:	68bb      	ldr	r3, [r7, #8]
 8006fd8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fda:	4b25      	ldr	r3, [pc, #148]	@ (8007070 <xTaskIncrementTick+0x160>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	429a      	cmp	r2, r3
 8006fe0:	d903      	bls.n	8006fea <xTaskIncrementTick+0xda>
 8006fe2:	68bb      	ldr	r3, [r7, #8]
 8006fe4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe6:	4a22      	ldr	r2, [pc, #136]	@ (8007070 <xTaskIncrementTick+0x160>)
 8006fe8:	6013      	str	r3, [r2, #0]
 8006fea:	68bb      	ldr	r3, [r7, #8]
 8006fec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fee:	4613      	mov	r3, r2
 8006ff0:	009b      	lsls	r3, r3, #2
 8006ff2:	4413      	add	r3, r2
 8006ff4:	009b      	lsls	r3, r3, #2
 8006ff6:	4a1f      	ldr	r2, [pc, #124]	@ (8007074 <xTaskIncrementTick+0x164>)
 8006ff8:	441a      	add	r2, r3
 8006ffa:	68bb      	ldr	r3, [r7, #8]
 8006ffc:	3304      	adds	r3, #4
 8006ffe:	4619      	mov	r1, r3
 8007000:	4610      	mov	r0, r2
 8007002:	f7fe fbf0 	bl	80057e6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007006:	68bb      	ldr	r3, [r7, #8]
 8007008:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800700a:	4b1b      	ldr	r3, [pc, #108]	@ (8007078 <xTaskIncrementTick+0x168>)
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007010:	429a      	cmp	r2, r3
 8007012:	d3b8      	bcc.n	8006f86 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8007014:	2301      	movs	r3, #1
 8007016:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007018:	e7b5      	b.n	8006f86 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800701a:	4b17      	ldr	r3, [pc, #92]	@ (8007078 <xTaskIncrementTick+0x168>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007020:	4914      	ldr	r1, [pc, #80]	@ (8007074 <xTaskIncrementTick+0x164>)
 8007022:	4613      	mov	r3, r2
 8007024:	009b      	lsls	r3, r3, #2
 8007026:	4413      	add	r3, r2
 8007028:	009b      	lsls	r3, r3, #2
 800702a:	440b      	add	r3, r1
 800702c:	681b      	ldr	r3, [r3, #0]
 800702e:	2b01      	cmp	r3, #1
 8007030:	d901      	bls.n	8007036 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8007032:	2301      	movs	r3, #1
 8007034:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007036:	4b11      	ldr	r3, [pc, #68]	@ (800707c <xTaskIncrementTick+0x16c>)
 8007038:	681b      	ldr	r3, [r3, #0]
 800703a:	2b00      	cmp	r3, #0
 800703c:	d007      	beq.n	800704e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800703e:	2301      	movs	r3, #1
 8007040:	617b      	str	r3, [r7, #20]
 8007042:	e004      	b.n	800704e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007044:	4b0e      	ldr	r3, [pc, #56]	@ (8007080 <xTaskIncrementTick+0x170>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	3301      	adds	r3, #1
 800704a:	4a0d      	ldr	r2, [pc, #52]	@ (8007080 <xTaskIncrementTick+0x170>)
 800704c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800704e:	697b      	ldr	r3, [r7, #20]
}
 8007050:	4618      	mov	r0, r3
 8007052:	3718      	adds	r7, #24
 8007054:	46bd      	mov	sp, r7
 8007056:	bd80      	pop	{r7, pc}
 8007058:	20000e90 	.word	0x20000e90
 800705c:	20000e6c 	.word	0x20000e6c
 8007060:	20000e20 	.word	0x20000e20
 8007064:	20000e24 	.word	0x20000e24
 8007068:	20000e80 	.word	0x20000e80
 800706c:	20000e88 	.word	0x20000e88
 8007070:	20000e70 	.word	0x20000e70
 8007074:	20000998 	.word	0x20000998
 8007078:	20000994 	.word	0x20000994
 800707c:	20000e7c 	.word	0x20000e7c
 8007080:	20000e78 	.word	0x20000e78

08007084 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007084:	b480      	push	{r7}
 8007086:	b085      	sub	sp, #20
 8007088:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800708a:	4b28      	ldr	r3, [pc, #160]	@ (800712c <vTaskSwitchContext+0xa8>)
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	2b00      	cmp	r3, #0
 8007090:	d003      	beq.n	800709a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007092:	4b27      	ldr	r3, [pc, #156]	@ (8007130 <vTaskSwitchContext+0xac>)
 8007094:	2201      	movs	r2, #1
 8007096:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007098:	e042      	b.n	8007120 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 800709a:	4b25      	ldr	r3, [pc, #148]	@ (8007130 <vTaskSwitchContext+0xac>)
 800709c:	2200      	movs	r2, #0
 800709e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070a0:	4b24      	ldr	r3, [pc, #144]	@ (8007134 <vTaskSwitchContext+0xb0>)
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	60fb      	str	r3, [r7, #12]
 80070a6:	e011      	b.n	80070cc <vTaskSwitchContext+0x48>
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	2b00      	cmp	r3, #0
 80070ac:	d10b      	bne.n	80070c6 <vTaskSwitchContext+0x42>
	__asm volatile
 80070ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070b2:	f383 8811 	msr	BASEPRI, r3
 80070b6:	f3bf 8f6f 	isb	sy
 80070ba:	f3bf 8f4f 	dsb	sy
 80070be:	607b      	str	r3, [r7, #4]
}
 80070c0:	bf00      	nop
 80070c2:	bf00      	nop
 80070c4:	e7fd      	b.n	80070c2 <vTaskSwitchContext+0x3e>
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	3b01      	subs	r3, #1
 80070ca:	60fb      	str	r3, [r7, #12]
 80070cc:	491a      	ldr	r1, [pc, #104]	@ (8007138 <vTaskSwitchContext+0xb4>)
 80070ce:	68fa      	ldr	r2, [r7, #12]
 80070d0:	4613      	mov	r3, r2
 80070d2:	009b      	lsls	r3, r3, #2
 80070d4:	4413      	add	r3, r2
 80070d6:	009b      	lsls	r3, r3, #2
 80070d8:	440b      	add	r3, r1
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d0e3      	beq.n	80070a8 <vTaskSwitchContext+0x24>
 80070e0:	68fa      	ldr	r2, [r7, #12]
 80070e2:	4613      	mov	r3, r2
 80070e4:	009b      	lsls	r3, r3, #2
 80070e6:	4413      	add	r3, r2
 80070e8:	009b      	lsls	r3, r3, #2
 80070ea:	4a13      	ldr	r2, [pc, #76]	@ (8007138 <vTaskSwitchContext+0xb4>)
 80070ec:	4413      	add	r3, r2
 80070ee:	60bb      	str	r3, [r7, #8]
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	685b      	ldr	r3, [r3, #4]
 80070f4:	685a      	ldr	r2, [r3, #4]
 80070f6:	68bb      	ldr	r3, [r7, #8]
 80070f8:	605a      	str	r2, [r3, #4]
 80070fa:	68bb      	ldr	r3, [r7, #8]
 80070fc:	685a      	ldr	r2, [r3, #4]
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	3308      	adds	r3, #8
 8007102:	429a      	cmp	r2, r3
 8007104:	d104      	bne.n	8007110 <vTaskSwitchContext+0x8c>
 8007106:	68bb      	ldr	r3, [r7, #8]
 8007108:	685b      	ldr	r3, [r3, #4]
 800710a:	685a      	ldr	r2, [r3, #4]
 800710c:	68bb      	ldr	r3, [r7, #8]
 800710e:	605a      	str	r2, [r3, #4]
 8007110:	68bb      	ldr	r3, [r7, #8]
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	68db      	ldr	r3, [r3, #12]
 8007116:	4a09      	ldr	r2, [pc, #36]	@ (800713c <vTaskSwitchContext+0xb8>)
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	4a06      	ldr	r2, [pc, #24]	@ (8007134 <vTaskSwitchContext+0xb0>)
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	6013      	str	r3, [r2, #0]
}
 8007120:	bf00      	nop
 8007122:	3714      	adds	r7, #20
 8007124:	46bd      	mov	sp, r7
 8007126:	bc80      	pop	{r7}
 8007128:	4770      	bx	lr
 800712a:	bf00      	nop
 800712c:	20000e90 	.word	0x20000e90
 8007130:	20000e7c 	.word	0x20000e7c
 8007134:	20000e70 	.word	0x20000e70
 8007138:	20000998 	.word	0x20000998
 800713c:	20000994 	.word	0x20000994

08007140 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b084      	sub	sp, #16
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
 8007148:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	2b00      	cmp	r3, #0
 800714e:	d10b      	bne.n	8007168 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8007150:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007154:	f383 8811 	msr	BASEPRI, r3
 8007158:	f3bf 8f6f 	isb	sy
 800715c:	f3bf 8f4f 	dsb	sy
 8007160:	60fb      	str	r3, [r7, #12]
}
 8007162:	bf00      	nop
 8007164:	bf00      	nop
 8007166:	e7fd      	b.n	8007164 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007168:	4b07      	ldr	r3, [pc, #28]	@ (8007188 <vTaskPlaceOnEventList+0x48>)
 800716a:	681b      	ldr	r3, [r3, #0]
 800716c:	3318      	adds	r3, #24
 800716e:	4619      	mov	r1, r3
 8007170:	6878      	ldr	r0, [r7, #4]
 8007172:	f7fe fb5b 	bl	800582c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007176:	2101      	movs	r1, #1
 8007178:	6838      	ldr	r0, [r7, #0]
 800717a:	f000 fca9 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>
}
 800717e:	bf00      	nop
 8007180:	3710      	adds	r7, #16
 8007182:	46bd      	mov	sp, r7
 8007184:	bd80      	pop	{r7, pc}
 8007186:	bf00      	nop
 8007188:	20000994 	.word	0x20000994

0800718c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800718c:	b580      	push	{r7, lr}
 800718e:	b086      	sub	sp, #24
 8007190:	af00      	add	r7, sp, #0
 8007192:	60f8      	str	r0, [r7, #12]
 8007194:	60b9      	str	r1, [r7, #8]
 8007196:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	2b00      	cmp	r3, #0
 800719c:	d10b      	bne.n	80071b6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	617b      	str	r3, [r7, #20]
}
 80071b0:	bf00      	nop
 80071b2:	bf00      	nop
 80071b4:	e7fd      	b.n	80071b2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80071b6:	4b0a      	ldr	r3, [pc, #40]	@ (80071e0 <vTaskPlaceOnEventListRestricted+0x54>)
 80071b8:	681b      	ldr	r3, [r3, #0]
 80071ba:	3318      	adds	r3, #24
 80071bc:	4619      	mov	r1, r3
 80071be:	68f8      	ldr	r0, [r7, #12]
 80071c0:	f7fe fb11 	bl	80057e6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d002      	beq.n	80071d0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 80071ca:	f04f 33ff 	mov.w	r3, #4294967295
 80071ce:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80071d0:	6879      	ldr	r1, [r7, #4]
 80071d2:	68b8      	ldr	r0, [r7, #8]
 80071d4:	f000 fc7c 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>
	}
 80071d8:	bf00      	nop
 80071da:	3718      	adds	r7, #24
 80071dc:	46bd      	mov	sp, r7
 80071de:	bd80      	pop	{r7, pc}
 80071e0:	20000994 	.word	0x20000994

080071e4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b086      	sub	sp, #24
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	68db      	ldr	r3, [r3, #12]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d10b      	bne.n	8007212 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80071fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071fe:	f383 8811 	msr	BASEPRI, r3
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	f3bf 8f4f 	dsb	sy
 800720a:	60fb      	str	r3, [r7, #12]
}
 800720c:	bf00      	nop
 800720e:	bf00      	nop
 8007210:	e7fd      	b.n	800720e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007212:	693b      	ldr	r3, [r7, #16]
 8007214:	3318      	adds	r3, #24
 8007216:	4618      	mov	r0, r3
 8007218:	f7fe fb40 	bl	800589c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800721c:	4b1d      	ldr	r3, [pc, #116]	@ (8007294 <xTaskRemoveFromEventList+0xb0>)
 800721e:	681b      	ldr	r3, [r3, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d11d      	bne.n	8007260 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007224:	693b      	ldr	r3, [r7, #16]
 8007226:	3304      	adds	r3, #4
 8007228:	4618      	mov	r0, r3
 800722a:	f7fe fb37 	bl	800589c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007232:	4b19      	ldr	r3, [pc, #100]	@ (8007298 <xTaskRemoveFromEventList+0xb4>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	429a      	cmp	r2, r3
 8007238:	d903      	bls.n	8007242 <xTaskRemoveFromEventList+0x5e>
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800723e:	4a16      	ldr	r2, [pc, #88]	@ (8007298 <xTaskRemoveFromEventList+0xb4>)
 8007240:	6013      	str	r3, [r2, #0]
 8007242:	693b      	ldr	r3, [r7, #16]
 8007244:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007246:	4613      	mov	r3, r2
 8007248:	009b      	lsls	r3, r3, #2
 800724a:	4413      	add	r3, r2
 800724c:	009b      	lsls	r3, r3, #2
 800724e:	4a13      	ldr	r2, [pc, #76]	@ (800729c <xTaskRemoveFromEventList+0xb8>)
 8007250:	441a      	add	r2, r3
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	3304      	adds	r3, #4
 8007256:	4619      	mov	r1, r3
 8007258:	4610      	mov	r0, r2
 800725a:	f7fe fac4 	bl	80057e6 <vListInsertEnd>
 800725e:	e005      	b.n	800726c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8007260:	693b      	ldr	r3, [r7, #16]
 8007262:	3318      	adds	r3, #24
 8007264:	4619      	mov	r1, r3
 8007266:	480e      	ldr	r0, [pc, #56]	@ (80072a0 <xTaskRemoveFromEventList+0xbc>)
 8007268:	f7fe fabd 	bl	80057e6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800726c:	693b      	ldr	r3, [r7, #16]
 800726e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007270:	4b0c      	ldr	r3, [pc, #48]	@ (80072a4 <xTaskRemoveFromEventList+0xc0>)
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007276:	429a      	cmp	r2, r3
 8007278:	d905      	bls.n	8007286 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800727a:	2301      	movs	r3, #1
 800727c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800727e:	4b0a      	ldr	r3, [pc, #40]	@ (80072a8 <xTaskRemoveFromEventList+0xc4>)
 8007280:	2201      	movs	r2, #1
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	e001      	b.n	800728a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8007286:	2300      	movs	r3, #0
 8007288:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800728a:	697b      	ldr	r3, [r7, #20]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3718      	adds	r7, #24
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000e90 	.word	0x20000e90
 8007298:	20000e70 	.word	0x20000e70
 800729c:	20000998 	.word	0x20000998
 80072a0:	20000e28 	.word	0x20000e28
 80072a4:	20000994 	.word	0x20000994
 80072a8:	20000e7c 	.word	0x20000e7c

080072ac <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80072ac:	b480      	push	{r7}
 80072ae:	b083      	sub	sp, #12
 80072b0:	af00      	add	r7, sp, #0
 80072b2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80072b4:	4b06      	ldr	r3, [pc, #24]	@ (80072d0 <vTaskInternalSetTimeOutState+0x24>)
 80072b6:	681a      	ldr	r2, [r3, #0]
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80072bc:	4b05      	ldr	r3, [pc, #20]	@ (80072d4 <vTaskInternalSetTimeOutState+0x28>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	605a      	str	r2, [r3, #4]
}
 80072c4:	bf00      	nop
 80072c6:	370c      	adds	r7, #12
 80072c8:	46bd      	mov	sp, r7
 80072ca:	bc80      	pop	{r7}
 80072cc:	4770      	bx	lr
 80072ce:	bf00      	nop
 80072d0:	20000e80 	.word	0x20000e80
 80072d4:	20000e6c 	.word	0x20000e6c

080072d8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b088      	sub	sp, #32
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d10b      	bne.n	8007300 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80072e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072ec:	f383 8811 	msr	BASEPRI, r3
 80072f0:	f3bf 8f6f 	isb	sy
 80072f4:	f3bf 8f4f 	dsb	sy
 80072f8:	613b      	str	r3, [r7, #16]
}
 80072fa:	bf00      	nop
 80072fc:	bf00      	nop
 80072fe:	e7fd      	b.n	80072fc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007300:	683b      	ldr	r3, [r7, #0]
 8007302:	2b00      	cmp	r3, #0
 8007304:	d10b      	bne.n	800731e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8007306:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800730a:	f383 8811 	msr	BASEPRI, r3
 800730e:	f3bf 8f6f 	isb	sy
 8007312:	f3bf 8f4f 	dsb	sy
 8007316:	60fb      	str	r3, [r7, #12]
}
 8007318:	bf00      	nop
 800731a:	bf00      	nop
 800731c:	e7fd      	b.n	800731a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800731e:	f001 f875 	bl	800840c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007322:	4b1d      	ldr	r3, [pc, #116]	@ (8007398 <xTaskCheckForTimeOut+0xc0>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	685b      	ldr	r3, [r3, #4]
 800732c:	69ba      	ldr	r2, [r7, #24]
 800732e:	1ad3      	subs	r3, r2, r3
 8007330:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007332:	683b      	ldr	r3, [r7, #0]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	f1b3 3fff 	cmp.w	r3, #4294967295
 800733a:	d102      	bne.n	8007342 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800733c:	2300      	movs	r3, #0
 800733e:	61fb      	str	r3, [r7, #28]
 8007340:	e023      	b.n	800738a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681a      	ldr	r2, [r3, #0]
 8007346:	4b15      	ldr	r3, [pc, #84]	@ (800739c <xTaskCheckForTimeOut+0xc4>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	429a      	cmp	r2, r3
 800734c:	d007      	beq.n	800735e <xTaskCheckForTimeOut+0x86>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	685b      	ldr	r3, [r3, #4]
 8007352:	69ba      	ldr	r2, [r7, #24]
 8007354:	429a      	cmp	r2, r3
 8007356:	d302      	bcc.n	800735e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8007358:	2301      	movs	r3, #1
 800735a:	61fb      	str	r3, [r7, #28]
 800735c:	e015      	b.n	800738a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800735e:	683b      	ldr	r3, [r7, #0]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	697a      	ldr	r2, [r7, #20]
 8007364:	429a      	cmp	r2, r3
 8007366:	d20b      	bcs.n	8007380 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8007368:	683b      	ldr	r3, [r7, #0]
 800736a:	681a      	ldr	r2, [r3, #0]
 800736c:	697b      	ldr	r3, [r7, #20]
 800736e:	1ad2      	subs	r2, r2, r3
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8007374:	6878      	ldr	r0, [r7, #4]
 8007376:	f7ff ff99 	bl	80072ac <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800737a:	2300      	movs	r3, #0
 800737c:	61fb      	str	r3, [r7, #28]
 800737e:	e004      	b.n	800738a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8007380:	683b      	ldr	r3, [r7, #0]
 8007382:	2200      	movs	r2, #0
 8007384:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8007386:	2301      	movs	r3, #1
 8007388:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800738a:	f001 f86f 	bl	800846c <vPortExitCritical>

	return xReturn;
 800738e:	69fb      	ldr	r3, [r7, #28]
}
 8007390:	4618      	mov	r0, r3
 8007392:	3720      	adds	r7, #32
 8007394:	46bd      	mov	sp, r7
 8007396:	bd80      	pop	{r7, pc}
 8007398:	20000e6c 	.word	0x20000e6c
 800739c:	20000e80 	.word	0x20000e80

080073a0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80073a0:	b480      	push	{r7}
 80073a2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80073a4:	4b03      	ldr	r3, [pc, #12]	@ (80073b4 <vTaskMissedYield+0x14>)
 80073a6:	2201      	movs	r2, #1
 80073a8:	601a      	str	r2, [r3, #0]
}
 80073aa:	bf00      	nop
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bc80      	pop	{r7}
 80073b0:	4770      	bx	lr
 80073b2:	bf00      	nop
 80073b4:	20000e7c 	.word	0x20000e7c

080073b8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80073b8:	b580      	push	{r7, lr}
 80073ba:	b082      	sub	sp, #8
 80073bc:	af00      	add	r7, sp, #0
 80073be:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80073c0:	f000 f852 	bl	8007468 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80073c4:	4b06      	ldr	r3, [pc, #24]	@ (80073e0 <prvIdleTask+0x28>)
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	2b01      	cmp	r3, #1
 80073ca:	d9f9      	bls.n	80073c0 <prvIdleTask+0x8>
			{
				taskYIELD();
 80073cc:	4b05      	ldr	r3, [pc, #20]	@ (80073e4 <prvIdleTask+0x2c>)
 80073ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80073d2:	601a      	str	r2, [r3, #0]
 80073d4:	f3bf 8f4f 	dsb	sy
 80073d8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80073dc:	e7f0      	b.n	80073c0 <prvIdleTask+0x8>
 80073de:	bf00      	nop
 80073e0:	20000998 	.word	0x20000998
 80073e4:	e000ed04 	.word	0xe000ed04

080073e8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80073e8:	b580      	push	{r7, lr}
 80073ea:	b082      	sub	sp, #8
 80073ec:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80073ee:	2300      	movs	r3, #0
 80073f0:	607b      	str	r3, [r7, #4]
 80073f2:	e00c      	b.n	800740e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80073f4:	687a      	ldr	r2, [r7, #4]
 80073f6:	4613      	mov	r3, r2
 80073f8:	009b      	lsls	r3, r3, #2
 80073fa:	4413      	add	r3, r2
 80073fc:	009b      	lsls	r3, r3, #2
 80073fe:	4a12      	ldr	r2, [pc, #72]	@ (8007448 <prvInitialiseTaskLists+0x60>)
 8007400:	4413      	add	r3, r2
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe f9c4 	bl	8005790 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	3301      	adds	r3, #1
 800740c:	607b      	str	r3, [r7, #4]
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	2b37      	cmp	r3, #55	@ 0x37
 8007412:	d9ef      	bls.n	80073f4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007414:	480d      	ldr	r0, [pc, #52]	@ (800744c <prvInitialiseTaskLists+0x64>)
 8007416:	f7fe f9bb 	bl	8005790 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800741a:	480d      	ldr	r0, [pc, #52]	@ (8007450 <prvInitialiseTaskLists+0x68>)
 800741c:	f7fe f9b8 	bl	8005790 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007420:	480c      	ldr	r0, [pc, #48]	@ (8007454 <prvInitialiseTaskLists+0x6c>)
 8007422:	f7fe f9b5 	bl	8005790 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8007426:	480c      	ldr	r0, [pc, #48]	@ (8007458 <prvInitialiseTaskLists+0x70>)
 8007428:	f7fe f9b2 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800742c:	480b      	ldr	r0, [pc, #44]	@ (800745c <prvInitialiseTaskLists+0x74>)
 800742e:	f7fe f9af 	bl	8005790 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007432:	4b0b      	ldr	r3, [pc, #44]	@ (8007460 <prvInitialiseTaskLists+0x78>)
 8007434:	4a05      	ldr	r2, [pc, #20]	@ (800744c <prvInitialiseTaskLists+0x64>)
 8007436:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8007438:	4b0a      	ldr	r3, [pc, #40]	@ (8007464 <prvInitialiseTaskLists+0x7c>)
 800743a:	4a05      	ldr	r2, [pc, #20]	@ (8007450 <prvInitialiseTaskLists+0x68>)
 800743c:	601a      	str	r2, [r3, #0]
}
 800743e:	bf00      	nop
 8007440:	3708      	adds	r7, #8
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
 8007446:	bf00      	nop
 8007448:	20000998 	.word	0x20000998
 800744c:	20000df8 	.word	0x20000df8
 8007450:	20000e0c 	.word	0x20000e0c
 8007454:	20000e28 	.word	0x20000e28
 8007458:	20000e3c 	.word	0x20000e3c
 800745c:	20000e54 	.word	0x20000e54
 8007460:	20000e20 	.word	0x20000e20
 8007464:	20000e24 	.word	0x20000e24

08007468 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8007468:	b580      	push	{r7, lr}
 800746a:	b082      	sub	sp, #8
 800746c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800746e:	e019      	b.n	80074a4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007470:	f000 ffcc 	bl	800840c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007474:	4b10      	ldr	r3, [pc, #64]	@ (80074b8 <prvCheckTasksWaitingTermination+0x50>)
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	68db      	ldr	r3, [r3, #12]
 800747a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3304      	adds	r3, #4
 8007480:	4618      	mov	r0, r3
 8007482:	f7fe fa0b 	bl	800589c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8007486:	4b0d      	ldr	r3, [pc, #52]	@ (80074bc <prvCheckTasksWaitingTermination+0x54>)
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	3b01      	subs	r3, #1
 800748c:	4a0b      	ldr	r2, [pc, #44]	@ (80074bc <prvCheckTasksWaitingTermination+0x54>)
 800748e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007490:	4b0b      	ldr	r3, [pc, #44]	@ (80074c0 <prvCheckTasksWaitingTermination+0x58>)
 8007492:	681b      	ldr	r3, [r3, #0]
 8007494:	3b01      	subs	r3, #1
 8007496:	4a0a      	ldr	r2, [pc, #40]	@ (80074c0 <prvCheckTasksWaitingTermination+0x58>)
 8007498:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800749a:	f000 ffe7 	bl	800846c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800749e:	6878      	ldr	r0, [r7, #4]
 80074a0:	f000 f810 	bl	80074c4 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80074a4:	4b06      	ldr	r3, [pc, #24]	@ (80074c0 <prvCheckTasksWaitingTermination+0x58>)
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	2b00      	cmp	r3, #0
 80074aa:	d1e1      	bne.n	8007470 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	3708      	adds	r7, #8
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
 80074b6:	bf00      	nop
 80074b8:	20000e3c 	.word	0x20000e3c
 80074bc:	20000e68 	.word	0x20000e68
 80074c0:	20000e50 	.word	0x20000e50

080074c4 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80074c4:	b580      	push	{r7, lr}
 80074c6:	b084      	sub	sp, #16
 80074c8:	af00      	add	r7, sp, #0
 80074ca:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d108      	bne.n	80074e8 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80074da:	4618      	mov	r0, r3
 80074dc:	f001 f966 	bl	80087ac <vPortFree>
				vPortFree( pxTCB );
 80074e0:	6878      	ldr	r0, [r7, #4]
 80074e2:	f001 f963 	bl	80087ac <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80074e6:	e019      	b.n	800751c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 80074ee:	2b01      	cmp	r3, #1
 80074f0:	d103      	bne.n	80074fa <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 80074f2:	6878      	ldr	r0, [r7, #4]
 80074f4:	f001 f95a 	bl	80087ac <vPortFree>
	}
 80074f8:	e010      	b.n	800751c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8007500:	2b02      	cmp	r3, #2
 8007502:	d00b      	beq.n	800751c <prvDeleteTCB+0x58>
	__asm volatile
 8007504:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007508:	f383 8811 	msr	BASEPRI, r3
 800750c:	f3bf 8f6f 	isb	sy
 8007510:	f3bf 8f4f 	dsb	sy
 8007514:	60fb      	str	r3, [r7, #12]
}
 8007516:	bf00      	nop
 8007518:	bf00      	nop
 800751a:	e7fd      	b.n	8007518 <prvDeleteTCB+0x54>
	}
 800751c:	bf00      	nop
 800751e:	3710      	adds	r7, #16
 8007520:	46bd      	mov	sp, r7
 8007522:	bd80      	pop	{r7, pc}

08007524 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007524:	b480      	push	{r7}
 8007526:	b083      	sub	sp, #12
 8007528:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800752a:	4b0c      	ldr	r3, [pc, #48]	@ (800755c <prvResetNextTaskUnblockTime+0x38>)
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d104      	bne.n	800753e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007534:	4b0a      	ldr	r3, [pc, #40]	@ (8007560 <prvResetNextTaskUnblockTime+0x3c>)
 8007536:	f04f 32ff 	mov.w	r2, #4294967295
 800753a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800753c:	e008      	b.n	8007550 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800753e:	4b07      	ldr	r3, [pc, #28]	@ (800755c <prvResetNextTaskUnblockTime+0x38>)
 8007540:	681b      	ldr	r3, [r3, #0]
 8007542:	68db      	ldr	r3, [r3, #12]
 8007544:	68db      	ldr	r3, [r3, #12]
 8007546:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	685b      	ldr	r3, [r3, #4]
 800754c:	4a04      	ldr	r2, [pc, #16]	@ (8007560 <prvResetNextTaskUnblockTime+0x3c>)
 800754e:	6013      	str	r3, [r2, #0]
}
 8007550:	bf00      	nop
 8007552:	370c      	adds	r7, #12
 8007554:	46bd      	mov	sp, r7
 8007556:	bc80      	pop	{r7}
 8007558:	4770      	bx	lr
 800755a:	bf00      	nop
 800755c:	20000e20 	.word	0x20000e20
 8007560:	20000e88 	.word	0x20000e88

08007564 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8007564:	b480      	push	{r7}
 8007566:	b083      	sub	sp, #12
 8007568:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800756a:	4b04      	ldr	r3, [pc, #16]	@ (800757c <xTaskGetCurrentTaskHandle+0x18>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	607b      	str	r3, [r7, #4]

		return xReturn;
 8007570:	687b      	ldr	r3, [r7, #4]
	}
 8007572:	4618      	mov	r0, r3
 8007574:	370c      	adds	r7, #12
 8007576:	46bd      	mov	sp, r7
 8007578:	bc80      	pop	{r7}
 800757a:	4770      	bx	lr
 800757c:	20000994 	.word	0x20000994

08007580 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007580:	b480      	push	{r7}
 8007582:	b083      	sub	sp, #12
 8007584:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007586:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <xTaskGetSchedulerState+0x34>)
 8007588:	681b      	ldr	r3, [r3, #0]
 800758a:	2b00      	cmp	r3, #0
 800758c:	d102      	bne.n	8007594 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800758e:	2301      	movs	r3, #1
 8007590:	607b      	str	r3, [r7, #4]
 8007592:	e008      	b.n	80075a6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007594:	4b08      	ldr	r3, [pc, #32]	@ (80075b8 <xTaskGetSchedulerState+0x38>)
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	2b00      	cmp	r3, #0
 800759a:	d102      	bne.n	80075a2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800759c:	2302      	movs	r3, #2
 800759e:	607b      	str	r3, [r7, #4]
 80075a0:	e001      	b.n	80075a6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80075a2:	2300      	movs	r3, #0
 80075a4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80075a6:	687b      	ldr	r3, [r7, #4]
	}
 80075a8:	4618      	mov	r0, r3
 80075aa:	370c      	adds	r7, #12
 80075ac:	46bd      	mov	sp, r7
 80075ae:	bc80      	pop	{r7}
 80075b0:	4770      	bx	lr
 80075b2:	bf00      	nop
 80075b4:	20000e74 	.word	0x20000e74
 80075b8:	20000e90 	.word	0x20000e90

080075bc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80075bc:	b580      	push	{r7, lr}
 80075be:	b086      	sub	sp, #24
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80075c4:	687b      	ldr	r3, [r7, #4]
 80075c6:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80075c8:	2300      	movs	r3, #0
 80075ca:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	2b00      	cmp	r3, #0
 80075d0:	d058      	beq.n	8007684 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80075d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007690 <xTaskPriorityDisinherit+0xd4>)
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	693a      	ldr	r2, [r7, #16]
 80075d8:	429a      	cmp	r2, r3
 80075da:	d00b      	beq.n	80075f4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 80075dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075e0:	f383 8811 	msr	BASEPRI, r3
 80075e4:	f3bf 8f6f 	isb	sy
 80075e8:	f3bf 8f4f 	dsb	sy
 80075ec:	60fb      	str	r3, [r7, #12]
}
 80075ee:	bf00      	nop
 80075f0:	bf00      	nop
 80075f2:	e7fd      	b.n	80075f0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80075f4:	693b      	ldr	r3, [r7, #16]
 80075f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d10b      	bne.n	8007614 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80075fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007600:	f383 8811 	msr	BASEPRI, r3
 8007604:	f3bf 8f6f 	isb	sy
 8007608:	f3bf 8f4f 	dsb	sy
 800760c:	60bb      	str	r3, [r7, #8]
}
 800760e:	bf00      	nop
 8007610:	bf00      	nop
 8007612:	e7fd      	b.n	8007610 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007614:	693b      	ldr	r3, [r7, #16]
 8007616:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007618:	1e5a      	subs	r2, r3, #1
 800761a:	693b      	ldr	r3, [r7, #16]
 800761c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800761e:	693b      	ldr	r3, [r7, #16]
 8007620:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007622:	693b      	ldr	r3, [r7, #16]
 8007624:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007626:	429a      	cmp	r2, r3
 8007628:	d02c      	beq.n	8007684 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800762a:	693b      	ldr	r3, [r7, #16]
 800762c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800762e:	2b00      	cmp	r3, #0
 8007630:	d128      	bne.n	8007684 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007632:	693b      	ldr	r3, [r7, #16]
 8007634:	3304      	adds	r3, #4
 8007636:	4618      	mov	r0, r3
 8007638:	f7fe f930 	bl	800589c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007640:	693b      	ldr	r3, [r7, #16]
 8007642:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007644:	693b      	ldr	r3, [r7, #16]
 8007646:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007648:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007654:	4b0f      	ldr	r3, [pc, #60]	@ (8007694 <xTaskPriorityDisinherit+0xd8>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	429a      	cmp	r2, r3
 800765a:	d903      	bls.n	8007664 <xTaskPriorityDisinherit+0xa8>
 800765c:	693b      	ldr	r3, [r7, #16]
 800765e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007660:	4a0c      	ldr	r2, [pc, #48]	@ (8007694 <xTaskPriorityDisinherit+0xd8>)
 8007662:	6013      	str	r3, [r2, #0]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007668:	4613      	mov	r3, r2
 800766a:	009b      	lsls	r3, r3, #2
 800766c:	4413      	add	r3, r2
 800766e:	009b      	lsls	r3, r3, #2
 8007670:	4a09      	ldr	r2, [pc, #36]	@ (8007698 <xTaskPriorityDisinherit+0xdc>)
 8007672:	441a      	add	r2, r3
 8007674:	693b      	ldr	r3, [r7, #16]
 8007676:	3304      	adds	r3, #4
 8007678:	4619      	mov	r1, r3
 800767a:	4610      	mov	r0, r2
 800767c:	f7fe f8b3 	bl	80057e6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007680:	2301      	movs	r3, #1
 8007682:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007684:	697b      	ldr	r3, [r7, #20]
	}
 8007686:	4618      	mov	r0, r3
 8007688:	3718      	adds	r7, #24
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	20000994 	.word	0x20000994
 8007694:	20000e70 	.word	0x20000e70
 8007698:	20000998 	.word	0x20000998

0800769c <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 800769c:	b580      	push	{r7, lr}
 800769e:	b086      	sub	sp, #24
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80076aa:	f000 feaf 	bl	800840c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80076ae:	4b26      	ldr	r3, [pc, #152]	@ (8007748 <xTaskNotifyWait+0xac>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80076b6:	b2db      	uxtb	r3, r3
 80076b8:	2b02      	cmp	r3, #2
 80076ba:	d01a      	beq.n	80076f2 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80076bc:	4b22      	ldr	r3, [pc, #136]	@ (8007748 <xTaskNotifyWait+0xac>)
 80076be:	681b      	ldr	r3, [r3, #0]
 80076c0:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80076c2:	68fa      	ldr	r2, [r7, #12]
 80076c4:	43d2      	mvns	r2, r2
 80076c6:	400a      	ands	r2, r1
 80076c8:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 80076ca:	4b1f      	ldr	r3, [pc, #124]	@ (8007748 <xTaskNotifyWait+0xac>)
 80076cc:	681b      	ldr	r3, [r3, #0]
 80076ce:	2201      	movs	r2, #1
 80076d0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d00b      	beq.n	80076f2 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80076da:	2101      	movs	r1, #1
 80076dc:	6838      	ldr	r0, [r7, #0]
 80076de:	f000 f9f7 	bl	8007ad0 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 80076e2:	4b1a      	ldr	r3, [pc, #104]	@ (800774c <xTaskNotifyWait+0xb0>)
 80076e4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076e8:	601a      	str	r2, [r3, #0]
 80076ea:	f3bf 8f4f 	dsb	sy
 80076ee:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80076f2:	f000 febb 	bl	800846c <vPortExitCritical>

		taskENTER_CRITICAL();
 80076f6:	f000 fe89 	bl	800840c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d004      	beq.n	800770a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8007700:	4b11      	ldr	r3, [pc, #68]	@ (8007748 <xTaskNotifyWait+0xac>)
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800770a:	4b0f      	ldr	r3, [pc, #60]	@ (8007748 <xTaskNotifyWait+0xac>)
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007712:	b2db      	uxtb	r3, r3
 8007714:	2b02      	cmp	r3, #2
 8007716:	d002      	beq.n	800771e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8007718:	2300      	movs	r3, #0
 800771a:	617b      	str	r3, [r7, #20]
 800771c:	e008      	b.n	8007730 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800771e:	4b0a      	ldr	r3, [pc, #40]	@ (8007748 <xTaskNotifyWait+0xac>)
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	43d2      	mvns	r2, r2
 8007728:	400a      	ands	r2, r1
 800772a:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 800772c:	2301      	movs	r3, #1
 800772e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007730:	4b05      	ldr	r3, [pc, #20]	@ (8007748 <xTaskNotifyWait+0xac>)
 8007732:	681b      	ldr	r3, [r3, #0]
 8007734:	2200      	movs	r2, #0
 8007736:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800773a:	f000 fe97 	bl	800846c <vPortExitCritical>

		return xReturn;
 800773e:	697b      	ldr	r3, [r7, #20]
	}
 8007740:	4618      	mov	r0, r3
 8007742:	3718      	adds	r7, #24
 8007744:	46bd      	mov	sp, r7
 8007746:	bd80      	pop	{r7, pc}
 8007748:	20000994 	.word	0x20000994
 800774c:	e000ed04 	.word	0xe000ed04

08007750 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8007750:	b580      	push	{r7, lr}
 8007752:	b08a      	sub	sp, #40	@ 0x28
 8007754:	af00      	add	r7, sp, #0
 8007756:	60f8      	str	r0, [r7, #12]
 8007758:	60b9      	str	r1, [r7, #8]
 800775a:	603b      	str	r3, [r7, #0]
 800775c:	4613      	mov	r3, r2
 800775e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 8007760:	2301      	movs	r3, #1
 8007762:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <xTaskGenericNotify+0x32>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	61bb      	str	r3, [r7, #24]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8007786:	f000 fe41 	bl	800840c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 800778a:	683b      	ldr	r3, [r7, #0]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d003      	beq.n	8007798 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007790:	6a3b      	ldr	r3, [r7, #32]
 8007792:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007794:	683b      	ldr	r3, [r7, #0]
 8007796:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007798:	6a3b      	ldr	r3, [r7, #32]
 800779a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800779e:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80077a0:	6a3b      	ldr	r3, [r7, #32]
 80077a2:	2202      	movs	r2, #2
 80077a4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80077a8:	79fb      	ldrb	r3, [r7, #7]
 80077aa:	2b04      	cmp	r3, #4
 80077ac:	d827      	bhi.n	80077fe <xTaskGenericNotify+0xae>
 80077ae:	a201      	add	r2, pc, #4	@ (adr r2, 80077b4 <xTaskGenericNotify+0x64>)
 80077b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80077b4:	08007821 	.word	0x08007821
 80077b8:	080077c9 	.word	0x080077c9
 80077bc:	080077d7 	.word	0x080077d7
 80077c0:	080077e3 	.word	0x080077e3
 80077c4:	080077eb 	.word	0x080077eb
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80077c8:	6a3b      	ldr	r3, [r7, #32]
 80077ca:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80077cc:	68bb      	ldr	r3, [r7, #8]
 80077ce:	431a      	orrs	r2, r3
 80077d0:	6a3b      	ldr	r3, [r7, #32]
 80077d2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80077d4:	e027      	b.n	8007826 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80077d6:	6a3b      	ldr	r3, [r7, #32]
 80077d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80077da:	1c5a      	adds	r2, r3, #1
 80077dc:	6a3b      	ldr	r3, [r7, #32]
 80077de:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80077e0:	e021      	b.n	8007826 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80077e2:	6a3b      	ldr	r3, [r7, #32]
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80077e8:	e01d      	b.n	8007826 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80077ea:	7ffb      	ldrb	r3, [r7, #31]
 80077ec:	2b02      	cmp	r3, #2
 80077ee:	d003      	beq.n	80077f8 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80077f0:	6a3b      	ldr	r3, [r7, #32]
 80077f2:	68ba      	ldr	r2, [r7, #8]
 80077f4:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80077f6:	e016      	b.n	8007826 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 80077f8:	2300      	movs	r3, #0
 80077fa:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 80077fc:	e013      	b.n	8007826 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80077fe:	6a3b      	ldr	r3, [r7, #32]
 8007800:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007802:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007806:	d00d      	beq.n	8007824 <xTaskGenericNotify+0xd4>
	__asm volatile
 8007808:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800780c:	f383 8811 	msr	BASEPRI, r3
 8007810:	f3bf 8f6f 	isb	sy
 8007814:	f3bf 8f4f 	dsb	sy
 8007818:	617b      	str	r3, [r7, #20]
}
 800781a:	bf00      	nop
 800781c:	bf00      	nop
 800781e:	e7fd      	b.n	800781c <xTaskGenericNotify+0xcc>
					break;
 8007820:	bf00      	nop
 8007822:	e000      	b.n	8007826 <xTaskGenericNotify+0xd6>

					break;
 8007824:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8007826:	7ffb      	ldrb	r3, [r7, #31]
 8007828:	2b01      	cmp	r3, #1
 800782a:	d13b      	bne.n	80078a4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800782c:	6a3b      	ldr	r3, [r7, #32]
 800782e:	3304      	adds	r3, #4
 8007830:	4618      	mov	r0, r3
 8007832:	f7fe f833 	bl	800589c <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8007836:	6a3b      	ldr	r3, [r7, #32]
 8007838:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800783a:	4b1e      	ldr	r3, [pc, #120]	@ (80078b4 <xTaskGenericNotify+0x164>)
 800783c:	681b      	ldr	r3, [r3, #0]
 800783e:	429a      	cmp	r2, r3
 8007840:	d903      	bls.n	800784a <xTaskGenericNotify+0xfa>
 8007842:	6a3b      	ldr	r3, [r7, #32]
 8007844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007846:	4a1b      	ldr	r2, [pc, #108]	@ (80078b4 <xTaskGenericNotify+0x164>)
 8007848:	6013      	str	r3, [r2, #0]
 800784a:	6a3b      	ldr	r3, [r7, #32]
 800784c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800784e:	4613      	mov	r3, r2
 8007850:	009b      	lsls	r3, r3, #2
 8007852:	4413      	add	r3, r2
 8007854:	009b      	lsls	r3, r3, #2
 8007856:	4a18      	ldr	r2, [pc, #96]	@ (80078b8 <xTaskGenericNotify+0x168>)
 8007858:	441a      	add	r2, r3
 800785a:	6a3b      	ldr	r3, [r7, #32]
 800785c:	3304      	adds	r3, #4
 800785e:	4619      	mov	r1, r3
 8007860:	4610      	mov	r0, r2
 8007862:	f7fd ffc0 	bl	80057e6 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8007866:	6a3b      	ldr	r3, [r7, #32]
 8007868:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800786a:	2b00      	cmp	r3, #0
 800786c:	d00b      	beq.n	8007886 <xTaskGenericNotify+0x136>
	__asm volatile
 800786e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007872:	f383 8811 	msr	BASEPRI, r3
 8007876:	f3bf 8f6f 	isb	sy
 800787a:	f3bf 8f4f 	dsb	sy
 800787e:	613b      	str	r3, [r7, #16]
}
 8007880:	bf00      	nop
 8007882:	bf00      	nop
 8007884:	e7fd      	b.n	8007882 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007886:	6a3b      	ldr	r3, [r7, #32]
 8007888:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800788a:	4b0c      	ldr	r3, [pc, #48]	@ (80078bc <xTaskGenericNotify+0x16c>)
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007890:	429a      	cmp	r2, r3
 8007892:	d907      	bls.n	80078a4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8007894:	4b0a      	ldr	r3, [pc, #40]	@ (80078c0 <xTaskGenericNotify+0x170>)
 8007896:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	f3bf 8f4f 	dsb	sy
 80078a0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80078a4:	f000 fde2 	bl	800846c <vPortExitCritical>

		return xReturn;
 80078a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80078aa:	4618      	mov	r0, r3
 80078ac:	3728      	adds	r7, #40	@ 0x28
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20000e70 	.word	0x20000e70
 80078b8:	20000998 	.word	0x20000998
 80078bc:	20000994 	.word	0x20000994
 80078c0:	e000ed04 	.word	0xe000ed04

080078c4 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b08e      	sub	sp, #56	@ 0x38
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	60f8      	str	r0, [r7, #12]
 80078cc:	60b9      	str	r1, [r7, #8]
 80078ce:	603b      	str	r3, [r7, #0]
 80078d0:	4613      	mov	r3, r2
 80078d2:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 80078d4:	2301      	movs	r3, #1
 80078d6:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d10b      	bne.n	80078f6 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 80078de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e2:	f383 8811 	msr	BASEPRI, r3
 80078e6:	f3bf 8f6f 	isb	sy
 80078ea:	f3bf 8f4f 	dsb	sy
 80078ee:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80078f0:	bf00      	nop
 80078f2:	bf00      	nop
 80078f4:	e7fd      	b.n	80078f2 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80078f6:	f000 fe4b 	bl	8008590 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 80078fe:	f3ef 8211 	mrs	r2, BASEPRI
 8007902:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007906:	f383 8811 	msr	BASEPRI, r3
 800790a:	f3bf 8f6f 	isb	sy
 800790e:	f3bf 8f4f 	dsb	sy
 8007912:	623a      	str	r2, [r7, #32]
 8007914:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8007916:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007918:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800791a:	683b      	ldr	r3, [r7, #0]
 800791c:	2b00      	cmp	r3, #0
 800791e:	d003      	beq.n	8007928 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8007920:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007922:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8007928:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800792a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800792e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8007932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007934:	2202      	movs	r2, #2
 8007936:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800793a:	79fb      	ldrb	r3, [r7, #7]
 800793c:	2b04      	cmp	r3, #4
 800793e:	d829      	bhi.n	8007994 <xTaskGenericNotifyFromISR+0xd0>
 8007940:	a201      	add	r2, pc, #4	@ (adr r2, 8007948 <xTaskGenericNotifyFromISR+0x84>)
 8007942:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007946:	bf00      	nop
 8007948:	080079b7 	.word	0x080079b7
 800794c:	0800795d 	.word	0x0800795d
 8007950:	0800796b 	.word	0x0800796b
 8007954:	08007977 	.word	0x08007977
 8007958:	0800797f 	.word	0x0800797f
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800795c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800795e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	431a      	orrs	r2, r3
 8007964:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007966:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007968:	e028      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 800796a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800796c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800796e:	1c5a      	adds	r2, r3, #1
 8007970:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007972:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8007974:	e022      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8007976:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007978:	68ba      	ldr	r2, [r7, #8]
 800797a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800797c:	e01e      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800797e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8007982:	2b02      	cmp	r3, #2
 8007984:	d003      	beq.n	800798e <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8007986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007988:	68ba      	ldr	r2, [r7, #8]
 800798a:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 800798c:	e016      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800798e:	2300      	movs	r3, #0
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 8007992:	e013      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8007994:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007996:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8007998:	f1b3 3fff 	cmp.w	r3, #4294967295
 800799c:	d00d      	beq.n	80079ba <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800799e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079a2:	f383 8811 	msr	BASEPRI, r3
 80079a6:	f3bf 8f6f 	isb	sy
 80079aa:	f3bf 8f4f 	dsb	sy
 80079ae:	61bb      	str	r3, [r7, #24]
}
 80079b0:	bf00      	nop
 80079b2:	bf00      	nop
 80079b4:	e7fd      	b.n	80079b2 <xTaskGenericNotifyFromISR+0xee>
					break;
 80079b6:	bf00      	nop
 80079b8:	e000      	b.n	80079bc <xTaskGenericNotifyFromISR+0xf8>
					break;
 80079ba:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80079bc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80079c0:	2b01      	cmp	r3, #1
 80079c2:	d147      	bne.n	8007a54 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80079c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80079c8:	2b00      	cmp	r3, #0
 80079ca:	d00b      	beq.n	80079e4 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	617b      	str	r3, [r7, #20]
}
 80079de:	bf00      	nop
 80079e0:	bf00      	nop
 80079e2:	e7fd      	b.n	80079e0 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80079e4:	4b21      	ldr	r3, [pc, #132]	@ (8007a6c <xTaskGenericNotifyFromISR+0x1a8>)
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	2b00      	cmp	r3, #0
 80079ea:	d11d      	bne.n	8007a28 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80079ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079ee:	3304      	adds	r3, #4
 80079f0:	4618      	mov	r0, r3
 80079f2:	f7fd ff53 	bl	800589c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80079f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80079f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80079fa:	4b1d      	ldr	r3, [pc, #116]	@ (8007a70 <xTaskGenericNotifyFromISR+0x1ac>)
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	429a      	cmp	r2, r3
 8007a00:	d903      	bls.n	8007a0a <xTaskGenericNotifyFromISR+0x146>
 8007a02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a06:	4a1a      	ldr	r2, [pc, #104]	@ (8007a70 <xTaskGenericNotifyFromISR+0x1ac>)
 8007a08:	6013      	str	r3, [r2, #0]
 8007a0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a0c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a0e:	4613      	mov	r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	4413      	add	r3, r2
 8007a14:	009b      	lsls	r3, r3, #2
 8007a16:	4a17      	ldr	r2, [pc, #92]	@ (8007a74 <xTaskGenericNotifyFromISR+0x1b0>)
 8007a18:	441a      	add	r2, r3
 8007a1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a1c:	3304      	adds	r3, #4
 8007a1e:	4619      	mov	r1, r3
 8007a20:	4610      	mov	r0, r2
 8007a22:	f7fd fee0 	bl	80057e6 <vListInsertEnd>
 8007a26:	e005      	b.n	8007a34 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8007a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a2a:	3318      	adds	r3, #24
 8007a2c:	4619      	mov	r1, r3
 8007a2e:	4812      	ldr	r0, [pc, #72]	@ (8007a78 <xTaskGenericNotifyFromISR+0x1b4>)
 8007a30:	f7fd fed9 	bl	80057e6 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8007a34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007a36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007a38:	4b10      	ldr	r3, [pc, #64]	@ (8007a7c <xTaskGenericNotifyFromISR+0x1b8>)
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007a3e:	429a      	cmp	r2, r3
 8007a40:	d908      	bls.n	8007a54 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8007a42:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d002      	beq.n	8007a4e <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8007a48:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8007a4e:	4b0c      	ldr	r3, [pc, #48]	@ (8007a80 <xTaskGenericNotifyFromISR+0x1bc>)
 8007a50:	2201      	movs	r2, #1
 8007a52:	601a      	str	r2, [r3, #0]
 8007a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007a56:	613b      	str	r3, [r7, #16]
	__asm volatile
 8007a58:	693b      	ldr	r3, [r7, #16]
 8007a5a:	f383 8811 	msr	BASEPRI, r3
}
 8007a5e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8007a60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8007a62:	4618      	mov	r0, r3
 8007a64:	3738      	adds	r7, #56	@ 0x38
 8007a66:	46bd      	mov	sp, r7
 8007a68:	bd80      	pop	{r7, pc}
 8007a6a:	bf00      	nop
 8007a6c:	20000e90 	.word	0x20000e90
 8007a70:	20000e70 	.word	0x20000e70
 8007a74:	20000998 	.word	0x20000998
 8007a78:	20000e28 	.word	0x20000e28
 8007a7c:	20000994 	.word	0x20000994
 8007a80:	20000e7c 	.word	0x20000e7c

08007a84 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8007a84:	b580      	push	{r7, lr}
 8007a86:	b084      	sub	sp, #16
 8007a88:	af00      	add	r7, sp, #0
 8007a8a:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	2b00      	cmp	r3, #0
 8007a90:	d102      	bne.n	8007a98 <xTaskNotifyStateClear+0x14>
 8007a92:	4b0e      	ldr	r3, [pc, #56]	@ (8007acc <xTaskNotifyStateClear+0x48>)
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	e000      	b.n	8007a9a <xTaskNotifyStateClear+0x16>
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8007a9c:	f000 fcb6 	bl	800840c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8007aa0:	68bb      	ldr	r3, [r7, #8]
 8007aa2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8007aa6:	b2db      	uxtb	r3, r3
 8007aa8:	2b02      	cmp	r3, #2
 8007aaa:	d106      	bne.n	8007aba <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007aac:	68bb      	ldr	r3, [r7, #8]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				xReturn = pdPASS;
 8007ab4:	2301      	movs	r3, #1
 8007ab6:	60fb      	str	r3, [r7, #12]
 8007ab8:	e001      	b.n	8007abe <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8007aba:	2300      	movs	r3, #0
 8007abc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8007abe:	f000 fcd5 	bl	800846c <vPortExitCritical>

		return xReturn;
 8007ac2:	68fb      	ldr	r3, [r7, #12]
	}
 8007ac4:	4618      	mov	r0, r3
 8007ac6:	3710      	adds	r7, #16
 8007ac8:	46bd      	mov	sp, r7
 8007aca:	bd80      	pop	{r7, pc}
 8007acc:	20000994 	.word	0x20000994

08007ad0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007ad0:	b580      	push	{r7, lr}
 8007ad2:	b084      	sub	sp, #16
 8007ad4:	af00      	add	r7, sp, #0
 8007ad6:	6078      	str	r0, [r7, #4]
 8007ad8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007ada:	4b21      	ldr	r3, [pc, #132]	@ (8007b60 <prvAddCurrentTaskToDelayedList+0x90>)
 8007adc:	681b      	ldr	r3, [r3, #0]
 8007ade:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007ae0:	4b20      	ldr	r3, [pc, #128]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	3304      	adds	r3, #4
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f7fd fed8 	bl	800589c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007af2:	d10a      	bne.n	8007b0a <prvAddCurrentTaskToDelayedList+0x3a>
 8007af4:	683b      	ldr	r3, [r7, #0]
 8007af6:	2b00      	cmp	r3, #0
 8007af8:	d007      	beq.n	8007b0a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007afa:	4b1a      	ldr	r3, [pc, #104]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	3304      	adds	r3, #4
 8007b00:	4619      	mov	r1, r3
 8007b02:	4819      	ldr	r0, [pc, #100]	@ (8007b68 <prvAddCurrentTaskToDelayedList+0x98>)
 8007b04:	f7fd fe6f 	bl	80057e6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007b08:	e026      	b.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007b0a:	68fa      	ldr	r2, [r7, #12]
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	4413      	add	r3, r2
 8007b10:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007b12:	4b14      	ldr	r3, [pc, #80]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	68ba      	ldr	r2, [r7, #8]
 8007b18:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007b1a:	68ba      	ldr	r2, [r7, #8]
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	429a      	cmp	r2, r3
 8007b20:	d209      	bcs.n	8007b36 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b22:	4b12      	ldr	r3, [pc, #72]	@ (8007b6c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007b24:	681a      	ldr	r2, [r3, #0]
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	3304      	adds	r3, #4
 8007b2c:	4619      	mov	r1, r3
 8007b2e:	4610      	mov	r0, r2
 8007b30:	f7fd fe7c 	bl	800582c <vListInsert>
}
 8007b34:	e010      	b.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007b36:	4b0e      	ldr	r3, [pc, #56]	@ (8007b70 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007b38:	681a      	ldr	r2, [r3, #0]
 8007b3a:	4b0a      	ldr	r3, [pc, #40]	@ (8007b64 <prvAddCurrentTaskToDelayedList+0x94>)
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	3304      	adds	r3, #4
 8007b40:	4619      	mov	r1, r3
 8007b42:	4610      	mov	r0, r2
 8007b44:	f7fd fe72 	bl	800582c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007b48:	4b0a      	ldr	r3, [pc, #40]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	68ba      	ldr	r2, [r7, #8]
 8007b4e:	429a      	cmp	r2, r3
 8007b50:	d202      	bcs.n	8007b58 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007b52:	4a08      	ldr	r2, [pc, #32]	@ (8007b74 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007b54:	68bb      	ldr	r3, [r7, #8]
 8007b56:	6013      	str	r3, [r2, #0]
}
 8007b58:	bf00      	nop
 8007b5a:	3710      	adds	r7, #16
 8007b5c:	46bd      	mov	sp, r7
 8007b5e:	bd80      	pop	{r7, pc}
 8007b60:	20000e6c 	.word	0x20000e6c
 8007b64:	20000994 	.word	0x20000994
 8007b68:	20000e54 	.word	0x20000e54
 8007b6c:	20000e24 	.word	0x20000e24
 8007b70:	20000e20 	.word	0x20000e20
 8007b74:	20000e88 	.word	0x20000e88

08007b78 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007b78:	b580      	push	{r7, lr}
 8007b7a:	b08a      	sub	sp, #40	@ 0x28
 8007b7c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8007b7e:	2300      	movs	r3, #0
 8007b80:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007b82:	f000 fb11 	bl	80081a8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007b86:	4b1d      	ldr	r3, [pc, #116]	@ (8007bfc <xTimerCreateTimerTask+0x84>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	2b00      	cmp	r3, #0
 8007b8c:	d021      	beq.n	8007bd2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8007b8e:	2300      	movs	r3, #0
 8007b90:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007b92:	2300      	movs	r3, #0
 8007b94:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007b96:	1d3a      	adds	r2, r7, #4
 8007b98:	f107 0108 	add.w	r1, r7, #8
 8007b9c:	f107 030c 	add.w	r3, r7, #12
 8007ba0:	4618      	mov	r0, r3
 8007ba2:	f7fd fddb 	bl	800575c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007ba6:	6879      	ldr	r1, [r7, #4]
 8007ba8:	68bb      	ldr	r3, [r7, #8]
 8007baa:	68fa      	ldr	r2, [r7, #12]
 8007bac:	9202      	str	r2, [sp, #8]
 8007bae:	9301      	str	r3, [sp, #4]
 8007bb0:	2302      	movs	r3, #2
 8007bb2:	9300      	str	r3, [sp, #0]
 8007bb4:	2300      	movs	r3, #0
 8007bb6:	460a      	mov	r2, r1
 8007bb8:	4911      	ldr	r1, [pc, #68]	@ (8007c00 <xTimerCreateTimerTask+0x88>)
 8007bba:	4812      	ldr	r0, [pc, #72]	@ (8007c04 <xTimerCreateTimerTask+0x8c>)
 8007bbc:	f7fe fee0 	bl	8006980 <xTaskCreateStatic>
 8007bc0:	4603      	mov	r3, r0
 8007bc2:	4a11      	ldr	r2, [pc, #68]	@ (8007c08 <xTimerCreateTimerTask+0x90>)
 8007bc4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007bc6:	4b10      	ldr	r3, [pc, #64]	@ (8007c08 <xTimerCreateTimerTask+0x90>)
 8007bc8:	681b      	ldr	r3, [r3, #0]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d001      	beq.n	8007bd2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007bce:	2301      	movs	r3, #1
 8007bd0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007bd2:	697b      	ldr	r3, [r7, #20]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d10b      	bne.n	8007bf0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bdc:	f383 8811 	msr	BASEPRI, r3
 8007be0:	f3bf 8f6f 	isb	sy
 8007be4:	f3bf 8f4f 	dsb	sy
 8007be8:	613b      	str	r3, [r7, #16]
}
 8007bea:	bf00      	nop
 8007bec:	bf00      	nop
 8007bee:	e7fd      	b.n	8007bec <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007bf0:	697b      	ldr	r3, [r7, #20]
}
 8007bf2:	4618      	mov	r0, r3
 8007bf4:	3718      	adds	r7, #24
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	20000ec4 	.word	0x20000ec4
 8007c00:	0800d244 	.word	0x0800d244
 8007c04:	08007d45 	.word	0x08007d45
 8007c08:	20000ec8 	.word	0x20000ec8

08007c0c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007c0c:	b580      	push	{r7, lr}
 8007c0e:	b08a      	sub	sp, #40	@ 0x28
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	60f8      	str	r0, [r7, #12]
 8007c14:	60b9      	str	r1, [r7, #8]
 8007c16:	607a      	str	r2, [r7, #4]
 8007c18:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007c1a:	2300      	movs	r3, #0
 8007c1c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007c1e:	68fb      	ldr	r3, [r7, #12]
 8007c20:	2b00      	cmp	r3, #0
 8007c22:	d10b      	bne.n	8007c3c <xTimerGenericCommand+0x30>
	__asm volatile
 8007c24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c28:	f383 8811 	msr	BASEPRI, r3
 8007c2c:	f3bf 8f6f 	isb	sy
 8007c30:	f3bf 8f4f 	dsb	sy
 8007c34:	623b      	str	r3, [r7, #32]
}
 8007c36:	bf00      	nop
 8007c38:	bf00      	nop
 8007c3a:	e7fd      	b.n	8007c38 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007c3c:	4b19      	ldr	r3, [pc, #100]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	2b00      	cmp	r3, #0
 8007c42:	d02a      	beq.n	8007c9a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007c44:	68bb      	ldr	r3, [r7, #8]
 8007c46:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007c50:	68bb      	ldr	r3, [r7, #8]
 8007c52:	2b05      	cmp	r3, #5
 8007c54:	dc18      	bgt.n	8007c88 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007c56:	f7ff fc93 	bl	8007580 <xTaskGetSchedulerState>
 8007c5a:	4603      	mov	r3, r0
 8007c5c:	2b02      	cmp	r3, #2
 8007c5e:	d109      	bne.n	8007c74 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007c60:	4b10      	ldr	r3, [pc, #64]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c62:	6818      	ldr	r0, [r3, #0]
 8007c64:	f107 0110 	add.w	r1, r7, #16
 8007c68:	2300      	movs	r3, #0
 8007c6a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007c6c:	f7fd ff4a 	bl	8005b04 <xQueueGenericSend>
 8007c70:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c72:	e012      	b.n	8007c9a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007c74:	4b0b      	ldr	r3, [pc, #44]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c76:	6818      	ldr	r0, [r3, #0]
 8007c78:	f107 0110 	add.w	r1, r7, #16
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	2200      	movs	r2, #0
 8007c80:	f7fd ff40 	bl	8005b04 <xQueueGenericSend>
 8007c84:	6278      	str	r0, [r7, #36]	@ 0x24
 8007c86:	e008      	b.n	8007c9a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007c88:	4b06      	ldr	r3, [pc, #24]	@ (8007ca4 <xTimerGenericCommand+0x98>)
 8007c8a:	6818      	ldr	r0, [r3, #0]
 8007c8c:	f107 0110 	add.w	r1, r7, #16
 8007c90:	2300      	movs	r3, #0
 8007c92:	683a      	ldr	r2, [r7, #0]
 8007c94:	f7fe f838 	bl	8005d08 <xQueueGenericSendFromISR>
 8007c98:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3728      	adds	r7, #40	@ 0x28
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}
 8007ca4:	20000ec4 	.word	0x20000ec4

08007ca8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b088      	sub	sp, #32
 8007cac:	af02      	add	r7, sp, #8
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007cb2:	4b23      	ldr	r3, [pc, #140]	@ (8007d40 <prvProcessExpiredTimer+0x98>)
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	68db      	ldr	r3, [r3, #12]
 8007cb8:	68db      	ldr	r3, [r3, #12]
 8007cba:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007cbc:	697b      	ldr	r3, [r7, #20]
 8007cbe:	3304      	adds	r3, #4
 8007cc0:	4618      	mov	r0, r3
 8007cc2:	f7fd fdeb 	bl	800589c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007cc6:	697b      	ldr	r3, [r7, #20]
 8007cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007ccc:	f003 0304 	and.w	r3, r3, #4
 8007cd0:	2b00      	cmp	r3, #0
 8007cd2:	d023      	beq.n	8007d1c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	699a      	ldr	r2, [r3, #24]
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	18d1      	adds	r1, r2, r3
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	683a      	ldr	r2, [r7, #0]
 8007ce0:	6978      	ldr	r0, [r7, #20]
 8007ce2:	f000 f8d3 	bl	8007e8c <prvInsertTimerInActiveList>
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d020      	beq.n	8007d2e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007cec:	2300      	movs	r3, #0
 8007cee:	9300      	str	r3, [sp, #0]
 8007cf0:	2300      	movs	r3, #0
 8007cf2:	687a      	ldr	r2, [r7, #4]
 8007cf4:	2100      	movs	r1, #0
 8007cf6:	6978      	ldr	r0, [r7, #20]
 8007cf8:	f7ff ff88 	bl	8007c0c <xTimerGenericCommand>
 8007cfc:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007cfe:	693b      	ldr	r3, [r7, #16]
 8007d00:	2b00      	cmp	r3, #0
 8007d02:	d114      	bne.n	8007d2e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007d04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d08:	f383 8811 	msr	BASEPRI, r3
 8007d0c:	f3bf 8f6f 	isb	sy
 8007d10:	f3bf 8f4f 	dsb	sy
 8007d14:	60fb      	str	r3, [r7, #12]
}
 8007d16:	bf00      	nop
 8007d18:	bf00      	nop
 8007d1a:	e7fd      	b.n	8007d18 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007d1c:	697b      	ldr	r3, [r7, #20]
 8007d1e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007d22:	f023 0301 	bic.w	r3, r3, #1
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007d2e:	697b      	ldr	r3, [r7, #20]
 8007d30:	6a1b      	ldr	r3, [r3, #32]
 8007d32:	6978      	ldr	r0, [r7, #20]
 8007d34:	4798      	blx	r3
}
 8007d36:	bf00      	nop
 8007d38:	3718      	adds	r7, #24
 8007d3a:	46bd      	mov	sp, r7
 8007d3c:	bd80      	pop	{r7, pc}
 8007d3e:	bf00      	nop
 8007d40:	20000ebc 	.word	0x20000ebc

08007d44 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007d44:	b580      	push	{r7, lr}
 8007d46:	b084      	sub	sp, #16
 8007d48:	af00      	add	r7, sp, #0
 8007d4a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d4c:	f107 0308 	add.w	r3, r7, #8
 8007d50:	4618      	mov	r0, r3
 8007d52:	f000 f859 	bl	8007e08 <prvGetNextExpireTime>
 8007d56:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007d58:	68bb      	ldr	r3, [r7, #8]
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	68f8      	ldr	r0, [r7, #12]
 8007d5e:	f000 f805 	bl	8007d6c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007d62:	f000 f8d5 	bl	8007f10 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007d66:	bf00      	nop
 8007d68:	e7f0      	b.n	8007d4c <prvTimerTask+0x8>
	...

08007d6c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007d6c:	b580      	push	{r7, lr}
 8007d6e:	b084      	sub	sp, #16
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007d76:	f7ff f811 	bl	8006d9c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007d7a:	f107 0308 	add.w	r3, r7, #8
 8007d7e:	4618      	mov	r0, r3
 8007d80:	f000 f864 	bl	8007e4c <prvSampleTimeNow>
 8007d84:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007d86:	68bb      	ldr	r3, [r7, #8]
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d130      	bne.n	8007dee <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007d8c:	683b      	ldr	r3, [r7, #0]
 8007d8e:	2b00      	cmp	r3, #0
 8007d90:	d10a      	bne.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
 8007d92:	687a      	ldr	r2, [r7, #4]
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	429a      	cmp	r2, r3
 8007d98:	d806      	bhi.n	8007da8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007d9a:	f7ff f80d 	bl	8006db8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8007d9e:	68f9      	ldr	r1, [r7, #12]
 8007da0:	6878      	ldr	r0, [r7, #4]
 8007da2:	f7ff ff81 	bl	8007ca8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007da6:	e024      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007da8:	683b      	ldr	r3, [r7, #0]
 8007daa:	2b00      	cmp	r3, #0
 8007dac:	d008      	beq.n	8007dc0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8007dae:	4b13      	ldr	r3, [pc, #76]	@ (8007dfc <prvProcessTimerOrBlockTask+0x90>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	681b      	ldr	r3, [r3, #0]
 8007db4:	2b00      	cmp	r3, #0
 8007db6:	d101      	bne.n	8007dbc <prvProcessTimerOrBlockTask+0x50>
 8007db8:	2301      	movs	r3, #1
 8007dba:	e000      	b.n	8007dbe <prvProcessTimerOrBlockTask+0x52>
 8007dbc:	2300      	movs	r3, #0
 8007dbe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007dc0:	4b0f      	ldr	r3, [pc, #60]	@ (8007e00 <prvProcessTimerOrBlockTask+0x94>)
 8007dc2:	6818      	ldr	r0, [r3, #0]
 8007dc4:	687a      	ldr	r2, [r7, #4]
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	1ad3      	subs	r3, r2, r3
 8007dca:	683a      	ldr	r2, [r7, #0]
 8007dcc:	4619      	mov	r1, r3
 8007dce:	f7fe fa53 	bl	8006278 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007dd2:	f7fe fff1 	bl	8006db8 <xTaskResumeAll>
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d10a      	bne.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007ddc:	4b09      	ldr	r3, [pc, #36]	@ (8007e04 <prvProcessTimerOrBlockTask+0x98>)
 8007dde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007de2:	601a      	str	r2, [r3, #0]
 8007de4:	f3bf 8f4f 	dsb	sy
 8007de8:	f3bf 8f6f 	isb	sy
}
 8007dec:	e001      	b.n	8007df2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8007dee:	f7fe ffe3 	bl	8006db8 <xTaskResumeAll>
}
 8007df2:	bf00      	nop
 8007df4:	3710      	adds	r7, #16
 8007df6:	46bd      	mov	sp, r7
 8007df8:	bd80      	pop	{r7, pc}
 8007dfa:	bf00      	nop
 8007dfc:	20000ec0 	.word	0x20000ec0
 8007e00:	20000ec4 	.word	0x20000ec4
 8007e04:	e000ed04 	.word	0xe000ed04

08007e08 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007e10:	4b0d      	ldr	r3, [pc, #52]	@ (8007e48 <prvGetNextExpireTime+0x40>)
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	681b      	ldr	r3, [r3, #0]
 8007e16:	2b00      	cmp	r3, #0
 8007e18:	d101      	bne.n	8007e1e <prvGetNextExpireTime+0x16>
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	e000      	b.n	8007e20 <prvGetNextExpireTime+0x18>
 8007e1e:	2200      	movs	r2, #0
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	681b      	ldr	r3, [r3, #0]
 8007e28:	2b00      	cmp	r3, #0
 8007e2a:	d105      	bne.n	8007e38 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007e2c:	4b06      	ldr	r3, [pc, #24]	@ (8007e48 <prvGetNextExpireTime+0x40>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	68db      	ldr	r3, [r3, #12]
 8007e32:	681b      	ldr	r3, [r3, #0]
 8007e34:	60fb      	str	r3, [r7, #12]
 8007e36:	e001      	b.n	8007e3c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007e38:	2300      	movs	r3, #0
 8007e3a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007e3c:	68fb      	ldr	r3, [r7, #12]
}
 8007e3e:	4618      	mov	r0, r3
 8007e40:	3714      	adds	r7, #20
 8007e42:	46bd      	mov	sp, r7
 8007e44:	bc80      	pop	{r7}
 8007e46:	4770      	bx	lr
 8007e48:	20000ebc 	.word	0x20000ebc

08007e4c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007e4c:	b580      	push	{r7, lr}
 8007e4e:	b084      	sub	sp, #16
 8007e50:	af00      	add	r7, sp, #0
 8007e52:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007e54:	f7ff f84e 	bl	8006ef4 <xTaskGetTickCount>
 8007e58:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8007e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8007e88 <prvSampleTimeNow+0x3c>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	68fa      	ldr	r2, [r7, #12]
 8007e60:	429a      	cmp	r2, r3
 8007e62:	d205      	bcs.n	8007e70 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007e64:	f000 f93a 	bl	80080dc <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	2201      	movs	r2, #1
 8007e6c:	601a      	str	r2, [r3, #0]
 8007e6e:	e002      	b.n	8007e76 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2200      	movs	r2, #0
 8007e74:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007e76:	4a04      	ldr	r2, [pc, #16]	@ (8007e88 <prvSampleTimeNow+0x3c>)
 8007e78:	68fb      	ldr	r3, [r7, #12]
 8007e7a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007e7c:	68fb      	ldr	r3, [r7, #12]
}
 8007e7e:	4618      	mov	r0, r3
 8007e80:	3710      	adds	r7, #16
 8007e82:	46bd      	mov	sp, r7
 8007e84:	bd80      	pop	{r7, pc}
 8007e86:	bf00      	nop
 8007e88:	20000ecc 	.word	0x20000ecc

08007e8c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007e8c:	b580      	push	{r7, lr}
 8007e8e:	b086      	sub	sp, #24
 8007e90:	af00      	add	r7, sp, #0
 8007e92:	60f8      	str	r0, [r7, #12]
 8007e94:	60b9      	str	r1, [r7, #8]
 8007e96:	607a      	str	r2, [r7, #4]
 8007e98:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8007e9a:	2300      	movs	r3, #0
 8007e9c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	68ba      	ldr	r2, [r7, #8]
 8007ea2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	68fa      	ldr	r2, [r7, #12]
 8007ea8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8007eaa:	68ba      	ldr	r2, [r7, #8]
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d812      	bhi.n	8007ed8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007eb2:	687a      	ldr	r2, [r7, #4]
 8007eb4:	683b      	ldr	r3, [r7, #0]
 8007eb6:	1ad2      	subs	r2, r2, r3
 8007eb8:	68fb      	ldr	r3, [r7, #12]
 8007eba:	699b      	ldr	r3, [r3, #24]
 8007ebc:	429a      	cmp	r2, r3
 8007ebe:	d302      	bcc.n	8007ec6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007ec0:	2301      	movs	r3, #1
 8007ec2:	617b      	str	r3, [r7, #20]
 8007ec4:	e01b      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007ec6:	4b10      	ldr	r3, [pc, #64]	@ (8007f08 <prvInsertTimerInActiveList+0x7c>)
 8007ec8:	681a      	ldr	r2, [r3, #0]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	3304      	adds	r3, #4
 8007ece:	4619      	mov	r1, r3
 8007ed0:	4610      	mov	r0, r2
 8007ed2:	f7fd fcab 	bl	800582c <vListInsert>
 8007ed6:	e012      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007ed8:	687a      	ldr	r2, [r7, #4]
 8007eda:	683b      	ldr	r3, [r7, #0]
 8007edc:	429a      	cmp	r2, r3
 8007ede:	d206      	bcs.n	8007eee <prvInsertTimerInActiveList+0x62>
 8007ee0:	68ba      	ldr	r2, [r7, #8]
 8007ee2:	683b      	ldr	r3, [r7, #0]
 8007ee4:	429a      	cmp	r2, r3
 8007ee6:	d302      	bcc.n	8007eee <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007ee8:	2301      	movs	r3, #1
 8007eea:	617b      	str	r3, [r7, #20]
 8007eec:	e007      	b.n	8007efe <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007eee:	4b07      	ldr	r3, [pc, #28]	@ (8007f0c <prvInsertTimerInActiveList+0x80>)
 8007ef0:	681a      	ldr	r2, [r3, #0]
 8007ef2:	68fb      	ldr	r3, [r7, #12]
 8007ef4:	3304      	adds	r3, #4
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	4610      	mov	r0, r2
 8007efa:	f7fd fc97 	bl	800582c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007efe:	697b      	ldr	r3, [r7, #20]
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3718      	adds	r7, #24
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	20000ec0 	.word	0x20000ec0
 8007f0c:	20000ebc 	.word	0x20000ebc

08007f10 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007f10:	b580      	push	{r7, lr}
 8007f12:	b08e      	sub	sp, #56	@ 0x38
 8007f14:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007f16:	e0ce      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	da19      	bge.n	8007f52 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007f1e:	1d3b      	adds	r3, r7, #4
 8007f20:	3304      	adds	r3, #4
 8007f22:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007f24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f26:	2b00      	cmp	r3, #0
 8007f28:	d10b      	bne.n	8007f42 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8007f2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f2e:	f383 8811 	msr	BASEPRI, r3
 8007f32:	f3bf 8f6f 	isb	sy
 8007f36:	f3bf 8f4f 	dsb	sy
 8007f3a:	61fb      	str	r3, [r7, #28]
}
 8007f3c:	bf00      	nop
 8007f3e:	bf00      	nop
 8007f40:	e7fd      	b.n	8007f3e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007f42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f48:	6850      	ldr	r0, [r2, #4]
 8007f4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007f4c:	6892      	ldr	r2, [r2, #8]
 8007f4e:	4611      	mov	r1, r2
 8007f50:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	f2c0 80ae 	blt.w	80080b6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007f5a:	68fb      	ldr	r3, [r7, #12]
 8007f5c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007f5e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f60:	695b      	ldr	r3, [r3, #20]
 8007f62:	2b00      	cmp	r3, #0
 8007f64:	d004      	beq.n	8007f70 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007f66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007f68:	3304      	adds	r3, #4
 8007f6a:	4618      	mov	r0, r3
 8007f6c:	f7fd fc96 	bl	800589c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007f70:	463b      	mov	r3, r7
 8007f72:	4618      	mov	r0, r3
 8007f74:	f7ff ff6a 	bl	8007e4c <prvSampleTimeNow>
 8007f78:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	2b09      	cmp	r3, #9
 8007f7e:	f200 8097 	bhi.w	80080b0 <prvProcessReceivedCommands+0x1a0>
 8007f82:	a201      	add	r2, pc, #4	@ (adr r2, 8007f88 <prvProcessReceivedCommands+0x78>)
 8007f84:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f88:	08007fb1 	.word	0x08007fb1
 8007f8c:	08007fb1 	.word	0x08007fb1
 8007f90:	08007fb1 	.word	0x08007fb1
 8007f94:	08008027 	.word	0x08008027
 8007f98:	0800803b 	.word	0x0800803b
 8007f9c:	08008087 	.word	0x08008087
 8007fa0:	08007fb1 	.word	0x08007fb1
 8007fa4:	08007fb1 	.word	0x08007fb1
 8007fa8:	08008027 	.word	0x08008027
 8007fac:	0800803b 	.word	0x0800803b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007fb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fb2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fb6:	f043 0301 	orr.w	r3, r3, #1
 8007fba:	b2da      	uxtb	r2, r3
 8007fbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fbe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fc6:	699b      	ldr	r3, [r3, #24]
 8007fc8:	18d1      	adds	r1, r2, r3
 8007fca:	68bb      	ldr	r3, [r7, #8]
 8007fcc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007fce:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fd0:	f7ff ff5c 	bl	8007e8c <prvInsertTimerInActiveList>
 8007fd4:	4603      	mov	r3, r0
 8007fd6:	2b00      	cmp	r3, #0
 8007fd8:	d06c      	beq.n	80080b4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007fda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fdc:	6a1b      	ldr	r3, [r3, #32]
 8007fde:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007fe0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007fe4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007fe8:	f003 0304 	and.w	r3, r3, #4
 8007fec:	2b00      	cmp	r3, #0
 8007fee:	d061      	beq.n	80080b4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007ff0:	68ba      	ldr	r2, [r7, #8]
 8007ff2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007ff4:	699b      	ldr	r3, [r3, #24]
 8007ff6:	441a      	add	r2, r3
 8007ff8:	2300      	movs	r3, #0
 8007ffa:	9300      	str	r3, [sp, #0]
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	2100      	movs	r1, #0
 8008000:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008002:	f7ff fe03 	bl	8007c0c <xTimerGenericCommand>
 8008006:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008008:	6a3b      	ldr	r3, [r7, #32]
 800800a:	2b00      	cmp	r3, #0
 800800c:	d152      	bne.n	80080b4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800800e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008012:	f383 8811 	msr	BASEPRI, r3
 8008016:	f3bf 8f6f 	isb	sy
 800801a:	f3bf 8f4f 	dsb	sy
 800801e:	61bb      	str	r3, [r7, #24]
}
 8008020:	bf00      	nop
 8008022:	bf00      	nop
 8008024:	e7fd      	b.n	8008022 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008026:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008028:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800802c:	f023 0301 	bic.w	r3, r3, #1
 8008030:	b2da      	uxtb	r2, r3
 8008032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008034:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8008038:	e03d      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800803a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800803c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008040:	f043 0301 	orr.w	r3, r3, #1
 8008044:	b2da      	uxtb	r2, r3
 8008046:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008048:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800804c:	68ba      	ldr	r2, [r7, #8]
 800804e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008050:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008052:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008054:	699b      	ldr	r3, [r3, #24]
 8008056:	2b00      	cmp	r3, #0
 8008058:	d10b      	bne.n	8008072 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800805a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800805e:	f383 8811 	msr	BASEPRI, r3
 8008062:	f3bf 8f6f 	isb	sy
 8008066:	f3bf 8f4f 	dsb	sy
 800806a:	617b      	str	r3, [r7, #20]
}
 800806c:	bf00      	nop
 800806e:	bf00      	nop
 8008070:	e7fd      	b.n	800806e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008074:	699a      	ldr	r2, [r3, #24]
 8008076:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008078:	18d1      	adds	r1, r2, r3
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800807e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008080:	f7ff ff04 	bl	8007e8c <prvInsertTimerInActiveList>
					break;
 8008084:	e017      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008088:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800808c:	f003 0302 	and.w	r3, r3, #2
 8008090:	2b00      	cmp	r3, #0
 8008092:	d103      	bne.n	800809c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8008094:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008096:	f000 fb89 	bl	80087ac <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800809a:	e00c      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800809c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800809e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80080a2:	f023 0301 	bic.w	r3, r3, #1
 80080a6:	b2da      	uxtb	r2, r3
 80080a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80080aa:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80080ae:	e002      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80080b0:	bf00      	nop
 80080b2:	e000      	b.n	80080b6 <prvProcessReceivedCommands+0x1a6>
					break;
 80080b4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80080b6:	4b08      	ldr	r3, [pc, #32]	@ (80080d8 <prvProcessReceivedCommands+0x1c8>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	1d39      	adds	r1, r7, #4
 80080bc:	2200      	movs	r2, #0
 80080be:	4618      	mov	r0, r3
 80080c0:	f7fd fec0 	bl	8005e44 <xQueueReceive>
 80080c4:	4603      	mov	r3, r0
 80080c6:	2b00      	cmp	r3, #0
 80080c8:	f47f af26 	bne.w	8007f18 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80080cc:	bf00      	nop
 80080ce:	bf00      	nop
 80080d0:	3730      	adds	r7, #48	@ 0x30
 80080d2:	46bd      	mov	sp, r7
 80080d4:	bd80      	pop	{r7, pc}
 80080d6:	bf00      	nop
 80080d8:	20000ec4 	.word	0x20000ec4

080080dc <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80080dc:	b580      	push	{r7, lr}
 80080de:	b088      	sub	sp, #32
 80080e0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80080e2:	e049      	b.n	8008178 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80080e4:	4b2e      	ldr	r3, [pc, #184]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	68db      	ldr	r3, [r3, #12]
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80080ee:	4b2c      	ldr	r3, [pc, #176]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	68db      	ldr	r3, [r3, #12]
 80080f4:	68db      	ldr	r3, [r3, #12]
 80080f6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	3304      	adds	r3, #4
 80080fc:	4618      	mov	r0, r3
 80080fe:	f7fd fbcd 	bl	800589c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1b      	ldr	r3, [r3, #32]
 8008106:	68f8      	ldr	r0, [r7, #12]
 8008108:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8008110:	f003 0304 	and.w	r3, r3, #4
 8008114:	2b00      	cmp	r3, #0
 8008116:	d02f      	beq.n	8008178 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	699b      	ldr	r3, [r3, #24]
 800811c:	693a      	ldr	r2, [r7, #16]
 800811e:	4413      	add	r3, r2
 8008120:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008122:	68ba      	ldr	r2, [r7, #8]
 8008124:	693b      	ldr	r3, [r7, #16]
 8008126:	429a      	cmp	r2, r3
 8008128:	d90e      	bls.n	8008148 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	68ba      	ldr	r2, [r7, #8]
 800812e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	68fa      	ldr	r2, [r7, #12]
 8008134:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008136:	4b1a      	ldr	r3, [pc, #104]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 8008138:	681a      	ldr	r2, [r3, #0]
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	3304      	adds	r3, #4
 800813e:	4619      	mov	r1, r3
 8008140:	4610      	mov	r0, r2
 8008142:	f7fd fb73 	bl	800582c <vListInsert>
 8008146:	e017      	b.n	8008178 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008148:	2300      	movs	r3, #0
 800814a:	9300      	str	r3, [sp, #0]
 800814c:	2300      	movs	r3, #0
 800814e:	693a      	ldr	r2, [r7, #16]
 8008150:	2100      	movs	r1, #0
 8008152:	68f8      	ldr	r0, [r7, #12]
 8008154:	f7ff fd5a 	bl	8007c0c <xTimerGenericCommand>
 8008158:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d10b      	bne.n	8008178 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8008160:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008164:	f383 8811 	msr	BASEPRI, r3
 8008168:	f3bf 8f6f 	isb	sy
 800816c:	f3bf 8f4f 	dsb	sy
 8008170:	603b      	str	r3, [r7, #0]
}
 8008172:	bf00      	nop
 8008174:	bf00      	nop
 8008176:	e7fd      	b.n	8008174 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008178:	4b09      	ldr	r3, [pc, #36]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	681b      	ldr	r3, [r3, #0]
 800817e:	2b00      	cmp	r3, #0
 8008180:	d1b0      	bne.n	80080e4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008182:	4b07      	ldr	r3, [pc, #28]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008188:	4b06      	ldr	r3, [pc, #24]	@ (80081a4 <prvSwitchTimerLists+0xc8>)
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	4a04      	ldr	r2, [pc, #16]	@ (80081a0 <prvSwitchTimerLists+0xc4>)
 800818e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008190:	4a04      	ldr	r2, [pc, #16]	@ (80081a4 <prvSwitchTimerLists+0xc8>)
 8008192:	697b      	ldr	r3, [r7, #20]
 8008194:	6013      	str	r3, [r2, #0]
}
 8008196:	bf00      	nop
 8008198:	3718      	adds	r7, #24
 800819a:	46bd      	mov	sp, r7
 800819c:	bd80      	pop	{r7, pc}
 800819e:	bf00      	nop
 80081a0:	20000ebc 	.word	0x20000ebc
 80081a4:	20000ec0 	.word	0x20000ec0

080081a8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80081a8:	b580      	push	{r7, lr}
 80081aa:	b082      	sub	sp, #8
 80081ac:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80081ae:	f000 f92d 	bl	800840c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80081b2:	4b15      	ldr	r3, [pc, #84]	@ (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	2b00      	cmp	r3, #0
 80081b8:	d120      	bne.n	80081fc <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80081ba:	4814      	ldr	r0, [pc, #80]	@ (800820c <prvCheckForValidListAndQueue+0x64>)
 80081bc:	f7fd fae8 	bl	8005790 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80081c0:	4813      	ldr	r0, [pc, #76]	@ (8008210 <prvCheckForValidListAndQueue+0x68>)
 80081c2:	f7fd fae5 	bl	8005790 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80081c6:	4b13      	ldr	r3, [pc, #76]	@ (8008214 <prvCheckForValidListAndQueue+0x6c>)
 80081c8:	4a10      	ldr	r2, [pc, #64]	@ (800820c <prvCheckForValidListAndQueue+0x64>)
 80081ca:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80081cc:	4b12      	ldr	r3, [pc, #72]	@ (8008218 <prvCheckForValidListAndQueue+0x70>)
 80081ce:	4a10      	ldr	r2, [pc, #64]	@ (8008210 <prvCheckForValidListAndQueue+0x68>)
 80081d0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80081d2:	2300      	movs	r3, #0
 80081d4:	9300      	str	r3, [sp, #0]
 80081d6:	4b11      	ldr	r3, [pc, #68]	@ (800821c <prvCheckForValidListAndQueue+0x74>)
 80081d8:	4a11      	ldr	r2, [pc, #68]	@ (8008220 <prvCheckForValidListAndQueue+0x78>)
 80081da:	2110      	movs	r1, #16
 80081dc:	200a      	movs	r0, #10
 80081de:	f7fd fbf1 	bl	80059c4 <xQueueGenericCreateStatic>
 80081e2:	4603      	mov	r3, r0
 80081e4:	4a08      	ldr	r2, [pc, #32]	@ (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081e6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80081e8:	4b07      	ldr	r3, [pc, #28]	@ (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	2b00      	cmp	r3, #0
 80081ee:	d005      	beq.n	80081fc <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80081f0:	4b05      	ldr	r3, [pc, #20]	@ (8008208 <prvCheckForValidListAndQueue+0x60>)
 80081f2:	681b      	ldr	r3, [r3, #0]
 80081f4:	490b      	ldr	r1, [pc, #44]	@ (8008224 <prvCheckForValidListAndQueue+0x7c>)
 80081f6:	4618      	mov	r0, r3
 80081f8:	f7fe f816 	bl	8006228 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80081fc:	f000 f936 	bl	800846c <vPortExitCritical>
}
 8008200:	bf00      	nop
 8008202:	46bd      	mov	sp, r7
 8008204:	bd80      	pop	{r7, pc}
 8008206:	bf00      	nop
 8008208:	20000ec4 	.word	0x20000ec4
 800820c:	20000e94 	.word	0x20000e94
 8008210:	20000ea8 	.word	0x20000ea8
 8008214:	20000ebc 	.word	0x20000ebc
 8008218:	20000ec0 	.word	0x20000ec0
 800821c:	20000f70 	.word	0x20000f70
 8008220:	20000ed0 	.word	0x20000ed0
 8008224:	0800d24c 	.word	0x0800d24c

08008228 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008228:	b480      	push	{r7}
 800822a:	b085      	sub	sp, #20
 800822c:	af00      	add	r7, sp, #0
 800822e:	60f8      	str	r0, [r7, #12]
 8008230:	60b9      	str	r1, [r7, #8]
 8008232:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	3b04      	subs	r3, #4
 8008238:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800823a:	68fb      	ldr	r3, [r7, #12]
 800823c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008240:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	3b04      	subs	r3, #4
 8008246:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008248:	68bb      	ldr	r3, [r7, #8]
 800824a:	f023 0201 	bic.w	r2, r3, #1
 800824e:	68fb      	ldr	r3, [r7, #12]
 8008250:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	3b04      	subs	r3, #4
 8008256:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008258:	4a08      	ldr	r2, [pc, #32]	@ (800827c <pxPortInitialiseStack+0x54>)
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	3b14      	subs	r3, #20
 8008262:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008264:	687a      	ldr	r2, [r7, #4]
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	3b20      	subs	r3, #32
 800826e:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008270:	68fb      	ldr	r3, [r7, #12]
}
 8008272:	4618      	mov	r0, r3
 8008274:	3714      	adds	r7, #20
 8008276:	46bd      	mov	sp, r7
 8008278:	bc80      	pop	{r7}
 800827a:	4770      	bx	lr
 800827c:	08008281 	.word	0x08008281

08008280 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008280:	b480      	push	{r7}
 8008282:	b085      	sub	sp, #20
 8008284:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8008286:	2300      	movs	r3, #0
 8008288:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800828a:	4b12      	ldr	r3, [pc, #72]	@ (80082d4 <prvTaskExitError+0x54>)
 800828c:	681b      	ldr	r3, [r3, #0]
 800828e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008292:	d00b      	beq.n	80082ac <prvTaskExitError+0x2c>
	__asm volatile
 8008294:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008298:	f383 8811 	msr	BASEPRI, r3
 800829c:	f3bf 8f6f 	isb	sy
 80082a0:	f3bf 8f4f 	dsb	sy
 80082a4:	60fb      	str	r3, [r7, #12]
}
 80082a6:	bf00      	nop
 80082a8:	bf00      	nop
 80082aa:	e7fd      	b.n	80082a8 <prvTaskExitError+0x28>
	__asm volatile
 80082ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80082b0:	f383 8811 	msr	BASEPRI, r3
 80082b4:	f3bf 8f6f 	isb	sy
 80082b8:	f3bf 8f4f 	dsb	sy
 80082bc:	60bb      	str	r3, [r7, #8]
}
 80082be:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80082c0:	bf00      	nop
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d0fc      	beq.n	80082c2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80082c8:	bf00      	nop
 80082ca:	bf00      	nop
 80082cc:	3714      	adds	r7, #20
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bc80      	pop	{r7}
 80082d2:	4770      	bx	lr
 80082d4:	2000000c 	.word	0x2000000c
	...

080082e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80082e0:	4b07      	ldr	r3, [pc, #28]	@ (8008300 <pxCurrentTCBConst2>)
 80082e2:	6819      	ldr	r1, [r3, #0]
 80082e4:	6808      	ldr	r0, [r1, #0]
 80082e6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80082ea:	f380 8809 	msr	PSP, r0
 80082ee:	f3bf 8f6f 	isb	sy
 80082f2:	f04f 0000 	mov.w	r0, #0
 80082f6:	f380 8811 	msr	BASEPRI, r0
 80082fa:	f04e 0e0d 	orr.w	lr, lr, #13
 80082fe:	4770      	bx	lr

08008300 <pxCurrentTCBConst2>:
 8008300:	20000994 	.word	0x20000994
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008304:	bf00      	nop
 8008306:	bf00      	nop

08008308 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8008308:	4806      	ldr	r0, [pc, #24]	@ (8008324 <prvPortStartFirstTask+0x1c>)
 800830a:	6800      	ldr	r0, [r0, #0]
 800830c:	6800      	ldr	r0, [r0, #0]
 800830e:	f380 8808 	msr	MSP, r0
 8008312:	b662      	cpsie	i
 8008314:	b661      	cpsie	f
 8008316:	f3bf 8f4f 	dsb	sy
 800831a:	f3bf 8f6f 	isb	sy
 800831e:	df00      	svc	0
 8008320:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008322:	bf00      	nop
 8008324:	e000ed08 	.word	0xe000ed08

08008328 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008328:	b580      	push	{r7, lr}
 800832a:	b084      	sub	sp, #16
 800832c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800832e:	4b32      	ldr	r3, [pc, #200]	@ (80083f8 <xPortStartScheduler+0xd0>)
 8008330:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008332:	68fb      	ldr	r3, [r7, #12]
 8008334:	781b      	ldrb	r3, [r3, #0]
 8008336:	b2db      	uxtb	r3, r3
 8008338:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800833a:	68fb      	ldr	r3, [r7, #12]
 800833c:	22ff      	movs	r2, #255	@ 0xff
 800833e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	781b      	ldrb	r3, [r3, #0]
 8008344:	b2db      	uxtb	r3, r3
 8008346:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008348:	78fb      	ldrb	r3, [r7, #3]
 800834a:	b2db      	uxtb	r3, r3
 800834c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008350:	b2da      	uxtb	r2, r3
 8008352:	4b2a      	ldr	r3, [pc, #168]	@ (80083fc <xPortStartScheduler+0xd4>)
 8008354:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008356:	4b2a      	ldr	r3, [pc, #168]	@ (8008400 <xPortStartScheduler+0xd8>)
 8008358:	2207      	movs	r2, #7
 800835a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800835c:	e009      	b.n	8008372 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800835e:	4b28      	ldr	r3, [pc, #160]	@ (8008400 <xPortStartScheduler+0xd8>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	3b01      	subs	r3, #1
 8008364:	4a26      	ldr	r2, [pc, #152]	@ (8008400 <xPortStartScheduler+0xd8>)
 8008366:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008368:	78fb      	ldrb	r3, [r7, #3]
 800836a:	b2db      	uxtb	r3, r3
 800836c:	005b      	lsls	r3, r3, #1
 800836e:	b2db      	uxtb	r3, r3
 8008370:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008372:	78fb      	ldrb	r3, [r7, #3]
 8008374:	b2db      	uxtb	r3, r3
 8008376:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800837a:	2b80      	cmp	r3, #128	@ 0x80
 800837c:	d0ef      	beq.n	800835e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800837e:	4b20      	ldr	r3, [pc, #128]	@ (8008400 <xPortStartScheduler+0xd8>)
 8008380:	681b      	ldr	r3, [r3, #0]
 8008382:	f1c3 0307 	rsb	r3, r3, #7
 8008386:	2b04      	cmp	r3, #4
 8008388:	d00b      	beq.n	80083a2 <xPortStartScheduler+0x7a>
	__asm volatile
 800838a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800838e:	f383 8811 	msr	BASEPRI, r3
 8008392:	f3bf 8f6f 	isb	sy
 8008396:	f3bf 8f4f 	dsb	sy
 800839a:	60bb      	str	r3, [r7, #8]
}
 800839c:	bf00      	nop
 800839e:	bf00      	nop
 80083a0:	e7fd      	b.n	800839e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80083a2:	4b17      	ldr	r3, [pc, #92]	@ (8008400 <xPortStartScheduler+0xd8>)
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	021b      	lsls	r3, r3, #8
 80083a8:	4a15      	ldr	r2, [pc, #84]	@ (8008400 <xPortStartScheduler+0xd8>)
 80083aa:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80083ac:	4b14      	ldr	r3, [pc, #80]	@ (8008400 <xPortStartScheduler+0xd8>)
 80083ae:	681b      	ldr	r3, [r3, #0]
 80083b0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80083b4:	4a12      	ldr	r2, [pc, #72]	@ (8008400 <xPortStartScheduler+0xd8>)
 80083b6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	b2da      	uxtb	r2, r3
 80083bc:	68fb      	ldr	r3, [r7, #12]
 80083be:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80083c0:	4b10      	ldr	r3, [pc, #64]	@ (8008404 <xPortStartScheduler+0xdc>)
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	4a0f      	ldr	r2, [pc, #60]	@ (8008404 <xPortStartScheduler+0xdc>)
 80083c6:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80083ca:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80083cc:	4b0d      	ldr	r3, [pc, #52]	@ (8008404 <xPortStartScheduler+0xdc>)
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4a0c      	ldr	r2, [pc, #48]	@ (8008404 <xPortStartScheduler+0xdc>)
 80083d2:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80083d6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80083d8:	f000 f8b8 	bl	800854c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80083dc:	4b0a      	ldr	r3, [pc, #40]	@ (8008408 <xPortStartScheduler+0xe0>)
 80083de:	2200      	movs	r2, #0
 80083e0:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80083e2:	f7ff ff91 	bl	8008308 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80083e6:	f7fe fe4d 	bl	8007084 <vTaskSwitchContext>
	prvTaskExitError();
 80083ea:	f7ff ff49 	bl	8008280 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80083ee:	2300      	movs	r3, #0
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	3710      	adds	r7, #16
 80083f4:	46bd      	mov	sp, r7
 80083f6:	bd80      	pop	{r7, pc}
 80083f8:	e000e400 	.word	0xe000e400
 80083fc:	20000fc0 	.word	0x20000fc0
 8008400:	20000fc4 	.word	0x20000fc4
 8008404:	e000ed20 	.word	0xe000ed20
 8008408:	2000000c 	.word	0x2000000c

0800840c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800840c:	b480      	push	{r7}
 800840e:	b083      	sub	sp, #12
 8008410:	af00      	add	r7, sp, #0
	__asm volatile
 8008412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008416:	f383 8811 	msr	BASEPRI, r3
 800841a:	f3bf 8f6f 	isb	sy
 800841e:	f3bf 8f4f 	dsb	sy
 8008422:	607b      	str	r3, [r7, #4]
}
 8008424:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008426:	4b0f      	ldr	r3, [pc, #60]	@ (8008464 <vPortEnterCritical+0x58>)
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	3301      	adds	r3, #1
 800842c:	4a0d      	ldr	r2, [pc, #52]	@ (8008464 <vPortEnterCritical+0x58>)
 800842e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008430:	4b0c      	ldr	r3, [pc, #48]	@ (8008464 <vPortEnterCritical+0x58>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	2b01      	cmp	r3, #1
 8008436:	d110      	bne.n	800845a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008438:	4b0b      	ldr	r3, [pc, #44]	@ (8008468 <vPortEnterCritical+0x5c>)
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	b2db      	uxtb	r3, r3
 800843e:	2b00      	cmp	r3, #0
 8008440:	d00b      	beq.n	800845a <vPortEnterCritical+0x4e>
	__asm volatile
 8008442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008446:	f383 8811 	msr	BASEPRI, r3
 800844a:	f3bf 8f6f 	isb	sy
 800844e:	f3bf 8f4f 	dsb	sy
 8008452:	603b      	str	r3, [r7, #0]
}
 8008454:	bf00      	nop
 8008456:	bf00      	nop
 8008458:	e7fd      	b.n	8008456 <vPortEnterCritical+0x4a>
	}
}
 800845a:	bf00      	nop
 800845c:	370c      	adds	r7, #12
 800845e:	46bd      	mov	sp, r7
 8008460:	bc80      	pop	{r7}
 8008462:	4770      	bx	lr
 8008464:	2000000c 	.word	0x2000000c
 8008468:	e000ed04 	.word	0xe000ed04

0800846c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800846c:	b480      	push	{r7}
 800846e:	b083      	sub	sp, #12
 8008470:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008472:	4b12      	ldr	r3, [pc, #72]	@ (80084bc <vPortExitCritical+0x50>)
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d10b      	bne.n	8008492 <vPortExitCritical+0x26>
	__asm volatile
 800847a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800847e:	f383 8811 	msr	BASEPRI, r3
 8008482:	f3bf 8f6f 	isb	sy
 8008486:	f3bf 8f4f 	dsb	sy
 800848a:	607b      	str	r3, [r7, #4]
}
 800848c:	bf00      	nop
 800848e:	bf00      	nop
 8008490:	e7fd      	b.n	800848e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008492:	4b0a      	ldr	r3, [pc, #40]	@ (80084bc <vPortExitCritical+0x50>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	3b01      	subs	r3, #1
 8008498:	4a08      	ldr	r2, [pc, #32]	@ (80084bc <vPortExitCritical+0x50>)
 800849a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800849c:	4b07      	ldr	r3, [pc, #28]	@ (80084bc <vPortExitCritical+0x50>)
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	2b00      	cmp	r3, #0
 80084a2:	d105      	bne.n	80084b0 <vPortExitCritical+0x44>
 80084a4:	2300      	movs	r3, #0
 80084a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80084a8:	683b      	ldr	r3, [r7, #0]
 80084aa:	f383 8811 	msr	BASEPRI, r3
}
 80084ae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80084b0:	bf00      	nop
 80084b2:	370c      	adds	r7, #12
 80084b4:	46bd      	mov	sp, r7
 80084b6:	bc80      	pop	{r7}
 80084b8:	4770      	bx	lr
 80084ba:	bf00      	nop
 80084bc:	2000000c 	.word	0x2000000c

080084c0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80084c0:	f3ef 8009 	mrs	r0, PSP
 80084c4:	f3bf 8f6f 	isb	sy
 80084c8:	4b0d      	ldr	r3, [pc, #52]	@ (8008500 <pxCurrentTCBConst>)
 80084ca:	681a      	ldr	r2, [r3, #0]
 80084cc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084d0:	6010      	str	r0, [r2, #0]
 80084d2:	e92d 4008 	stmdb	sp!, {r3, lr}
 80084d6:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80084da:	f380 8811 	msr	BASEPRI, r0
 80084de:	f7fe fdd1 	bl	8007084 <vTaskSwitchContext>
 80084e2:	f04f 0000 	mov.w	r0, #0
 80084e6:	f380 8811 	msr	BASEPRI, r0
 80084ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80084ee:	6819      	ldr	r1, [r3, #0]
 80084f0:	6808      	ldr	r0, [r1, #0]
 80084f2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 80084f6:	f380 8809 	msr	PSP, r0
 80084fa:	f3bf 8f6f 	isb	sy
 80084fe:	4770      	bx	lr

08008500 <pxCurrentTCBConst>:
 8008500:	20000994 	.word	0x20000994
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8008504:	bf00      	nop
 8008506:	bf00      	nop

08008508 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8008508:	b580      	push	{r7, lr}
 800850a:	b082      	sub	sp, #8
 800850c:	af00      	add	r7, sp, #0
	__asm volatile
 800850e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008512:	f383 8811 	msr	BASEPRI, r3
 8008516:	f3bf 8f6f 	isb	sy
 800851a:	f3bf 8f4f 	dsb	sy
 800851e:	607b      	str	r3, [r7, #4]
}
 8008520:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8008522:	f7fe fcf5 	bl	8006f10 <xTaskIncrementTick>
 8008526:	4603      	mov	r3, r0
 8008528:	2b00      	cmp	r3, #0
 800852a:	d003      	beq.n	8008534 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800852c:	4b06      	ldr	r3, [pc, #24]	@ (8008548 <xPortSysTickHandler+0x40>)
 800852e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008532:	601a      	str	r2, [r3, #0]
 8008534:	2300      	movs	r3, #0
 8008536:	603b      	str	r3, [r7, #0]
	__asm volatile
 8008538:	683b      	ldr	r3, [r7, #0]
 800853a:	f383 8811 	msr	BASEPRI, r3
}
 800853e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8008540:	bf00      	nop
 8008542:	3708      	adds	r7, #8
 8008544:	46bd      	mov	sp, r7
 8008546:	bd80      	pop	{r7, pc}
 8008548:	e000ed04 	.word	0xe000ed04

0800854c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800854c:	b480      	push	{r7}
 800854e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8008550:	4b0a      	ldr	r3, [pc, #40]	@ (800857c <vPortSetupTimerInterrupt+0x30>)
 8008552:	2200      	movs	r2, #0
 8008554:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8008556:	4b0a      	ldr	r3, [pc, #40]	@ (8008580 <vPortSetupTimerInterrupt+0x34>)
 8008558:	2200      	movs	r2, #0
 800855a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800855c:	4b09      	ldr	r3, [pc, #36]	@ (8008584 <vPortSetupTimerInterrupt+0x38>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	4a09      	ldr	r2, [pc, #36]	@ (8008588 <vPortSetupTimerInterrupt+0x3c>)
 8008562:	fba2 2303 	umull	r2, r3, r2, r3
 8008566:	099b      	lsrs	r3, r3, #6
 8008568:	4a08      	ldr	r2, [pc, #32]	@ (800858c <vPortSetupTimerInterrupt+0x40>)
 800856a:	3b01      	subs	r3, #1
 800856c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800856e:	4b03      	ldr	r3, [pc, #12]	@ (800857c <vPortSetupTimerInterrupt+0x30>)
 8008570:	2207      	movs	r2, #7
 8008572:	601a      	str	r2, [r3, #0]
}
 8008574:	bf00      	nop
 8008576:	46bd      	mov	sp, r7
 8008578:	bc80      	pop	{r7}
 800857a:	4770      	bx	lr
 800857c:	e000e010 	.word	0xe000e010
 8008580:	e000e018 	.word	0xe000e018
 8008584:	20000000 	.word	0x20000000
 8008588:	10624dd3 	.word	0x10624dd3
 800858c:	e000e014 	.word	0xe000e014

08008590 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8008590:	b480      	push	{r7}
 8008592:	b085      	sub	sp, #20
 8008594:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8008596:	f3ef 8305 	mrs	r3, IPSR
 800859a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800859c:	68fb      	ldr	r3, [r7, #12]
 800859e:	2b0f      	cmp	r3, #15
 80085a0:	d915      	bls.n	80085ce <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80085a2:	4a17      	ldr	r2, [pc, #92]	@ (8008600 <vPortValidateInterruptPriority+0x70>)
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	4413      	add	r3, r2
 80085a8:	781b      	ldrb	r3, [r3, #0]
 80085aa:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80085ac:	4b15      	ldr	r3, [pc, #84]	@ (8008604 <vPortValidateInterruptPriority+0x74>)
 80085ae:	781b      	ldrb	r3, [r3, #0]
 80085b0:	7afa      	ldrb	r2, [r7, #11]
 80085b2:	429a      	cmp	r2, r3
 80085b4:	d20b      	bcs.n	80085ce <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80085b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085ba:	f383 8811 	msr	BASEPRI, r3
 80085be:	f3bf 8f6f 	isb	sy
 80085c2:	f3bf 8f4f 	dsb	sy
 80085c6:	607b      	str	r3, [r7, #4]
}
 80085c8:	bf00      	nop
 80085ca:	bf00      	nop
 80085cc:	e7fd      	b.n	80085ca <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80085ce:	4b0e      	ldr	r3, [pc, #56]	@ (8008608 <vPortValidateInterruptPriority+0x78>)
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80085d6:	4b0d      	ldr	r3, [pc, #52]	@ (800860c <vPortValidateInterruptPriority+0x7c>)
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	429a      	cmp	r2, r3
 80085dc:	d90b      	bls.n	80085f6 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80085de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80085e2:	f383 8811 	msr	BASEPRI, r3
 80085e6:	f3bf 8f6f 	isb	sy
 80085ea:	f3bf 8f4f 	dsb	sy
 80085ee:	603b      	str	r3, [r7, #0]
}
 80085f0:	bf00      	nop
 80085f2:	bf00      	nop
 80085f4:	e7fd      	b.n	80085f2 <vPortValidateInterruptPriority+0x62>
	}
 80085f6:	bf00      	nop
 80085f8:	3714      	adds	r7, #20
 80085fa:	46bd      	mov	sp, r7
 80085fc:	bc80      	pop	{r7}
 80085fe:	4770      	bx	lr
 8008600:	e000e3f0 	.word	0xe000e3f0
 8008604:	20000fc0 	.word	0x20000fc0
 8008608:	e000ed0c 	.word	0xe000ed0c
 800860c:	20000fc4 	.word	0x20000fc4

08008610 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	@ 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8008618:	2300      	movs	r3, #0
 800861a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800861c:	f7fe fbbe 	bl	8006d9c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8008620:	4b5c      	ldr	r3, [pc, #368]	@ (8008794 <pvPortMalloc+0x184>)
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	2b00      	cmp	r3, #0
 8008626:	d101      	bne.n	800862c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8008628:	f000 f924 	bl	8008874 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800862c:	4b5a      	ldr	r3, [pc, #360]	@ (8008798 <pvPortMalloc+0x188>)
 800862e:	681a      	ldr	r2, [r3, #0]
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	4013      	ands	r3, r2
 8008634:	2b00      	cmp	r3, #0
 8008636:	f040 8095 	bne.w	8008764 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d01e      	beq.n	800867e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8008640:	2208      	movs	r2, #8
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	4413      	add	r3, r2
 8008646:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	f003 0307 	and.w	r3, r3, #7
 800864e:	2b00      	cmp	r3, #0
 8008650:	d015      	beq.n	800867e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	f023 0307 	bic.w	r3, r3, #7
 8008658:	3308      	adds	r3, #8
 800865a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	f003 0307 	and.w	r3, r3, #7
 8008662:	2b00      	cmp	r3, #0
 8008664:	d00b      	beq.n	800867e <pvPortMalloc+0x6e>
	__asm volatile
 8008666:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800866a:	f383 8811 	msr	BASEPRI, r3
 800866e:	f3bf 8f6f 	isb	sy
 8008672:	f3bf 8f4f 	dsb	sy
 8008676:	617b      	str	r3, [r7, #20]
}
 8008678:	bf00      	nop
 800867a:	bf00      	nop
 800867c:	e7fd      	b.n	800867a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	2b00      	cmp	r3, #0
 8008682:	d06f      	beq.n	8008764 <pvPortMalloc+0x154>
 8008684:	4b45      	ldr	r3, [pc, #276]	@ (800879c <pvPortMalloc+0x18c>)
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	687a      	ldr	r2, [r7, #4]
 800868a:	429a      	cmp	r2, r3
 800868c:	d86a      	bhi.n	8008764 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800868e:	4b44      	ldr	r3, [pc, #272]	@ (80087a0 <pvPortMalloc+0x190>)
 8008690:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8008692:	4b43      	ldr	r3, [pc, #268]	@ (80087a0 <pvPortMalloc+0x190>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008698:	e004      	b.n	80086a4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800869a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800869c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800869e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80086a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086a6:	685b      	ldr	r3, [r3, #4]
 80086a8:	687a      	ldr	r2, [r7, #4]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d903      	bls.n	80086b6 <pvPortMalloc+0xa6>
 80086ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	2b00      	cmp	r3, #0
 80086b4:	d1f1      	bne.n	800869a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80086b6:	4b37      	ldr	r3, [pc, #220]	@ (8008794 <pvPortMalloc+0x184>)
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086bc:	429a      	cmp	r2, r3
 80086be:	d051      	beq.n	8008764 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80086c0:	6a3b      	ldr	r3, [r7, #32]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2208      	movs	r2, #8
 80086c6:	4413      	add	r3, r2
 80086c8:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80086ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086cc:	681a      	ldr	r2, [r3, #0]
 80086ce:	6a3b      	ldr	r3, [r7, #32]
 80086d0:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80086d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80086d4:	685a      	ldr	r2, [r3, #4]
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	1ad2      	subs	r2, r2, r3
 80086da:	2308      	movs	r3, #8
 80086dc:	005b      	lsls	r3, r3, #1
 80086de:	429a      	cmp	r2, r3
 80086e0:	d920      	bls.n	8008724 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80086e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	4413      	add	r3, r2
 80086e8:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80086ea:	69bb      	ldr	r3, [r7, #24]
 80086ec:	f003 0307 	and.w	r3, r3, #7
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d00b      	beq.n	800870c <pvPortMalloc+0xfc>
	__asm volatile
 80086f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086f8:	f383 8811 	msr	BASEPRI, r3
 80086fc:	f3bf 8f6f 	isb	sy
 8008700:	f3bf 8f4f 	dsb	sy
 8008704:	613b      	str	r3, [r7, #16]
}
 8008706:	bf00      	nop
 8008708:	bf00      	nop
 800870a:	e7fd      	b.n	8008708 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800870c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800870e:	685a      	ldr	r2, [r3, #4]
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	1ad2      	subs	r2, r2, r3
 8008714:	69bb      	ldr	r3, [r7, #24]
 8008716:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8008718:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800871a:	687a      	ldr	r2, [r7, #4]
 800871c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800871e:	69b8      	ldr	r0, [r7, #24]
 8008720:	f000 f90a 	bl	8008938 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8008724:	4b1d      	ldr	r3, [pc, #116]	@ (800879c <pvPortMalloc+0x18c>)
 8008726:	681a      	ldr	r2, [r3, #0]
 8008728:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800872a:	685b      	ldr	r3, [r3, #4]
 800872c:	1ad3      	subs	r3, r2, r3
 800872e:	4a1b      	ldr	r2, [pc, #108]	@ (800879c <pvPortMalloc+0x18c>)
 8008730:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8008732:	4b1a      	ldr	r3, [pc, #104]	@ (800879c <pvPortMalloc+0x18c>)
 8008734:	681a      	ldr	r2, [r3, #0]
 8008736:	4b1b      	ldr	r3, [pc, #108]	@ (80087a4 <pvPortMalloc+0x194>)
 8008738:	681b      	ldr	r3, [r3, #0]
 800873a:	429a      	cmp	r2, r3
 800873c:	d203      	bcs.n	8008746 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800873e:	4b17      	ldr	r3, [pc, #92]	@ (800879c <pvPortMalloc+0x18c>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a18      	ldr	r2, [pc, #96]	@ (80087a4 <pvPortMalloc+0x194>)
 8008744:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	685a      	ldr	r2, [r3, #4]
 800874a:	4b13      	ldr	r3, [pc, #76]	@ (8008798 <pvPortMalloc+0x188>)
 800874c:	681b      	ldr	r3, [r3, #0]
 800874e:	431a      	orrs	r2, r3
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008754:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008756:	2200      	movs	r2, #0
 8008758:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800875a:	4b13      	ldr	r3, [pc, #76]	@ (80087a8 <pvPortMalloc+0x198>)
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	3301      	adds	r3, #1
 8008760:	4a11      	ldr	r2, [pc, #68]	@ (80087a8 <pvPortMalloc+0x198>)
 8008762:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008764:	f7fe fb28 	bl	8006db8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008768:	69fb      	ldr	r3, [r7, #28]
 800876a:	f003 0307 	and.w	r3, r3, #7
 800876e:	2b00      	cmp	r3, #0
 8008770:	d00b      	beq.n	800878a <pvPortMalloc+0x17a>
	__asm volatile
 8008772:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008776:	f383 8811 	msr	BASEPRI, r3
 800877a:	f3bf 8f6f 	isb	sy
 800877e:	f3bf 8f4f 	dsb	sy
 8008782:	60fb      	str	r3, [r7, #12]
}
 8008784:	bf00      	nop
 8008786:	bf00      	nop
 8008788:	e7fd      	b.n	8008786 <pvPortMalloc+0x176>
	return pvReturn;
 800878a:	69fb      	ldr	r3, [r7, #28]
}
 800878c:	4618      	mov	r0, r3
 800878e:	3728      	adds	r7, #40	@ 0x28
 8008790:	46bd      	mov	sp, r7
 8008792:	bd80      	pop	{r7, pc}
 8008794:	20001bd0 	.word	0x20001bd0
 8008798:	20001be4 	.word	0x20001be4
 800879c:	20001bd4 	.word	0x20001bd4
 80087a0:	20001bc8 	.word	0x20001bc8
 80087a4:	20001bd8 	.word	0x20001bd8
 80087a8:	20001bdc 	.word	0x20001bdc

080087ac <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80087ac:	b580      	push	{r7, lr}
 80087ae:	b086      	sub	sp, #24
 80087b0:	af00      	add	r7, sp, #0
 80087b2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80087b8:	687b      	ldr	r3, [r7, #4]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d04f      	beq.n	800885e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80087be:	2308      	movs	r3, #8
 80087c0:	425b      	negs	r3, r3
 80087c2:	697a      	ldr	r2, [r7, #20]
 80087c4:	4413      	add	r3, r2
 80087c6:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80087c8:	697b      	ldr	r3, [r7, #20]
 80087ca:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	685a      	ldr	r2, [r3, #4]
 80087d0:	4b25      	ldr	r3, [pc, #148]	@ (8008868 <vPortFree+0xbc>)
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	4013      	ands	r3, r2
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10b      	bne.n	80087f2 <vPortFree+0x46>
	__asm volatile
 80087da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087de:	f383 8811 	msr	BASEPRI, r3
 80087e2:	f3bf 8f6f 	isb	sy
 80087e6:	f3bf 8f4f 	dsb	sy
 80087ea:	60fb      	str	r3, [r7, #12]
}
 80087ec:	bf00      	nop
 80087ee:	bf00      	nop
 80087f0:	e7fd      	b.n	80087ee <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80087f2:	693b      	ldr	r3, [r7, #16]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d00b      	beq.n	8008812 <vPortFree+0x66>
	__asm volatile
 80087fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087fe:	f383 8811 	msr	BASEPRI, r3
 8008802:	f3bf 8f6f 	isb	sy
 8008806:	f3bf 8f4f 	dsb	sy
 800880a:	60bb      	str	r3, [r7, #8]
}
 800880c:	bf00      	nop
 800880e:	bf00      	nop
 8008810:	e7fd      	b.n	800880e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8008812:	693b      	ldr	r3, [r7, #16]
 8008814:	685a      	ldr	r2, [r3, #4]
 8008816:	4b14      	ldr	r3, [pc, #80]	@ (8008868 <vPortFree+0xbc>)
 8008818:	681b      	ldr	r3, [r3, #0]
 800881a:	4013      	ands	r3, r2
 800881c:	2b00      	cmp	r3, #0
 800881e:	d01e      	beq.n	800885e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	681b      	ldr	r3, [r3, #0]
 8008824:	2b00      	cmp	r3, #0
 8008826:	d11a      	bne.n	800885e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008828:	693b      	ldr	r3, [r7, #16]
 800882a:	685a      	ldr	r2, [r3, #4]
 800882c:	4b0e      	ldr	r3, [pc, #56]	@ (8008868 <vPortFree+0xbc>)
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	43db      	mvns	r3, r3
 8008832:	401a      	ands	r2, r3
 8008834:	693b      	ldr	r3, [r7, #16]
 8008836:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008838:	f7fe fab0 	bl	8006d9c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800883c:	693b      	ldr	r3, [r7, #16]
 800883e:	685a      	ldr	r2, [r3, #4]
 8008840:	4b0a      	ldr	r3, [pc, #40]	@ (800886c <vPortFree+0xc0>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4413      	add	r3, r2
 8008846:	4a09      	ldr	r2, [pc, #36]	@ (800886c <vPortFree+0xc0>)
 8008848:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800884a:	6938      	ldr	r0, [r7, #16]
 800884c:	f000 f874 	bl	8008938 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008850:	4b07      	ldr	r3, [pc, #28]	@ (8008870 <vPortFree+0xc4>)
 8008852:	681b      	ldr	r3, [r3, #0]
 8008854:	3301      	adds	r3, #1
 8008856:	4a06      	ldr	r2, [pc, #24]	@ (8008870 <vPortFree+0xc4>)
 8008858:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800885a:	f7fe faad 	bl	8006db8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800885e:	bf00      	nop
 8008860:	3718      	adds	r7, #24
 8008862:	46bd      	mov	sp, r7
 8008864:	bd80      	pop	{r7, pc}
 8008866:	bf00      	nop
 8008868:	20001be4 	.word	0x20001be4
 800886c:	20001bd4 	.word	0x20001bd4
 8008870:	20001be0 	.word	0x20001be0

08008874 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008874:	b480      	push	{r7}
 8008876:	b085      	sub	sp, #20
 8008878:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800887a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800887e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008880:	4b27      	ldr	r3, [pc, #156]	@ (8008920 <prvHeapInit+0xac>)
 8008882:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008884:	68fb      	ldr	r3, [r7, #12]
 8008886:	f003 0307 	and.w	r3, r3, #7
 800888a:	2b00      	cmp	r3, #0
 800888c:	d00c      	beq.n	80088a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	3307      	adds	r3, #7
 8008892:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	f023 0307 	bic.w	r3, r3, #7
 800889a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800889c:	68ba      	ldr	r2, [r7, #8]
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	1ad3      	subs	r3, r2, r3
 80088a2:	4a1f      	ldr	r2, [pc, #124]	@ (8008920 <prvHeapInit+0xac>)
 80088a4:	4413      	add	r3, r2
 80088a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80088ac:	4a1d      	ldr	r2, [pc, #116]	@ (8008924 <prvHeapInit+0xb0>)
 80088ae:	687b      	ldr	r3, [r7, #4]
 80088b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80088b2:	4b1c      	ldr	r3, [pc, #112]	@ (8008924 <prvHeapInit+0xb0>)
 80088b4:	2200      	movs	r2, #0
 80088b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	68ba      	ldr	r2, [r7, #8]
 80088bc:	4413      	add	r3, r2
 80088be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80088c0:	2208      	movs	r2, #8
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	1a9b      	subs	r3, r3, r2
 80088c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	f023 0307 	bic.w	r3, r3, #7
 80088ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	4a15      	ldr	r2, [pc, #84]	@ (8008928 <prvHeapInit+0xb4>)
 80088d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80088d6:	4b14      	ldr	r3, [pc, #80]	@ (8008928 <prvHeapInit+0xb4>)
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	2200      	movs	r2, #0
 80088dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80088de:	4b12      	ldr	r3, [pc, #72]	@ (8008928 <prvHeapInit+0xb4>)
 80088e0:	681b      	ldr	r3, [r3, #0]
 80088e2:	2200      	movs	r2, #0
 80088e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80088ea:	683b      	ldr	r3, [r7, #0]
 80088ec:	68fa      	ldr	r2, [r7, #12]
 80088ee:	1ad2      	subs	r2, r2, r3
 80088f0:	683b      	ldr	r3, [r7, #0]
 80088f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80088f4:	4b0c      	ldr	r3, [pc, #48]	@ (8008928 <prvHeapInit+0xb4>)
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	683b      	ldr	r3, [r7, #0]
 80088fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80088fc:	683b      	ldr	r3, [r7, #0]
 80088fe:	685b      	ldr	r3, [r3, #4]
 8008900:	4a0a      	ldr	r2, [pc, #40]	@ (800892c <prvHeapInit+0xb8>)
 8008902:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8008904:	683b      	ldr	r3, [r7, #0]
 8008906:	685b      	ldr	r3, [r3, #4]
 8008908:	4a09      	ldr	r2, [pc, #36]	@ (8008930 <prvHeapInit+0xbc>)
 800890a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800890c:	4b09      	ldr	r3, [pc, #36]	@ (8008934 <prvHeapInit+0xc0>)
 800890e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8008912:	601a      	str	r2, [r3, #0]
}
 8008914:	bf00      	nop
 8008916:	3714      	adds	r7, #20
 8008918:	46bd      	mov	sp, r7
 800891a:	bc80      	pop	{r7}
 800891c:	4770      	bx	lr
 800891e:	bf00      	nop
 8008920:	20000fc8 	.word	0x20000fc8
 8008924:	20001bc8 	.word	0x20001bc8
 8008928:	20001bd0 	.word	0x20001bd0
 800892c:	20001bd8 	.word	0x20001bd8
 8008930:	20001bd4 	.word	0x20001bd4
 8008934:	20001be4 	.word	0x20001be4

08008938 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008938:	b480      	push	{r7}
 800893a:	b085      	sub	sp, #20
 800893c:	af00      	add	r7, sp, #0
 800893e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008940:	4b27      	ldr	r3, [pc, #156]	@ (80089e0 <prvInsertBlockIntoFreeList+0xa8>)
 8008942:	60fb      	str	r3, [r7, #12]
 8008944:	e002      	b.n	800894c <prvInsertBlockIntoFreeList+0x14>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	60fb      	str	r3, [r7, #12]
 800894c:	68fb      	ldr	r3, [r7, #12]
 800894e:	681b      	ldr	r3, [r3, #0]
 8008950:	687a      	ldr	r2, [r7, #4]
 8008952:	429a      	cmp	r2, r3
 8008954:	d8f7      	bhi.n	8008946 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	685b      	ldr	r3, [r3, #4]
 800895e:	68ba      	ldr	r2, [r7, #8]
 8008960:	4413      	add	r3, r2
 8008962:	687a      	ldr	r2, [r7, #4]
 8008964:	429a      	cmp	r2, r3
 8008966:	d108      	bne.n	800897a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008968:	68fb      	ldr	r3, [r7, #12]
 800896a:	685a      	ldr	r2, [r3, #4]
 800896c:	687b      	ldr	r3, [r7, #4]
 800896e:	685b      	ldr	r3, [r3, #4]
 8008970:	441a      	add	r2, r3
 8008972:	68fb      	ldr	r3, [r7, #12]
 8008974:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	685b      	ldr	r3, [r3, #4]
 8008982:	68ba      	ldr	r2, [r7, #8]
 8008984:	441a      	add	r2, r3
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	429a      	cmp	r2, r3
 800898c:	d118      	bne.n	80089c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	681a      	ldr	r2, [r3, #0]
 8008992:	4b14      	ldr	r3, [pc, #80]	@ (80089e4 <prvInsertBlockIntoFreeList+0xac>)
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	429a      	cmp	r2, r3
 8008998:	d00d      	beq.n	80089b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	685a      	ldr	r2, [r3, #4]
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	685b      	ldr	r3, [r3, #4]
 80089a4:	441a      	add	r2, r3
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	681b      	ldr	r3, [r3, #0]
 80089ae:	681a      	ldr	r2, [r3, #0]
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	601a      	str	r2, [r3, #0]
 80089b4:	e008      	b.n	80089c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80089b6:	4b0b      	ldr	r3, [pc, #44]	@ (80089e4 <prvInsertBlockIntoFreeList+0xac>)
 80089b8:	681a      	ldr	r2, [r3, #0]
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	601a      	str	r2, [r3, #0]
 80089be:	e003      	b.n	80089c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	681a      	ldr	r2, [r3, #0]
 80089c4:	687b      	ldr	r3, [r7, #4]
 80089c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80089c8:	68fa      	ldr	r2, [r7, #12]
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	429a      	cmp	r2, r3
 80089ce:	d002      	beq.n	80089d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	687a      	ldr	r2, [r7, #4]
 80089d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80089d6:	bf00      	nop
 80089d8:	3714      	adds	r7, #20
 80089da:	46bd      	mov	sp, r7
 80089dc:	bc80      	pop	{r7}
 80089de:	4770      	bx	lr
 80089e0:	20001bc8 	.word	0x20001bc8
 80089e4:	20001bd0 	.word	0x20001bd0

080089e8 <sin>:
 80089e8:	b530      	push	{r4, r5, lr}
 80089ea:	4d20      	ldr	r5, [pc, #128]	@ (8008a6c <sin+0x84>)
 80089ec:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 80089f0:	42ac      	cmp	r4, r5
 80089f2:	4602      	mov	r2, r0
 80089f4:	460b      	mov	r3, r1
 80089f6:	b087      	sub	sp, #28
 80089f8:	d806      	bhi.n	8008a08 <sin+0x20>
 80089fa:	2300      	movs	r3, #0
 80089fc:	2200      	movs	r2, #0
 80089fe:	9300      	str	r3, [sp, #0]
 8008a00:	2300      	movs	r3, #0
 8008a02:	f000 f8f9 	bl	8008bf8 <__kernel_sin>
 8008a06:	e004      	b.n	8008a12 <sin+0x2a>
 8008a08:	4d19      	ldr	r5, [pc, #100]	@ (8008a70 <sin+0x88>)
 8008a0a:	42ac      	cmp	r4, r5
 8008a0c:	d903      	bls.n	8008a16 <sin+0x2e>
 8008a0e:	f7f7 fbb5 	bl	800017c <__aeabi_dsub>
 8008a12:	b007      	add	sp, #28
 8008a14:	bd30      	pop	{r4, r5, pc}
 8008a16:	aa02      	add	r2, sp, #8
 8008a18:	f000 f9a6 	bl	8008d68 <__ieee754_rem_pio2>
 8008a1c:	f000 0003 	and.w	r0, r0, #3
 8008a20:	2801      	cmp	r0, #1
 8008a22:	d009      	beq.n	8008a38 <sin+0x50>
 8008a24:	2802      	cmp	r0, #2
 8008a26:	d00e      	beq.n	8008a46 <sin+0x5e>
 8008a28:	b9c0      	cbnz	r0, 8008a5c <sin+0x74>
 8008a2a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a2e:	2301      	movs	r3, #1
 8008a30:	9300      	str	r3, [sp, #0]
 8008a32:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a36:	e7e4      	b.n	8008a02 <sin+0x1a>
 8008a38:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a40:	f000 f81a 	bl	8008a78 <__kernel_cos>
 8008a44:	e7e5      	b.n	8008a12 <sin+0x2a>
 8008a46:	2301      	movs	r3, #1
 8008a48:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a4c:	9300      	str	r3, [sp, #0]
 8008a4e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a52:	f000 f8d1 	bl	8008bf8 <__kernel_sin>
 8008a56:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8008a5a:	e7da      	b.n	8008a12 <sin+0x2a>
 8008a5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a60:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008a64:	f000 f808 	bl	8008a78 <__kernel_cos>
 8008a68:	e7f5      	b.n	8008a56 <sin+0x6e>
 8008a6a:	bf00      	nop
 8008a6c:	3fe921fb 	.word	0x3fe921fb
 8008a70:	7fefffff 	.word	0x7fefffff
 8008a74:	00000000 	.word	0x00000000

08008a78 <__kernel_cos>:
 8008a78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a7c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8008a80:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8008a84:	4680      	mov	r8, r0
 8008a86:	4689      	mov	r9, r1
 8008a88:	e9cd 2300 	strd	r2, r3, [sp]
 8008a8c:	d204      	bcs.n	8008a98 <__kernel_cos+0x20>
 8008a8e:	f7f7 ffdd 	bl	8000a4c <__aeabi_d2iz>
 8008a92:	2800      	cmp	r0, #0
 8008a94:	f000 8086 	beq.w	8008ba4 <__kernel_cos+0x12c>
 8008a98:	4642      	mov	r2, r8
 8008a9a:	464b      	mov	r3, r9
 8008a9c:	4640      	mov	r0, r8
 8008a9e:	4649      	mov	r1, r9
 8008aa0:	f7f7 fd24 	bl	80004ec <__aeabi_dmul>
 8008aa4:	2200      	movs	r2, #0
 8008aa6:	4b4e      	ldr	r3, [pc, #312]	@ (8008be0 <__kernel_cos+0x168>)
 8008aa8:	4604      	mov	r4, r0
 8008aaa:	460d      	mov	r5, r1
 8008aac:	f7f7 fd1e 	bl	80004ec <__aeabi_dmul>
 8008ab0:	a33f      	add	r3, pc, #252	@ (adr r3, 8008bb0 <__kernel_cos+0x138>)
 8008ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ab6:	4682      	mov	sl, r0
 8008ab8:	468b      	mov	fp, r1
 8008aba:	4620      	mov	r0, r4
 8008abc:	4629      	mov	r1, r5
 8008abe:	f7f7 fd15 	bl	80004ec <__aeabi_dmul>
 8008ac2:	a33d      	add	r3, pc, #244	@ (adr r3, 8008bb8 <__kernel_cos+0x140>)
 8008ac4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ac8:	f7f7 fb5a 	bl	8000180 <__adddf3>
 8008acc:	4622      	mov	r2, r4
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f7f7 fd0c 	bl	80004ec <__aeabi_dmul>
 8008ad4:	a33a      	add	r3, pc, #232	@ (adr r3, 8008bc0 <__kernel_cos+0x148>)
 8008ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ada:	f7f7 fb4f 	bl	800017c <__aeabi_dsub>
 8008ade:	4622      	mov	r2, r4
 8008ae0:	462b      	mov	r3, r5
 8008ae2:	f7f7 fd03 	bl	80004ec <__aeabi_dmul>
 8008ae6:	a338      	add	r3, pc, #224	@ (adr r3, 8008bc8 <__kernel_cos+0x150>)
 8008ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008aec:	f7f7 fb48 	bl	8000180 <__adddf3>
 8008af0:	4622      	mov	r2, r4
 8008af2:	462b      	mov	r3, r5
 8008af4:	f7f7 fcfa 	bl	80004ec <__aeabi_dmul>
 8008af8:	a335      	add	r3, pc, #212	@ (adr r3, 8008bd0 <__kernel_cos+0x158>)
 8008afa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008afe:	f7f7 fb3d 	bl	800017c <__aeabi_dsub>
 8008b02:	4622      	mov	r2, r4
 8008b04:	462b      	mov	r3, r5
 8008b06:	f7f7 fcf1 	bl	80004ec <__aeabi_dmul>
 8008b0a:	a333      	add	r3, pc, #204	@ (adr r3, 8008bd8 <__kernel_cos+0x160>)
 8008b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b10:	f7f7 fb36 	bl	8000180 <__adddf3>
 8008b14:	4622      	mov	r2, r4
 8008b16:	462b      	mov	r3, r5
 8008b18:	f7f7 fce8 	bl	80004ec <__aeabi_dmul>
 8008b1c:	4622      	mov	r2, r4
 8008b1e:	462b      	mov	r3, r5
 8008b20:	f7f7 fce4 	bl	80004ec <__aeabi_dmul>
 8008b24:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008b28:	4604      	mov	r4, r0
 8008b2a:	460d      	mov	r5, r1
 8008b2c:	4640      	mov	r0, r8
 8008b2e:	4649      	mov	r1, r9
 8008b30:	f7f7 fcdc 	bl	80004ec <__aeabi_dmul>
 8008b34:	460b      	mov	r3, r1
 8008b36:	4602      	mov	r2, r0
 8008b38:	4629      	mov	r1, r5
 8008b3a:	4620      	mov	r0, r4
 8008b3c:	f7f7 fb1e 	bl	800017c <__aeabi_dsub>
 8008b40:	4b28      	ldr	r3, [pc, #160]	@ (8008be4 <__kernel_cos+0x16c>)
 8008b42:	4680      	mov	r8, r0
 8008b44:	429e      	cmp	r6, r3
 8008b46:	4689      	mov	r9, r1
 8008b48:	d80e      	bhi.n	8008b68 <__kernel_cos+0xf0>
 8008b4a:	4602      	mov	r2, r0
 8008b4c:	460b      	mov	r3, r1
 8008b4e:	4650      	mov	r0, sl
 8008b50:	4659      	mov	r1, fp
 8008b52:	f7f7 fb13 	bl	800017c <__aeabi_dsub>
 8008b56:	4602      	mov	r2, r0
 8008b58:	2000      	movs	r0, #0
 8008b5a:	460b      	mov	r3, r1
 8008b5c:	4922      	ldr	r1, [pc, #136]	@ (8008be8 <__kernel_cos+0x170>)
 8008b5e:	f7f7 fb0d 	bl	800017c <__aeabi_dsub>
 8008b62:	b003      	add	sp, #12
 8008b64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b68:	2400      	movs	r4, #0
 8008b6a:	4b20      	ldr	r3, [pc, #128]	@ (8008bec <__kernel_cos+0x174>)
 8008b6c:	4622      	mov	r2, r4
 8008b6e:	429e      	cmp	r6, r3
 8008b70:	bf8c      	ite	hi
 8008b72:	4d1f      	ldrhi	r5, [pc, #124]	@ (8008bf0 <__kernel_cos+0x178>)
 8008b74:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8008b78:	462b      	mov	r3, r5
 8008b7a:	2000      	movs	r0, #0
 8008b7c:	491a      	ldr	r1, [pc, #104]	@ (8008be8 <__kernel_cos+0x170>)
 8008b7e:	f7f7 fafd 	bl	800017c <__aeabi_dsub>
 8008b82:	4622      	mov	r2, r4
 8008b84:	4606      	mov	r6, r0
 8008b86:	460f      	mov	r7, r1
 8008b88:	462b      	mov	r3, r5
 8008b8a:	4650      	mov	r0, sl
 8008b8c:	4659      	mov	r1, fp
 8008b8e:	f7f7 faf5 	bl	800017c <__aeabi_dsub>
 8008b92:	4642      	mov	r2, r8
 8008b94:	464b      	mov	r3, r9
 8008b96:	f7f7 faf1 	bl	800017c <__aeabi_dsub>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	460b      	mov	r3, r1
 8008b9e:	4630      	mov	r0, r6
 8008ba0:	4639      	mov	r1, r7
 8008ba2:	e7dc      	b.n	8008b5e <__kernel_cos+0xe6>
 8008ba4:	2000      	movs	r0, #0
 8008ba6:	4910      	ldr	r1, [pc, #64]	@ (8008be8 <__kernel_cos+0x170>)
 8008ba8:	e7db      	b.n	8008b62 <__kernel_cos+0xea>
 8008baa:	bf00      	nop
 8008bac:	f3af 8000 	nop.w
 8008bb0:	be8838d4 	.word	0xbe8838d4
 8008bb4:	bda8fae9 	.word	0xbda8fae9
 8008bb8:	bdb4b1c4 	.word	0xbdb4b1c4
 8008bbc:	3e21ee9e 	.word	0x3e21ee9e
 8008bc0:	809c52ad 	.word	0x809c52ad
 8008bc4:	3e927e4f 	.word	0x3e927e4f
 8008bc8:	19cb1590 	.word	0x19cb1590
 8008bcc:	3efa01a0 	.word	0x3efa01a0
 8008bd0:	16c15177 	.word	0x16c15177
 8008bd4:	3f56c16c 	.word	0x3f56c16c
 8008bd8:	5555554c 	.word	0x5555554c
 8008bdc:	3fa55555 	.word	0x3fa55555
 8008be0:	3fe00000 	.word	0x3fe00000
 8008be4:	3fd33332 	.word	0x3fd33332
 8008be8:	3ff00000 	.word	0x3ff00000
 8008bec:	3fe90000 	.word	0x3fe90000
 8008bf0:	3fd20000 	.word	0x3fd20000
 8008bf4:	00000000 	.word	0x00000000

08008bf8 <__kernel_sin>:
 8008bf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bfc:	461f      	mov	r7, r3
 8008bfe:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8008c02:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8008c06:	4604      	mov	r4, r0
 8008c08:	460d      	mov	r5, r1
 8008c0a:	4616      	mov	r6, r2
 8008c0c:	b085      	sub	sp, #20
 8008c0e:	d203      	bcs.n	8008c18 <__kernel_sin+0x20>
 8008c10:	f7f7 ff1c 	bl	8000a4c <__aeabi_d2iz>
 8008c14:	2800      	cmp	r0, #0
 8008c16:	d051      	beq.n	8008cbc <__kernel_sin+0xc4>
 8008c18:	4622      	mov	r2, r4
 8008c1a:	462b      	mov	r3, r5
 8008c1c:	4620      	mov	r0, r4
 8008c1e:	4629      	mov	r1, r5
 8008c20:	f7f7 fc64 	bl	80004ec <__aeabi_dmul>
 8008c24:	4682      	mov	sl, r0
 8008c26:	468b      	mov	fp, r1
 8008c28:	4602      	mov	r2, r0
 8008c2a:	460b      	mov	r3, r1
 8008c2c:	4620      	mov	r0, r4
 8008c2e:	4629      	mov	r1, r5
 8008c30:	f7f7 fc5c 	bl	80004ec <__aeabi_dmul>
 8008c34:	a33e      	add	r3, pc, #248	@ (adr r3, 8008d30 <__kernel_sin+0x138>)
 8008c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c3a:	4680      	mov	r8, r0
 8008c3c:	4689      	mov	r9, r1
 8008c3e:	4650      	mov	r0, sl
 8008c40:	4659      	mov	r1, fp
 8008c42:	f7f7 fc53 	bl	80004ec <__aeabi_dmul>
 8008c46:	a33c      	add	r3, pc, #240	@ (adr r3, 8008d38 <__kernel_sin+0x140>)
 8008c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c4c:	f7f7 fa96 	bl	800017c <__aeabi_dsub>
 8008c50:	4652      	mov	r2, sl
 8008c52:	465b      	mov	r3, fp
 8008c54:	f7f7 fc4a 	bl	80004ec <__aeabi_dmul>
 8008c58:	a339      	add	r3, pc, #228	@ (adr r3, 8008d40 <__kernel_sin+0x148>)
 8008c5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5e:	f7f7 fa8f 	bl	8000180 <__adddf3>
 8008c62:	4652      	mov	r2, sl
 8008c64:	465b      	mov	r3, fp
 8008c66:	f7f7 fc41 	bl	80004ec <__aeabi_dmul>
 8008c6a:	a337      	add	r3, pc, #220	@ (adr r3, 8008d48 <__kernel_sin+0x150>)
 8008c6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c70:	f7f7 fa84 	bl	800017c <__aeabi_dsub>
 8008c74:	4652      	mov	r2, sl
 8008c76:	465b      	mov	r3, fp
 8008c78:	f7f7 fc38 	bl	80004ec <__aeabi_dmul>
 8008c7c:	a334      	add	r3, pc, #208	@ (adr r3, 8008d50 <__kernel_sin+0x158>)
 8008c7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c82:	f7f7 fa7d 	bl	8000180 <__adddf3>
 8008c86:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008c88:	e9cd 0100 	strd	r0, r1, [sp]
 8008c8c:	b9db      	cbnz	r3, 8008cc6 <__kernel_sin+0xce>
 8008c8e:	4602      	mov	r2, r0
 8008c90:	460b      	mov	r3, r1
 8008c92:	4650      	mov	r0, sl
 8008c94:	4659      	mov	r1, fp
 8008c96:	f7f7 fc29 	bl	80004ec <__aeabi_dmul>
 8008c9a:	a32f      	add	r3, pc, #188	@ (adr r3, 8008d58 <__kernel_sin+0x160>)
 8008c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ca0:	f7f7 fa6c 	bl	800017c <__aeabi_dsub>
 8008ca4:	4642      	mov	r2, r8
 8008ca6:	464b      	mov	r3, r9
 8008ca8:	f7f7 fc20 	bl	80004ec <__aeabi_dmul>
 8008cac:	4602      	mov	r2, r0
 8008cae:	460b      	mov	r3, r1
 8008cb0:	4620      	mov	r0, r4
 8008cb2:	4629      	mov	r1, r5
 8008cb4:	f7f7 fa64 	bl	8000180 <__adddf3>
 8008cb8:	4604      	mov	r4, r0
 8008cba:	460d      	mov	r5, r1
 8008cbc:	4620      	mov	r0, r4
 8008cbe:	4629      	mov	r1, r5
 8008cc0:	b005      	add	sp, #20
 8008cc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	4630      	mov	r0, r6
 8008cca:	4639      	mov	r1, r7
 8008ccc:	4b24      	ldr	r3, [pc, #144]	@ (8008d60 <__kernel_sin+0x168>)
 8008cce:	f7f7 fc0d 	bl	80004ec <__aeabi_dmul>
 8008cd2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008cd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008cda:	4640      	mov	r0, r8
 8008cdc:	4649      	mov	r1, r9
 8008cde:	f7f7 fc05 	bl	80004ec <__aeabi_dmul>
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	460b      	mov	r3, r1
 8008ce6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008cea:	f7f7 fa47 	bl	800017c <__aeabi_dsub>
 8008cee:	4652      	mov	r2, sl
 8008cf0:	465b      	mov	r3, fp
 8008cf2:	f7f7 fbfb 	bl	80004ec <__aeabi_dmul>
 8008cf6:	4632      	mov	r2, r6
 8008cf8:	463b      	mov	r3, r7
 8008cfa:	f7f7 fa3f 	bl	800017c <__aeabi_dsub>
 8008cfe:	a316      	add	r3, pc, #88	@ (adr r3, 8008d58 <__kernel_sin+0x160>)
 8008d00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d04:	4606      	mov	r6, r0
 8008d06:	460f      	mov	r7, r1
 8008d08:	4640      	mov	r0, r8
 8008d0a:	4649      	mov	r1, r9
 8008d0c:	f7f7 fbee 	bl	80004ec <__aeabi_dmul>
 8008d10:	4602      	mov	r2, r0
 8008d12:	460b      	mov	r3, r1
 8008d14:	4630      	mov	r0, r6
 8008d16:	4639      	mov	r1, r7
 8008d18:	f7f7 fa32 	bl	8000180 <__adddf3>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4620      	mov	r0, r4
 8008d22:	4629      	mov	r1, r5
 8008d24:	f7f7 fa2a 	bl	800017c <__aeabi_dsub>
 8008d28:	e7c6      	b.n	8008cb8 <__kernel_sin+0xc0>
 8008d2a:	bf00      	nop
 8008d2c:	f3af 8000 	nop.w
 8008d30:	5acfd57c 	.word	0x5acfd57c
 8008d34:	3de5d93a 	.word	0x3de5d93a
 8008d38:	8a2b9ceb 	.word	0x8a2b9ceb
 8008d3c:	3e5ae5e6 	.word	0x3e5ae5e6
 8008d40:	57b1fe7d 	.word	0x57b1fe7d
 8008d44:	3ec71de3 	.word	0x3ec71de3
 8008d48:	19c161d5 	.word	0x19c161d5
 8008d4c:	3f2a01a0 	.word	0x3f2a01a0
 8008d50:	1110f8a6 	.word	0x1110f8a6
 8008d54:	3f811111 	.word	0x3f811111
 8008d58:	55555549 	.word	0x55555549
 8008d5c:	3fc55555 	.word	0x3fc55555
 8008d60:	3fe00000 	.word	0x3fe00000
 8008d64:	00000000 	.word	0x00000000

08008d68 <__ieee754_rem_pio2>:
 8008d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d6c:	4bc4      	ldr	r3, [pc, #784]	@ (8009080 <__ieee754_rem_pio2+0x318>)
 8008d6e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8008d72:	b08d      	sub	sp, #52	@ 0x34
 8008d74:	4598      	cmp	r8, r3
 8008d76:	4606      	mov	r6, r0
 8008d78:	460f      	mov	r7, r1
 8008d7a:	4614      	mov	r4, r2
 8008d7c:	9104      	str	r1, [sp, #16]
 8008d7e:	d807      	bhi.n	8008d90 <__ieee754_rem_pio2+0x28>
 8008d80:	e9c2 6700 	strd	r6, r7, [r2]
 8008d84:	2300      	movs	r3, #0
 8008d86:	2200      	movs	r2, #0
 8008d88:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8008d8c:	2500      	movs	r5, #0
 8008d8e:	e026      	b.n	8008dde <__ieee754_rem_pio2+0x76>
 8008d90:	4bbc      	ldr	r3, [pc, #752]	@ (8009084 <__ieee754_rem_pio2+0x31c>)
 8008d92:	4598      	cmp	r8, r3
 8008d94:	d876      	bhi.n	8008e84 <__ieee754_rem_pio2+0x11c>
 8008d96:	9b04      	ldr	r3, [sp, #16]
 8008d98:	4dbb      	ldr	r5, [pc, #748]	@ (8009088 <__ieee754_rem_pio2+0x320>)
 8008d9a:	2b00      	cmp	r3, #0
 8008d9c:	a3aa      	add	r3, pc, #680	@ (adr r3, 8009048 <__ieee754_rem_pio2+0x2e0>)
 8008d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008da2:	dd38      	ble.n	8008e16 <__ieee754_rem_pio2+0xae>
 8008da4:	f7f7 f9ea 	bl	800017c <__aeabi_dsub>
 8008da8:	45a8      	cmp	r8, r5
 8008daa:	4606      	mov	r6, r0
 8008dac:	460f      	mov	r7, r1
 8008dae:	d01a      	beq.n	8008de6 <__ieee754_rem_pio2+0x7e>
 8008db0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8009050 <__ieee754_rem_pio2+0x2e8>)
 8008db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008db6:	f7f7 f9e1 	bl	800017c <__aeabi_dsub>
 8008dba:	4602      	mov	r2, r0
 8008dbc:	460b      	mov	r3, r1
 8008dbe:	4680      	mov	r8, r0
 8008dc0:	4689      	mov	r9, r1
 8008dc2:	4630      	mov	r0, r6
 8008dc4:	4639      	mov	r1, r7
 8008dc6:	f7f7 f9d9 	bl	800017c <__aeabi_dsub>
 8008dca:	a3a1      	add	r3, pc, #644	@ (adr r3, 8009050 <__ieee754_rem_pio2+0x2e8>)
 8008dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dd0:	f7f7 f9d4 	bl	800017c <__aeabi_dsub>
 8008dd4:	2501      	movs	r5, #1
 8008dd6:	e9c4 8900 	strd	r8, r9, [r4]
 8008dda:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008dde:	4628      	mov	r0, r5
 8008de0:	b00d      	add	sp, #52	@ 0x34
 8008de2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008de6:	a39c      	add	r3, pc, #624	@ (adr r3, 8009058 <__ieee754_rem_pio2+0x2f0>)
 8008de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008dec:	f7f7 f9c6 	bl	800017c <__aeabi_dsub>
 8008df0:	a39b      	add	r3, pc, #620	@ (adr r3, 8009060 <__ieee754_rem_pio2+0x2f8>)
 8008df2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008df6:	4606      	mov	r6, r0
 8008df8:	460f      	mov	r7, r1
 8008dfa:	f7f7 f9bf 	bl	800017c <__aeabi_dsub>
 8008dfe:	4602      	mov	r2, r0
 8008e00:	460b      	mov	r3, r1
 8008e02:	4680      	mov	r8, r0
 8008e04:	4689      	mov	r9, r1
 8008e06:	4630      	mov	r0, r6
 8008e08:	4639      	mov	r1, r7
 8008e0a:	f7f7 f9b7 	bl	800017c <__aeabi_dsub>
 8008e0e:	a394      	add	r3, pc, #592	@ (adr r3, 8009060 <__ieee754_rem_pio2+0x2f8>)
 8008e10:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e14:	e7dc      	b.n	8008dd0 <__ieee754_rem_pio2+0x68>
 8008e16:	f7f7 f9b3 	bl	8000180 <__adddf3>
 8008e1a:	45a8      	cmp	r8, r5
 8008e1c:	4606      	mov	r6, r0
 8008e1e:	460f      	mov	r7, r1
 8008e20:	d018      	beq.n	8008e54 <__ieee754_rem_pio2+0xec>
 8008e22:	a38b      	add	r3, pc, #556	@ (adr r3, 8009050 <__ieee754_rem_pio2+0x2e8>)
 8008e24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e28:	f7f7 f9aa 	bl	8000180 <__adddf3>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	4680      	mov	r8, r0
 8008e32:	4689      	mov	r9, r1
 8008e34:	4630      	mov	r0, r6
 8008e36:	4639      	mov	r1, r7
 8008e38:	f7f7 f9a0 	bl	800017c <__aeabi_dsub>
 8008e3c:	a384      	add	r3, pc, #528	@ (adr r3, 8009050 <__ieee754_rem_pio2+0x2e8>)
 8008e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e42:	f7f7 f99d 	bl	8000180 <__adddf3>
 8008e46:	f04f 35ff 	mov.w	r5, #4294967295
 8008e4a:	e9c4 8900 	strd	r8, r9, [r4]
 8008e4e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008e52:	e7c4      	b.n	8008dde <__ieee754_rem_pio2+0x76>
 8008e54:	a380      	add	r3, pc, #512	@ (adr r3, 8009058 <__ieee754_rem_pio2+0x2f0>)
 8008e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e5a:	f7f7 f991 	bl	8000180 <__adddf3>
 8008e5e:	a380      	add	r3, pc, #512	@ (adr r3, 8009060 <__ieee754_rem_pio2+0x2f8>)
 8008e60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e64:	4606      	mov	r6, r0
 8008e66:	460f      	mov	r7, r1
 8008e68:	f7f7 f98a 	bl	8000180 <__adddf3>
 8008e6c:	4602      	mov	r2, r0
 8008e6e:	460b      	mov	r3, r1
 8008e70:	4680      	mov	r8, r0
 8008e72:	4689      	mov	r9, r1
 8008e74:	4630      	mov	r0, r6
 8008e76:	4639      	mov	r1, r7
 8008e78:	f7f7 f980 	bl	800017c <__aeabi_dsub>
 8008e7c:	a378      	add	r3, pc, #480	@ (adr r3, 8009060 <__ieee754_rem_pio2+0x2f8>)
 8008e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e82:	e7de      	b.n	8008e42 <__ieee754_rem_pio2+0xda>
 8008e84:	4b81      	ldr	r3, [pc, #516]	@ (800908c <__ieee754_rem_pio2+0x324>)
 8008e86:	4598      	cmp	r8, r3
 8008e88:	f200 80cf 	bhi.w	800902a <__ieee754_rem_pio2+0x2c2>
 8008e8c:	f000 f962 	bl	8009154 <fabs>
 8008e90:	a375      	add	r3, pc, #468	@ (adr r3, 8009068 <__ieee754_rem_pio2+0x300>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	4606      	mov	r6, r0
 8008e98:	460f      	mov	r7, r1
 8008e9a:	f7f7 fb27 	bl	80004ec <__aeabi_dmul>
 8008e9e:	2200      	movs	r2, #0
 8008ea0:	4b7b      	ldr	r3, [pc, #492]	@ (8009090 <__ieee754_rem_pio2+0x328>)
 8008ea2:	f7f7 f96d 	bl	8000180 <__adddf3>
 8008ea6:	f7f7 fdd1 	bl	8000a4c <__aeabi_d2iz>
 8008eaa:	4605      	mov	r5, r0
 8008eac:	f7f7 fab4 	bl	8000418 <__aeabi_i2d>
 8008eb0:	4602      	mov	r2, r0
 8008eb2:	460b      	mov	r3, r1
 8008eb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008eb8:	a363      	add	r3, pc, #396	@ (adr r3, 8009048 <__ieee754_rem_pio2+0x2e0>)
 8008eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ebe:	f7f7 fb15 	bl	80004ec <__aeabi_dmul>
 8008ec2:	4602      	mov	r2, r0
 8008ec4:	460b      	mov	r3, r1
 8008ec6:	4630      	mov	r0, r6
 8008ec8:	4639      	mov	r1, r7
 8008eca:	f7f7 f957 	bl	800017c <__aeabi_dsub>
 8008ece:	a360      	add	r3, pc, #384	@ (adr r3, 8009050 <__ieee754_rem_pio2+0x2e8>)
 8008ed0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ed4:	4682      	mov	sl, r0
 8008ed6:	468b      	mov	fp, r1
 8008ed8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008edc:	f7f7 fb06 	bl	80004ec <__aeabi_dmul>
 8008ee0:	2d1f      	cmp	r5, #31
 8008ee2:	4606      	mov	r6, r0
 8008ee4:	460f      	mov	r7, r1
 8008ee6:	dc0c      	bgt.n	8008f02 <__ieee754_rem_pio2+0x19a>
 8008ee8:	4b6a      	ldr	r3, [pc, #424]	@ (8009094 <__ieee754_rem_pio2+0x32c>)
 8008eea:	1e6a      	subs	r2, r5, #1
 8008eec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008ef0:	4543      	cmp	r3, r8
 8008ef2:	d006      	beq.n	8008f02 <__ieee754_rem_pio2+0x19a>
 8008ef4:	4632      	mov	r2, r6
 8008ef6:	463b      	mov	r3, r7
 8008ef8:	4650      	mov	r0, sl
 8008efa:	4659      	mov	r1, fp
 8008efc:	f7f7 f93e 	bl	800017c <__aeabi_dsub>
 8008f00:	e00e      	b.n	8008f20 <__ieee754_rem_pio2+0x1b8>
 8008f02:	463b      	mov	r3, r7
 8008f04:	4632      	mov	r2, r6
 8008f06:	4650      	mov	r0, sl
 8008f08:	4659      	mov	r1, fp
 8008f0a:	f7f7 f937 	bl	800017c <__aeabi_dsub>
 8008f0e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8008f12:	9305      	str	r3, [sp, #20]
 8008f14:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f18:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8008f1c:	2b10      	cmp	r3, #16
 8008f1e:	dc02      	bgt.n	8008f26 <__ieee754_rem_pio2+0x1be>
 8008f20:	e9c4 0100 	strd	r0, r1, [r4]
 8008f24:	e039      	b.n	8008f9a <__ieee754_rem_pio2+0x232>
 8008f26:	a34c      	add	r3, pc, #304	@ (adr r3, 8009058 <__ieee754_rem_pio2+0x2f0>)
 8008f28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f30:	f7f7 fadc 	bl	80004ec <__aeabi_dmul>
 8008f34:	4606      	mov	r6, r0
 8008f36:	460f      	mov	r7, r1
 8008f38:	4602      	mov	r2, r0
 8008f3a:	460b      	mov	r3, r1
 8008f3c:	4650      	mov	r0, sl
 8008f3e:	4659      	mov	r1, fp
 8008f40:	f7f7 f91c 	bl	800017c <__aeabi_dsub>
 8008f44:	4602      	mov	r2, r0
 8008f46:	460b      	mov	r3, r1
 8008f48:	4680      	mov	r8, r0
 8008f4a:	4689      	mov	r9, r1
 8008f4c:	4650      	mov	r0, sl
 8008f4e:	4659      	mov	r1, fp
 8008f50:	f7f7 f914 	bl	800017c <__aeabi_dsub>
 8008f54:	4632      	mov	r2, r6
 8008f56:	463b      	mov	r3, r7
 8008f58:	f7f7 f910 	bl	800017c <__aeabi_dsub>
 8008f5c:	a340      	add	r3, pc, #256	@ (adr r3, 8009060 <__ieee754_rem_pio2+0x2f8>)
 8008f5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f62:	4606      	mov	r6, r0
 8008f64:	460f      	mov	r7, r1
 8008f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008f6a:	f7f7 fabf 	bl	80004ec <__aeabi_dmul>
 8008f6e:	4632      	mov	r2, r6
 8008f70:	463b      	mov	r3, r7
 8008f72:	f7f7 f903 	bl	800017c <__aeabi_dsub>
 8008f76:	4602      	mov	r2, r0
 8008f78:	460b      	mov	r3, r1
 8008f7a:	4606      	mov	r6, r0
 8008f7c:	460f      	mov	r7, r1
 8008f7e:	4640      	mov	r0, r8
 8008f80:	4649      	mov	r1, r9
 8008f82:	f7f7 f8fb 	bl	800017c <__aeabi_dsub>
 8008f86:	9a05      	ldr	r2, [sp, #20]
 8008f88:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8008f8c:	1ad3      	subs	r3, r2, r3
 8008f8e:	2b31      	cmp	r3, #49	@ 0x31
 8008f90:	dc20      	bgt.n	8008fd4 <__ieee754_rem_pio2+0x26c>
 8008f92:	46c2      	mov	sl, r8
 8008f94:	46cb      	mov	fp, r9
 8008f96:	e9c4 0100 	strd	r0, r1, [r4]
 8008f9a:	e9d4 8900 	ldrd	r8, r9, [r4]
 8008f9e:	4650      	mov	r0, sl
 8008fa0:	4642      	mov	r2, r8
 8008fa2:	464b      	mov	r3, r9
 8008fa4:	4659      	mov	r1, fp
 8008fa6:	f7f7 f8e9 	bl	800017c <__aeabi_dsub>
 8008faa:	463b      	mov	r3, r7
 8008fac:	4632      	mov	r2, r6
 8008fae:	f7f7 f8e5 	bl	800017c <__aeabi_dsub>
 8008fb2:	9b04      	ldr	r3, [sp, #16]
 8008fb4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8008fb8:	2b00      	cmp	r3, #0
 8008fba:	f6bf af10 	bge.w	8008dde <__ieee754_rem_pio2+0x76>
 8008fbe:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8008fc2:	6063      	str	r3, [r4, #4]
 8008fc4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8008fc8:	f8c4 8000 	str.w	r8, [r4]
 8008fcc:	60a0      	str	r0, [r4, #8]
 8008fce:	60e3      	str	r3, [r4, #12]
 8008fd0:	426d      	negs	r5, r5
 8008fd2:	e704      	b.n	8008dde <__ieee754_rem_pio2+0x76>
 8008fd4:	a326      	add	r3, pc, #152	@ (adr r3, 8009070 <__ieee754_rem_pio2+0x308>)
 8008fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fda:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008fde:	f7f7 fa85 	bl	80004ec <__aeabi_dmul>
 8008fe2:	4606      	mov	r6, r0
 8008fe4:	460f      	mov	r7, r1
 8008fe6:	4602      	mov	r2, r0
 8008fe8:	460b      	mov	r3, r1
 8008fea:	4640      	mov	r0, r8
 8008fec:	4649      	mov	r1, r9
 8008fee:	f7f7 f8c5 	bl	800017c <__aeabi_dsub>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4682      	mov	sl, r0
 8008ff8:	468b      	mov	fp, r1
 8008ffa:	4640      	mov	r0, r8
 8008ffc:	4649      	mov	r1, r9
 8008ffe:	f7f7 f8bd 	bl	800017c <__aeabi_dsub>
 8009002:	4632      	mov	r2, r6
 8009004:	463b      	mov	r3, r7
 8009006:	f7f7 f8b9 	bl	800017c <__aeabi_dsub>
 800900a:	a31b      	add	r3, pc, #108	@ (adr r3, 8009078 <__ieee754_rem_pio2+0x310>)
 800900c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009010:	4606      	mov	r6, r0
 8009012:	460f      	mov	r7, r1
 8009014:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009018:	f7f7 fa68 	bl	80004ec <__aeabi_dmul>
 800901c:	4632      	mov	r2, r6
 800901e:	463b      	mov	r3, r7
 8009020:	f7f7 f8ac 	bl	800017c <__aeabi_dsub>
 8009024:	4606      	mov	r6, r0
 8009026:	460f      	mov	r7, r1
 8009028:	e764      	b.n	8008ef4 <__ieee754_rem_pio2+0x18c>
 800902a:	4b1b      	ldr	r3, [pc, #108]	@ (8009098 <__ieee754_rem_pio2+0x330>)
 800902c:	4598      	cmp	r8, r3
 800902e:	d935      	bls.n	800909c <__ieee754_rem_pio2+0x334>
 8009030:	4602      	mov	r2, r0
 8009032:	460b      	mov	r3, r1
 8009034:	f7f7 f8a2 	bl	800017c <__aeabi_dsub>
 8009038:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800903c:	e9c4 0100 	strd	r0, r1, [r4]
 8009040:	e6a4      	b.n	8008d8c <__ieee754_rem_pio2+0x24>
 8009042:	bf00      	nop
 8009044:	f3af 8000 	nop.w
 8009048:	54400000 	.word	0x54400000
 800904c:	3ff921fb 	.word	0x3ff921fb
 8009050:	1a626331 	.word	0x1a626331
 8009054:	3dd0b461 	.word	0x3dd0b461
 8009058:	1a600000 	.word	0x1a600000
 800905c:	3dd0b461 	.word	0x3dd0b461
 8009060:	2e037073 	.word	0x2e037073
 8009064:	3ba3198a 	.word	0x3ba3198a
 8009068:	6dc9c883 	.word	0x6dc9c883
 800906c:	3fe45f30 	.word	0x3fe45f30
 8009070:	2e000000 	.word	0x2e000000
 8009074:	3ba3198a 	.word	0x3ba3198a
 8009078:	252049c1 	.word	0x252049c1
 800907c:	397b839a 	.word	0x397b839a
 8009080:	3fe921fb 	.word	0x3fe921fb
 8009084:	4002d97b 	.word	0x4002d97b
 8009088:	3ff921fb 	.word	0x3ff921fb
 800908c:	413921fb 	.word	0x413921fb
 8009090:	3fe00000 	.word	0x3fe00000
 8009094:	0800d2a0 	.word	0x0800d2a0
 8009098:	7fefffff 	.word	0x7fefffff
 800909c:	ea4f 5528 	mov.w	r5, r8, asr #20
 80090a0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80090a4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80090a8:	460f      	mov	r7, r1
 80090aa:	f7f7 fccf 	bl	8000a4c <__aeabi_d2iz>
 80090ae:	f7f7 f9b3 	bl	8000418 <__aeabi_i2d>
 80090b2:	4602      	mov	r2, r0
 80090b4:	460b      	mov	r3, r1
 80090b6:	4630      	mov	r0, r6
 80090b8:	4639      	mov	r1, r7
 80090ba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80090be:	f7f7 f85d 	bl	800017c <__aeabi_dsub>
 80090c2:	2200      	movs	r2, #0
 80090c4:	4b21      	ldr	r3, [pc, #132]	@ (800914c <__ieee754_rem_pio2+0x3e4>)
 80090c6:	f7f7 fa11 	bl	80004ec <__aeabi_dmul>
 80090ca:	460f      	mov	r7, r1
 80090cc:	4606      	mov	r6, r0
 80090ce:	f7f7 fcbd 	bl	8000a4c <__aeabi_d2iz>
 80090d2:	f7f7 f9a1 	bl	8000418 <__aeabi_i2d>
 80090d6:	4602      	mov	r2, r0
 80090d8:	460b      	mov	r3, r1
 80090da:	4630      	mov	r0, r6
 80090dc:	4639      	mov	r1, r7
 80090de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090e2:	f7f7 f84b 	bl	800017c <__aeabi_dsub>
 80090e6:	2200      	movs	r2, #0
 80090e8:	4b18      	ldr	r3, [pc, #96]	@ (800914c <__ieee754_rem_pio2+0x3e4>)
 80090ea:	f7f7 f9ff 	bl	80004ec <__aeabi_dmul>
 80090ee:	f04f 0803 	mov.w	r8, #3
 80090f2:	2600      	movs	r6, #0
 80090f4:	2700      	movs	r7, #0
 80090f6:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 80090fa:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 80090fe:	4632      	mov	r2, r6
 8009100:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8009104:	463b      	mov	r3, r7
 8009106:	46c2      	mov	sl, r8
 8009108:	f108 38ff 	add.w	r8, r8, #4294967295
 800910c:	f7f7 fc56 	bl	80009bc <__aeabi_dcmpeq>
 8009110:	2800      	cmp	r0, #0
 8009112:	d1f4      	bne.n	80090fe <__ieee754_rem_pio2+0x396>
 8009114:	4b0e      	ldr	r3, [pc, #56]	@ (8009150 <__ieee754_rem_pio2+0x3e8>)
 8009116:	462a      	mov	r2, r5
 8009118:	9301      	str	r3, [sp, #4]
 800911a:	2302      	movs	r3, #2
 800911c:	4621      	mov	r1, r4
 800911e:	9300      	str	r3, [sp, #0]
 8009120:	a806      	add	r0, sp, #24
 8009122:	4653      	mov	r3, sl
 8009124:	f000 f81a 	bl	800915c <__kernel_rem_pio2>
 8009128:	9b04      	ldr	r3, [sp, #16]
 800912a:	4605      	mov	r5, r0
 800912c:	2b00      	cmp	r3, #0
 800912e:	f6bf ae56 	bge.w	8008dde <__ieee754_rem_pio2+0x76>
 8009132:	e9d4 2100 	ldrd	r2, r1, [r4]
 8009136:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800913a:	e9c4 2300 	strd	r2, r3, [r4]
 800913e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8009142:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009146:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800914a:	e741      	b.n	8008fd0 <__ieee754_rem_pio2+0x268>
 800914c:	41700000 	.word	0x41700000
 8009150:	0800d320 	.word	0x0800d320

08009154 <fabs>:
 8009154:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8009158:	4619      	mov	r1, r3
 800915a:	4770      	bx	lr

0800915c <__kernel_rem_pio2>:
 800915c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009160:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8009164:	9308      	str	r3, [sp, #32]
 8009166:	9104      	str	r1, [sp, #16]
 8009168:	4bb6      	ldr	r3, [pc, #728]	@ (8009444 <__kernel_rem_pio2+0x2e8>)
 800916a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800916c:	f112 0f14 	cmn.w	r2, #20
 8009170:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8009174:	bfa8      	it	ge
 8009176:	1ed4      	subge	r4, r2, #3
 8009178:	9302      	str	r3, [sp, #8]
 800917a:	9b08      	ldr	r3, [sp, #32]
 800917c:	bfb8      	it	lt
 800917e:	2400      	movlt	r4, #0
 8009180:	f103 33ff 	add.w	r3, r3, #4294967295
 8009184:	9306      	str	r3, [sp, #24]
 8009186:	bfa4      	itt	ge
 8009188:	2318      	movge	r3, #24
 800918a:	fb94 f4f3 	sdivge	r4, r4, r3
 800918e:	f06f 0317 	mvn.w	r3, #23
 8009192:	fb04 3303 	mla	r3, r4, r3, r3
 8009196:	eb03 0a02 	add.w	sl, r3, r2
 800919a:	9a06      	ldr	r2, [sp, #24]
 800919c:	9b02      	ldr	r3, [sp, #8]
 800919e:	1aa7      	subs	r7, r4, r2
 80091a0:	eb03 0802 	add.w	r8, r3, r2
 80091a4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80091a6:	2500      	movs	r5, #0
 80091a8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80091ac:	2200      	movs	r2, #0
 80091ae:	2300      	movs	r3, #0
 80091b0:	9009      	str	r0, [sp, #36]	@ 0x24
 80091b2:	ae20      	add	r6, sp, #128	@ 0x80
 80091b4:	4545      	cmp	r5, r8
 80091b6:	dd14      	ble.n	80091e2 <__kernel_rem_pio2+0x86>
 80091b8:	f04f 0800 	mov.w	r8, #0
 80091bc:	9a08      	ldr	r2, [sp, #32]
 80091be:	ab20      	add	r3, sp, #128	@ 0x80
 80091c0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80091c4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80091c8:	9b02      	ldr	r3, [sp, #8]
 80091ca:	4598      	cmp	r8, r3
 80091cc:	dc35      	bgt.n	800923a <__kernel_rem_pio2+0xde>
 80091ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091d0:	2200      	movs	r2, #0
 80091d2:	f1a3 0908 	sub.w	r9, r3, #8
 80091d6:	2300      	movs	r3, #0
 80091d8:	462f      	mov	r7, r5
 80091da:	2600      	movs	r6, #0
 80091dc:	e9cd 2300 	strd	r2, r3, [sp]
 80091e0:	e01f      	b.n	8009222 <__kernel_rem_pio2+0xc6>
 80091e2:	42ef      	cmn	r7, r5
 80091e4:	d40b      	bmi.n	80091fe <__kernel_rem_pio2+0xa2>
 80091e6:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80091ea:	e9cd 2300 	strd	r2, r3, [sp]
 80091ee:	f7f7 f913 	bl	8000418 <__aeabi_i2d>
 80091f2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80091f6:	e8e6 0102 	strd	r0, r1, [r6], #8
 80091fa:	3501      	adds	r5, #1
 80091fc:	e7da      	b.n	80091b4 <__kernel_rem_pio2+0x58>
 80091fe:	4610      	mov	r0, r2
 8009200:	4619      	mov	r1, r3
 8009202:	e7f8      	b.n	80091f6 <__kernel_rem_pio2+0x9a>
 8009204:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009208:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800920c:	f7f7 f96e 	bl	80004ec <__aeabi_dmul>
 8009210:	4602      	mov	r2, r0
 8009212:	460b      	mov	r3, r1
 8009214:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009218:	f7f6 ffb2 	bl	8000180 <__adddf3>
 800921c:	e9cd 0100 	strd	r0, r1, [sp]
 8009220:	3601      	adds	r6, #1
 8009222:	9b06      	ldr	r3, [sp, #24]
 8009224:	3f08      	subs	r7, #8
 8009226:	429e      	cmp	r6, r3
 8009228:	ddec      	ble.n	8009204 <__kernel_rem_pio2+0xa8>
 800922a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800922e:	f108 0801 	add.w	r8, r8, #1
 8009232:	e8eb 2302 	strd	r2, r3, [fp], #8
 8009236:	3508      	adds	r5, #8
 8009238:	e7c6      	b.n	80091c8 <__kernel_rem_pio2+0x6c>
 800923a:	9b02      	ldr	r3, [sp, #8]
 800923c:	aa0c      	add	r2, sp, #48	@ 0x30
 800923e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009242:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009244:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8009246:	f8dd b008 	ldr.w	fp, [sp, #8]
 800924a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800924e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009250:	ab98      	add	r3, sp, #608	@ 0x260
 8009252:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009256:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800925a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800925c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8009260:	ae0c      	add	r6, sp, #48	@ 0x30
 8009262:	4698      	mov	r8, r3
 8009264:	46b1      	mov	r9, r6
 8009266:	465f      	mov	r7, fp
 8009268:	9307      	str	r3, [sp, #28]
 800926a:	2f00      	cmp	r7, #0
 800926c:	f1a8 0808 	sub.w	r8, r8, #8
 8009270:	dc71      	bgt.n	8009356 <__kernel_rem_pio2+0x1fa>
 8009272:	4652      	mov	r2, sl
 8009274:	4620      	mov	r0, r4
 8009276:	4629      	mov	r1, r5
 8009278:	f000 fa96 	bl	80097a8 <scalbn>
 800927c:	2200      	movs	r2, #0
 800927e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 8009282:	4604      	mov	r4, r0
 8009284:	460d      	mov	r5, r1
 8009286:	f7f7 f931 	bl	80004ec <__aeabi_dmul>
 800928a:	f000 fb05 	bl	8009898 <floor>
 800928e:	2200      	movs	r2, #0
 8009290:	4b6d      	ldr	r3, [pc, #436]	@ (8009448 <__kernel_rem_pio2+0x2ec>)
 8009292:	f7f7 f92b 	bl	80004ec <__aeabi_dmul>
 8009296:	4602      	mov	r2, r0
 8009298:	460b      	mov	r3, r1
 800929a:	4620      	mov	r0, r4
 800929c:	4629      	mov	r1, r5
 800929e:	f7f6 ff6d 	bl	800017c <__aeabi_dsub>
 80092a2:	460d      	mov	r5, r1
 80092a4:	4604      	mov	r4, r0
 80092a6:	f7f7 fbd1 	bl	8000a4c <__aeabi_d2iz>
 80092aa:	9005      	str	r0, [sp, #20]
 80092ac:	f7f7 f8b4 	bl	8000418 <__aeabi_i2d>
 80092b0:	4602      	mov	r2, r0
 80092b2:	460b      	mov	r3, r1
 80092b4:	4620      	mov	r0, r4
 80092b6:	4629      	mov	r1, r5
 80092b8:	f7f6 ff60 	bl	800017c <__aeabi_dsub>
 80092bc:	f1ba 0f00 	cmp.w	sl, #0
 80092c0:	4680      	mov	r8, r0
 80092c2:	4689      	mov	r9, r1
 80092c4:	dd6d      	ble.n	80093a2 <__kernel_rem_pio2+0x246>
 80092c6:	f10b 31ff 	add.w	r1, fp, #4294967295
 80092ca:	ab0c      	add	r3, sp, #48	@ 0x30
 80092cc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80092d0:	9c05      	ldr	r4, [sp, #20]
 80092d2:	f1ca 0018 	rsb	r0, sl, #24
 80092d6:	fa43 f200 	asr.w	r2, r3, r0
 80092da:	4414      	add	r4, r2
 80092dc:	4082      	lsls	r2, r0
 80092de:	1a9b      	subs	r3, r3, r2
 80092e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80092e2:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80092e6:	f1ca 0217 	rsb	r2, sl, #23
 80092ea:	9405      	str	r4, [sp, #20]
 80092ec:	4113      	asrs	r3, r2
 80092ee:	9300      	str	r3, [sp, #0]
 80092f0:	9b00      	ldr	r3, [sp, #0]
 80092f2:	2b00      	cmp	r3, #0
 80092f4:	dd64      	ble.n	80093c0 <__kernel_rem_pio2+0x264>
 80092f6:	2200      	movs	r2, #0
 80092f8:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 80092fc:	4614      	mov	r4, r2
 80092fe:	9b05      	ldr	r3, [sp, #20]
 8009300:	3301      	adds	r3, #1
 8009302:	9305      	str	r3, [sp, #20]
 8009304:	4593      	cmp	fp, r2
 8009306:	f300 80ab 	bgt.w	8009460 <__kernel_rem_pio2+0x304>
 800930a:	f1ba 0f00 	cmp.w	sl, #0
 800930e:	dd07      	ble.n	8009320 <__kernel_rem_pio2+0x1c4>
 8009310:	f1ba 0f01 	cmp.w	sl, #1
 8009314:	f000 80b2 	beq.w	800947c <__kernel_rem_pio2+0x320>
 8009318:	f1ba 0f02 	cmp.w	sl, #2
 800931c:	f000 80b9 	beq.w	8009492 <__kernel_rem_pio2+0x336>
 8009320:	9b00      	ldr	r3, [sp, #0]
 8009322:	2b02      	cmp	r3, #2
 8009324:	d14c      	bne.n	80093c0 <__kernel_rem_pio2+0x264>
 8009326:	4642      	mov	r2, r8
 8009328:	464b      	mov	r3, r9
 800932a:	2000      	movs	r0, #0
 800932c:	4947      	ldr	r1, [pc, #284]	@ (800944c <__kernel_rem_pio2+0x2f0>)
 800932e:	f7f6 ff25 	bl	800017c <__aeabi_dsub>
 8009332:	4680      	mov	r8, r0
 8009334:	4689      	mov	r9, r1
 8009336:	2c00      	cmp	r4, #0
 8009338:	d042      	beq.n	80093c0 <__kernel_rem_pio2+0x264>
 800933a:	4652      	mov	r2, sl
 800933c:	2000      	movs	r0, #0
 800933e:	4943      	ldr	r1, [pc, #268]	@ (800944c <__kernel_rem_pio2+0x2f0>)
 8009340:	f000 fa32 	bl	80097a8 <scalbn>
 8009344:	4602      	mov	r2, r0
 8009346:	460b      	mov	r3, r1
 8009348:	4640      	mov	r0, r8
 800934a:	4649      	mov	r1, r9
 800934c:	f7f6 ff16 	bl	800017c <__aeabi_dsub>
 8009350:	4680      	mov	r8, r0
 8009352:	4689      	mov	r9, r1
 8009354:	e034      	b.n	80093c0 <__kernel_rem_pio2+0x264>
 8009356:	2200      	movs	r2, #0
 8009358:	4b3d      	ldr	r3, [pc, #244]	@ (8009450 <__kernel_rem_pio2+0x2f4>)
 800935a:	4620      	mov	r0, r4
 800935c:	4629      	mov	r1, r5
 800935e:	f7f7 f8c5 	bl	80004ec <__aeabi_dmul>
 8009362:	f7f7 fb73 	bl	8000a4c <__aeabi_d2iz>
 8009366:	f7f7 f857 	bl	8000418 <__aeabi_i2d>
 800936a:	4602      	mov	r2, r0
 800936c:	460b      	mov	r3, r1
 800936e:	e9cd 2300 	strd	r2, r3, [sp]
 8009372:	2200      	movs	r2, #0
 8009374:	4b37      	ldr	r3, [pc, #220]	@ (8009454 <__kernel_rem_pio2+0x2f8>)
 8009376:	f7f7 f8b9 	bl	80004ec <__aeabi_dmul>
 800937a:	4602      	mov	r2, r0
 800937c:	460b      	mov	r3, r1
 800937e:	4620      	mov	r0, r4
 8009380:	4629      	mov	r1, r5
 8009382:	f7f6 fefb 	bl	800017c <__aeabi_dsub>
 8009386:	f7f7 fb61 	bl	8000a4c <__aeabi_d2iz>
 800938a:	e9d8 2300 	ldrd	r2, r3, [r8]
 800938e:	f849 0b04 	str.w	r0, [r9], #4
 8009392:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009396:	f7f6 fef3 	bl	8000180 <__adddf3>
 800939a:	3f01      	subs	r7, #1
 800939c:	4604      	mov	r4, r0
 800939e:	460d      	mov	r5, r1
 80093a0:	e763      	b.n	800926a <__kernel_rem_pio2+0x10e>
 80093a2:	d106      	bne.n	80093b2 <__kernel_rem_pio2+0x256>
 80093a4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80093a8:	aa0c      	add	r2, sp, #48	@ 0x30
 80093aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80093ae:	15db      	asrs	r3, r3, #23
 80093b0:	e79d      	b.n	80092ee <__kernel_rem_pio2+0x192>
 80093b2:	2200      	movs	r2, #0
 80093b4:	4b28      	ldr	r3, [pc, #160]	@ (8009458 <__kernel_rem_pio2+0x2fc>)
 80093b6:	f7f7 fb1f 	bl	80009f8 <__aeabi_dcmpge>
 80093ba:	2800      	cmp	r0, #0
 80093bc:	d13f      	bne.n	800943e <__kernel_rem_pio2+0x2e2>
 80093be:	9000      	str	r0, [sp, #0]
 80093c0:	2200      	movs	r2, #0
 80093c2:	2300      	movs	r3, #0
 80093c4:	4640      	mov	r0, r8
 80093c6:	4649      	mov	r1, r9
 80093c8:	f7f7 faf8 	bl	80009bc <__aeabi_dcmpeq>
 80093cc:	2800      	cmp	r0, #0
 80093ce:	f000 80af 	beq.w	8009530 <__kernel_rem_pio2+0x3d4>
 80093d2:	2200      	movs	r2, #0
 80093d4:	f10b 33ff 	add.w	r3, fp, #4294967295
 80093d8:	9902      	ldr	r1, [sp, #8]
 80093da:	428b      	cmp	r3, r1
 80093dc:	da61      	bge.n	80094a2 <__kernel_rem_pio2+0x346>
 80093de:	2a00      	cmp	r2, #0
 80093e0:	d076      	beq.n	80094d0 <__kernel_rem_pio2+0x374>
 80093e2:	f10b 3bff 	add.w	fp, fp, #4294967295
 80093e6:	ab0c      	add	r3, sp, #48	@ 0x30
 80093e8:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80093ec:	f1aa 0a18 	sub.w	sl, sl, #24
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d0f6      	beq.n	80093e2 <__kernel_rem_pio2+0x286>
 80093f4:	4652      	mov	r2, sl
 80093f6:	2000      	movs	r0, #0
 80093f8:	4914      	ldr	r1, [pc, #80]	@ (800944c <__kernel_rem_pio2+0x2f0>)
 80093fa:	f000 f9d5 	bl	80097a8 <scalbn>
 80093fe:	465d      	mov	r5, fp
 8009400:	4606      	mov	r6, r0
 8009402:	460f      	mov	r7, r1
 8009404:	f04f 0900 	mov.w	r9, #0
 8009408:	ab70      	add	r3, sp, #448	@ 0x1c0
 800940a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8009450 <__kernel_rem_pio2+0x2f4>
 800940e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8009412:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8009416:	2d00      	cmp	r5, #0
 8009418:	f280 80c0 	bge.w	800959c <__kernel_rem_pio2+0x440>
 800941c:	465d      	mov	r5, fp
 800941e:	2d00      	cmp	r5, #0
 8009420:	f2c0 80f0 	blt.w	8009604 <__kernel_rem_pio2+0x4a8>
 8009424:	4b0d      	ldr	r3, [pc, #52]	@ (800945c <__kernel_rem_pio2+0x300>)
 8009426:	f04f 0900 	mov.w	r9, #0
 800942a:	9306      	str	r3, [sp, #24]
 800942c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800942e:	f04f 0a00 	mov.w	sl, #0
 8009432:	2700      	movs	r7, #0
 8009434:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8009438:	ebab 0605 	sub.w	r6, fp, r5
 800943c:	e0d6      	b.n	80095ec <__kernel_rem_pio2+0x490>
 800943e:	2302      	movs	r3, #2
 8009440:	9300      	str	r3, [sp, #0]
 8009442:	e758      	b.n	80092f6 <__kernel_rem_pio2+0x19a>
 8009444:	0800d468 	.word	0x0800d468
 8009448:	40200000 	.word	0x40200000
 800944c:	3ff00000 	.word	0x3ff00000
 8009450:	3e700000 	.word	0x3e700000
 8009454:	41700000 	.word	0x41700000
 8009458:	3fe00000 	.word	0x3fe00000
 800945c:	0800d428 	.word	0x0800d428
 8009460:	f856 3b04 	ldr.w	r3, [r6], #4
 8009464:	b944      	cbnz	r4, 8009478 <__kernel_rem_pio2+0x31c>
 8009466:	b123      	cbz	r3, 8009472 <__kernel_rem_pio2+0x316>
 8009468:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800946c:	f846 3c04 	str.w	r3, [r6, #-4]
 8009470:	2301      	movs	r3, #1
 8009472:	461c      	mov	r4, r3
 8009474:	3201      	adds	r2, #1
 8009476:	e745      	b.n	8009304 <__kernel_rem_pio2+0x1a8>
 8009478:	1acb      	subs	r3, r1, r3
 800947a:	e7f7      	b.n	800946c <__kernel_rem_pio2+0x310>
 800947c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009480:	ab0c      	add	r3, sp, #48	@ 0x30
 8009482:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8009486:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800948a:	a90c      	add	r1, sp, #48	@ 0x30
 800948c:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8009490:	e746      	b.n	8009320 <__kernel_rem_pio2+0x1c4>
 8009492:	f10b 32ff 	add.w	r2, fp, #4294967295
 8009496:	ab0c      	add	r3, sp, #48	@ 0x30
 8009498:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800949c:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80094a0:	e7f3      	b.n	800948a <__kernel_rem_pio2+0x32e>
 80094a2:	a90c      	add	r1, sp, #48	@ 0x30
 80094a4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80094a8:	3b01      	subs	r3, #1
 80094aa:	430a      	orrs	r2, r1
 80094ac:	e794      	b.n	80093d8 <__kernel_rem_pio2+0x27c>
 80094ae:	3401      	adds	r4, #1
 80094b0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80094b4:	2a00      	cmp	r2, #0
 80094b6:	d0fa      	beq.n	80094ae <__kernel_rem_pio2+0x352>
 80094b8:	9b08      	ldr	r3, [sp, #32]
 80094ba:	aa20      	add	r2, sp, #128	@ 0x80
 80094bc:	445b      	add	r3, fp
 80094be:	f10b 0801 	add.w	r8, fp, #1
 80094c2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80094c6:	445c      	add	r4, fp
 80094c8:	4544      	cmp	r4, r8
 80094ca:	da04      	bge.n	80094d6 <__kernel_rem_pio2+0x37a>
 80094cc:	46a3      	mov	fp, r4
 80094ce:	e6bf      	b.n	8009250 <__kernel_rem_pio2+0xf4>
 80094d0:	2401      	movs	r4, #1
 80094d2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80094d4:	e7ec      	b.n	80094b0 <__kernel_rem_pio2+0x354>
 80094d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80094d8:	46ab      	mov	fp, r5
 80094da:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 80094de:	f7f6 ff9b 	bl	8000418 <__aeabi_i2d>
 80094e2:	f04f 0900 	mov.w	r9, #0
 80094e6:	2600      	movs	r6, #0
 80094e8:	2700      	movs	r7, #0
 80094ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80094ec:	e9c5 0100 	strd	r0, r1, [r5]
 80094f0:	3b08      	subs	r3, #8
 80094f2:	9300      	str	r3, [sp, #0]
 80094f4:	9b06      	ldr	r3, [sp, #24]
 80094f6:	4599      	cmp	r9, r3
 80094f8:	dd07      	ble.n	800950a <__kernel_rem_pio2+0x3ae>
 80094fa:	9b07      	ldr	r3, [sp, #28]
 80094fc:	f108 0801 	add.w	r8, r8, #1
 8009500:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8009504:	3508      	adds	r5, #8
 8009506:	9307      	str	r3, [sp, #28]
 8009508:	e7de      	b.n	80094c8 <__kernel_rem_pio2+0x36c>
 800950a:	9900      	ldr	r1, [sp, #0]
 800950c:	f109 0901 	add.w	r9, r9, #1
 8009510:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8009514:	9100      	str	r1, [sp, #0]
 8009516:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800951a:	f7f6 ffe7 	bl	80004ec <__aeabi_dmul>
 800951e:	4602      	mov	r2, r0
 8009520:	460b      	mov	r3, r1
 8009522:	4630      	mov	r0, r6
 8009524:	4639      	mov	r1, r7
 8009526:	f7f6 fe2b 	bl	8000180 <__adddf3>
 800952a:	4606      	mov	r6, r0
 800952c:	460f      	mov	r7, r1
 800952e:	e7e1      	b.n	80094f4 <__kernel_rem_pio2+0x398>
 8009530:	f1ca 0200 	rsb	r2, sl, #0
 8009534:	4640      	mov	r0, r8
 8009536:	4649      	mov	r1, r9
 8009538:	f000 f936 	bl	80097a8 <scalbn>
 800953c:	2200      	movs	r2, #0
 800953e:	4b97      	ldr	r3, [pc, #604]	@ (800979c <__kernel_rem_pio2+0x640>)
 8009540:	4604      	mov	r4, r0
 8009542:	460d      	mov	r5, r1
 8009544:	f7f7 fa58 	bl	80009f8 <__aeabi_dcmpge>
 8009548:	b300      	cbz	r0, 800958c <__kernel_rem_pio2+0x430>
 800954a:	2200      	movs	r2, #0
 800954c:	4b94      	ldr	r3, [pc, #592]	@ (80097a0 <__kernel_rem_pio2+0x644>)
 800954e:	4620      	mov	r0, r4
 8009550:	4629      	mov	r1, r5
 8009552:	f7f6 ffcb 	bl	80004ec <__aeabi_dmul>
 8009556:	f7f7 fa79 	bl	8000a4c <__aeabi_d2iz>
 800955a:	4606      	mov	r6, r0
 800955c:	f7f6 ff5c 	bl	8000418 <__aeabi_i2d>
 8009560:	2200      	movs	r2, #0
 8009562:	4b8e      	ldr	r3, [pc, #568]	@ (800979c <__kernel_rem_pio2+0x640>)
 8009564:	f7f6 ffc2 	bl	80004ec <__aeabi_dmul>
 8009568:	460b      	mov	r3, r1
 800956a:	4602      	mov	r2, r0
 800956c:	4629      	mov	r1, r5
 800956e:	4620      	mov	r0, r4
 8009570:	f7f6 fe04 	bl	800017c <__aeabi_dsub>
 8009574:	f7f7 fa6a 	bl	8000a4c <__aeabi_d2iz>
 8009578:	ab0c      	add	r3, sp, #48	@ 0x30
 800957a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800957e:	f10b 0b01 	add.w	fp, fp, #1
 8009582:	f10a 0a18 	add.w	sl, sl, #24
 8009586:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 800958a:	e733      	b.n	80093f4 <__kernel_rem_pio2+0x298>
 800958c:	4620      	mov	r0, r4
 800958e:	4629      	mov	r1, r5
 8009590:	f7f7 fa5c 	bl	8000a4c <__aeabi_d2iz>
 8009594:	ab0c      	add	r3, sp, #48	@ 0x30
 8009596:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 800959a:	e72b      	b.n	80093f4 <__kernel_rem_pio2+0x298>
 800959c:	ab0c      	add	r3, sp, #48	@ 0x30
 800959e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095a2:	f7f6 ff39 	bl	8000418 <__aeabi_i2d>
 80095a6:	4632      	mov	r2, r6
 80095a8:	463b      	mov	r3, r7
 80095aa:	f7f6 ff9f 	bl	80004ec <__aeabi_dmul>
 80095ae:	464a      	mov	r2, r9
 80095b0:	e868 0102 	strd	r0, r1, [r8], #-8
 80095b4:	4653      	mov	r3, sl
 80095b6:	4630      	mov	r0, r6
 80095b8:	4639      	mov	r1, r7
 80095ba:	f7f6 ff97 	bl	80004ec <__aeabi_dmul>
 80095be:	3d01      	subs	r5, #1
 80095c0:	4606      	mov	r6, r0
 80095c2:	460f      	mov	r7, r1
 80095c4:	e727      	b.n	8009416 <__kernel_rem_pio2+0x2ba>
 80095c6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80095ca:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80095ce:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 80095d2:	f8cd c018 	str.w	ip, [sp, #24]
 80095d6:	f7f6 ff89 	bl	80004ec <__aeabi_dmul>
 80095da:	4602      	mov	r2, r0
 80095dc:	460b      	mov	r3, r1
 80095de:	4648      	mov	r0, r9
 80095e0:	4651      	mov	r1, sl
 80095e2:	f7f6 fdcd 	bl	8000180 <__adddf3>
 80095e6:	4681      	mov	r9, r0
 80095e8:	468a      	mov	sl, r1
 80095ea:	3701      	adds	r7, #1
 80095ec:	9b02      	ldr	r3, [sp, #8]
 80095ee:	429f      	cmp	r7, r3
 80095f0:	dc01      	bgt.n	80095f6 <__kernel_rem_pio2+0x49a>
 80095f2:	42be      	cmp	r6, r7
 80095f4:	dae7      	bge.n	80095c6 <__kernel_rem_pio2+0x46a>
 80095f6:	ab48      	add	r3, sp, #288	@ 0x120
 80095f8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 80095fc:	e9c6 9a00 	strd	r9, sl, [r6]
 8009600:	3d01      	subs	r5, #1
 8009602:	e70c      	b.n	800941e <__kernel_rem_pio2+0x2c2>
 8009604:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8009606:	2b02      	cmp	r3, #2
 8009608:	dc09      	bgt.n	800961e <__kernel_rem_pio2+0x4c2>
 800960a:	2b00      	cmp	r3, #0
 800960c:	dc2c      	bgt.n	8009668 <__kernel_rem_pio2+0x50c>
 800960e:	d04e      	beq.n	80096ae <__kernel_rem_pio2+0x552>
 8009610:	9b05      	ldr	r3, [sp, #20]
 8009612:	f003 0007 	and.w	r0, r3, #7
 8009616:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800961a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800961e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8009620:	2b03      	cmp	r3, #3
 8009622:	d1f5      	bne.n	8009610 <__kernel_rem_pio2+0x4b4>
 8009624:	ab48      	add	r3, sp, #288	@ 0x120
 8009626:	441c      	add	r4, r3
 8009628:	4625      	mov	r5, r4
 800962a:	46da      	mov	sl, fp
 800962c:	f1ba 0f00 	cmp.w	sl, #0
 8009630:	dc63      	bgt.n	80096fa <__kernel_rem_pio2+0x59e>
 8009632:	4625      	mov	r5, r4
 8009634:	46da      	mov	sl, fp
 8009636:	f1ba 0f01 	cmp.w	sl, #1
 800963a:	dc7b      	bgt.n	8009734 <__kernel_rem_pio2+0x5d8>
 800963c:	2000      	movs	r0, #0
 800963e:	2100      	movs	r1, #0
 8009640:	f1bb 0f01 	cmp.w	fp, #1
 8009644:	f300 8093 	bgt.w	800976e <__kernel_rem_pio2+0x612>
 8009648:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800964c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8009650:	9b00      	ldr	r3, [sp, #0]
 8009652:	2b00      	cmp	r3, #0
 8009654:	f040 8092 	bne.w	800977c <__kernel_rem_pio2+0x620>
 8009658:	9b04      	ldr	r3, [sp, #16]
 800965a:	e9c3 7800 	strd	r7, r8, [r3]
 800965e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8009662:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8009666:	e7d3      	b.n	8009610 <__kernel_rem_pio2+0x4b4>
 8009668:	465d      	mov	r5, fp
 800966a:	2000      	movs	r0, #0
 800966c:	2100      	movs	r1, #0
 800966e:	ab48      	add	r3, sp, #288	@ 0x120
 8009670:	441c      	add	r4, r3
 8009672:	2d00      	cmp	r5, #0
 8009674:	da32      	bge.n	80096dc <__kernel_rem_pio2+0x580>
 8009676:	9b00      	ldr	r3, [sp, #0]
 8009678:	2b00      	cmp	r3, #0
 800967a:	d035      	beq.n	80096e8 <__kernel_rem_pio2+0x58c>
 800967c:	4602      	mov	r2, r0
 800967e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009682:	9c04      	ldr	r4, [sp, #16]
 8009684:	2501      	movs	r5, #1
 8009686:	e9c4 2300 	strd	r2, r3, [r4]
 800968a:	4602      	mov	r2, r0
 800968c:	460b      	mov	r3, r1
 800968e:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8009692:	f7f6 fd73 	bl	800017c <__aeabi_dsub>
 8009696:	ac48      	add	r4, sp, #288	@ 0x120
 8009698:	45ab      	cmp	fp, r5
 800969a:	da28      	bge.n	80096ee <__kernel_rem_pio2+0x592>
 800969c:	9b00      	ldr	r3, [sp, #0]
 800969e:	b113      	cbz	r3, 80096a6 <__kernel_rem_pio2+0x54a>
 80096a0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096a4:	4619      	mov	r1, r3
 80096a6:	9b04      	ldr	r3, [sp, #16]
 80096a8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80096ac:	e7b0      	b.n	8009610 <__kernel_rem_pio2+0x4b4>
 80096ae:	2000      	movs	r0, #0
 80096b0:	2100      	movs	r1, #0
 80096b2:	ab48      	add	r3, sp, #288	@ 0x120
 80096b4:	441c      	add	r4, r3
 80096b6:	f1bb 0f00 	cmp.w	fp, #0
 80096ba:	da08      	bge.n	80096ce <__kernel_rem_pio2+0x572>
 80096bc:	9b00      	ldr	r3, [sp, #0]
 80096be:	b113      	cbz	r3, 80096c6 <__kernel_rem_pio2+0x56a>
 80096c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80096c4:	4619      	mov	r1, r3
 80096c6:	9b04      	ldr	r3, [sp, #16]
 80096c8:	e9c3 0100 	strd	r0, r1, [r3]
 80096cc:	e7a0      	b.n	8009610 <__kernel_rem_pio2+0x4b4>
 80096ce:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80096d2:	f7f6 fd55 	bl	8000180 <__adddf3>
 80096d6:	f10b 3bff 	add.w	fp, fp, #4294967295
 80096da:	e7ec      	b.n	80096b6 <__kernel_rem_pio2+0x55a>
 80096dc:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80096e0:	f7f6 fd4e 	bl	8000180 <__adddf3>
 80096e4:	3d01      	subs	r5, #1
 80096e6:	e7c4      	b.n	8009672 <__kernel_rem_pio2+0x516>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	e7c9      	b.n	8009682 <__kernel_rem_pio2+0x526>
 80096ee:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 80096f2:	f7f6 fd45 	bl	8000180 <__adddf3>
 80096f6:	3501      	adds	r5, #1
 80096f8:	e7ce      	b.n	8009698 <__kernel_rem_pio2+0x53c>
 80096fa:	e9d5 2300 	ldrd	r2, r3, [r5]
 80096fe:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8009702:	4640      	mov	r0, r8
 8009704:	4649      	mov	r1, r9
 8009706:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800970a:	f7f6 fd39 	bl	8000180 <__adddf3>
 800970e:	4602      	mov	r2, r0
 8009710:	460b      	mov	r3, r1
 8009712:	4606      	mov	r6, r0
 8009714:	460f      	mov	r7, r1
 8009716:	4640      	mov	r0, r8
 8009718:	4649      	mov	r1, r9
 800971a:	f7f6 fd2f 	bl	800017c <__aeabi_dsub>
 800971e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009722:	f7f6 fd2d 	bl	8000180 <__adddf3>
 8009726:	e865 0102 	strd	r0, r1, [r5], #-8
 800972a:	f10a 3aff 	add.w	sl, sl, #4294967295
 800972e:	e9c5 6700 	strd	r6, r7, [r5]
 8009732:	e77b      	b.n	800962c <__kernel_rem_pio2+0x4d0>
 8009734:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009738:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800973c:	4640      	mov	r0, r8
 800973e:	4649      	mov	r1, r9
 8009740:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009744:	f7f6 fd1c 	bl	8000180 <__adddf3>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4606      	mov	r6, r0
 800974e:	460f      	mov	r7, r1
 8009750:	4640      	mov	r0, r8
 8009752:	4649      	mov	r1, r9
 8009754:	f7f6 fd12 	bl	800017c <__aeabi_dsub>
 8009758:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800975c:	f7f6 fd10 	bl	8000180 <__adddf3>
 8009760:	e865 0102 	strd	r0, r1, [r5], #-8
 8009764:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009768:	e9c5 6700 	strd	r6, r7, [r5]
 800976c:	e763      	b.n	8009636 <__kernel_rem_pio2+0x4da>
 800976e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8009772:	f7f6 fd05 	bl	8000180 <__adddf3>
 8009776:	f10b 3bff 	add.w	fp, fp, #4294967295
 800977a:	e761      	b.n	8009640 <__kernel_rem_pio2+0x4e4>
 800977c:	9b04      	ldr	r3, [sp, #16]
 800977e:	9a04      	ldr	r2, [sp, #16]
 8009780:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8009784:	601f      	str	r7, [r3, #0]
 8009786:	605c      	str	r4, [r3, #4]
 8009788:	609d      	str	r5, [r3, #8]
 800978a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800978e:	60d3      	str	r3, [r2, #12]
 8009790:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009794:	6110      	str	r0, [r2, #16]
 8009796:	6153      	str	r3, [r2, #20]
 8009798:	e73a      	b.n	8009610 <__kernel_rem_pio2+0x4b4>
 800979a:	bf00      	nop
 800979c:	41700000 	.word	0x41700000
 80097a0:	3e700000 	.word	0x3e700000
 80097a4:	00000000 	.word	0x00000000

080097a8 <scalbn>:
 80097a8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80097ac:	4616      	mov	r6, r2
 80097ae:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097b2:	4683      	mov	fp, r0
 80097b4:	468c      	mov	ip, r1
 80097b6:	460b      	mov	r3, r1
 80097b8:	b982      	cbnz	r2, 80097dc <scalbn+0x34>
 80097ba:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80097be:	4303      	orrs	r3, r0
 80097c0:	d039      	beq.n	8009836 <scalbn+0x8e>
 80097c2:	4b2f      	ldr	r3, [pc, #188]	@ (8009880 <scalbn+0xd8>)
 80097c4:	2200      	movs	r2, #0
 80097c6:	f7f6 fe91 	bl	80004ec <__aeabi_dmul>
 80097ca:	4b2e      	ldr	r3, [pc, #184]	@ (8009884 <scalbn+0xdc>)
 80097cc:	4683      	mov	fp, r0
 80097ce:	429e      	cmp	r6, r3
 80097d0:	468c      	mov	ip, r1
 80097d2:	da0d      	bge.n	80097f0 <scalbn+0x48>
 80097d4:	a326      	add	r3, pc, #152	@ (adr r3, 8009870 <scalbn+0xc8>)
 80097d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097da:	e01b      	b.n	8009814 <scalbn+0x6c>
 80097dc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 80097e0:	42ba      	cmp	r2, r7
 80097e2:	d109      	bne.n	80097f8 <scalbn+0x50>
 80097e4:	4602      	mov	r2, r0
 80097e6:	f7f6 fccb 	bl	8000180 <__adddf3>
 80097ea:	4683      	mov	fp, r0
 80097ec:	468c      	mov	ip, r1
 80097ee:	e022      	b.n	8009836 <scalbn+0x8e>
 80097f0:	460b      	mov	r3, r1
 80097f2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80097f6:	3a36      	subs	r2, #54	@ 0x36
 80097f8:	f24c 3150 	movw	r1, #50000	@ 0xc350
 80097fc:	428e      	cmp	r6, r1
 80097fe:	dd0c      	ble.n	800981a <scalbn+0x72>
 8009800:	a31d      	add	r3, pc, #116	@ (adr r3, 8009878 <scalbn+0xd0>)
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	461c      	mov	r4, r3
 8009808:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800980c:	f361 74df 	bfi	r4, r1, #31, #1
 8009810:	4621      	mov	r1, r4
 8009812:	481d      	ldr	r0, [pc, #116]	@ (8009888 <scalbn+0xe0>)
 8009814:	f7f6 fe6a 	bl	80004ec <__aeabi_dmul>
 8009818:	e7e7      	b.n	80097ea <scalbn+0x42>
 800981a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800981e:	4432      	add	r2, r6
 8009820:	428a      	cmp	r2, r1
 8009822:	dced      	bgt.n	8009800 <scalbn+0x58>
 8009824:	2a00      	cmp	r2, #0
 8009826:	dd0a      	ble.n	800983e <scalbn+0x96>
 8009828:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800982c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009830:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009834:	46ac      	mov	ip, r5
 8009836:	4658      	mov	r0, fp
 8009838:	4661      	mov	r1, ip
 800983a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800983e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8009842:	da09      	bge.n	8009858 <scalbn+0xb0>
 8009844:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8009848:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800984c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8009850:	480e      	ldr	r0, [pc, #56]	@ (800988c <scalbn+0xe4>)
 8009852:	f041 011f 	orr.w	r1, r1, #31
 8009856:	e7bd      	b.n	80097d4 <scalbn+0x2c>
 8009858:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800985c:	3236      	adds	r2, #54	@ 0x36
 800985e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8009862:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8009866:	4658      	mov	r0, fp
 8009868:	4629      	mov	r1, r5
 800986a:	2200      	movs	r2, #0
 800986c:	4b08      	ldr	r3, [pc, #32]	@ (8009890 <scalbn+0xe8>)
 800986e:	e7d1      	b.n	8009814 <scalbn+0x6c>
 8009870:	c2f8f359 	.word	0xc2f8f359
 8009874:	01a56e1f 	.word	0x01a56e1f
 8009878:	8800759c 	.word	0x8800759c
 800987c:	7e37e43c 	.word	0x7e37e43c
 8009880:	43500000 	.word	0x43500000
 8009884:	ffff3cb0 	.word	0xffff3cb0
 8009888:	8800759c 	.word	0x8800759c
 800988c:	c2f8f359 	.word	0xc2f8f359
 8009890:	3c900000 	.word	0x3c900000
 8009894:	00000000 	.word	0x00000000

08009898 <floor>:
 8009898:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800989c:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80098a0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80098a4:	2e13      	cmp	r6, #19
 80098a6:	4602      	mov	r2, r0
 80098a8:	460b      	mov	r3, r1
 80098aa:	460c      	mov	r4, r1
 80098ac:	4605      	mov	r5, r0
 80098ae:	4680      	mov	r8, r0
 80098b0:	dc35      	bgt.n	800991e <floor+0x86>
 80098b2:	2e00      	cmp	r6, #0
 80098b4:	da17      	bge.n	80098e6 <floor+0x4e>
 80098b6:	a334      	add	r3, pc, #208	@ (adr r3, 8009988 <floor+0xf0>)
 80098b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098bc:	f7f6 fc60 	bl	8000180 <__adddf3>
 80098c0:	2200      	movs	r2, #0
 80098c2:	2300      	movs	r3, #0
 80098c4:	f7f7 f8a2 	bl	8000a0c <__aeabi_dcmpgt>
 80098c8:	b150      	cbz	r0, 80098e0 <floor+0x48>
 80098ca:	2c00      	cmp	r4, #0
 80098cc:	da57      	bge.n	800997e <floor+0xe6>
 80098ce:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 80098d2:	432c      	orrs	r4, r5
 80098d4:	2500      	movs	r5, #0
 80098d6:	42ac      	cmp	r4, r5
 80098d8:	4c2d      	ldr	r4, [pc, #180]	@ (8009990 <floor+0xf8>)
 80098da:	bf08      	it	eq
 80098dc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 80098e0:	4623      	mov	r3, r4
 80098e2:	462a      	mov	r2, r5
 80098e4:	e024      	b.n	8009930 <floor+0x98>
 80098e6:	4f2b      	ldr	r7, [pc, #172]	@ (8009994 <floor+0xfc>)
 80098e8:	4137      	asrs	r7, r6
 80098ea:	ea01 0c07 	and.w	ip, r1, r7
 80098ee:	ea5c 0c00 	orrs.w	ip, ip, r0
 80098f2:	d01d      	beq.n	8009930 <floor+0x98>
 80098f4:	a324      	add	r3, pc, #144	@ (adr r3, 8009988 <floor+0xf0>)
 80098f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098fa:	f7f6 fc41 	bl	8000180 <__adddf3>
 80098fe:	2200      	movs	r2, #0
 8009900:	2300      	movs	r3, #0
 8009902:	f7f7 f883 	bl	8000a0c <__aeabi_dcmpgt>
 8009906:	2800      	cmp	r0, #0
 8009908:	d0ea      	beq.n	80098e0 <floor+0x48>
 800990a:	2c00      	cmp	r4, #0
 800990c:	bfbe      	ittt	lt
 800990e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8009912:	4133      	asrlt	r3, r6
 8009914:	18e4      	addlt	r4, r4, r3
 8009916:	2500      	movs	r5, #0
 8009918:	ea24 0407 	bic.w	r4, r4, r7
 800991c:	e7e0      	b.n	80098e0 <floor+0x48>
 800991e:	2e33      	cmp	r6, #51	@ 0x33
 8009920:	dd0a      	ble.n	8009938 <floor+0xa0>
 8009922:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8009926:	d103      	bne.n	8009930 <floor+0x98>
 8009928:	f7f6 fc2a 	bl	8000180 <__adddf3>
 800992c:	4602      	mov	r2, r0
 800992e:	460b      	mov	r3, r1
 8009930:	4610      	mov	r0, r2
 8009932:	4619      	mov	r1, r3
 8009934:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009938:	f04f 3cff 	mov.w	ip, #4294967295
 800993c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8009940:	fa2c f707 	lsr.w	r7, ip, r7
 8009944:	4207      	tst	r7, r0
 8009946:	d0f3      	beq.n	8009930 <floor+0x98>
 8009948:	a30f      	add	r3, pc, #60	@ (adr r3, 8009988 <floor+0xf0>)
 800994a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800994e:	f7f6 fc17 	bl	8000180 <__adddf3>
 8009952:	2200      	movs	r2, #0
 8009954:	2300      	movs	r3, #0
 8009956:	f7f7 f859 	bl	8000a0c <__aeabi_dcmpgt>
 800995a:	2800      	cmp	r0, #0
 800995c:	d0c0      	beq.n	80098e0 <floor+0x48>
 800995e:	2c00      	cmp	r4, #0
 8009960:	da0a      	bge.n	8009978 <floor+0xe0>
 8009962:	2e14      	cmp	r6, #20
 8009964:	d101      	bne.n	800996a <floor+0xd2>
 8009966:	3401      	adds	r4, #1
 8009968:	e006      	b.n	8009978 <floor+0xe0>
 800996a:	2301      	movs	r3, #1
 800996c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8009970:	40b3      	lsls	r3, r6
 8009972:	441d      	add	r5, r3
 8009974:	4545      	cmp	r5, r8
 8009976:	d3f6      	bcc.n	8009966 <floor+0xce>
 8009978:	ea25 0507 	bic.w	r5, r5, r7
 800997c:	e7b0      	b.n	80098e0 <floor+0x48>
 800997e:	2500      	movs	r5, #0
 8009980:	462c      	mov	r4, r5
 8009982:	e7ad      	b.n	80098e0 <floor+0x48>
 8009984:	f3af 8000 	nop.w
 8009988:	8800759c 	.word	0x8800759c
 800998c:	7e37e43c 	.word	0x7e37e43c
 8009990:	bff00000 	.word	0xbff00000
 8009994:	000fffff 	.word	0x000fffff

08009998 <__cvt>:
 8009998:	2b00      	cmp	r3, #0
 800999a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800999e:	461d      	mov	r5, r3
 80099a0:	bfbb      	ittet	lt
 80099a2:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 80099a6:	461d      	movlt	r5, r3
 80099a8:	2300      	movge	r3, #0
 80099aa:	232d      	movlt	r3, #45	@ 0x2d
 80099ac:	b088      	sub	sp, #32
 80099ae:	4614      	mov	r4, r2
 80099b0:	bfb8      	it	lt
 80099b2:	4614      	movlt	r4, r2
 80099b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80099b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80099b8:	7013      	strb	r3, [r2, #0]
 80099ba:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80099bc:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 80099c0:	f023 0820 	bic.w	r8, r3, #32
 80099c4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80099c8:	d005      	beq.n	80099d6 <__cvt+0x3e>
 80099ca:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 80099ce:	d100      	bne.n	80099d2 <__cvt+0x3a>
 80099d0:	3601      	adds	r6, #1
 80099d2:	2302      	movs	r3, #2
 80099d4:	e000      	b.n	80099d8 <__cvt+0x40>
 80099d6:	2303      	movs	r3, #3
 80099d8:	aa07      	add	r2, sp, #28
 80099da:	9204      	str	r2, [sp, #16]
 80099dc:	aa06      	add	r2, sp, #24
 80099de:	e9cd a202 	strd	sl, r2, [sp, #8]
 80099e2:	e9cd 3600 	strd	r3, r6, [sp]
 80099e6:	4622      	mov	r2, r4
 80099e8:	462b      	mov	r3, r5
 80099ea:	f000 fedd 	bl	800a7a8 <_dtoa_r>
 80099ee:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80099f2:	4607      	mov	r7, r0
 80099f4:	d119      	bne.n	8009a2a <__cvt+0x92>
 80099f6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 80099f8:	07db      	lsls	r3, r3, #31
 80099fa:	d50e      	bpl.n	8009a1a <__cvt+0x82>
 80099fc:	eb00 0906 	add.w	r9, r0, r6
 8009a00:	2200      	movs	r2, #0
 8009a02:	2300      	movs	r3, #0
 8009a04:	4620      	mov	r0, r4
 8009a06:	4629      	mov	r1, r5
 8009a08:	f7f6 ffd8 	bl	80009bc <__aeabi_dcmpeq>
 8009a0c:	b108      	cbz	r0, 8009a12 <__cvt+0x7a>
 8009a0e:	f8cd 901c 	str.w	r9, [sp, #28]
 8009a12:	2230      	movs	r2, #48	@ 0x30
 8009a14:	9b07      	ldr	r3, [sp, #28]
 8009a16:	454b      	cmp	r3, r9
 8009a18:	d31e      	bcc.n	8009a58 <__cvt+0xc0>
 8009a1a:	4638      	mov	r0, r7
 8009a1c:	9b07      	ldr	r3, [sp, #28]
 8009a1e:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8009a20:	1bdb      	subs	r3, r3, r7
 8009a22:	6013      	str	r3, [r2, #0]
 8009a24:	b008      	add	sp, #32
 8009a26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a2a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8009a2e:	eb00 0906 	add.w	r9, r0, r6
 8009a32:	d1e5      	bne.n	8009a00 <__cvt+0x68>
 8009a34:	7803      	ldrb	r3, [r0, #0]
 8009a36:	2b30      	cmp	r3, #48	@ 0x30
 8009a38:	d10a      	bne.n	8009a50 <__cvt+0xb8>
 8009a3a:	2200      	movs	r2, #0
 8009a3c:	2300      	movs	r3, #0
 8009a3e:	4620      	mov	r0, r4
 8009a40:	4629      	mov	r1, r5
 8009a42:	f7f6 ffbb 	bl	80009bc <__aeabi_dcmpeq>
 8009a46:	b918      	cbnz	r0, 8009a50 <__cvt+0xb8>
 8009a48:	f1c6 0601 	rsb	r6, r6, #1
 8009a4c:	f8ca 6000 	str.w	r6, [sl]
 8009a50:	f8da 3000 	ldr.w	r3, [sl]
 8009a54:	4499      	add	r9, r3
 8009a56:	e7d3      	b.n	8009a00 <__cvt+0x68>
 8009a58:	1c59      	adds	r1, r3, #1
 8009a5a:	9107      	str	r1, [sp, #28]
 8009a5c:	701a      	strb	r2, [r3, #0]
 8009a5e:	e7d9      	b.n	8009a14 <__cvt+0x7c>

08009a60 <__exponent>:
 8009a60:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a62:	2900      	cmp	r1, #0
 8009a64:	bfb6      	itet	lt
 8009a66:	232d      	movlt	r3, #45	@ 0x2d
 8009a68:	232b      	movge	r3, #43	@ 0x2b
 8009a6a:	4249      	neglt	r1, r1
 8009a6c:	2909      	cmp	r1, #9
 8009a6e:	7002      	strb	r2, [r0, #0]
 8009a70:	7043      	strb	r3, [r0, #1]
 8009a72:	dd29      	ble.n	8009ac8 <__exponent+0x68>
 8009a74:	f10d 0307 	add.w	r3, sp, #7
 8009a78:	461d      	mov	r5, r3
 8009a7a:	270a      	movs	r7, #10
 8009a7c:	fbb1 f6f7 	udiv	r6, r1, r7
 8009a80:	461a      	mov	r2, r3
 8009a82:	fb07 1416 	mls	r4, r7, r6, r1
 8009a86:	3430      	adds	r4, #48	@ 0x30
 8009a88:	f802 4c01 	strb.w	r4, [r2, #-1]
 8009a8c:	460c      	mov	r4, r1
 8009a8e:	2c63      	cmp	r4, #99	@ 0x63
 8009a90:	4631      	mov	r1, r6
 8009a92:	f103 33ff 	add.w	r3, r3, #4294967295
 8009a96:	dcf1      	bgt.n	8009a7c <__exponent+0x1c>
 8009a98:	3130      	adds	r1, #48	@ 0x30
 8009a9a:	1e94      	subs	r4, r2, #2
 8009a9c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8009aa0:	4623      	mov	r3, r4
 8009aa2:	1c41      	adds	r1, r0, #1
 8009aa4:	42ab      	cmp	r3, r5
 8009aa6:	d30a      	bcc.n	8009abe <__exponent+0x5e>
 8009aa8:	f10d 0309 	add.w	r3, sp, #9
 8009aac:	1a9b      	subs	r3, r3, r2
 8009aae:	42ac      	cmp	r4, r5
 8009ab0:	bf88      	it	hi
 8009ab2:	2300      	movhi	r3, #0
 8009ab4:	3302      	adds	r3, #2
 8009ab6:	4403      	add	r3, r0
 8009ab8:	1a18      	subs	r0, r3, r0
 8009aba:	b003      	add	sp, #12
 8009abc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009abe:	f813 6b01 	ldrb.w	r6, [r3], #1
 8009ac2:	f801 6f01 	strb.w	r6, [r1, #1]!
 8009ac6:	e7ed      	b.n	8009aa4 <__exponent+0x44>
 8009ac8:	2330      	movs	r3, #48	@ 0x30
 8009aca:	3130      	adds	r1, #48	@ 0x30
 8009acc:	7083      	strb	r3, [r0, #2]
 8009ace:	70c1      	strb	r1, [r0, #3]
 8009ad0:	1d03      	adds	r3, r0, #4
 8009ad2:	e7f1      	b.n	8009ab8 <__exponent+0x58>

08009ad4 <_printf_float>:
 8009ad4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009ad8:	b091      	sub	sp, #68	@ 0x44
 8009ada:	460c      	mov	r4, r1
 8009adc:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8009ae0:	4616      	mov	r6, r2
 8009ae2:	461f      	mov	r7, r3
 8009ae4:	4605      	mov	r5, r0
 8009ae6:	f000 fd43 	bl	800a570 <_localeconv_r>
 8009aea:	6803      	ldr	r3, [r0, #0]
 8009aec:	4618      	mov	r0, r3
 8009aee:	9308      	str	r3, [sp, #32]
 8009af0:	f7f6 fb38 	bl	8000164 <strlen>
 8009af4:	2300      	movs	r3, #0
 8009af6:	930e      	str	r3, [sp, #56]	@ 0x38
 8009af8:	f8d8 3000 	ldr.w	r3, [r8]
 8009afc:	9009      	str	r0, [sp, #36]	@ 0x24
 8009afe:	3307      	adds	r3, #7
 8009b00:	f023 0307 	bic.w	r3, r3, #7
 8009b04:	f103 0208 	add.w	r2, r3, #8
 8009b08:	f894 a018 	ldrb.w	sl, [r4, #24]
 8009b0c:	f8d4 b000 	ldr.w	fp, [r4]
 8009b10:	f8c8 2000 	str.w	r2, [r8]
 8009b14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b18:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8009b1c:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009b1e:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8009b22:	f04f 32ff 	mov.w	r2, #4294967295
 8009b26:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b2a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8009b2e:	4b9c      	ldr	r3, [pc, #624]	@ (8009da0 <_printf_float+0x2cc>)
 8009b30:	f7f6 ff76 	bl	8000a20 <__aeabi_dcmpun>
 8009b34:	bb70      	cbnz	r0, 8009b94 <_printf_float+0xc0>
 8009b36:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8009b3a:	f04f 32ff 	mov.w	r2, #4294967295
 8009b3e:	4b98      	ldr	r3, [pc, #608]	@ (8009da0 <_printf_float+0x2cc>)
 8009b40:	f7f6 ff50 	bl	80009e4 <__aeabi_dcmple>
 8009b44:	bb30      	cbnz	r0, 8009b94 <_printf_float+0xc0>
 8009b46:	2200      	movs	r2, #0
 8009b48:	2300      	movs	r3, #0
 8009b4a:	4640      	mov	r0, r8
 8009b4c:	4649      	mov	r1, r9
 8009b4e:	f7f6 ff3f 	bl	80009d0 <__aeabi_dcmplt>
 8009b52:	b110      	cbz	r0, 8009b5a <_printf_float+0x86>
 8009b54:	232d      	movs	r3, #45	@ 0x2d
 8009b56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009b5a:	4a92      	ldr	r2, [pc, #584]	@ (8009da4 <_printf_float+0x2d0>)
 8009b5c:	4b92      	ldr	r3, [pc, #584]	@ (8009da8 <_printf_float+0x2d4>)
 8009b5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8009b62:	bf94      	ite	ls
 8009b64:	4690      	movls	r8, r2
 8009b66:	4698      	movhi	r8, r3
 8009b68:	2303      	movs	r3, #3
 8009b6a:	f04f 0900 	mov.w	r9, #0
 8009b6e:	6123      	str	r3, [r4, #16]
 8009b70:	f02b 0304 	bic.w	r3, fp, #4
 8009b74:	6023      	str	r3, [r4, #0]
 8009b76:	4633      	mov	r3, r6
 8009b78:	4621      	mov	r1, r4
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	9700      	str	r7, [sp, #0]
 8009b7e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8009b80:	f000 f9d4 	bl	8009f2c <_printf_common>
 8009b84:	3001      	adds	r0, #1
 8009b86:	f040 8090 	bne.w	8009caa <_printf_float+0x1d6>
 8009b8a:	f04f 30ff 	mov.w	r0, #4294967295
 8009b8e:	b011      	add	sp, #68	@ 0x44
 8009b90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b94:	4642      	mov	r2, r8
 8009b96:	464b      	mov	r3, r9
 8009b98:	4640      	mov	r0, r8
 8009b9a:	4649      	mov	r1, r9
 8009b9c:	f7f6 ff40 	bl	8000a20 <__aeabi_dcmpun>
 8009ba0:	b148      	cbz	r0, 8009bb6 <_printf_float+0xe2>
 8009ba2:	464b      	mov	r3, r9
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	bfb8      	it	lt
 8009ba8:	232d      	movlt	r3, #45	@ 0x2d
 8009baa:	4a80      	ldr	r2, [pc, #512]	@ (8009dac <_printf_float+0x2d8>)
 8009bac:	bfb8      	it	lt
 8009bae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8009bb2:	4b7f      	ldr	r3, [pc, #508]	@ (8009db0 <_printf_float+0x2dc>)
 8009bb4:	e7d3      	b.n	8009b5e <_printf_float+0x8a>
 8009bb6:	6863      	ldr	r3, [r4, #4]
 8009bb8:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	d13f      	bne.n	8009c40 <_printf_float+0x16c>
 8009bc0:	2306      	movs	r3, #6
 8009bc2:	6063      	str	r3, [r4, #4]
 8009bc4:	2200      	movs	r2, #0
 8009bc6:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8009bca:	6023      	str	r3, [r4, #0]
 8009bcc:	9206      	str	r2, [sp, #24]
 8009bce:	aa0e      	add	r2, sp, #56	@ 0x38
 8009bd0:	e9cd a204 	strd	sl, r2, [sp, #16]
 8009bd4:	aa0d      	add	r2, sp, #52	@ 0x34
 8009bd6:	9203      	str	r2, [sp, #12]
 8009bd8:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8009bdc:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8009be0:	6863      	ldr	r3, [r4, #4]
 8009be2:	4642      	mov	r2, r8
 8009be4:	9300      	str	r3, [sp, #0]
 8009be6:	4628      	mov	r0, r5
 8009be8:	464b      	mov	r3, r9
 8009bea:	910a      	str	r1, [sp, #40]	@ 0x28
 8009bec:	f7ff fed4 	bl	8009998 <__cvt>
 8009bf0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bf2:	4680      	mov	r8, r0
 8009bf4:	2947      	cmp	r1, #71	@ 0x47
 8009bf6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8009bf8:	d128      	bne.n	8009c4c <_printf_float+0x178>
 8009bfa:	1cc8      	adds	r0, r1, #3
 8009bfc:	db02      	blt.n	8009c04 <_printf_float+0x130>
 8009bfe:	6863      	ldr	r3, [r4, #4]
 8009c00:	4299      	cmp	r1, r3
 8009c02:	dd40      	ble.n	8009c86 <_printf_float+0x1b2>
 8009c04:	f1aa 0a02 	sub.w	sl, sl, #2
 8009c08:	fa5f fa8a 	uxtb.w	sl, sl
 8009c0c:	4652      	mov	r2, sl
 8009c0e:	3901      	subs	r1, #1
 8009c10:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8009c14:	910d      	str	r1, [sp, #52]	@ 0x34
 8009c16:	f7ff ff23 	bl	8009a60 <__exponent>
 8009c1a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009c1c:	4681      	mov	r9, r0
 8009c1e:	1813      	adds	r3, r2, r0
 8009c20:	2a01      	cmp	r2, #1
 8009c22:	6123      	str	r3, [r4, #16]
 8009c24:	dc02      	bgt.n	8009c2c <_printf_float+0x158>
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	07d2      	lsls	r2, r2, #31
 8009c2a:	d501      	bpl.n	8009c30 <_printf_float+0x15c>
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	6123      	str	r3, [r4, #16]
 8009c30:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8009c34:	2b00      	cmp	r3, #0
 8009c36:	d09e      	beq.n	8009b76 <_printf_float+0xa2>
 8009c38:	232d      	movs	r3, #45	@ 0x2d
 8009c3a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009c3e:	e79a      	b.n	8009b76 <_printf_float+0xa2>
 8009c40:	2947      	cmp	r1, #71	@ 0x47
 8009c42:	d1bf      	bne.n	8009bc4 <_printf_float+0xf0>
 8009c44:	2b00      	cmp	r3, #0
 8009c46:	d1bd      	bne.n	8009bc4 <_printf_float+0xf0>
 8009c48:	2301      	movs	r3, #1
 8009c4a:	e7ba      	b.n	8009bc2 <_printf_float+0xee>
 8009c4c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009c50:	d9dc      	bls.n	8009c0c <_printf_float+0x138>
 8009c52:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8009c56:	d118      	bne.n	8009c8a <_printf_float+0x1b6>
 8009c58:	2900      	cmp	r1, #0
 8009c5a:	6863      	ldr	r3, [r4, #4]
 8009c5c:	dd0b      	ble.n	8009c76 <_printf_float+0x1a2>
 8009c5e:	6121      	str	r1, [r4, #16]
 8009c60:	b913      	cbnz	r3, 8009c68 <_printf_float+0x194>
 8009c62:	6822      	ldr	r2, [r4, #0]
 8009c64:	07d0      	lsls	r0, r2, #31
 8009c66:	d502      	bpl.n	8009c6e <_printf_float+0x19a>
 8009c68:	3301      	adds	r3, #1
 8009c6a:	440b      	add	r3, r1
 8009c6c:	6123      	str	r3, [r4, #16]
 8009c6e:	f04f 0900 	mov.w	r9, #0
 8009c72:	65a1      	str	r1, [r4, #88]	@ 0x58
 8009c74:	e7dc      	b.n	8009c30 <_printf_float+0x15c>
 8009c76:	b913      	cbnz	r3, 8009c7e <_printf_float+0x1aa>
 8009c78:	6822      	ldr	r2, [r4, #0]
 8009c7a:	07d2      	lsls	r2, r2, #31
 8009c7c:	d501      	bpl.n	8009c82 <_printf_float+0x1ae>
 8009c7e:	3302      	adds	r3, #2
 8009c80:	e7f4      	b.n	8009c6c <_printf_float+0x198>
 8009c82:	2301      	movs	r3, #1
 8009c84:	e7f2      	b.n	8009c6c <_printf_float+0x198>
 8009c86:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8009c8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009c8c:	4299      	cmp	r1, r3
 8009c8e:	db05      	blt.n	8009c9c <_printf_float+0x1c8>
 8009c90:	6823      	ldr	r3, [r4, #0]
 8009c92:	6121      	str	r1, [r4, #16]
 8009c94:	07d8      	lsls	r0, r3, #31
 8009c96:	d5ea      	bpl.n	8009c6e <_printf_float+0x19a>
 8009c98:	1c4b      	adds	r3, r1, #1
 8009c9a:	e7e7      	b.n	8009c6c <_printf_float+0x198>
 8009c9c:	2900      	cmp	r1, #0
 8009c9e:	bfcc      	ite	gt
 8009ca0:	2201      	movgt	r2, #1
 8009ca2:	f1c1 0202 	rsble	r2, r1, #2
 8009ca6:	4413      	add	r3, r2
 8009ca8:	e7e0      	b.n	8009c6c <_printf_float+0x198>
 8009caa:	6823      	ldr	r3, [r4, #0]
 8009cac:	055a      	lsls	r2, r3, #21
 8009cae:	d407      	bmi.n	8009cc0 <_printf_float+0x1ec>
 8009cb0:	6923      	ldr	r3, [r4, #16]
 8009cb2:	4642      	mov	r2, r8
 8009cb4:	4631      	mov	r1, r6
 8009cb6:	4628      	mov	r0, r5
 8009cb8:	47b8      	blx	r7
 8009cba:	3001      	adds	r0, #1
 8009cbc:	d12b      	bne.n	8009d16 <_printf_float+0x242>
 8009cbe:	e764      	b.n	8009b8a <_printf_float+0xb6>
 8009cc0:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8009cc4:	f240 80dc 	bls.w	8009e80 <_printf_float+0x3ac>
 8009cc8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009ccc:	2200      	movs	r2, #0
 8009cce:	2300      	movs	r3, #0
 8009cd0:	f7f6 fe74 	bl	80009bc <__aeabi_dcmpeq>
 8009cd4:	2800      	cmp	r0, #0
 8009cd6:	d033      	beq.n	8009d40 <_printf_float+0x26c>
 8009cd8:	2301      	movs	r3, #1
 8009cda:	4631      	mov	r1, r6
 8009cdc:	4628      	mov	r0, r5
 8009cde:	4a35      	ldr	r2, [pc, #212]	@ (8009db4 <_printf_float+0x2e0>)
 8009ce0:	47b8      	blx	r7
 8009ce2:	3001      	adds	r0, #1
 8009ce4:	f43f af51 	beq.w	8009b8a <_printf_float+0xb6>
 8009ce8:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8009cec:	4543      	cmp	r3, r8
 8009cee:	db02      	blt.n	8009cf6 <_printf_float+0x222>
 8009cf0:	6823      	ldr	r3, [r4, #0]
 8009cf2:	07d8      	lsls	r0, r3, #31
 8009cf4:	d50f      	bpl.n	8009d16 <_printf_float+0x242>
 8009cf6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009cfa:	4631      	mov	r1, r6
 8009cfc:	4628      	mov	r0, r5
 8009cfe:	47b8      	blx	r7
 8009d00:	3001      	adds	r0, #1
 8009d02:	f43f af42 	beq.w	8009b8a <_printf_float+0xb6>
 8009d06:	f04f 0900 	mov.w	r9, #0
 8009d0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8009d0e:	f104 0a1a 	add.w	sl, r4, #26
 8009d12:	45c8      	cmp	r8, r9
 8009d14:	dc09      	bgt.n	8009d2a <_printf_float+0x256>
 8009d16:	6823      	ldr	r3, [r4, #0]
 8009d18:	079b      	lsls	r3, r3, #30
 8009d1a:	f100 8102 	bmi.w	8009f22 <_printf_float+0x44e>
 8009d1e:	68e0      	ldr	r0, [r4, #12]
 8009d20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009d22:	4298      	cmp	r0, r3
 8009d24:	bfb8      	it	lt
 8009d26:	4618      	movlt	r0, r3
 8009d28:	e731      	b.n	8009b8e <_printf_float+0xba>
 8009d2a:	2301      	movs	r3, #1
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	f43f af28 	beq.w	8009b8a <_printf_float+0xb6>
 8009d3a:	f109 0901 	add.w	r9, r9, #1
 8009d3e:	e7e8      	b.n	8009d12 <_printf_float+0x23e>
 8009d40:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	dc38      	bgt.n	8009db8 <_printf_float+0x2e4>
 8009d46:	2301      	movs	r3, #1
 8009d48:	4631      	mov	r1, r6
 8009d4a:	4628      	mov	r0, r5
 8009d4c:	4a19      	ldr	r2, [pc, #100]	@ (8009db4 <_printf_float+0x2e0>)
 8009d4e:	47b8      	blx	r7
 8009d50:	3001      	adds	r0, #1
 8009d52:	f43f af1a 	beq.w	8009b8a <_printf_float+0xb6>
 8009d56:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8009d5a:	ea59 0303 	orrs.w	r3, r9, r3
 8009d5e:	d102      	bne.n	8009d66 <_printf_float+0x292>
 8009d60:	6823      	ldr	r3, [r4, #0]
 8009d62:	07d9      	lsls	r1, r3, #31
 8009d64:	d5d7      	bpl.n	8009d16 <_printf_float+0x242>
 8009d66:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009d6a:	4631      	mov	r1, r6
 8009d6c:	4628      	mov	r0, r5
 8009d6e:	47b8      	blx	r7
 8009d70:	3001      	adds	r0, #1
 8009d72:	f43f af0a 	beq.w	8009b8a <_printf_float+0xb6>
 8009d76:	f04f 0a00 	mov.w	sl, #0
 8009d7a:	f104 0b1a 	add.w	fp, r4, #26
 8009d7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009d80:	425b      	negs	r3, r3
 8009d82:	4553      	cmp	r3, sl
 8009d84:	dc01      	bgt.n	8009d8a <_printf_float+0x2b6>
 8009d86:	464b      	mov	r3, r9
 8009d88:	e793      	b.n	8009cb2 <_printf_float+0x1de>
 8009d8a:	2301      	movs	r3, #1
 8009d8c:	465a      	mov	r2, fp
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	f43f aef8 	beq.w	8009b8a <_printf_float+0xb6>
 8009d9a:	f10a 0a01 	add.w	sl, sl, #1
 8009d9e:	e7ee      	b.n	8009d7e <_printf_float+0x2aa>
 8009da0:	7fefffff 	.word	0x7fefffff
 8009da4:	0800d478 	.word	0x0800d478
 8009da8:	0800d47c 	.word	0x0800d47c
 8009dac:	0800d480 	.word	0x0800d480
 8009db0:	0800d484 	.word	0x0800d484
 8009db4:	0800d6b7 	.word	0x0800d6b7
 8009db8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dba:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009dbe:	4553      	cmp	r3, sl
 8009dc0:	bfa8      	it	ge
 8009dc2:	4653      	movge	r3, sl
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	4699      	mov	r9, r3
 8009dc8:	dc36      	bgt.n	8009e38 <_printf_float+0x364>
 8009dca:	f04f 0b00 	mov.w	fp, #0
 8009dce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd2:	f104 021a 	add.w	r2, r4, #26
 8009dd6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8009dd8:	930a      	str	r3, [sp, #40]	@ 0x28
 8009dda:	eba3 0309 	sub.w	r3, r3, r9
 8009dde:	455b      	cmp	r3, fp
 8009de0:	dc31      	bgt.n	8009e46 <_printf_float+0x372>
 8009de2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009de4:	459a      	cmp	sl, r3
 8009de6:	dc3a      	bgt.n	8009e5e <_printf_float+0x38a>
 8009de8:	6823      	ldr	r3, [r4, #0]
 8009dea:	07da      	lsls	r2, r3, #31
 8009dec:	d437      	bmi.n	8009e5e <_printf_float+0x38a>
 8009dee:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009df0:	ebaa 0903 	sub.w	r9, sl, r3
 8009df4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009df6:	ebaa 0303 	sub.w	r3, sl, r3
 8009dfa:	4599      	cmp	r9, r3
 8009dfc:	bfa8      	it	ge
 8009dfe:	4699      	movge	r9, r3
 8009e00:	f1b9 0f00 	cmp.w	r9, #0
 8009e04:	dc33      	bgt.n	8009e6e <_printf_float+0x39a>
 8009e06:	f04f 0800 	mov.w	r8, #0
 8009e0a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009e0e:	f104 0b1a 	add.w	fp, r4, #26
 8009e12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009e14:	ebaa 0303 	sub.w	r3, sl, r3
 8009e18:	eba3 0309 	sub.w	r3, r3, r9
 8009e1c:	4543      	cmp	r3, r8
 8009e1e:	f77f af7a 	ble.w	8009d16 <_printf_float+0x242>
 8009e22:	2301      	movs	r3, #1
 8009e24:	465a      	mov	r2, fp
 8009e26:	4631      	mov	r1, r6
 8009e28:	4628      	mov	r0, r5
 8009e2a:	47b8      	blx	r7
 8009e2c:	3001      	adds	r0, #1
 8009e2e:	f43f aeac 	beq.w	8009b8a <_printf_float+0xb6>
 8009e32:	f108 0801 	add.w	r8, r8, #1
 8009e36:	e7ec      	b.n	8009e12 <_printf_float+0x33e>
 8009e38:	4642      	mov	r2, r8
 8009e3a:	4631      	mov	r1, r6
 8009e3c:	4628      	mov	r0, r5
 8009e3e:	47b8      	blx	r7
 8009e40:	3001      	adds	r0, #1
 8009e42:	d1c2      	bne.n	8009dca <_printf_float+0x2f6>
 8009e44:	e6a1      	b.n	8009b8a <_printf_float+0xb6>
 8009e46:	2301      	movs	r3, #1
 8009e48:	4631      	mov	r1, r6
 8009e4a:	4628      	mov	r0, r5
 8009e4c:	920a      	str	r2, [sp, #40]	@ 0x28
 8009e4e:	47b8      	blx	r7
 8009e50:	3001      	adds	r0, #1
 8009e52:	f43f ae9a 	beq.w	8009b8a <_printf_float+0xb6>
 8009e56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e58:	f10b 0b01 	add.w	fp, fp, #1
 8009e5c:	e7bb      	b.n	8009dd6 <_printf_float+0x302>
 8009e5e:	4631      	mov	r1, r6
 8009e60:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009e64:	4628      	mov	r0, r5
 8009e66:	47b8      	blx	r7
 8009e68:	3001      	adds	r0, #1
 8009e6a:	d1c0      	bne.n	8009dee <_printf_float+0x31a>
 8009e6c:	e68d      	b.n	8009b8a <_printf_float+0xb6>
 8009e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009e70:	464b      	mov	r3, r9
 8009e72:	4631      	mov	r1, r6
 8009e74:	4628      	mov	r0, r5
 8009e76:	4442      	add	r2, r8
 8009e78:	47b8      	blx	r7
 8009e7a:	3001      	adds	r0, #1
 8009e7c:	d1c3      	bne.n	8009e06 <_printf_float+0x332>
 8009e7e:	e684      	b.n	8009b8a <_printf_float+0xb6>
 8009e80:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8009e84:	f1ba 0f01 	cmp.w	sl, #1
 8009e88:	dc01      	bgt.n	8009e8e <_printf_float+0x3ba>
 8009e8a:	07db      	lsls	r3, r3, #31
 8009e8c:	d536      	bpl.n	8009efc <_printf_float+0x428>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4642      	mov	r2, r8
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	f43f ae76 	beq.w	8009b8a <_printf_float+0xb6>
 8009e9e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f ae6e 	beq.w	8009b8a <_printf_float+0xb6>
 8009eae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	f10a 3aff 	add.w	sl, sl, #4294967295
 8009eba:	f7f6 fd7f 	bl	80009bc <__aeabi_dcmpeq>
 8009ebe:	b9c0      	cbnz	r0, 8009ef2 <_printf_float+0x41e>
 8009ec0:	4653      	mov	r3, sl
 8009ec2:	f108 0201 	add.w	r2, r8, #1
 8009ec6:	4631      	mov	r1, r6
 8009ec8:	4628      	mov	r0, r5
 8009eca:	47b8      	blx	r7
 8009ecc:	3001      	adds	r0, #1
 8009ece:	d10c      	bne.n	8009eea <_printf_float+0x416>
 8009ed0:	e65b      	b.n	8009b8a <_printf_float+0xb6>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	465a      	mov	r2, fp
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	f43f ae54 	beq.w	8009b8a <_printf_float+0xb6>
 8009ee2:	f108 0801 	add.w	r8, r8, #1
 8009ee6:	45d0      	cmp	r8, sl
 8009ee8:	dbf3      	blt.n	8009ed2 <_printf_float+0x3fe>
 8009eea:	464b      	mov	r3, r9
 8009eec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8009ef0:	e6e0      	b.n	8009cb4 <_printf_float+0x1e0>
 8009ef2:	f04f 0800 	mov.w	r8, #0
 8009ef6:	f104 0b1a 	add.w	fp, r4, #26
 8009efa:	e7f4      	b.n	8009ee6 <_printf_float+0x412>
 8009efc:	2301      	movs	r3, #1
 8009efe:	4642      	mov	r2, r8
 8009f00:	e7e1      	b.n	8009ec6 <_printf_float+0x3f2>
 8009f02:	2301      	movs	r3, #1
 8009f04:	464a      	mov	r2, r9
 8009f06:	4631      	mov	r1, r6
 8009f08:	4628      	mov	r0, r5
 8009f0a:	47b8      	blx	r7
 8009f0c:	3001      	adds	r0, #1
 8009f0e:	f43f ae3c 	beq.w	8009b8a <_printf_float+0xb6>
 8009f12:	f108 0801 	add.w	r8, r8, #1
 8009f16:	68e3      	ldr	r3, [r4, #12]
 8009f18:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009f1a:	1a5b      	subs	r3, r3, r1
 8009f1c:	4543      	cmp	r3, r8
 8009f1e:	dcf0      	bgt.n	8009f02 <_printf_float+0x42e>
 8009f20:	e6fd      	b.n	8009d1e <_printf_float+0x24a>
 8009f22:	f04f 0800 	mov.w	r8, #0
 8009f26:	f104 0919 	add.w	r9, r4, #25
 8009f2a:	e7f4      	b.n	8009f16 <_printf_float+0x442>

08009f2c <_printf_common>:
 8009f2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f30:	4616      	mov	r6, r2
 8009f32:	4698      	mov	r8, r3
 8009f34:	688a      	ldr	r2, [r1, #8]
 8009f36:	690b      	ldr	r3, [r1, #16]
 8009f38:	4607      	mov	r7, r0
 8009f3a:	4293      	cmp	r3, r2
 8009f3c:	bfb8      	it	lt
 8009f3e:	4613      	movlt	r3, r2
 8009f40:	6033      	str	r3, [r6, #0]
 8009f42:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009f46:	460c      	mov	r4, r1
 8009f48:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009f4c:	b10a      	cbz	r2, 8009f52 <_printf_common+0x26>
 8009f4e:	3301      	adds	r3, #1
 8009f50:	6033      	str	r3, [r6, #0]
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	0699      	lsls	r1, r3, #26
 8009f56:	bf42      	ittt	mi
 8009f58:	6833      	ldrmi	r3, [r6, #0]
 8009f5a:	3302      	addmi	r3, #2
 8009f5c:	6033      	strmi	r3, [r6, #0]
 8009f5e:	6825      	ldr	r5, [r4, #0]
 8009f60:	f015 0506 	ands.w	r5, r5, #6
 8009f64:	d106      	bne.n	8009f74 <_printf_common+0x48>
 8009f66:	f104 0a19 	add.w	sl, r4, #25
 8009f6a:	68e3      	ldr	r3, [r4, #12]
 8009f6c:	6832      	ldr	r2, [r6, #0]
 8009f6e:	1a9b      	subs	r3, r3, r2
 8009f70:	42ab      	cmp	r3, r5
 8009f72:	dc2b      	bgt.n	8009fcc <_printf_common+0xa0>
 8009f74:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009f78:	6822      	ldr	r2, [r4, #0]
 8009f7a:	3b00      	subs	r3, #0
 8009f7c:	bf18      	it	ne
 8009f7e:	2301      	movne	r3, #1
 8009f80:	0692      	lsls	r2, r2, #26
 8009f82:	d430      	bmi.n	8009fe6 <_printf_common+0xba>
 8009f84:	4641      	mov	r1, r8
 8009f86:	4638      	mov	r0, r7
 8009f88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009f8c:	47c8      	blx	r9
 8009f8e:	3001      	adds	r0, #1
 8009f90:	d023      	beq.n	8009fda <_printf_common+0xae>
 8009f92:	6823      	ldr	r3, [r4, #0]
 8009f94:	6922      	ldr	r2, [r4, #16]
 8009f96:	f003 0306 	and.w	r3, r3, #6
 8009f9a:	2b04      	cmp	r3, #4
 8009f9c:	bf14      	ite	ne
 8009f9e:	2500      	movne	r5, #0
 8009fa0:	6833      	ldreq	r3, [r6, #0]
 8009fa2:	f04f 0600 	mov.w	r6, #0
 8009fa6:	bf08      	it	eq
 8009fa8:	68e5      	ldreq	r5, [r4, #12]
 8009faa:	f104 041a 	add.w	r4, r4, #26
 8009fae:	bf08      	it	eq
 8009fb0:	1aed      	subeq	r5, r5, r3
 8009fb2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8009fb6:	bf08      	it	eq
 8009fb8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009fbc:	4293      	cmp	r3, r2
 8009fbe:	bfc4      	itt	gt
 8009fc0:	1a9b      	subgt	r3, r3, r2
 8009fc2:	18ed      	addgt	r5, r5, r3
 8009fc4:	42b5      	cmp	r5, r6
 8009fc6:	d11a      	bne.n	8009ffe <_printf_common+0xd2>
 8009fc8:	2000      	movs	r0, #0
 8009fca:	e008      	b.n	8009fde <_printf_common+0xb2>
 8009fcc:	2301      	movs	r3, #1
 8009fce:	4652      	mov	r2, sl
 8009fd0:	4641      	mov	r1, r8
 8009fd2:	4638      	mov	r0, r7
 8009fd4:	47c8      	blx	r9
 8009fd6:	3001      	adds	r0, #1
 8009fd8:	d103      	bne.n	8009fe2 <_printf_common+0xb6>
 8009fda:	f04f 30ff 	mov.w	r0, #4294967295
 8009fde:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fe2:	3501      	adds	r5, #1
 8009fe4:	e7c1      	b.n	8009f6a <_printf_common+0x3e>
 8009fe6:	2030      	movs	r0, #48	@ 0x30
 8009fe8:	18e1      	adds	r1, r4, r3
 8009fea:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009fee:	1c5a      	adds	r2, r3, #1
 8009ff0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009ff4:	4422      	add	r2, r4
 8009ff6:	3302      	adds	r3, #2
 8009ff8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009ffc:	e7c2      	b.n	8009f84 <_printf_common+0x58>
 8009ffe:	2301      	movs	r3, #1
 800a000:	4622      	mov	r2, r4
 800a002:	4641      	mov	r1, r8
 800a004:	4638      	mov	r0, r7
 800a006:	47c8      	blx	r9
 800a008:	3001      	adds	r0, #1
 800a00a:	d0e6      	beq.n	8009fda <_printf_common+0xae>
 800a00c:	3601      	adds	r6, #1
 800a00e:	e7d9      	b.n	8009fc4 <_printf_common+0x98>

0800a010 <_printf_i>:
 800a010:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a014:	7e0f      	ldrb	r7, [r1, #24]
 800a016:	4691      	mov	r9, r2
 800a018:	2f78      	cmp	r7, #120	@ 0x78
 800a01a:	4680      	mov	r8, r0
 800a01c:	460c      	mov	r4, r1
 800a01e:	469a      	mov	sl, r3
 800a020:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800a022:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800a026:	d807      	bhi.n	800a038 <_printf_i+0x28>
 800a028:	2f62      	cmp	r7, #98	@ 0x62
 800a02a:	d80a      	bhi.n	800a042 <_printf_i+0x32>
 800a02c:	2f00      	cmp	r7, #0
 800a02e:	f000 80d3 	beq.w	800a1d8 <_printf_i+0x1c8>
 800a032:	2f58      	cmp	r7, #88	@ 0x58
 800a034:	f000 80ba 	beq.w	800a1ac <_printf_i+0x19c>
 800a038:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a03c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800a040:	e03a      	b.n	800a0b8 <_printf_i+0xa8>
 800a042:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800a046:	2b15      	cmp	r3, #21
 800a048:	d8f6      	bhi.n	800a038 <_printf_i+0x28>
 800a04a:	a101      	add	r1, pc, #4	@ (adr r1, 800a050 <_printf_i+0x40>)
 800a04c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a050:	0800a0a9 	.word	0x0800a0a9
 800a054:	0800a0bd 	.word	0x0800a0bd
 800a058:	0800a039 	.word	0x0800a039
 800a05c:	0800a039 	.word	0x0800a039
 800a060:	0800a039 	.word	0x0800a039
 800a064:	0800a039 	.word	0x0800a039
 800a068:	0800a0bd 	.word	0x0800a0bd
 800a06c:	0800a039 	.word	0x0800a039
 800a070:	0800a039 	.word	0x0800a039
 800a074:	0800a039 	.word	0x0800a039
 800a078:	0800a039 	.word	0x0800a039
 800a07c:	0800a1bf 	.word	0x0800a1bf
 800a080:	0800a0e7 	.word	0x0800a0e7
 800a084:	0800a179 	.word	0x0800a179
 800a088:	0800a039 	.word	0x0800a039
 800a08c:	0800a039 	.word	0x0800a039
 800a090:	0800a1e1 	.word	0x0800a1e1
 800a094:	0800a039 	.word	0x0800a039
 800a098:	0800a0e7 	.word	0x0800a0e7
 800a09c:	0800a039 	.word	0x0800a039
 800a0a0:	0800a039 	.word	0x0800a039
 800a0a4:	0800a181 	.word	0x0800a181
 800a0a8:	6833      	ldr	r3, [r6, #0]
 800a0aa:	1d1a      	adds	r2, r3, #4
 800a0ac:	681b      	ldr	r3, [r3, #0]
 800a0ae:	6032      	str	r2, [r6, #0]
 800a0b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800a0b4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800a0b8:	2301      	movs	r3, #1
 800a0ba:	e09e      	b.n	800a1fa <_printf_i+0x1ea>
 800a0bc:	6833      	ldr	r3, [r6, #0]
 800a0be:	6820      	ldr	r0, [r4, #0]
 800a0c0:	1d19      	adds	r1, r3, #4
 800a0c2:	6031      	str	r1, [r6, #0]
 800a0c4:	0606      	lsls	r6, r0, #24
 800a0c6:	d501      	bpl.n	800a0cc <_printf_i+0xbc>
 800a0c8:	681d      	ldr	r5, [r3, #0]
 800a0ca:	e003      	b.n	800a0d4 <_printf_i+0xc4>
 800a0cc:	0645      	lsls	r5, r0, #25
 800a0ce:	d5fb      	bpl.n	800a0c8 <_printf_i+0xb8>
 800a0d0:	f9b3 5000 	ldrsh.w	r5, [r3]
 800a0d4:	2d00      	cmp	r5, #0
 800a0d6:	da03      	bge.n	800a0e0 <_printf_i+0xd0>
 800a0d8:	232d      	movs	r3, #45	@ 0x2d
 800a0da:	426d      	negs	r5, r5
 800a0dc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a0e0:	230a      	movs	r3, #10
 800a0e2:	4859      	ldr	r0, [pc, #356]	@ (800a248 <_printf_i+0x238>)
 800a0e4:	e011      	b.n	800a10a <_printf_i+0xfa>
 800a0e6:	6821      	ldr	r1, [r4, #0]
 800a0e8:	6833      	ldr	r3, [r6, #0]
 800a0ea:	0608      	lsls	r0, r1, #24
 800a0ec:	f853 5b04 	ldr.w	r5, [r3], #4
 800a0f0:	d402      	bmi.n	800a0f8 <_printf_i+0xe8>
 800a0f2:	0649      	lsls	r1, r1, #25
 800a0f4:	bf48      	it	mi
 800a0f6:	b2ad      	uxthmi	r5, r5
 800a0f8:	2f6f      	cmp	r7, #111	@ 0x6f
 800a0fa:	6033      	str	r3, [r6, #0]
 800a0fc:	bf14      	ite	ne
 800a0fe:	230a      	movne	r3, #10
 800a100:	2308      	moveq	r3, #8
 800a102:	4851      	ldr	r0, [pc, #324]	@ (800a248 <_printf_i+0x238>)
 800a104:	2100      	movs	r1, #0
 800a106:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a10a:	6866      	ldr	r6, [r4, #4]
 800a10c:	2e00      	cmp	r6, #0
 800a10e:	bfa8      	it	ge
 800a110:	6821      	ldrge	r1, [r4, #0]
 800a112:	60a6      	str	r6, [r4, #8]
 800a114:	bfa4      	itt	ge
 800a116:	f021 0104 	bicge.w	r1, r1, #4
 800a11a:	6021      	strge	r1, [r4, #0]
 800a11c:	b90d      	cbnz	r5, 800a122 <_printf_i+0x112>
 800a11e:	2e00      	cmp	r6, #0
 800a120:	d04b      	beq.n	800a1ba <_printf_i+0x1aa>
 800a122:	4616      	mov	r6, r2
 800a124:	fbb5 f1f3 	udiv	r1, r5, r3
 800a128:	fb03 5711 	mls	r7, r3, r1, r5
 800a12c:	5dc7      	ldrb	r7, [r0, r7]
 800a12e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a132:	462f      	mov	r7, r5
 800a134:	42bb      	cmp	r3, r7
 800a136:	460d      	mov	r5, r1
 800a138:	d9f4      	bls.n	800a124 <_printf_i+0x114>
 800a13a:	2b08      	cmp	r3, #8
 800a13c:	d10b      	bne.n	800a156 <_printf_i+0x146>
 800a13e:	6823      	ldr	r3, [r4, #0]
 800a140:	07df      	lsls	r7, r3, #31
 800a142:	d508      	bpl.n	800a156 <_printf_i+0x146>
 800a144:	6923      	ldr	r3, [r4, #16]
 800a146:	6861      	ldr	r1, [r4, #4]
 800a148:	4299      	cmp	r1, r3
 800a14a:	bfde      	ittt	le
 800a14c:	2330      	movle	r3, #48	@ 0x30
 800a14e:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a152:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a156:	1b92      	subs	r2, r2, r6
 800a158:	6122      	str	r2, [r4, #16]
 800a15a:	464b      	mov	r3, r9
 800a15c:	4621      	mov	r1, r4
 800a15e:	4640      	mov	r0, r8
 800a160:	f8cd a000 	str.w	sl, [sp]
 800a164:	aa03      	add	r2, sp, #12
 800a166:	f7ff fee1 	bl	8009f2c <_printf_common>
 800a16a:	3001      	adds	r0, #1
 800a16c:	d14a      	bne.n	800a204 <_printf_i+0x1f4>
 800a16e:	f04f 30ff 	mov.w	r0, #4294967295
 800a172:	b004      	add	sp, #16
 800a174:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a178:	6823      	ldr	r3, [r4, #0]
 800a17a:	f043 0320 	orr.w	r3, r3, #32
 800a17e:	6023      	str	r3, [r4, #0]
 800a180:	2778      	movs	r7, #120	@ 0x78
 800a182:	4832      	ldr	r0, [pc, #200]	@ (800a24c <_printf_i+0x23c>)
 800a184:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a188:	6823      	ldr	r3, [r4, #0]
 800a18a:	6831      	ldr	r1, [r6, #0]
 800a18c:	061f      	lsls	r7, r3, #24
 800a18e:	f851 5b04 	ldr.w	r5, [r1], #4
 800a192:	d402      	bmi.n	800a19a <_printf_i+0x18a>
 800a194:	065f      	lsls	r7, r3, #25
 800a196:	bf48      	it	mi
 800a198:	b2ad      	uxthmi	r5, r5
 800a19a:	6031      	str	r1, [r6, #0]
 800a19c:	07d9      	lsls	r1, r3, #31
 800a19e:	bf44      	itt	mi
 800a1a0:	f043 0320 	orrmi.w	r3, r3, #32
 800a1a4:	6023      	strmi	r3, [r4, #0]
 800a1a6:	b11d      	cbz	r5, 800a1b0 <_printf_i+0x1a0>
 800a1a8:	2310      	movs	r3, #16
 800a1aa:	e7ab      	b.n	800a104 <_printf_i+0xf4>
 800a1ac:	4826      	ldr	r0, [pc, #152]	@ (800a248 <_printf_i+0x238>)
 800a1ae:	e7e9      	b.n	800a184 <_printf_i+0x174>
 800a1b0:	6823      	ldr	r3, [r4, #0]
 800a1b2:	f023 0320 	bic.w	r3, r3, #32
 800a1b6:	6023      	str	r3, [r4, #0]
 800a1b8:	e7f6      	b.n	800a1a8 <_printf_i+0x198>
 800a1ba:	4616      	mov	r6, r2
 800a1bc:	e7bd      	b.n	800a13a <_printf_i+0x12a>
 800a1be:	6833      	ldr	r3, [r6, #0]
 800a1c0:	6825      	ldr	r5, [r4, #0]
 800a1c2:	1d18      	adds	r0, r3, #4
 800a1c4:	6961      	ldr	r1, [r4, #20]
 800a1c6:	6030      	str	r0, [r6, #0]
 800a1c8:	062e      	lsls	r6, r5, #24
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	d501      	bpl.n	800a1d2 <_printf_i+0x1c2>
 800a1ce:	6019      	str	r1, [r3, #0]
 800a1d0:	e002      	b.n	800a1d8 <_printf_i+0x1c8>
 800a1d2:	0668      	lsls	r0, r5, #25
 800a1d4:	d5fb      	bpl.n	800a1ce <_printf_i+0x1be>
 800a1d6:	8019      	strh	r1, [r3, #0]
 800a1d8:	2300      	movs	r3, #0
 800a1da:	4616      	mov	r6, r2
 800a1dc:	6123      	str	r3, [r4, #16]
 800a1de:	e7bc      	b.n	800a15a <_printf_i+0x14a>
 800a1e0:	6833      	ldr	r3, [r6, #0]
 800a1e2:	2100      	movs	r1, #0
 800a1e4:	1d1a      	adds	r2, r3, #4
 800a1e6:	6032      	str	r2, [r6, #0]
 800a1e8:	681e      	ldr	r6, [r3, #0]
 800a1ea:	6862      	ldr	r2, [r4, #4]
 800a1ec:	4630      	mov	r0, r6
 800a1ee:	f000 fa36 	bl	800a65e <memchr>
 800a1f2:	b108      	cbz	r0, 800a1f8 <_printf_i+0x1e8>
 800a1f4:	1b80      	subs	r0, r0, r6
 800a1f6:	6060      	str	r0, [r4, #4]
 800a1f8:	6863      	ldr	r3, [r4, #4]
 800a1fa:	6123      	str	r3, [r4, #16]
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a202:	e7aa      	b.n	800a15a <_printf_i+0x14a>
 800a204:	4632      	mov	r2, r6
 800a206:	4649      	mov	r1, r9
 800a208:	4640      	mov	r0, r8
 800a20a:	6923      	ldr	r3, [r4, #16]
 800a20c:	47d0      	blx	sl
 800a20e:	3001      	adds	r0, #1
 800a210:	d0ad      	beq.n	800a16e <_printf_i+0x15e>
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	079b      	lsls	r3, r3, #30
 800a216:	d413      	bmi.n	800a240 <_printf_i+0x230>
 800a218:	68e0      	ldr	r0, [r4, #12]
 800a21a:	9b03      	ldr	r3, [sp, #12]
 800a21c:	4298      	cmp	r0, r3
 800a21e:	bfb8      	it	lt
 800a220:	4618      	movlt	r0, r3
 800a222:	e7a6      	b.n	800a172 <_printf_i+0x162>
 800a224:	2301      	movs	r3, #1
 800a226:	4632      	mov	r2, r6
 800a228:	4649      	mov	r1, r9
 800a22a:	4640      	mov	r0, r8
 800a22c:	47d0      	blx	sl
 800a22e:	3001      	adds	r0, #1
 800a230:	d09d      	beq.n	800a16e <_printf_i+0x15e>
 800a232:	3501      	adds	r5, #1
 800a234:	68e3      	ldr	r3, [r4, #12]
 800a236:	9903      	ldr	r1, [sp, #12]
 800a238:	1a5b      	subs	r3, r3, r1
 800a23a:	42ab      	cmp	r3, r5
 800a23c:	dcf2      	bgt.n	800a224 <_printf_i+0x214>
 800a23e:	e7eb      	b.n	800a218 <_printf_i+0x208>
 800a240:	2500      	movs	r5, #0
 800a242:	f104 0619 	add.w	r6, r4, #25
 800a246:	e7f5      	b.n	800a234 <_printf_i+0x224>
 800a248:	0800d488 	.word	0x0800d488
 800a24c:	0800d499 	.word	0x0800d499

0800a250 <std>:
 800a250:	2300      	movs	r3, #0
 800a252:	b510      	push	{r4, lr}
 800a254:	4604      	mov	r4, r0
 800a256:	e9c0 3300 	strd	r3, r3, [r0]
 800a25a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a25e:	6083      	str	r3, [r0, #8]
 800a260:	8181      	strh	r1, [r0, #12]
 800a262:	6643      	str	r3, [r0, #100]	@ 0x64
 800a264:	81c2      	strh	r2, [r0, #14]
 800a266:	6183      	str	r3, [r0, #24]
 800a268:	4619      	mov	r1, r3
 800a26a:	2208      	movs	r2, #8
 800a26c:	305c      	adds	r0, #92	@ 0x5c
 800a26e:	f000 f954 	bl	800a51a <memset>
 800a272:	4b0d      	ldr	r3, [pc, #52]	@ (800a2a8 <std+0x58>)
 800a274:	6224      	str	r4, [r4, #32]
 800a276:	6263      	str	r3, [r4, #36]	@ 0x24
 800a278:	4b0c      	ldr	r3, [pc, #48]	@ (800a2ac <std+0x5c>)
 800a27a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a27c:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b0 <std+0x60>)
 800a27e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800a280:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b4 <std+0x64>)
 800a282:	6323      	str	r3, [r4, #48]	@ 0x30
 800a284:	4b0c      	ldr	r3, [pc, #48]	@ (800a2b8 <std+0x68>)
 800a286:	429c      	cmp	r4, r3
 800a288:	d006      	beq.n	800a298 <std+0x48>
 800a28a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800a28e:	4294      	cmp	r4, r2
 800a290:	d002      	beq.n	800a298 <std+0x48>
 800a292:	33d0      	adds	r3, #208	@ 0xd0
 800a294:	429c      	cmp	r4, r3
 800a296:	d105      	bne.n	800a2a4 <std+0x54>
 800a298:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800a29c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a0:	f000 b9da 	b.w	800a658 <__retarget_lock_init_recursive>
 800a2a4:	bd10      	pop	{r4, pc}
 800a2a6:	bf00      	nop
 800a2a8:	0800a491 	.word	0x0800a491
 800a2ac:	0800a4b7 	.word	0x0800a4b7
 800a2b0:	0800a4ef 	.word	0x0800a4ef
 800a2b4:	0800a513 	.word	0x0800a513
 800a2b8:	20001be8 	.word	0x20001be8

0800a2bc <stdio_exit_handler>:
 800a2bc:	4a02      	ldr	r2, [pc, #8]	@ (800a2c8 <stdio_exit_handler+0xc>)
 800a2be:	4903      	ldr	r1, [pc, #12]	@ (800a2cc <stdio_exit_handler+0x10>)
 800a2c0:	4803      	ldr	r0, [pc, #12]	@ (800a2d0 <stdio_exit_handler+0x14>)
 800a2c2:	f000 b869 	b.w	800a398 <_fwalk_sglue>
 800a2c6:	bf00      	nop
 800a2c8:	20000010 	.word	0x20000010
 800a2cc:	0800c611 	.word	0x0800c611
 800a2d0:	20000020 	.word	0x20000020

0800a2d4 <cleanup_stdio>:
 800a2d4:	6841      	ldr	r1, [r0, #4]
 800a2d6:	4b0c      	ldr	r3, [pc, #48]	@ (800a308 <cleanup_stdio+0x34>)
 800a2d8:	b510      	push	{r4, lr}
 800a2da:	4299      	cmp	r1, r3
 800a2dc:	4604      	mov	r4, r0
 800a2de:	d001      	beq.n	800a2e4 <cleanup_stdio+0x10>
 800a2e0:	f002 f996 	bl	800c610 <_fflush_r>
 800a2e4:	68a1      	ldr	r1, [r4, #8]
 800a2e6:	4b09      	ldr	r3, [pc, #36]	@ (800a30c <cleanup_stdio+0x38>)
 800a2e8:	4299      	cmp	r1, r3
 800a2ea:	d002      	beq.n	800a2f2 <cleanup_stdio+0x1e>
 800a2ec:	4620      	mov	r0, r4
 800a2ee:	f002 f98f 	bl	800c610 <_fflush_r>
 800a2f2:	68e1      	ldr	r1, [r4, #12]
 800a2f4:	4b06      	ldr	r3, [pc, #24]	@ (800a310 <cleanup_stdio+0x3c>)
 800a2f6:	4299      	cmp	r1, r3
 800a2f8:	d004      	beq.n	800a304 <cleanup_stdio+0x30>
 800a2fa:	4620      	mov	r0, r4
 800a2fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a300:	f002 b986 	b.w	800c610 <_fflush_r>
 800a304:	bd10      	pop	{r4, pc}
 800a306:	bf00      	nop
 800a308:	20001be8 	.word	0x20001be8
 800a30c:	20001c50 	.word	0x20001c50
 800a310:	20001cb8 	.word	0x20001cb8

0800a314 <global_stdio_init.part.0>:
 800a314:	b510      	push	{r4, lr}
 800a316:	4b0b      	ldr	r3, [pc, #44]	@ (800a344 <global_stdio_init.part.0+0x30>)
 800a318:	4c0b      	ldr	r4, [pc, #44]	@ (800a348 <global_stdio_init.part.0+0x34>)
 800a31a:	4a0c      	ldr	r2, [pc, #48]	@ (800a34c <global_stdio_init.part.0+0x38>)
 800a31c:	4620      	mov	r0, r4
 800a31e:	601a      	str	r2, [r3, #0]
 800a320:	2104      	movs	r1, #4
 800a322:	2200      	movs	r2, #0
 800a324:	f7ff ff94 	bl	800a250 <std>
 800a328:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800a32c:	2201      	movs	r2, #1
 800a32e:	2109      	movs	r1, #9
 800a330:	f7ff ff8e 	bl	800a250 <std>
 800a334:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800a338:	2202      	movs	r2, #2
 800a33a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a33e:	2112      	movs	r1, #18
 800a340:	f7ff bf86 	b.w	800a250 <std>
 800a344:	20001d20 	.word	0x20001d20
 800a348:	20001be8 	.word	0x20001be8
 800a34c:	0800a2bd 	.word	0x0800a2bd

0800a350 <__sfp_lock_acquire>:
 800a350:	4801      	ldr	r0, [pc, #4]	@ (800a358 <__sfp_lock_acquire+0x8>)
 800a352:	f000 b982 	b.w	800a65a <__retarget_lock_acquire_recursive>
 800a356:	bf00      	nop
 800a358:	20001d29 	.word	0x20001d29

0800a35c <__sfp_lock_release>:
 800a35c:	4801      	ldr	r0, [pc, #4]	@ (800a364 <__sfp_lock_release+0x8>)
 800a35e:	f000 b97d 	b.w	800a65c <__retarget_lock_release_recursive>
 800a362:	bf00      	nop
 800a364:	20001d29 	.word	0x20001d29

0800a368 <__sinit>:
 800a368:	b510      	push	{r4, lr}
 800a36a:	4604      	mov	r4, r0
 800a36c:	f7ff fff0 	bl	800a350 <__sfp_lock_acquire>
 800a370:	6a23      	ldr	r3, [r4, #32]
 800a372:	b11b      	cbz	r3, 800a37c <__sinit+0x14>
 800a374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a378:	f7ff bff0 	b.w	800a35c <__sfp_lock_release>
 800a37c:	4b04      	ldr	r3, [pc, #16]	@ (800a390 <__sinit+0x28>)
 800a37e:	6223      	str	r3, [r4, #32]
 800a380:	4b04      	ldr	r3, [pc, #16]	@ (800a394 <__sinit+0x2c>)
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	2b00      	cmp	r3, #0
 800a386:	d1f5      	bne.n	800a374 <__sinit+0xc>
 800a388:	f7ff ffc4 	bl	800a314 <global_stdio_init.part.0>
 800a38c:	e7f2      	b.n	800a374 <__sinit+0xc>
 800a38e:	bf00      	nop
 800a390:	0800a2d5 	.word	0x0800a2d5
 800a394:	20001d20 	.word	0x20001d20

0800a398 <_fwalk_sglue>:
 800a398:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a39c:	4607      	mov	r7, r0
 800a39e:	4688      	mov	r8, r1
 800a3a0:	4614      	mov	r4, r2
 800a3a2:	2600      	movs	r6, #0
 800a3a4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a3a8:	f1b9 0901 	subs.w	r9, r9, #1
 800a3ac:	d505      	bpl.n	800a3ba <_fwalk_sglue+0x22>
 800a3ae:	6824      	ldr	r4, [r4, #0]
 800a3b0:	2c00      	cmp	r4, #0
 800a3b2:	d1f7      	bne.n	800a3a4 <_fwalk_sglue+0xc>
 800a3b4:	4630      	mov	r0, r6
 800a3b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3ba:	89ab      	ldrh	r3, [r5, #12]
 800a3bc:	2b01      	cmp	r3, #1
 800a3be:	d907      	bls.n	800a3d0 <_fwalk_sglue+0x38>
 800a3c0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	d003      	beq.n	800a3d0 <_fwalk_sglue+0x38>
 800a3c8:	4629      	mov	r1, r5
 800a3ca:	4638      	mov	r0, r7
 800a3cc:	47c0      	blx	r8
 800a3ce:	4306      	orrs	r6, r0
 800a3d0:	3568      	adds	r5, #104	@ 0x68
 800a3d2:	e7e9      	b.n	800a3a8 <_fwalk_sglue+0x10>

0800a3d4 <sniprintf>:
 800a3d4:	b40c      	push	{r2, r3}
 800a3d6:	b530      	push	{r4, r5, lr}
 800a3d8:	4b17      	ldr	r3, [pc, #92]	@ (800a438 <sniprintf+0x64>)
 800a3da:	1e0c      	subs	r4, r1, #0
 800a3dc:	681d      	ldr	r5, [r3, #0]
 800a3de:	b09d      	sub	sp, #116	@ 0x74
 800a3e0:	da08      	bge.n	800a3f4 <sniprintf+0x20>
 800a3e2:	238b      	movs	r3, #139	@ 0x8b
 800a3e4:	f04f 30ff 	mov.w	r0, #4294967295
 800a3e8:	602b      	str	r3, [r5, #0]
 800a3ea:	b01d      	add	sp, #116	@ 0x74
 800a3ec:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a3f0:	b002      	add	sp, #8
 800a3f2:	4770      	bx	lr
 800a3f4:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800a3f8:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3fc:	bf0c      	ite	eq
 800a3fe:	4623      	moveq	r3, r4
 800a400:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a404:	9304      	str	r3, [sp, #16]
 800a406:	9307      	str	r3, [sp, #28]
 800a408:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a40c:	9002      	str	r0, [sp, #8]
 800a40e:	9006      	str	r0, [sp, #24]
 800a410:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a414:	4628      	mov	r0, r5
 800a416:	ab21      	add	r3, sp, #132	@ 0x84
 800a418:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800a41a:	a902      	add	r1, sp, #8
 800a41c:	9301      	str	r3, [sp, #4]
 800a41e:	f001 fc65 	bl	800bcec <_svfiprintf_r>
 800a422:	1c43      	adds	r3, r0, #1
 800a424:	bfbc      	itt	lt
 800a426:	238b      	movlt	r3, #139	@ 0x8b
 800a428:	602b      	strlt	r3, [r5, #0]
 800a42a:	2c00      	cmp	r4, #0
 800a42c:	d0dd      	beq.n	800a3ea <sniprintf+0x16>
 800a42e:	2200      	movs	r2, #0
 800a430:	9b02      	ldr	r3, [sp, #8]
 800a432:	701a      	strb	r2, [r3, #0]
 800a434:	e7d9      	b.n	800a3ea <sniprintf+0x16>
 800a436:	bf00      	nop
 800a438:	2000001c 	.word	0x2000001c

0800a43c <siscanf>:
 800a43c:	b40e      	push	{r1, r2, r3}
 800a43e:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800a442:	b530      	push	{r4, r5, lr}
 800a444:	b09c      	sub	sp, #112	@ 0x70
 800a446:	ac1f      	add	r4, sp, #124	@ 0x7c
 800a448:	f854 5b04 	ldr.w	r5, [r4], #4
 800a44c:	f8ad 2014 	strh.w	r2, [sp, #20]
 800a450:	9002      	str	r0, [sp, #8]
 800a452:	9006      	str	r0, [sp, #24]
 800a454:	f7f5 fe86 	bl	8000164 <strlen>
 800a458:	4b0b      	ldr	r3, [pc, #44]	@ (800a488 <siscanf+0x4c>)
 800a45a:	9003      	str	r0, [sp, #12]
 800a45c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a45e:	2300      	movs	r3, #0
 800a460:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a462:	9314      	str	r3, [sp, #80]	@ 0x50
 800a464:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800a468:	9007      	str	r0, [sp, #28]
 800a46a:	4808      	ldr	r0, [pc, #32]	@ (800a48c <siscanf+0x50>)
 800a46c:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a470:	462a      	mov	r2, r5
 800a472:	4623      	mov	r3, r4
 800a474:	a902      	add	r1, sp, #8
 800a476:	6800      	ldr	r0, [r0, #0]
 800a478:	9401      	str	r4, [sp, #4]
 800a47a:	f001 fd8b 	bl	800bf94 <__ssvfiscanf_r>
 800a47e:	b01c      	add	sp, #112	@ 0x70
 800a480:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a484:	b003      	add	sp, #12
 800a486:	4770      	bx	lr
 800a488:	0800a4b3 	.word	0x0800a4b3
 800a48c:	2000001c 	.word	0x2000001c

0800a490 <__sread>:
 800a490:	b510      	push	{r4, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a498:	f000 f890 	bl	800a5bc <_read_r>
 800a49c:	2800      	cmp	r0, #0
 800a49e:	bfab      	itete	ge
 800a4a0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a4a2:	89a3      	ldrhlt	r3, [r4, #12]
 800a4a4:	181b      	addge	r3, r3, r0
 800a4a6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a4aa:	bfac      	ite	ge
 800a4ac:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a4ae:	81a3      	strhlt	r3, [r4, #12]
 800a4b0:	bd10      	pop	{r4, pc}

0800a4b2 <__seofread>:
 800a4b2:	2000      	movs	r0, #0
 800a4b4:	4770      	bx	lr

0800a4b6 <__swrite>:
 800a4b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ba:	461f      	mov	r7, r3
 800a4bc:	898b      	ldrh	r3, [r1, #12]
 800a4be:	4605      	mov	r5, r0
 800a4c0:	05db      	lsls	r3, r3, #23
 800a4c2:	460c      	mov	r4, r1
 800a4c4:	4616      	mov	r6, r2
 800a4c6:	d505      	bpl.n	800a4d4 <__swrite+0x1e>
 800a4c8:	2302      	movs	r3, #2
 800a4ca:	2200      	movs	r2, #0
 800a4cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4d0:	f000 f862 	bl	800a598 <_lseek_r>
 800a4d4:	89a3      	ldrh	r3, [r4, #12]
 800a4d6:	4632      	mov	r2, r6
 800a4d8:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a4dc:	81a3      	strh	r3, [r4, #12]
 800a4de:	4628      	mov	r0, r5
 800a4e0:	463b      	mov	r3, r7
 800a4e2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a4e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a4ea:	f000 b879 	b.w	800a5e0 <_write_r>

0800a4ee <__sseek>:
 800a4ee:	b510      	push	{r4, lr}
 800a4f0:	460c      	mov	r4, r1
 800a4f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a4f6:	f000 f84f 	bl	800a598 <_lseek_r>
 800a4fa:	1c43      	adds	r3, r0, #1
 800a4fc:	89a3      	ldrh	r3, [r4, #12]
 800a4fe:	bf15      	itete	ne
 800a500:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a502:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a506:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a50a:	81a3      	strheq	r3, [r4, #12]
 800a50c:	bf18      	it	ne
 800a50e:	81a3      	strhne	r3, [r4, #12]
 800a510:	bd10      	pop	{r4, pc}

0800a512 <__sclose>:
 800a512:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a516:	f000 b82f 	b.w	800a578 <_close_r>

0800a51a <memset>:
 800a51a:	4603      	mov	r3, r0
 800a51c:	4402      	add	r2, r0
 800a51e:	4293      	cmp	r3, r2
 800a520:	d100      	bne.n	800a524 <memset+0xa>
 800a522:	4770      	bx	lr
 800a524:	f803 1b01 	strb.w	r1, [r3], #1
 800a528:	e7f9      	b.n	800a51e <memset+0x4>

0800a52a <strcspn>:
 800a52a:	4603      	mov	r3, r0
 800a52c:	b570      	push	{r4, r5, r6, lr}
 800a52e:	461e      	mov	r6, r3
 800a530:	f813 4b01 	ldrb.w	r4, [r3], #1
 800a534:	b144      	cbz	r4, 800a548 <strcspn+0x1e>
 800a536:	1e4a      	subs	r2, r1, #1
 800a538:	e001      	b.n	800a53e <strcspn+0x14>
 800a53a:	42a5      	cmp	r5, r4
 800a53c:	d004      	beq.n	800a548 <strcspn+0x1e>
 800a53e:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800a542:	2d00      	cmp	r5, #0
 800a544:	d1f9      	bne.n	800a53a <strcspn+0x10>
 800a546:	e7f2      	b.n	800a52e <strcspn+0x4>
 800a548:	1a30      	subs	r0, r6, r0
 800a54a:	bd70      	pop	{r4, r5, r6, pc}

0800a54c <strncmp>:
 800a54c:	b510      	push	{r4, lr}
 800a54e:	b16a      	cbz	r2, 800a56c <strncmp+0x20>
 800a550:	3901      	subs	r1, #1
 800a552:	1884      	adds	r4, r0, r2
 800a554:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a558:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a55c:	429a      	cmp	r2, r3
 800a55e:	d103      	bne.n	800a568 <strncmp+0x1c>
 800a560:	42a0      	cmp	r0, r4
 800a562:	d001      	beq.n	800a568 <strncmp+0x1c>
 800a564:	2a00      	cmp	r2, #0
 800a566:	d1f5      	bne.n	800a554 <strncmp+0x8>
 800a568:	1ad0      	subs	r0, r2, r3
 800a56a:	bd10      	pop	{r4, pc}
 800a56c:	4610      	mov	r0, r2
 800a56e:	e7fc      	b.n	800a56a <strncmp+0x1e>

0800a570 <_localeconv_r>:
 800a570:	4800      	ldr	r0, [pc, #0]	@ (800a574 <_localeconv_r+0x4>)
 800a572:	4770      	bx	lr
 800a574:	2000015c 	.word	0x2000015c

0800a578 <_close_r>:
 800a578:	b538      	push	{r3, r4, r5, lr}
 800a57a:	2300      	movs	r3, #0
 800a57c:	4d05      	ldr	r5, [pc, #20]	@ (800a594 <_close_r+0x1c>)
 800a57e:	4604      	mov	r4, r0
 800a580:	4608      	mov	r0, r1
 800a582:	602b      	str	r3, [r5, #0]
 800a584:	f7f7 fe21 	bl	80021ca <_close>
 800a588:	1c43      	adds	r3, r0, #1
 800a58a:	d102      	bne.n	800a592 <_close_r+0x1a>
 800a58c:	682b      	ldr	r3, [r5, #0]
 800a58e:	b103      	cbz	r3, 800a592 <_close_r+0x1a>
 800a590:	6023      	str	r3, [r4, #0]
 800a592:	bd38      	pop	{r3, r4, r5, pc}
 800a594:	20001d24 	.word	0x20001d24

0800a598 <_lseek_r>:
 800a598:	b538      	push	{r3, r4, r5, lr}
 800a59a:	4604      	mov	r4, r0
 800a59c:	4608      	mov	r0, r1
 800a59e:	4611      	mov	r1, r2
 800a5a0:	2200      	movs	r2, #0
 800a5a2:	4d05      	ldr	r5, [pc, #20]	@ (800a5b8 <_lseek_r+0x20>)
 800a5a4:	602a      	str	r2, [r5, #0]
 800a5a6:	461a      	mov	r2, r3
 800a5a8:	f7f7 fe33 	bl	8002212 <_lseek>
 800a5ac:	1c43      	adds	r3, r0, #1
 800a5ae:	d102      	bne.n	800a5b6 <_lseek_r+0x1e>
 800a5b0:	682b      	ldr	r3, [r5, #0]
 800a5b2:	b103      	cbz	r3, 800a5b6 <_lseek_r+0x1e>
 800a5b4:	6023      	str	r3, [r4, #0]
 800a5b6:	bd38      	pop	{r3, r4, r5, pc}
 800a5b8:	20001d24 	.word	0x20001d24

0800a5bc <_read_r>:
 800a5bc:	b538      	push	{r3, r4, r5, lr}
 800a5be:	4604      	mov	r4, r0
 800a5c0:	4608      	mov	r0, r1
 800a5c2:	4611      	mov	r1, r2
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	4d05      	ldr	r5, [pc, #20]	@ (800a5dc <_read_r+0x20>)
 800a5c8:	602a      	str	r2, [r5, #0]
 800a5ca:	461a      	mov	r2, r3
 800a5cc:	f7f7 fdc4 	bl	8002158 <_read>
 800a5d0:	1c43      	adds	r3, r0, #1
 800a5d2:	d102      	bne.n	800a5da <_read_r+0x1e>
 800a5d4:	682b      	ldr	r3, [r5, #0]
 800a5d6:	b103      	cbz	r3, 800a5da <_read_r+0x1e>
 800a5d8:	6023      	str	r3, [r4, #0]
 800a5da:	bd38      	pop	{r3, r4, r5, pc}
 800a5dc:	20001d24 	.word	0x20001d24

0800a5e0 <_write_r>:
 800a5e0:	b538      	push	{r3, r4, r5, lr}
 800a5e2:	4604      	mov	r4, r0
 800a5e4:	4608      	mov	r0, r1
 800a5e6:	4611      	mov	r1, r2
 800a5e8:	2200      	movs	r2, #0
 800a5ea:	4d05      	ldr	r5, [pc, #20]	@ (800a600 <_write_r+0x20>)
 800a5ec:	602a      	str	r2, [r5, #0]
 800a5ee:	461a      	mov	r2, r3
 800a5f0:	f7f7 fdcf 	bl	8002192 <_write>
 800a5f4:	1c43      	adds	r3, r0, #1
 800a5f6:	d102      	bne.n	800a5fe <_write_r+0x1e>
 800a5f8:	682b      	ldr	r3, [r5, #0]
 800a5fa:	b103      	cbz	r3, 800a5fe <_write_r+0x1e>
 800a5fc:	6023      	str	r3, [r4, #0]
 800a5fe:	bd38      	pop	{r3, r4, r5, pc}
 800a600:	20001d24 	.word	0x20001d24

0800a604 <__errno>:
 800a604:	4b01      	ldr	r3, [pc, #4]	@ (800a60c <__errno+0x8>)
 800a606:	6818      	ldr	r0, [r3, #0]
 800a608:	4770      	bx	lr
 800a60a:	bf00      	nop
 800a60c:	2000001c 	.word	0x2000001c

0800a610 <__libc_init_array>:
 800a610:	b570      	push	{r4, r5, r6, lr}
 800a612:	2600      	movs	r6, #0
 800a614:	4d0c      	ldr	r5, [pc, #48]	@ (800a648 <__libc_init_array+0x38>)
 800a616:	4c0d      	ldr	r4, [pc, #52]	@ (800a64c <__libc_init_array+0x3c>)
 800a618:	1b64      	subs	r4, r4, r5
 800a61a:	10a4      	asrs	r4, r4, #2
 800a61c:	42a6      	cmp	r6, r4
 800a61e:	d109      	bne.n	800a634 <__libc_init_array+0x24>
 800a620:	f002 fce2 	bl	800cfe8 <_init>
 800a624:	2600      	movs	r6, #0
 800a626:	4d0a      	ldr	r5, [pc, #40]	@ (800a650 <__libc_init_array+0x40>)
 800a628:	4c0a      	ldr	r4, [pc, #40]	@ (800a654 <__libc_init_array+0x44>)
 800a62a:	1b64      	subs	r4, r4, r5
 800a62c:	10a4      	asrs	r4, r4, #2
 800a62e:	42a6      	cmp	r6, r4
 800a630:	d105      	bne.n	800a63e <__libc_init_array+0x2e>
 800a632:	bd70      	pop	{r4, r5, r6, pc}
 800a634:	f855 3b04 	ldr.w	r3, [r5], #4
 800a638:	4798      	blx	r3
 800a63a:	3601      	adds	r6, #1
 800a63c:	e7ee      	b.n	800a61c <__libc_init_array+0xc>
 800a63e:	f855 3b04 	ldr.w	r3, [r5], #4
 800a642:	4798      	blx	r3
 800a644:	3601      	adds	r6, #1
 800a646:	e7f2      	b.n	800a62e <__libc_init_array+0x1e>
 800a648:	0800d80c 	.word	0x0800d80c
 800a64c:	0800d80c 	.word	0x0800d80c
 800a650:	0800d80c 	.word	0x0800d80c
 800a654:	0800d814 	.word	0x0800d814

0800a658 <__retarget_lock_init_recursive>:
 800a658:	4770      	bx	lr

0800a65a <__retarget_lock_acquire_recursive>:
 800a65a:	4770      	bx	lr

0800a65c <__retarget_lock_release_recursive>:
 800a65c:	4770      	bx	lr

0800a65e <memchr>:
 800a65e:	4603      	mov	r3, r0
 800a660:	b510      	push	{r4, lr}
 800a662:	b2c9      	uxtb	r1, r1
 800a664:	4402      	add	r2, r0
 800a666:	4293      	cmp	r3, r2
 800a668:	4618      	mov	r0, r3
 800a66a:	d101      	bne.n	800a670 <memchr+0x12>
 800a66c:	2000      	movs	r0, #0
 800a66e:	e003      	b.n	800a678 <memchr+0x1a>
 800a670:	7804      	ldrb	r4, [r0, #0]
 800a672:	3301      	adds	r3, #1
 800a674:	428c      	cmp	r4, r1
 800a676:	d1f6      	bne.n	800a666 <memchr+0x8>
 800a678:	bd10      	pop	{r4, pc}

0800a67a <memcpy>:
 800a67a:	440a      	add	r2, r1
 800a67c:	4291      	cmp	r1, r2
 800a67e:	f100 33ff 	add.w	r3, r0, #4294967295
 800a682:	d100      	bne.n	800a686 <memcpy+0xc>
 800a684:	4770      	bx	lr
 800a686:	b510      	push	{r4, lr}
 800a688:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a68c:	4291      	cmp	r1, r2
 800a68e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a692:	d1f9      	bne.n	800a688 <memcpy+0xe>
 800a694:	bd10      	pop	{r4, pc}

0800a696 <quorem>:
 800a696:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a69a:	6903      	ldr	r3, [r0, #16]
 800a69c:	690c      	ldr	r4, [r1, #16]
 800a69e:	4607      	mov	r7, r0
 800a6a0:	42a3      	cmp	r3, r4
 800a6a2:	db7e      	blt.n	800a7a2 <quorem+0x10c>
 800a6a4:	3c01      	subs	r4, #1
 800a6a6:	00a3      	lsls	r3, r4, #2
 800a6a8:	f100 0514 	add.w	r5, r0, #20
 800a6ac:	f101 0814 	add.w	r8, r1, #20
 800a6b0:	9300      	str	r3, [sp, #0]
 800a6b2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a6b6:	9301      	str	r3, [sp, #4]
 800a6b8:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a6bc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a6c0:	3301      	adds	r3, #1
 800a6c2:	429a      	cmp	r2, r3
 800a6c4:	fbb2 f6f3 	udiv	r6, r2, r3
 800a6c8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a6cc:	d32e      	bcc.n	800a72c <quorem+0x96>
 800a6ce:	f04f 0a00 	mov.w	sl, #0
 800a6d2:	46c4      	mov	ip, r8
 800a6d4:	46ae      	mov	lr, r5
 800a6d6:	46d3      	mov	fp, sl
 800a6d8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a6dc:	b298      	uxth	r0, r3
 800a6de:	fb06 a000 	mla	r0, r6, r0, sl
 800a6e2:	0c1b      	lsrs	r3, r3, #16
 800a6e4:	0c02      	lsrs	r2, r0, #16
 800a6e6:	fb06 2303 	mla	r3, r6, r3, r2
 800a6ea:	f8de 2000 	ldr.w	r2, [lr]
 800a6ee:	b280      	uxth	r0, r0
 800a6f0:	b292      	uxth	r2, r2
 800a6f2:	1a12      	subs	r2, r2, r0
 800a6f4:	445a      	add	r2, fp
 800a6f6:	f8de 0000 	ldr.w	r0, [lr]
 800a6fa:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a6fe:	b29b      	uxth	r3, r3
 800a700:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800a704:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800a708:	b292      	uxth	r2, r2
 800a70a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800a70e:	45e1      	cmp	r9, ip
 800a710:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800a714:	f84e 2b04 	str.w	r2, [lr], #4
 800a718:	d2de      	bcs.n	800a6d8 <quorem+0x42>
 800a71a:	9b00      	ldr	r3, [sp, #0]
 800a71c:	58eb      	ldr	r3, [r5, r3]
 800a71e:	b92b      	cbnz	r3, 800a72c <quorem+0x96>
 800a720:	9b01      	ldr	r3, [sp, #4]
 800a722:	3b04      	subs	r3, #4
 800a724:	429d      	cmp	r5, r3
 800a726:	461a      	mov	r2, r3
 800a728:	d32f      	bcc.n	800a78a <quorem+0xf4>
 800a72a:	613c      	str	r4, [r7, #16]
 800a72c:	4638      	mov	r0, r7
 800a72e:	f001 f979 	bl	800ba24 <__mcmp>
 800a732:	2800      	cmp	r0, #0
 800a734:	db25      	blt.n	800a782 <quorem+0xec>
 800a736:	4629      	mov	r1, r5
 800a738:	2000      	movs	r0, #0
 800a73a:	f858 2b04 	ldr.w	r2, [r8], #4
 800a73e:	f8d1 c000 	ldr.w	ip, [r1]
 800a742:	fa1f fe82 	uxth.w	lr, r2
 800a746:	fa1f f38c 	uxth.w	r3, ip
 800a74a:	eba3 030e 	sub.w	r3, r3, lr
 800a74e:	4403      	add	r3, r0
 800a750:	0c12      	lsrs	r2, r2, #16
 800a752:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800a756:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800a75a:	b29b      	uxth	r3, r3
 800a75c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a760:	45c1      	cmp	r9, r8
 800a762:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a766:	f841 3b04 	str.w	r3, [r1], #4
 800a76a:	d2e6      	bcs.n	800a73a <quorem+0xa4>
 800a76c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a770:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a774:	b922      	cbnz	r2, 800a780 <quorem+0xea>
 800a776:	3b04      	subs	r3, #4
 800a778:	429d      	cmp	r5, r3
 800a77a:	461a      	mov	r2, r3
 800a77c:	d30b      	bcc.n	800a796 <quorem+0x100>
 800a77e:	613c      	str	r4, [r7, #16]
 800a780:	3601      	adds	r6, #1
 800a782:	4630      	mov	r0, r6
 800a784:	b003      	add	sp, #12
 800a786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a78a:	6812      	ldr	r2, [r2, #0]
 800a78c:	3b04      	subs	r3, #4
 800a78e:	2a00      	cmp	r2, #0
 800a790:	d1cb      	bne.n	800a72a <quorem+0x94>
 800a792:	3c01      	subs	r4, #1
 800a794:	e7c6      	b.n	800a724 <quorem+0x8e>
 800a796:	6812      	ldr	r2, [r2, #0]
 800a798:	3b04      	subs	r3, #4
 800a79a:	2a00      	cmp	r2, #0
 800a79c:	d1ef      	bne.n	800a77e <quorem+0xe8>
 800a79e:	3c01      	subs	r4, #1
 800a7a0:	e7ea      	b.n	800a778 <quorem+0xe2>
 800a7a2:	2000      	movs	r0, #0
 800a7a4:	e7ee      	b.n	800a784 <quorem+0xee>
	...

0800a7a8 <_dtoa_r>:
 800a7a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7ac:	4614      	mov	r4, r2
 800a7ae:	461d      	mov	r5, r3
 800a7b0:	69c7      	ldr	r7, [r0, #28]
 800a7b2:	b097      	sub	sp, #92	@ 0x5c
 800a7b4:	4683      	mov	fp, r0
 800a7b6:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800a7ba:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800a7bc:	b97f      	cbnz	r7, 800a7de <_dtoa_r+0x36>
 800a7be:	2010      	movs	r0, #16
 800a7c0:	f000 fe02 	bl	800b3c8 <malloc>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	f8cb 001c 	str.w	r0, [fp, #28]
 800a7ca:	b920      	cbnz	r0, 800a7d6 <_dtoa_r+0x2e>
 800a7cc:	21ef      	movs	r1, #239	@ 0xef
 800a7ce:	4ba8      	ldr	r3, [pc, #672]	@ (800aa70 <_dtoa_r+0x2c8>)
 800a7d0:	48a8      	ldr	r0, [pc, #672]	@ (800aa74 <_dtoa_r+0x2cc>)
 800a7d2:	f001 ffe1 	bl	800c798 <__assert_func>
 800a7d6:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800a7da:	6007      	str	r7, [r0, #0]
 800a7dc:	60c7      	str	r7, [r0, #12]
 800a7de:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7e2:	6819      	ldr	r1, [r3, #0]
 800a7e4:	b159      	cbz	r1, 800a7fe <_dtoa_r+0x56>
 800a7e6:	685a      	ldr	r2, [r3, #4]
 800a7e8:	2301      	movs	r3, #1
 800a7ea:	4093      	lsls	r3, r2
 800a7ec:	604a      	str	r2, [r1, #4]
 800a7ee:	608b      	str	r3, [r1, #8]
 800a7f0:	4658      	mov	r0, fp
 800a7f2:	f000 fedf 	bl	800b5b4 <_Bfree>
 800a7f6:	2200      	movs	r2, #0
 800a7f8:	f8db 301c 	ldr.w	r3, [fp, #28]
 800a7fc:	601a      	str	r2, [r3, #0]
 800a7fe:	1e2b      	subs	r3, r5, #0
 800a800:	bfaf      	iteee	ge
 800a802:	2300      	movge	r3, #0
 800a804:	2201      	movlt	r2, #1
 800a806:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800a80a:	9303      	strlt	r3, [sp, #12]
 800a80c:	bfa8      	it	ge
 800a80e:	6033      	strge	r3, [r6, #0]
 800a810:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a814:	4b98      	ldr	r3, [pc, #608]	@ (800aa78 <_dtoa_r+0x2d0>)
 800a816:	bfb8      	it	lt
 800a818:	6032      	strlt	r2, [r6, #0]
 800a81a:	ea33 0308 	bics.w	r3, r3, r8
 800a81e:	d112      	bne.n	800a846 <_dtoa_r+0x9e>
 800a820:	f242 730f 	movw	r3, #9999	@ 0x270f
 800a824:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a826:	6013      	str	r3, [r2, #0]
 800a828:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a82c:	4323      	orrs	r3, r4
 800a82e:	f000 8550 	beq.w	800b2d2 <_dtoa_r+0xb2a>
 800a832:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a834:	f8df a244 	ldr.w	sl, [pc, #580]	@ 800aa7c <_dtoa_r+0x2d4>
 800a838:	2b00      	cmp	r3, #0
 800a83a:	f000 8552 	beq.w	800b2e2 <_dtoa_r+0xb3a>
 800a83e:	f10a 0303 	add.w	r3, sl, #3
 800a842:	f000 bd4c 	b.w	800b2de <_dtoa_r+0xb36>
 800a846:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800a84a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a84e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a852:	2200      	movs	r2, #0
 800a854:	2300      	movs	r3, #0
 800a856:	f7f6 f8b1 	bl	80009bc <__aeabi_dcmpeq>
 800a85a:	4607      	mov	r7, r0
 800a85c:	b158      	cbz	r0, 800a876 <_dtoa_r+0xce>
 800a85e:	2301      	movs	r3, #1
 800a860:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 800a862:	6013      	str	r3, [r2, #0]
 800a864:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800a866:	b113      	cbz	r3, 800a86e <_dtoa_r+0xc6>
 800a868:	4b85      	ldr	r3, [pc, #532]	@ (800aa80 <_dtoa_r+0x2d8>)
 800a86a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800a86c:	6013      	str	r3, [r2, #0]
 800a86e:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800aa84 <_dtoa_r+0x2dc>
 800a872:	f000 bd36 	b.w	800b2e2 <_dtoa_r+0xb3a>
 800a876:	ab14      	add	r3, sp, #80	@ 0x50
 800a878:	9301      	str	r3, [sp, #4]
 800a87a:	ab15      	add	r3, sp, #84	@ 0x54
 800a87c:	9300      	str	r3, [sp, #0]
 800a87e:	4658      	mov	r0, fp
 800a880:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a884:	f001 f97e 	bl	800bb84 <__d2b>
 800a888:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800a88c:	4681      	mov	r9, r0
 800a88e:	2e00      	cmp	r6, #0
 800a890:	d077      	beq.n	800a982 <_dtoa_r+0x1da>
 800a892:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a896:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800a898:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800a89c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a8a0:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800a8a4:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800a8a8:	9712      	str	r7, [sp, #72]	@ 0x48
 800a8aa:	4619      	mov	r1, r3
 800a8ac:	2200      	movs	r2, #0
 800a8ae:	4b76      	ldr	r3, [pc, #472]	@ (800aa88 <_dtoa_r+0x2e0>)
 800a8b0:	f7f5 fc64 	bl	800017c <__aeabi_dsub>
 800a8b4:	a368      	add	r3, pc, #416	@ (adr r3, 800aa58 <_dtoa_r+0x2b0>)
 800a8b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8ba:	f7f5 fe17 	bl	80004ec <__aeabi_dmul>
 800a8be:	a368      	add	r3, pc, #416	@ (adr r3, 800aa60 <_dtoa_r+0x2b8>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fc5c 	bl	8000180 <__adddf3>
 800a8c8:	4604      	mov	r4, r0
 800a8ca:	4630      	mov	r0, r6
 800a8cc:	460d      	mov	r5, r1
 800a8ce:	f7f5 fda3 	bl	8000418 <__aeabi_i2d>
 800a8d2:	a365      	add	r3, pc, #404	@ (adr r3, 800aa68 <_dtoa_r+0x2c0>)
 800a8d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8d8:	f7f5 fe08 	bl	80004ec <__aeabi_dmul>
 800a8dc:	4602      	mov	r2, r0
 800a8de:	460b      	mov	r3, r1
 800a8e0:	4620      	mov	r0, r4
 800a8e2:	4629      	mov	r1, r5
 800a8e4:	f7f5 fc4c 	bl	8000180 <__adddf3>
 800a8e8:	4604      	mov	r4, r0
 800a8ea:	460d      	mov	r5, r1
 800a8ec:	f7f6 f8ae 	bl	8000a4c <__aeabi_d2iz>
 800a8f0:	2200      	movs	r2, #0
 800a8f2:	4607      	mov	r7, r0
 800a8f4:	2300      	movs	r3, #0
 800a8f6:	4620      	mov	r0, r4
 800a8f8:	4629      	mov	r1, r5
 800a8fa:	f7f6 f869 	bl	80009d0 <__aeabi_dcmplt>
 800a8fe:	b140      	cbz	r0, 800a912 <_dtoa_r+0x16a>
 800a900:	4638      	mov	r0, r7
 800a902:	f7f5 fd89 	bl	8000418 <__aeabi_i2d>
 800a906:	4622      	mov	r2, r4
 800a908:	462b      	mov	r3, r5
 800a90a:	f7f6 f857 	bl	80009bc <__aeabi_dcmpeq>
 800a90e:	b900      	cbnz	r0, 800a912 <_dtoa_r+0x16a>
 800a910:	3f01      	subs	r7, #1
 800a912:	2f16      	cmp	r7, #22
 800a914:	d853      	bhi.n	800a9be <_dtoa_r+0x216>
 800a916:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a91a:	4b5c      	ldr	r3, [pc, #368]	@ (800aa8c <_dtoa_r+0x2e4>)
 800a91c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800a920:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a924:	f7f6 f854 	bl	80009d0 <__aeabi_dcmplt>
 800a928:	2800      	cmp	r0, #0
 800a92a:	d04a      	beq.n	800a9c2 <_dtoa_r+0x21a>
 800a92c:	2300      	movs	r3, #0
 800a92e:	3f01      	subs	r7, #1
 800a930:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a932:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800a934:	1b9b      	subs	r3, r3, r6
 800a936:	1e5a      	subs	r2, r3, #1
 800a938:	bf46      	itte	mi
 800a93a:	f1c3 0801 	rsbmi	r8, r3, #1
 800a93e:	2300      	movmi	r3, #0
 800a940:	f04f 0800 	movpl.w	r8, #0
 800a944:	9209      	str	r2, [sp, #36]	@ 0x24
 800a946:	bf48      	it	mi
 800a948:	9309      	strmi	r3, [sp, #36]	@ 0x24
 800a94a:	2f00      	cmp	r7, #0
 800a94c:	db3b      	blt.n	800a9c6 <_dtoa_r+0x21e>
 800a94e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a950:	970e      	str	r7, [sp, #56]	@ 0x38
 800a952:	443b      	add	r3, r7
 800a954:	9309      	str	r3, [sp, #36]	@ 0x24
 800a956:	2300      	movs	r3, #0
 800a958:	930a      	str	r3, [sp, #40]	@ 0x28
 800a95a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a95c:	2b09      	cmp	r3, #9
 800a95e:	d866      	bhi.n	800aa2e <_dtoa_r+0x286>
 800a960:	2b05      	cmp	r3, #5
 800a962:	bfc4      	itt	gt
 800a964:	3b04      	subgt	r3, #4
 800a966:	9320      	strgt	r3, [sp, #128]	@ 0x80
 800a968:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800a96a:	bfc8      	it	gt
 800a96c:	2400      	movgt	r4, #0
 800a96e:	f1a3 0302 	sub.w	r3, r3, #2
 800a972:	bfd8      	it	le
 800a974:	2401      	movle	r4, #1
 800a976:	2b03      	cmp	r3, #3
 800a978:	d864      	bhi.n	800aa44 <_dtoa_r+0x29c>
 800a97a:	e8df f003 	tbb	[pc, r3]
 800a97e:	382b      	.short	0x382b
 800a980:	5636      	.short	0x5636
 800a982:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800a986:	441e      	add	r6, r3
 800a988:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800a98c:	2b20      	cmp	r3, #32
 800a98e:	bfc1      	itttt	gt
 800a990:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800a994:	fa08 f803 	lslgt.w	r8, r8, r3
 800a998:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800a99c:	fa24 f303 	lsrgt.w	r3, r4, r3
 800a9a0:	bfd6      	itet	le
 800a9a2:	f1c3 0320 	rsble	r3, r3, #32
 800a9a6:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9aa:	fa04 f003 	lslle.w	r0, r4, r3
 800a9ae:	f7f5 fd23 	bl	80003f8 <__aeabi_ui2d>
 800a9b2:	2201      	movs	r2, #1
 800a9b4:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800a9b8:	3e01      	subs	r6, #1
 800a9ba:	9212      	str	r2, [sp, #72]	@ 0x48
 800a9bc:	e775      	b.n	800a8aa <_dtoa_r+0x102>
 800a9be:	2301      	movs	r3, #1
 800a9c0:	e7b6      	b.n	800a930 <_dtoa_r+0x188>
 800a9c2:	900f      	str	r0, [sp, #60]	@ 0x3c
 800a9c4:	e7b5      	b.n	800a932 <_dtoa_r+0x18a>
 800a9c6:	427b      	negs	r3, r7
 800a9c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800a9ca:	2300      	movs	r3, #0
 800a9cc:	eba8 0807 	sub.w	r8, r8, r7
 800a9d0:	930e      	str	r3, [sp, #56]	@ 0x38
 800a9d2:	e7c2      	b.n	800a95a <_dtoa_r+0x1b2>
 800a9d4:	2300      	movs	r3, #0
 800a9d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9d8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9da:	2b00      	cmp	r3, #0
 800a9dc:	dc35      	bgt.n	800aa4a <_dtoa_r+0x2a2>
 800a9de:	2301      	movs	r3, #1
 800a9e0:	461a      	mov	r2, r3
 800a9e2:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800a9e6:	9221      	str	r2, [sp, #132]	@ 0x84
 800a9e8:	e00b      	b.n	800aa02 <_dtoa_r+0x25a>
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e7f3      	b.n	800a9d6 <_dtoa_r+0x22e>
 800a9ee:	2300      	movs	r3, #0
 800a9f0:	930b      	str	r3, [sp, #44]	@ 0x2c
 800a9f2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800a9f4:	18fb      	adds	r3, r7, r3
 800a9f6:	9308      	str	r3, [sp, #32]
 800a9f8:	3301      	adds	r3, #1
 800a9fa:	2b01      	cmp	r3, #1
 800a9fc:	9307      	str	r3, [sp, #28]
 800a9fe:	bfb8      	it	lt
 800aa00:	2301      	movlt	r3, #1
 800aa02:	2100      	movs	r1, #0
 800aa04:	2204      	movs	r2, #4
 800aa06:	f8db 001c 	ldr.w	r0, [fp, #28]
 800aa0a:	f102 0514 	add.w	r5, r2, #20
 800aa0e:	429d      	cmp	r5, r3
 800aa10:	d91f      	bls.n	800aa52 <_dtoa_r+0x2aa>
 800aa12:	6041      	str	r1, [r0, #4]
 800aa14:	4658      	mov	r0, fp
 800aa16:	f000 fd8d 	bl	800b534 <_Balloc>
 800aa1a:	4682      	mov	sl, r0
 800aa1c:	2800      	cmp	r0, #0
 800aa1e:	d139      	bne.n	800aa94 <_dtoa_r+0x2ec>
 800aa20:	4602      	mov	r2, r0
 800aa22:	f240 11af 	movw	r1, #431	@ 0x1af
 800aa26:	4b1a      	ldr	r3, [pc, #104]	@ (800aa90 <_dtoa_r+0x2e8>)
 800aa28:	e6d2      	b.n	800a7d0 <_dtoa_r+0x28>
 800aa2a:	2301      	movs	r3, #1
 800aa2c:	e7e0      	b.n	800a9f0 <_dtoa_r+0x248>
 800aa2e:	2401      	movs	r4, #1
 800aa30:	2300      	movs	r3, #0
 800aa32:	940b      	str	r4, [sp, #44]	@ 0x2c
 800aa34:	9320      	str	r3, [sp, #128]	@ 0x80
 800aa36:	f04f 33ff 	mov.w	r3, #4294967295
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aa40:	2312      	movs	r3, #18
 800aa42:	e7d0      	b.n	800a9e6 <_dtoa_r+0x23e>
 800aa44:	2301      	movs	r3, #1
 800aa46:	930b      	str	r3, [sp, #44]	@ 0x2c
 800aa48:	e7f5      	b.n	800aa36 <_dtoa_r+0x28e>
 800aa4a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800aa4c:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800aa50:	e7d7      	b.n	800aa02 <_dtoa_r+0x25a>
 800aa52:	3101      	adds	r1, #1
 800aa54:	0052      	lsls	r2, r2, #1
 800aa56:	e7d8      	b.n	800aa0a <_dtoa_r+0x262>
 800aa58:	636f4361 	.word	0x636f4361
 800aa5c:	3fd287a7 	.word	0x3fd287a7
 800aa60:	8b60c8b3 	.word	0x8b60c8b3
 800aa64:	3fc68a28 	.word	0x3fc68a28
 800aa68:	509f79fb 	.word	0x509f79fb
 800aa6c:	3fd34413 	.word	0x3fd34413
 800aa70:	0800d4b7 	.word	0x0800d4b7
 800aa74:	0800d4ce 	.word	0x0800d4ce
 800aa78:	7ff00000 	.word	0x7ff00000
 800aa7c:	0800d4b3 	.word	0x0800d4b3
 800aa80:	0800d6b8 	.word	0x0800d6b8
 800aa84:	0800d6b7 	.word	0x0800d6b7
 800aa88:	3ff80000 	.word	0x3ff80000
 800aa8c:	0800d5c8 	.word	0x0800d5c8
 800aa90:	0800d526 	.word	0x0800d526
 800aa94:	f8db 301c 	ldr.w	r3, [fp, #28]
 800aa98:	6018      	str	r0, [r3, #0]
 800aa9a:	9b07      	ldr	r3, [sp, #28]
 800aa9c:	2b0e      	cmp	r3, #14
 800aa9e:	f200 80a4 	bhi.w	800abea <_dtoa_r+0x442>
 800aaa2:	2c00      	cmp	r4, #0
 800aaa4:	f000 80a1 	beq.w	800abea <_dtoa_r+0x442>
 800aaa8:	2f00      	cmp	r7, #0
 800aaaa:	dd33      	ble.n	800ab14 <_dtoa_r+0x36c>
 800aaac:	4b86      	ldr	r3, [pc, #536]	@ (800acc8 <_dtoa_r+0x520>)
 800aaae:	f007 020f 	and.w	r2, r7, #15
 800aab2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab6:	05f8      	lsls	r0, r7, #23
 800aab8:	e9d3 3400 	ldrd	r3, r4, [r3]
 800aabc:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800aac0:	ea4f 1427 	mov.w	r4, r7, asr #4
 800aac4:	d516      	bpl.n	800aaf4 <_dtoa_r+0x34c>
 800aac6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800aaca:	4b80      	ldr	r3, [pc, #512]	@ (800accc <_dtoa_r+0x524>)
 800aacc:	2603      	movs	r6, #3
 800aace:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aad2:	f7f5 fe35 	bl	8000740 <__aeabi_ddiv>
 800aad6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aada:	f004 040f 	and.w	r4, r4, #15
 800aade:	4d7b      	ldr	r5, [pc, #492]	@ (800accc <_dtoa_r+0x524>)
 800aae0:	b954      	cbnz	r4, 800aaf8 <_dtoa_r+0x350>
 800aae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aaea:	f7f5 fe29 	bl	8000740 <__aeabi_ddiv>
 800aaee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf2:	e028      	b.n	800ab46 <_dtoa_r+0x39e>
 800aaf4:	2602      	movs	r6, #2
 800aaf6:	e7f2      	b.n	800aade <_dtoa_r+0x336>
 800aaf8:	07e1      	lsls	r1, r4, #31
 800aafa:	d508      	bpl.n	800ab0e <_dtoa_r+0x366>
 800aafc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ab00:	e9d5 2300 	ldrd	r2, r3, [r5]
 800ab04:	f7f5 fcf2 	bl	80004ec <__aeabi_dmul>
 800ab08:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ab0c:	3601      	adds	r6, #1
 800ab0e:	1064      	asrs	r4, r4, #1
 800ab10:	3508      	adds	r5, #8
 800ab12:	e7e5      	b.n	800aae0 <_dtoa_r+0x338>
 800ab14:	f000 80d2 	beq.w	800acbc <_dtoa_r+0x514>
 800ab18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800ab1c:	427c      	negs	r4, r7
 800ab1e:	4b6a      	ldr	r3, [pc, #424]	@ (800acc8 <_dtoa_r+0x520>)
 800ab20:	f004 020f 	and.w	r2, r4, #15
 800ab24:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab2c:	f7f5 fcde 	bl	80004ec <__aeabi_dmul>
 800ab30:	2602      	movs	r6, #2
 800ab32:	2300      	movs	r3, #0
 800ab34:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab38:	4d64      	ldr	r5, [pc, #400]	@ (800accc <_dtoa_r+0x524>)
 800ab3a:	1124      	asrs	r4, r4, #4
 800ab3c:	2c00      	cmp	r4, #0
 800ab3e:	f040 80b2 	bne.w	800aca6 <_dtoa_r+0x4fe>
 800ab42:	2b00      	cmp	r3, #0
 800ab44:	d1d3      	bne.n	800aaee <_dtoa_r+0x346>
 800ab46:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ab4a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800ab4c:	2b00      	cmp	r3, #0
 800ab4e:	f000 80b7 	beq.w	800acc0 <_dtoa_r+0x518>
 800ab52:	2200      	movs	r2, #0
 800ab54:	4620      	mov	r0, r4
 800ab56:	4629      	mov	r1, r5
 800ab58:	4b5d      	ldr	r3, [pc, #372]	@ (800acd0 <_dtoa_r+0x528>)
 800ab5a:	f7f5 ff39 	bl	80009d0 <__aeabi_dcmplt>
 800ab5e:	2800      	cmp	r0, #0
 800ab60:	f000 80ae 	beq.w	800acc0 <_dtoa_r+0x518>
 800ab64:	9b07      	ldr	r3, [sp, #28]
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	f000 80aa 	beq.w	800acc0 <_dtoa_r+0x518>
 800ab6c:	9b08      	ldr	r3, [sp, #32]
 800ab6e:	2b00      	cmp	r3, #0
 800ab70:	dd37      	ble.n	800abe2 <_dtoa_r+0x43a>
 800ab72:	1e7b      	subs	r3, r7, #1
 800ab74:	4620      	mov	r0, r4
 800ab76:	9304      	str	r3, [sp, #16]
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4629      	mov	r1, r5
 800ab7c:	4b55      	ldr	r3, [pc, #340]	@ (800acd4 <_dtoa_r+0x52c>)
 800ab7e:	f7f5 fcb5 	bl	80004ec <__aeabi_dmul>
 800ab82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab86:	9c08      	ldr	r4, [sp, #32]
 800ab88:	3601      	adds	r6, #1
 800ab8a:	4630      	mov	r0, r6
 800ab8c:	f7f5 fc44 	bl	8000418 <__aeabi_i2d>
 800ab90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ab94:	f7f5 fcaa 	bl	80004ec <__aeabi_dmul>
 800ab98:	2200      	movs	r2, #0
 800ab9a:	4b4f      	ldr	r3, [pc, #316]	@ (800acd8 <_dtoa_r+0x530>)
 800ab9c:	f7f5 faf0 	bl	8000180 <__adddf3>
 800aba0:	4605      	mov	r5, r0
 800aba2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800aba6:	2c00      	cmp	r4, #0
 800aba8:	f040 809a 	bne.w	800ace0 <_dtoa_r+0x538>
 800abac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abb0:	2200      	movs	r2, #0
 800abb2:	4b4a      	ldr	r3, [pc, #296]	@ (800acdc <_dtoa_r+0x534>)
 800abb4:	f7f5 fae2 	bl	800017c <__aeabi_dsub>
 800abb8:	4602      	mov	r2, r0
 800abba:	460b      	mov	r3, r1
 800abbc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800abc0:	462a      	mov	r2, r5
 800abc2:	4633      	mov	r3, r6
 800abc4:	f7f5 ff22 	bl	8000a0c <__aeabi_dcmpgt>
 800abc8:	2800      	cmp	r0, #0
 800abca:	f040 828e 	bne.w	800b0ea <_dtoa_r+0x942>
 800abce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800abd2:	462a      	mov	r2, r5
 800abd4:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800abd8:	f7f5 fefa 	bl	80009d0 <__aeabi_dcmplt>
 800abdc:	2800      	cmp	r0, #0
 800abde:	f040 8127 	bne.w	800ae30 <_dtoa_r+0x688>
 800abe2:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800abe6:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800abea:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 800abec:	2b00      	cmp	r3, #0
 800abee:	f2c0 8163 	blt.w	800aeb8 <_dtoa_r+0x710>
 800abf2:	2f0e      	cmp	r7, #14
 800abf4:	f300 8160 	bgt.w	800aeb8 <_dtoa_r+0x710>
 800abf8:	4b33      	ldr	r3, [pc, #204]	@ (800acc8 <_dtoa_r+0x520>)
 800abfa:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800abfe:	e9d3 3400 	ldrd	r3, r4, [r3]
 800ac02:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800ac06:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	da03      	bge.n	800ac14 <_dtoa_r+0x46c>
 800ac0c:	9b07      	ldr	r3, [sp, #28]
 800ac0e:	2b00      	cmp	r3, #0
 800ac10:	f340 8100 	ble.w	800ae14 <_dtoa_r+0x66c>
 800ac14:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800ac18:	4656      	mov	r6, sl
 800ac1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac1e:	4620      	mov	r0, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	f7f5 fd8d 	bl	8000740 <__aeabi_ddiv>
 800ac26:	f7f5 ff11 	bl	8000a4c <__aeabi_d2iz>
 800ac2a:	4680      	mov	r8, r0
 800ac2c:	f7f5 fbf4 	bl	8000418 <__aeabi_i2d>
 800ac30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac34:	f7f5 fc5a 	bl	80004ec <__aeabi_dmul>
 800ac38:	4602      	mov	r2, r0
 800ac3a:	460b      	mov	r3, r1
 800ac3c:	4620      	mov	r0, r4
 800ac3e:	4629      	mov	r1, r5
 800ac40:	f7f5 fa9c 	bl	800017c <__aeabi_dsub>
 800ac44:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800ac48:	9d07      	ldr	r5, [sp, #28]
 800ac4a:	f806 4b01 	strb.w	r4, [r6], #1
 800ac4e:	eba6 040a 	sub.w	r4, r6, sl
 800ac52:	42a5      	cmp	r5, r4
 800ac54:	4602      	mov	r2, r0
 800ac56:	460b      	mov	r3, r1
 800ac58:	f040 8116 	bne.w	800ae88 <_dtoa_r+0x6e0>
 800ac5c:	f7f5 fa90 	bl	8000180 <__adddf3>
 800ac60:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac64:	4604      	mov	r4, r0
 800ac66:	460d      	mov	r5, r1
 800ac68:	f7f5 fed0 	bl	8000a0c <__aeabi_dcmpgt>
 800ac6c:	2800      	cmp	r0, #0
 800ac6e:	f040 80f8 	bne.w	800ae62 <_dtoa_r+0x6ba>
 800ac72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ac76:	4620      	mov	r0, r4
 800ac78:	4629      	mov	r1, r5
 800ac7a:	f7f5 fe9f 	bl	80009bc <__aeabi_dcmpeq>
 800ac7e:	b118      	cbz	r0, 800ac88 <_dtoa_r+0x4e0>
 800ac80:	f018 0f01 	tst.w	r8, #1
 800ac84:	f040 80ed 	bne.w	800ae62 <_dtoa_r+0x6ba>
 800ac88:	4649      	mov	r1, r9
 800ac8a:	4658      	mov	r0, fp
 800ac8c:	f000 fc92 	bl	800b5b4 <_Bfree>
 800ac90:	2300      	movs	r3, #0
 800ac92:	7033      	strb	r3, [r6, #0]
 800ac94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800ac96:	3701      	adds	r7, #1
 800ac98:	601f      	str	r7, [r3, #0]
 800ac9a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800ac9c:	2b00      	cmp	r3, #0
 800ac9e:	f000 8320 	beq.w	800b2e2 <_dtoa_r+0xb3a>
 800aca2:	601e      	str	r6, [r3, #0]
 800aca4:	e31d      	b.n	800b2e2 <_dtoa_r+0xb3a>
 800aca6:	07e2      	lsls	r2, r4, #31
 800aca8:	d505      	bpl.n	800acb6 <_dtoa_r+0x50e>
 800acaa:	e9d5 2300 	ldrd	r2, r3, [r5]
 800acae:	f7f5 fc1d 	bl	80004ec <__aeabi_dmul>
 800acb2:	2301      	movs	r3, #1
 800acb4:	3601      	adds	r6, #1
 800acb6:	1064      	asrs	r4, r4, #1
 800acb8:	3508      	adds	r5, #8
 800acba:	e73f      	b.n	800ab3c <_dtoa_r+0x394>
 800acbc:	2602      	movs	r6, #2
 800acbe:	e742      	b.n	800ab46 <_dtoa_r+0x39e>
 800acc0:	9c07      	ldr	r4, [sp, #28]
 800acc2:	9704      	str	r7, [sp, #16]
 800acc4:	e761      	b.n	800ab8a <_dtoa_r+0x3e2>
 800acc6:	bf00      	nop
 800acc8:	0800d5c8 	.word	0x0800d5c8
 800accc:	0800d5a0 	.word	0x0800d5a0
 800acd0:	3ff00000 	.word	0x3ff00000
 800acd4:	40240000 	.word	0x40240000
 800acd8:	401c0000 	.word	0x401c0000
 800acdc:	40140000 	.word	0x40140000
 800ace0:	4b70      	ldr	r3, [pc, #448]	@ (800aea4 <_dtoa_r+0x6fc>)
 800ace2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ace4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ace8:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800acec:	4454      	add	r4, sl
 800acee:	2900      	cmp	r1, #0
 800acf0:	d045      	beq.n	800ad7e <_dtoa_r+0x5d6>
 800acf2:	2000      	movs	r0, #0
 800acf4:	496c      	ldr	r1, [pc, #432]	@ (800aea8 <_dtoa_r+0x700>)
 800acf6:	f7f5 fd23 	bl	8000740 <__aeabi_ddiv>
 800acfa:	4633      	mov	r3, r6
 800acfc:	462a      	mov	r2, r5
 800acfe:	f7f5 fa3d 	bl	800017c <__aeabi_dsub>
 800ad02:	4656      	mov	r6, sl
 800ad04:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad0c:	f7f5 fe9e 	bl	8000a4c <__aeabi_d2iz>
 800ad10:	4605      	mov	r5, r0
 800ad12:	f7f5 fb81 	bl	8000418 <__aeabi_i2d>
 800ad16:	4602      	mov	r2, r0
 800ad18:	460b      	mov	r3, r1
 800ad1a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad1e:	f7f5 fa2d 	bl	800017c <__aeabi_dsub>
 800ad22:	4602      	mov	r2, r0
 800ad24:	460b      	mov	r3, r1
 800ad26:	3530      	adds	r5, #48	@ 0x30
 800ad28:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800ad2c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad30:	f806 5b01 	strb.w	r5, [r6], #1
 800ad34:	f7f5 fe4c 	bl	80009d0 <__aeabi_dcmplt>
 800ad38:	2800      	cmp	r0, #0
 800ad3a:	d163      	bne.n	800ae04 <_dtoa_r+0x65c>
 800ad3c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ad40:	2000      	movs	r0, #0
 800ad42:	495a      	ldr	r1, [pc, #360]	@ (800aeac <_dtoa_r+0x704>)
 800ad44:	f7f5 fa1a 	bl	800017c <__aeabi_dsub>
 800ad48:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800ad4c:	f7f5 fe40 	bl	80009d0 <__aeabi_dcmplt>
 800ad50:	2800      	cmp	r0, #0
 800ad52:	f040 8087 	bne.w	800ae64 <_dtoa_r+0x6bc>
 800ad56:	42a6      	cmp	r6, r4
 800ad58:	f43f af43 	beq.w	800abe2 <_dtoa_r+0x43a>
 800ad5c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800ad60:	2200      	movs	r2, #0
 800ad62:	4b53      	ldr	r3, [pc, #332]	@ (800aeb0 <_dtoa_r+0x708>)
 800ad64:	f7f5 fbc2 	bl	80004ec <__aeabi_dmul>
 800ad68:	2200      	movs	r2, #0
 800ad6a:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad72:	4b4f      	ldr	r3, [pc, #316]	@ (800aeb0 <_dtoa_r+0x708>)
 800ad74:	f7f5 fbba 	bl	80004ec <__aeabi_dmul>
 800ad78:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ad7c:	e7c4      	b.n	800ad08 <_dtoa_r+0x560>
 800ad7e:	4631      	mov	r1, r6
 800ad80:	4628      	mov	r0, r5
 800ad82:	f7f5 fbb3 	bl	80004ec <__aeabi_dmul>
 800ad86:	4656      	mov	r6, sl
 800ad88:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800ad8c:	9413      	str	r4, [sp, #76]	@ 0x4c
 800ad8e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ad92:	f7f5 fe5b 	bl	8000a4c <__aeabi_d2iz>
 800ad96:	4605      	mov	r5, r0
 800ad98:	f7f5 fb3e 	bl	8000418 <__aeabi_i2d>
 800ad9c:	4602      	mov	r2, r0
 800ad9e:	460b      	mov	r3, r1
 800ada0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ada4:	f7f5 f9ea 	bl	800017c <__aeabi_dsub>
 800ada8:	4602      	mov	r2, r0
 800adaa:	460b      	mov	r3, r1
 800adac:	3530      	adds	r5, #48	@ 0x30
 800adae:	f806 5b01 	strb.w	r5, [r6], #1
 800adb2:	42a6      	cmp	r6, r4
 800adb4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800adb8:	f04f 0200 	mov.w	r2, #0
 800adbc:	d124      	bne.n	800ae08 <_dtoa_r+0x660>
 800adbe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800adc2:	4b39      	ldr	r3, [pc, #228]	@ (800aea8 <_dtoa_r+0x700>)
 800adc4:	f7f5 f9dc 	bl	8000180 <__adddf3>
 800adc8:	4602      	mov	r2, r0
 800adca:	460b      	mov	r3, r1
 800adcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800add0:	f7f5 fe1c 	bl	8000a0c <__aeabi_dcmpgt>
 800add4:	2800      	cmp	r0, #0
 800add6:	d145      	bne.n	800ae64 <_dtoa_r+0x6bc>
 800add8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800addc:	2000      	movs	r0, #0
 800adde:	4932      	ldr	r1, [pc, #200]	@ (800aea8 <_dtoa_r+0x700>)
 800ade0:	f7f5 f9cc 	bl	800017c <__aeabi_dsub>
 800ade4:	4602      	mov	r2, r0
 800ade6:	460b      	mov	r3, r1
 800ade8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800adec:	f7f5 fdf0 	bl	80009d0 <__aeabi_dcmplt>
 800adf0:	2800      	cmp	r0, #0
 800adf2:	f43f aef6 	beq.w	800abe2 <_dtoa_r+0x43a>
 800adf6:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 800adf8:	1e73      	subs	r3, r6, #1
 800adfa:	9313      	str	r3, [sp, #76]	@ 0x4c
 800adfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800ae00:	2b30      	cmp	r3, #48	@ 0x30
 800ae02:	d0f8      	beq.n	800adf6 <_dtoa_r+0x64e>
 800ae04:	9f04      	ldr	r7, [sp, #16]
 800ae06:	e73f      	b.n	800ac88 <_dtoa_r+0x4e0>
 800ae08:	4b29      	ldr	r3, [pc, #164]	@ (800aeb0 <_dtoa_r+0x708>)
 800ae0a:	f7f5 fb6f 	bl	80004ec <__aeabi_dmul>
 800ae0e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ae12:	e7bc      	b.n	800ad8e <_dtoa_r+0x5e6>
 800ae14:	d10c      	bne.n	800ae30 <_dtoa_r+0x688>
 800ae16:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ae1a:	2200      	movs	r2, #0
 800ae1c:	4b25      	ldr	r3, [pc, #148]	@ (800aeb4 <_dtoa_r+0x70c>)
 800ae1e:	f7f5 fb65 	bl	80004ec <__aeabi_dmul>
 800ae22:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ae26:	f7f5 fde7 	bl	80009f8 <__aeabi_dcmpge>
 800ae2a:	2800      	cmp	r0, #0
 800ae2c:	f000 815b 	beq.w	800b0e6 <_dtoa_r+0x93e>
 800ae30:	2400      	movs	r4, #0
 800ae32:	4625      	mov	r5, r4
 800ae34:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800ae36:	4656      	mov	r6, sl
 800ae38:	43db      	mvns	r3, r3
 800ae3a:	9304      	str	r3, [sp, #16]
 800ae3c:	2700      	movs	r7, #0
 800ae3e:	4621      	mov	r1, r4
 800ae40:	4658      	mov	r0, fp
 800ae42:	f000 fbb7 	bl	800b5b4 <_Bfree>
 800ae46:	2d00      	cmp	r5, #0
 800ae48:	d0dc      	beq.n	800ae04 <_dtoa_r+0x65c>
 800ae4a:	b12f      	cbz	r7, 800ae58 <_dtoa_r+0x6b0>
 800ae4c:	42af      	cmp	r7, r5
 800ae4e:	d003      	beq.n	800ae58 <_dtoa_r+0x6b0>
 800ae50:	4639      	mov	r1, r7
 800ae52:	4658      	mov	r0, fp
 800ae54:	f000 fbae 	bl	800b5b4 <_Bfree>
 800ae58:	4629      	mov	r1, r5
 800ae5a:	4658      	mov	r0, fp
 800ae5c:	f000 fbaa 	bl	800b5b4 <_Bfree>
 800ae60:	e7d0      	b.n	800ae04 <_dtoa_r+0x65c>
 800ae62:	9704      	str	r7, [sp, #16]
 800ae64:	4633      	mov	r3, r6
 800ae66:	461e      	mov	r6, r3
 800ae68:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae6c:	2a39      	cmp	r2, #57	@ 0x39
 800ae6e:	d107      	bne.n	800ae80 <_dtoa_r+0x6d8>
 800ae70:	459a      	cmp	sl, r3
 800ae72:	d1f8      	bne.n	800ae66 <_dtoa_r+0x6be>
 800ae74:	9a04      	ldr	r2, [sp, #16]
 800ae76:	3201      	adds	r2, #1
 800ae78:	9204      	str	r2, [sp, #16]
 800ae7a:	2230      	movs	r2, #48	@ 0x30
 800ae7c:	f88a 2000 	strb.w	r2, [sl]
 800ae80:	781a      	ldrb	r2, [r3, #0]
 800ae82:	3201      	adds	r2, #1
 800ae84:	701a      	strb	r2, [r3, #0]
 800ae86:	e7bd      	b.n	800ae04 <_dtoa_r+0x65c>
 800ae88:	2200      	movs	r2, #0
 800ae8a:	4b09      	ldr	r3, [pc, #36]	@ (800aeb0 <_dtoa_r+0x708>)
 800ae8c:	f7f5 fb2e 	bl	80004ec <__aeabi_dmul>
 800ae90:	2200      	movs	r2, #0
 800ae92:	2300      	movs	r3, #0
 800ae94:	4604      	mov	r4, r0
 800ae96:	460d      	mov	r5, r1
 800ae98:	f7f5 fd90 	bl	80009bc <__aeabi_dcmpeq>
 800ae9c:	2800      	cmp	r0, #0
 800ae9e:	f43f aebc 	beq.w	800ac1a <_dtoa_r+0x472>
 800aea2:	e6f1      	b.n	800ac88 <_dtoa_r+0x4e0>
 800aea4:	0800d5c8 	.word	0x0800d5c8
 800aea8:	3fe00000 	.word	0x3fe00000
 800aeac:	3ff00000 	.word	0x3ff00000
 800aeb0:	40240000 	.word	0x40240000
 800aeb4:	40140000 	.word	0x40140000
 800aeb8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800aeba:	2a00      	cmp	r2, #0
 800aebc:	f000 80db 	beq.w	800b076 <_dtoa_r+0x8ce>
 800aec0:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800aec2:	2a01      	cmp	r2, #1
 800aec4:	f300 80bf 	bgt.w	800b046 <_dtoa_r+0x89e>
 800aec8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 800aeca:	2a00      	cmp	r2, #0
 800aecc:	f000 80b7 	beq.w	800b03e <_dtoa_r+0x896>
 800aed0:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800aed4:	4646      	mov	r6, r8
 800aed6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800aed8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aeda:	2101      	movs	r1, #1
 800aedc:	441a      	add	r2, r3
 800aede:	4658      	mov	r0, fp
 800aee0:	4498      	add	r8, r3
 800aee2:	9209      	str	r2, [sp, #36]	@ 0x24
 800aee4:	f000 fc1a 	bl	800b71c <__i2b>
 800aee8:	4605      	mov	r5, r0
 800aeea:	b15e      	cbz	r6, 800af04 <_dtoa_r+0x75c>
 800aeec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800aeee:	2b00      	cmp	r3, #0
 800aef0:	dd08      	ble.n	800af04 <_dtoa_r+0x75c>
 800aef2:	42b3      	cmp	r3, r6
 800aef4:	bfa8      	it	ge
 800aef6:	4633      	movge	r3, r6
 800aef8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800aefa:	eba8 0803 	sub.w	r8, r8, r3
 800aefe:	1af6      	subs	r6, r6, r3
 800af00:	1ad3      	subs	r3, r2, r3
 800af02:	9309      	str	r3, [sp, #36]	@ 0x24
 800af04:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af06:	b1f3      	cbz	r3, 800af46 <_dtoa_r+0x79e>
 800af08:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800af0a:	2b00      	cmp	r3, #0
 800af0c:	f000 80b7 	beq.w	800b07e <_dtoa_r+0x8d6>
 800af10:	b18c      	cbz	r4, 800af36 <_dtoa_r+0x78e>
 800af12:	4629      	mov	r1, r5
 800af14:	4622      	mov	r2, r4
 800af16:	4658      	mov	r0, fp
 800af18:	f000 fcbe 	bl	800b898 <__pow5mult>
 800af1c:	464a      	mov	r2, r9
 800af1e:	4601      	mov	r1, r0
 800af20:	4605      	mov	r5, r0
 800af22:	4658      	mov	r0, fp
 800af24:	f000 fc10 	bl	800b748 <__multiply>
 800af28:	4649      	mov	r1, r9
 800af2a:	9004      	str	r0, [sp, #16]
 800af2c:	4658      	mov	r0, fp
 800af2e:	f000 fb41 	bl	800b5b4 <_Bfree>
 800af32:	9b04      	ldr	r3, [sp, #16]
 800af34:	4699      	mov	r9, r3
 800af36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af38:	1b1a      	subs	r2, r3, r4
 800af3a:	d004      	beq.n	800af46 <_dtoa_r+0x79e>
 800af3c:	4649      	mov	r1, r9
 800af3e:	4658      	mov	r0, fp
 800af40:	f000 fcaa 	bl	800b898 <__pow5mult>
 800af44:	4681      	mov	r9, r0
 800af46:	2101      	movs	r1, #1
 800af48:	4658      	mov	r0, fp
 800af4a:	f000 fbe7 	bl	800b71c <__i2b>
 800af4e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af50:	4604      	mov	r4, r0
 800af52:	2b00      	cmp	r3, #0
 800af54:	f000 81c9 	beq.w	800b2ea <_dtoa_r+0xb42>
 800af58:	461a      	mov	r2, r3
 800af5a:	4601      	mov	r1, r0
 800af5c:	4658      	mov	r0, fp
 800af5e:	f000 fc9b 	bl	800b898 <__pow5mult>
 800af62:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800af64:	4604      	mov	r4, r0
 800af66:	2b01      	cmp	r3, #1
 800af68:	f300 808f 	bgt.w	800b08a <_dtoa_r+0x8e2>
 800af6c:	9b02      	ldr	r3, [sp, #8]
 800af6e:	2b00      	cmp	r3, #0
 800af70:	f040 8087 	bne.w	800b082 <_dtoa_r+0x8da>
 800af74:	9b03      	ldr	r3, [sp, #12]
 800af76:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800af7a:	2b00      	cmp	r3, #0
 800af7c:	f040 8083 	bne.w	800b086 <_dtoa_r+0x8de>
 800af80:	9b03      	ldr	r3, [sp, #12]
 800af82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800af86:	0d1b      	lsrs	r3, r3, #20
 800af88:	051b      	lsls	r3, r3, #20
 800af8a:	b12b      	cbz	r3, 800af98 <_dtoa_r+0x7f0>
 800af8c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800af8e:	f108 0801 	add.w	r8, r8, #1
 800af92:	3301      	adds	r3, #1
 800af94:	9309      	str	r3, [sp, #36]	@ 0x24
 800af96:	2301      	movs	r3, #1
 800af98:	930a      	str	r3, [sp, #40]	@ 0x28
 800af9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	f000 81aa 	beq.w	800b2f6 <_dtoa_r+0xb4e>
 800afa2:	6923      	ldr	r3, [r4, #16]
 800afa4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800afa8:	6918      	ldr	r0, [r3, #16]
 800afaa:	f000 fb6b 	bl	800b684 <__hi0bits>
 800afae:	f1c0 0020 	rsb	r0, r0, #32
 800afb2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afb4:	4418      	add	r0, r3
 800afb6:	f010 001f 	ands.w	r0, r0, #31
 800afba:	d071      	beq.n	800b0a0 <_dtoa_r+0x8f8>
 800afbc:	f1c0 0320 	rsb	r3, r0, #32
 800afc0:	2b04      	cmp	r3, #4
 800afc2:	dd65      	ble.n	800b090 <_dtoa_r+0x8e8>
 800afc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afc6:	f1c0 001c 	rsb	r0, r0, #28
 800afca:	4403      	add	r3, r0
 800afcc:	4480      	add	r8, r0
 800afce:	4406      	add	r6, r0
 800afd0:	9309      	str	r3, [sp, #36]	@ 0x24
 800afd2:	f1b8 0f00 	cmp.w	r8, #0
 800afd6:	dd05      	ble.n	800afe4 <_dtoa_r+0x83c>
 800afd8:	4649      	mov	r1, r9
 800afda:	4642      	mov	r2, r8
 800afdc:	4658      	mov	r0, fp
 800afde:	f000 fcb5 	bl	800b94c <__lshift>
 800afe2:	4681      	mov	r9, r0
 800afe4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800afe6:	2b00      	cmp	r3, #0
 800afe8:	dd05      	ble.n	800aff6 <_dtoa_r+0x84e>
 800afea:	4621      	mov	r1, r4
 800afec:	461a      	mov	r2, r3
 800afee:	4658      	mov	r0, fp
 800aff0:	f000 fcac 	bl	800b94c <__lshift>
 800aff4:	4604      	mov	r4, r0
 800aff6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aff8:	2b00      	cmp	r3, #0
 800affa:	d053      	beq.n	800b0a4 <_dtoa_r+0x8fc>
 800affc:	4621      	mov	r1, r4
 800affe:	4648      	mov	r0, r9
 800b000:	f000 fd10 	bl	800ba24 <__mcmp>
 800b004:	2800      	cmp	r0, #0
 800b006:	da4d      	bge.n	800b0a4 <_dtoa_r+0x8fc>
 800b008:	1e7b      	subs	r3, r7, #1
 800b00a:	4649      	mov	r1, r9
 800b00c:	9304      	str	r3, [sp, #16]
 800b00e:	220a      	movs	r2, #10
 800b010:	2300      	movs	r3, #0
 800b012:	4658      	mov	r0, fp
 800b014:	f000 faf0 	bl	800b5f8 <__multadd>
 800b018:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b01a:	4681      	mov	r9, r0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	f000 816c 	beq.w	800b2fa <_dtoa_r+0xb52>
 800b022:	2300      	movs	r3, #0
 800b024:	4629      	mov	r1, r5
 800b026:	220a      	movs	r2, #10
 800b028:	4658      	mov	r0, fp
 800b02a:	f000 fae5 	bl	800b5f8 <__multadd>
 800b02e:	9b08      	ldr	r3, [sp, #32]
 800b030:	4605      	mov	r5, r0
 800b032:	2b00      	cmp	r3, #0
 800b034:	dc61      	bgt.n	800b0fa <_dtoa_r+0x952>
 800b036:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b038:	2b02      	cmp	r3, #2
 800b03a:	dc3b      	bgt.n	800b0b4 <_dtoa_r+0x90c>
 800b03c:	e05d      	b.n	800b0fa <_dtoa_r+0x952>
 800b03e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800b040:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800b044:	e746      	b.n	800aed4 <_dtoa_r+0x72c>
 800b046:	9b07      	ldr	r3, [sp, #28]
 800b048:	1e5c      	subs	r4, r3, #1
 800b04a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	bfbf      	itttt	lt
 800b050:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800b052:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 800b054:	1ae3      	sublt	r3, r4, r3
 800b056:	18d2      	addlt	r2, r2, r3
 800b058:	bfa8      	it	ge
 800b05a:	1b1c      	subge	r4, r3, r4
 800b05c:	9b07      	ldr	r3, [sp, #28]
 800b05e:	bfbe      	ittt	lt
 800b060:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800b062:	920e      	strlt	r2, [sp, #56]	@ 0x38
 800b064:	2400      	movlt	r4, #0
 800b066:	2b00      	cmp	r3, #0
 800b068:	bfb5      	itete	lt
 800b06a:	eba8 0603 	sublt.w	r6, r8, r3
 800b06e:	4646      	movge	r6, r8
 800b070:	2300      	movlt	r3, #0
 800b072:	9b07      	ldrge	r3, [sp, #28]
 800b074:	e730      	b.n	800aed8 <_dtoa_r+0x730>
 800b076:	4646      	mov	r6, r8
 800b078:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800b07a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800b07c:	e735      	b.n	800aeea <_dtoa_r+0x742>
 800b07e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800b080:	e75c      	b.n	800af3c <_dtoa_r+0x794>
 800b082:	2300      	movs	r3, #0
 800b084:	e788      	b.n	800af98 <_dtoa_r+0x7f0>
 800b086:	9b02      	ldr	r3, [sp, #8]
 800b088:	e786      	b.n	800af98 <_dtoa_r+0x7f0>
 800b08a:	2300      	movs	r3, #0
 800b08c:	930a      	str	r3, [sp, #40]	@ 0x28
 800b08e:	e788      	b.n	800afa2 <_dtoa_r+0x7fa>
 800b090:	d09f      	beq.n	800afd2 <_dtoa_r+0x82a>
 800b092:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b094:	331c      	adds	r3, #28
 800b096:	441a      	add	r2, r3
 800b098:	4498      	add	r8, r3
 800b09a:	441e      	add	r6, r3
 800b09c:	9209      	str	r2, [sp, #36]	@ 0x24
 800b09e:	e798      	b.n	800afd2 <_dtoa_r+0x82a>
 800b0a0:	4603      	mov	r3, r0
 800b0a2:	e7f6      	b.n	800b092 <_dtoa_r+0x8ea>
 800b0a4:	9b07      	ldr	r3, [sp, #28]
 800b0a6:	9704      	str	r7, [sp, #16]
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc20      	bgt.n	800b0ee <_dtoa_r+0x946>
 800b0ac:	9308      	str	r3, [sp, #32]
 800b0ae:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b0b0:	2b02      	cmp	r3, #2
 800b0b2:	dd1e      	ble.n	800b0f2 <_dtoa_r+0x94a>
 800b0b4:	9b08      	ldr	r3, [sp, #32]
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	f47f aebc 	bne.w	800ae34 <_dtoa_r+0x68c>
 800b0bc:	4621      	mov	r1, r4
 800b0be:	2205      	movs	r2, #5
 800b0c0:	4658      	mov	r0, fp
 800b0c2:	f000 fa99 	bl	800b5f8 <__multadd>
 800b0c6:	4601      	mov	r1, r0
 800b0c8:	4604      	mov	r4, r0
 800b0ca:	4648      	mov	r0, r9
 800b0cc:	f000 fcaa 	bl	800ba24 <__mcmp>
 800b0d0:	2800      	cmp	r0, #0
 800b0d2:	f77f aeaf 	ble.w	800ae34 <_dtoa_r+0x68c>
 800b0d6:	2331      	movs	r3, #49	@ 0x31
 800b0d8:	4656      	mov	r6, sl
 800b0da:	f806 3b01 	strb.w	r3, [r6], #1
 800b0de:	9b04      	ldr	r3, [sp, #16]
 800b0e0:	3301      	adds	r3, #1
 800b0e2:	9304      	str	r3, [sp, #16]
 800b0e4:	e6aa      	b.n	800ae3c <_dtoa_r+0x694>
 800b0e6:	9c07      	ldr	r4, [sp, #28]
 800b0e8:	9704      	str	r7, [sp, #16]
 800b0ea:	4625      	mov	r5, r4
 800b0ec:	e7f3      	b.n	800b0d6 <_dtoa_r+0x92e>
 800b0ee:	9b07      	ldr	r3, [sp, #28]
 800b0f0:	9308      	str	r3, [sp, #32]
 800b0f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b0f4:	2b00      	cmp	r3, #0
 800b0f6:	f000 8104 	beq.w	800b302 <_dtoa_r+0xb5a>
 800b0fa:	2e00      	cmp	r6, #0
 800b0fc:	dd05      	ble.n	800b10a <_dtoa_r+0x962>
 800b0fe:	4629      	mov	r1, r5
 800b100:	4632      	mov	r2, r6
 800b102:	4658      	mov	r0, fp
 800b104:	f000 fc22 	bl	800b94c <__lshift>
 800b108:	4605      	mov	r5, r0
 800b10a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b10c:	2b00      	cmp	r3, #0
 800b10e:	d05a      	beq.n	800b1c6 <_dtoa_r+0xa1e>
 800b110:	4658      	mov	r0, fp
 800b112:	6869      	ldr	r1, [r5, #4]
 800b114:	f000 fa0e 	bl	800b534 <_Balloc>
 800b118:	4606      	mov	r6, r0
 800b11a:	b928      	cbnz	r0, 800b128 <_dtoa_r+0x980>
 800b11c:	4602      	mov	r2, r0
 800b11e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800b122:	4b83      	ldr	r3, [pc, #524]	@ (800b330 <_dtoa_r+0xb88>)
 800b124:	f7ff bb54 	b.w	800a7d0 <_dtoa_r+0x28>
 800b128:	692a      	ldr	r2, [r5, #16]
 800b12a:	f105 010c 	add.w	r1, r5, #12
 800b12e:	3202      	adds	r2, #2
 800b130:	0092      	lsls	r2, r2, #2
 800b132:	300c      	adds	r0, #12
 800b134:	f7ff faa1 	bl	800a67a <memcpy>
 800b138:	2201      	movs	r2, #1
 800b13a:	4631      	mov	r1, r6
 800b13c:	4658      	mov	r0, fp
 800b13e:	f000 fc05 	bl	800b94c <__lshift>
 800b142:	462f      	mov	r7, r5
 800b144:	4605      	mov	r5, r0
 800b146:	f10a 0301 	add.w	r3, sl, #1
 800b14a:	9307      	str	r3, [sp, #28]
 800b14c:	9b08      	ldr	r3, [sp, #32]
 800b14e:	4453      	add	r3, sl
 800b150:	930b      	str	r3, [sp, #44]	@ 0x2c
 800b152:	9b02      	ldr	r3, [sp, #8]
 800b154:	f003 0301 	and.w	r3, r3, #1
 800b158:	930a      	str	r3, [sp, #40]	@ 0x28
 800b15a:	9b07      	ldr	r3, [sp, #28]
 800b15c:	4621      	mov	r1, r4
 800b15e:	3b01      	subs	r3, #1
 800b160:	4648      	mov	r0, r9
 800b162:	9302      	str	r3, [sp, #8]
 800b164:	f7ff fa97 	bl	800a696 <quorem>
 800b168:	4639      	mov	r1, r7
 800b16a:	9008      	str	r0, [sp, #32]
 800b16c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b170:	4648      	mov	r0, r9
 800b172:	f000 fc57 	bl	800ba24 <__mcmp>
 800b176:	462a      	mov	r2, r5
 800b178:	9009      	str	r0, [sp, #36]	@ 0x24
 800b17a:	4621      	mov	r1, r4
 800b17c:	4658      	mov	r0, fp
 800b17e:	f000 fc6d 	bl	800ba5c <__mdiff>
 800b182:	68c2      	ldr	r2, [r0, #12]
 800b184:	4606      	mov	r6, r0
 800b186:	bb02      	cbnz	r2, 800b1ca <_dtoa_r+0xa22>
 800b188:	4601      	mov	r1, r0
 800b18a:	4648      	mov	r0, r9
 800b18c:	f000 fc4a 	bl	800ba24 <__mcmp>
 800b190:	4602      	mov	r2, r0
 800b192:	4631      	mov	r1, r6
 800b194:	4658      	mov	r0, fp
 800b196:	920c      	str	r2, [sp, #48]	@ 0x30
 800b198:	f000 fa0c 	bl	800b5b4 <_Bfree>
 800b19c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b19e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800b1a0:	9e07      	ldr	r6, [sp, #28]
 800b1a2:	ea43 0102 	orr.w	r1, r3, r2
 800b1a6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800b1a8:	4319      	orrs	r1, r3
 800b1aa:	d110      	bne.n	800b1ce <_dtoa_r+0xa26>
 800b1ac:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b1b0:	d029      	beq.n	800b206 <_dtoa_r+0xa5e>
 800b1b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1b4:	2b00      	cmp	r3, #0
 800b1b6:	dd02      	ble.n	800b1be <_dtoa_r+0xa16>
 800b1b8:	9b08      	ldr	r3, [sp, #32]
 800b1ba:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800b1be:	9b02      	ldr	r3, [sp, #8]
 800b1c0:	f883 8000 	strb.w	r8, [r3]
 800b1c4:	e63b      	b.n	800ae3e <_dtoa_r+0x696>
 800b1c6:	4628      	mov	r0, r5
 800b1c8:	e7bb      	b.n	800b142 <_dtoa_r+0x99a>
 800b1ca:	2201      	movs	r2, #1
 800b1cc:	e7e1      	b.n	800b192 <_dtoa_r+0x9ea>
 800b1ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b1d0:	2b00      	cmp	r3, #0
 800b1d2:	db04      	blt.n	800b1de <_dtoa_r+0xa36>
 800b1d4:	9920      	ldr	r1, [sp, #128]	@ 0x80
 800b1d6:	430b      	orrs	r3, r1
 800b1d8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800b1da:	430b      	orrs	r3, r1
 800b1dc:	d120      	bne.n	800b220 <_dtoa_r+0xa78>
 800b1de:	2a00      	cmp	r2, #0
 800b1e0:	dded      	ble.n	800b1be <_dtoa_r+0xa16>
 800b1e2:	4649      	mov	r1, r9
 800b1e4:	2201      	movs	r2, #1
 800b1e6:	4658      	mov	r0, fp
 800b1e8:	f000 fbb0 	bl	800b94c <__lshift>
 800b1ec:	4621      	mov	r1, r4
 800b1ee:	4681      	mov	r9, r0
 800b1f0:	f000 fc18 	bl	800ba24 <__mcmp>
 800b1f4:	2800      	cmp	r0, #0
 800b1f6:	dc03      	bgt.n	800b200 <_dtoa_r+0xa58>
 800b1f8:	d1e1      	bne.n	800b1be <_dtoa_r+0xa16>
 800b1fa:	f018 0f01 	tst.w	r8, #1
 800b1fe:	d0de      	beq.n	800b1be <_dtoa_r+0xa16>
 800b200:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b204:	d1d8      	bne.n	800b1b8 <_dtoa_r+0xa10>
 800b206:	2339      	movs	r3, #57	@ 0x39
 800b208:	9a02      	ldr	r2, [sp, #8]
 800b20a:	7013      	strb	r3, [r2, #0]
 800b20c:	4633      	mov	r3, r6
 800b20e:	461e      	mov	r6, r3
 800b210:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800b214:	3b01      	subs	r3, #1
 800b216:	2a39      	cmp	r2, #57	@ 0x39
 800b218:	d052      	beq.n	800b2c0 <_dtoa_r+0xb18>
 800b21a:	3201      	adds	r2, #1
 800b21c:	701a      	strb	r2, [r3, #0]
 800b21e:	e60e      	b.n	800ae3e <_dtoa_r+0x696>
 800b220:	2a00      	cmp	r2, #0
 800b222:	dd07      	ble.n	800b234 <_dtoa_r+0xa8c>
 800b224:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800b228:	d0ed      	beq.n	800b206 <_dtoa_r+0xa5e>
 800b22a:	9a02      	ldr	r2, [sp, #8]
 800b22c:	f108 0301 	add.w	r3, r8, #1
 800b230:	7013      	strb	r3, [r2, #0]
 800b232:	e604      	b.n	800ae3e <_dtoa_r+0x696>
 800b234:	9b07      	ldr	r3, [sp, #28]
 800b236:	9a07      	ldr	r2, [sp, #28]
 800b238:	f803 8c01 	strb.w	r8, [r3, #-1]
 800b23c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b23e:	4293      	cmp	r3, r2
 800b240:	d028      	beq.n	800b294 <_dtoa_r+0xaec>
 800b242:	4649      	mov	r1, r9
 800b244:	2300      	movs	r3, #0
 800b246:	220a      	movs	r2, #10
 800b248:	4658      	mov	r0, fp
 800b24a:	f000 f9d5 	bl	800b5f8 <__multadd>
 800b24e:	42af      	cmp	r7, r5
 800b250:	4681      	mov	r9, r0
 800b252:	f04f 0300 	mov.w	r3, #0
 800b256:	f04f 020a 	mov.w	r2, #10
 800b25a:	4639      	mov	r1, r7
 800b25c:	4658      	mov	r0, fp
 800b25e:	d107      	bne.n	800b270 <_dtoa_r+0xac8>
 800b260:	f000 f9ca 	bl	800b5f8 <__multadd>
 800b264:	4607      	mov	r7, r0
 800b266:	4605      	mov	r5, r0
 800b268:	9b07      	ldr	r3, [sp, #28]
 800b26a:	3301      	adds	r3, #1
 800b26c:	9307      	str	r3, [sp, #28]
 800b26e:	e774      	b.n	800b15a <_dtoa_r+0x9b2>
 800b270:	f000 f9c2 	bl	800b5f8 <__multadd>
 800b274:	4629      	mov	r1, r5
 800b276:	4607      	mov	r7, r0
 800b278:	2300      	movs	r3, #0
 800b27a:	220a      	movs	r2, #10
 800b27c:	4658      	mov	r0, fp
 800b27e:	f000 f9bb 	bl	800b5f8 <__multadd>
 800b282:	4605      	mov	r5, r0
 800b284:	e7f0      	b.n	800b268 <_dtoa_r+0xac0>
 800b286:	9b08      	ldr	r3, [sp, #32]
 800b288:	2700      	movs	r7, #0
 800b28a:	2b00      	cmp	r3, #0
 800b28c:	bfcc      	ite	gt
 800b28e:	461e      	movgt	r6, r3
 800b290:	2601      	movle	r6, #1
 800b292:	4456      	add	r6, sl
 800b294:	4649      	mov	r1, r9
 800b296:	2201      	movs	r2, #1
 800b298:	4658      	mov	r0, fp
 800b29a:	f000 fb57 	bl	800b94c <__lshift>
 800b29e:	4621      	mov	r1, r4
 800b2a0:	4681      	mov	r9, r0
 800b2a2:	f000 fbbf 	bl	800ba24 <__mcmp>
 800b2a6:	2800      	cmp	r0, #0
 800b2a8:	dcb0      	bgt.n	800b20c <_dtoa_r+0xa64>
 800b2aa:	d102      	bne.n	800b2b2 <_dtoa_r+0xb0a>
 800b2ac:	f018 0f01 	tst.w	r8, #1
 800b2b0:	d1ac      	bne.n	800b20c <_dtoa_r+0xa64>
 800b2b2:	4633      	mov	r3, r6
 800b2b4:	461e      	mov	r6, r3
 800b2b6:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b2ba:	2a30      	cmp	r2, #48	@ 0x30
 800b2bc:	d0fa      	beq.n	800b2b4 <_dtoa_r+0xb0c>
 800b2be:	e5be      	b.n	800ae3e <_dtoa_r+0x696>
 800b2c0:	459a      	cmp	sl, r3
 800b2c2:	d1a4      	bne.n	800b20e <_dtoa_r+0xa66>
 800b2c4:	9b04      	ldr	r3, [sp, #16]
 800b2c6:	3301      	adds	r3, #1
 800b2c8:	9304      	str	r3, [sp, #16]
 800b2ca:	2331      	movs	r3, #49	@ 0x31
 800b2cc:	f88a 3000 	strb.w	r3, [sl]
 800b2d0:	e5b5      	b.n	800ae3e <_dtoa_r+0x696>
 800b2d2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800b2d4:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800b334 <_dtoa_r+0xb8c>
 800b2d8:	b11b      	cbz	r3, 800b2e2 <_dtoa_r+0xb3a>
 800b2da:	f10a 0308 	add.w	r3, sl, #8
 800b2de:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 800b2e0:	6013      	str	r3, [r2, #0]
 800b2e2:	4650      	mov	r0, sl
 800b2e4:	b017      	add	sp, #92	@ 0x5c
 800b2e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800b2ec:	2b01      	cmp	r3, #1
 800b2ee:	f77f ae3d 	ble.w	800af6c <_dtoa_r+0x7c4>
 800b2f2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b2f4:	930a      	str	r3, [sp, #40]	@ 0x28
 800b2f6:	2001      	movs	r0, #1
 800b2f8:	e65b      	b.n	800afb2 <_dtoa_r+0x80a>
 800b2fa:	9b08      	ldr	r3, [sp, #32]
 800b2fc:	2b00      	cmp	r3, #0
 800b2fe:	f77f aed6 	ble.w	800b0ae <_dtoa_r+0x906>
 800b302:	4656      	mov	r6, sl
 800b304:	4621      	mov	r1, r4
 800b306:	4648      	mov	r0, r9
 800b308:	f7ff f9c5 	bl	800a696 <quorem>
 800b30c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800b310:	9b08      	ldr	r3, [sp, #32]
 800b312:	f806 8b01 	strb.w	r8, [r6], #1
 800b316:	eba6 020a 	sub.w	r2, r6, sl
 800b31a:	4293      	cmp	r3, r2
 800b31c:	ddb3      	ble.n	800b286 <_dtoa_r+0xade>
 800b31e:	4649      	mov	r1, r9
 800b320:	2300      	movs	r3, #0
 800b322:	220a      	movs	r2, #10
 800b324:	4658      	mov	r0, fp
 800b326:	f000 f967 	bl	800b5f8 <__multadd>
 800b32a:	4681      	mov	r9, r0
 800b32c:	e7ea      	b.n	800b304 <_dtoa_r+0xb5c>
 800b32e:	bf00      	nop
 800b330:	0800d526 	.word	0x0800d526
 800b334:	0800d4aa 	.word	0x0800d4aa

0800b338 <_free_r>:
 800b338:	b538      	push	{r3, r4, r5, lr}
 800b33a:	4605      	mov	r5, r0
 800b33c:	2900      	cmp	r1, #0
 800b33e:	d040      	beq.n	800b3c2 <_free_r+0x8a>
 800b340:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b344:	1f0c      	subs	r4, r1, #4
 800b346:	2b00      	cmp	r3, #0
 800b348:	bfb8      	it	lt
 800b34a:	18e4      	addlt	r4, r4, r3
 800b34c:	f000 f8e6 	bl	800b51c <__malloc_lock>
 800b350:	4a1c      	ldr	r2, [pc, #112]	@ (800b3c4 <_free_r+0x8c>)
 800b352:	6813      	ldr	r3, [r2, #0]
 800b354:	b933      	cbnz	r3, 800b364 <_free_r+0x2c>
 800b356:	6063      	str	r3, [r4, #4]
 800b358:	6014      	str	r4, [r2, #0]
 800b35a:	4628      	mov	r0, r5
 800b35c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b360:	f000 b8e2 	b.w	800b528 <__malloc_unlock>
 800b364:	42a3      	cmp	r3, r4
 800b366:	d908      	bls.n	800b37a <_free_r+0x42>
 800b368:	6820      	ldr	r0, [r4, #0]
 800b36a:	1821      	adds	r1, r4, r0
 800b36c:	428b      	cmp	r3, r1
 800b36e:	bf01      	itttt	eq
 800b370:	6819      	ldreq	r1, [r3, #0]
 800b372:	685b      	ldreq	r3, [r3, #4]
 800b374:	1809      	addeq	r1, r1, r0
 800b376:	6021      	streq	r1, [r4, #0]
 800b378:	e7ed      	b.n	800b356 <_free_r+0x1e>
 800b37a:	461a      	mov	r2, r3
 800b37c:	685b      	ldr	r3, [r3, #4]
 800b37e:	b10b      	cbz	r3, 800b384 <_free_r+0x4c>
 800b380:	42a3      	cmp	r3, r4
 800b382:	d9fa      	bls.n	800b37a <_free_r+0x42>
 800b384:	6811      	ldr	r1, [r2, #0]
 800b386:	1850      	adds	r0, r2, r1
 800b388:	42a0      	cmp	r0, r4
 800b38a:	d10b      	bne.n	800b3a4 <_free_r+0x6c>
 800b38c:	6820      	ldr	r0, [r4, #0]
 800b38e:	4401      	add	r1, r0
 800b390:	1850      	adds	r0, r2, r1
 800b392:	4283      	cmp	r3, r0
 800b394:	6011      	str	r1, [r2, #0]
 800b396:	d1e0      	bne.n	800b35a <_free_r+0x22>
 800b398:	6818      	ldr	r0, [r3, #0]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	4408      	add	r0, r1
 800b39e:	6010      	str	r0, [r2, #0]
 800b3a0:	6053      	str	r3, [r2, #4]
 800b3a2:	e7da      	b.n	800b35a <_free_r+0x22>
 800b3a4:	d902      	bls.n	800b3ac <_free_r+0x74>
 800b3a6:	230c      	movs	r3, #12
 800b3a8:	602b      	str	r3, [r5, #0]
 800b3aa:	e7d6      	b.n	800b35a <_free_r+0x22>
 800b3ac:	6820      	ldr	r0, [r4, #0]
 800b3ae:	1821      	adds	r1, r4, r0
 800b3b0:	428b      	cmp	r3, r1
 800b3b2:	bf01      	itttt	eq
 800b3b4:	6819      	ldreq	r1, [r3, #0]
 800b3b6:	685b      	ldreq	r3, [r3, #4]
 800b3b8:	1809      	addeq	r1, r1, r0
 800b3ba:	6021      	streq	r1, [r4, #0]
 800b3bc:	6063      	str	r3, [r4, #4]
 800b3be:	6054      	str	r4, [r2, #4]
 800b3c0:	e7cb      	b.n	800b35a <_free_r+0x22>
 800b3c2:	bd38      	pop	{r3, r4, r5, pc}
 800b3c4:	20001d30 	.word	0x20001d30

0800b3c8 <malloc>:
 800b3c8:	4b02      	ldr	r3, [pc, #8]	@ (800b3d4 <malloc+0xc>)
 800b3ca:	4601      	mov	r1, r0
 800b3cc:	6818      	ldr	r0, [r3, #0]
 800b3ce:	f000 b825 	b.w	800b41c <_malloc_r>
 800b3d2:	bf00      	nop
 800b3d4:	2000001c 	.word	0x2000001c

0800b3d8 <sbrk_aligned>:
 800b3d8:	b570      	push	{r4, r5, r6, lr}
 800b3da:	4e0f      	ldr	r6, [pc, #60]	@ (800b418 <sbrk_aligned+0x40>)
 800b3dc:	460c      	mov	r4, r1
 800b3de:	6831      	ldr	r1, [r6, #0]
 800b3e0:	4605      	mov	r5, r0
 800b3e2:	b911      	cbnz	r1, 800b3ea <sbrk_aligned+0x12>
 800b3e4:	f001 f9c8 	bl	800c778 <_sbrk_r>
 800b3e8:	6030      	str	r0, [r6, #0]
 800b3ea:	4621      	mov	r1, r4
 800b3ec:	4628      	mov	r0, r5
 800b3ee:	f001 f9c3 	bl	800c778 <_sbrk_r>
 800b3f2:	1c43      	adds	r3, r0, #1
 800b3f4:	d103      	bne.n	800b3fe <sbrk_aligned+0x26>
 800b3f6:	f04f 34ff 	mov.w	r4, #4294967295
 800b3fa:	4620      	mov	r0, r4
 800b3fc:	bd70      	pop	{r4, r5, r6, pc}
 800b3fe:	1cc4      	adds	r4, r0, #3
 800b400:	f024 0403 	bic.w	r4, r4, #3
 800b404:	42a0      	cmp	r0, r4
 800b406:	d0f8      	beq.n	800b3fa <sbrk_aligned+0x22>
 800b408:	1a21      	subs	r1, r4, r0
 800b40a:	4628      	mov	r0, r5
 800b40c:	f001 f9b4 	bl	800c778 <_sbrk_r>
 800b410:	3001      	adds	r0, #1
 800b412:	d1f2      	bne.n	800b3fa <sbrk_aligned+0x22>
 800b414:	e7ef      	b.n	800b3f6 <sbrk_aligned+0x1e>
 800b416:	bf00      	nop
 800b418:	20001d2c 	.word	0x20001d2c

0800b41c <_malloc_r>:
 800b41c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b420:	1ccd      	adds	r5, r1, #3
 800b422:	f025 0503 	bic.w	r5, r5, #3
 800b426:	3508      	adds	r5, #8
 800b428:	2d0c      	cmp	r5, #12
 800b42a:	bf38      	it	cc
 800b42c:	250c      	movcc	r5, #12
 800b42e:	2d00      	cmp	r5, #0
 800b430:	4606      	mov	r6, r0
 800b432:	db01      	blt.n	800b438 <_malloc_r+0x1c>
 800b434:	42a9      	cmp	r1, r5
 800b436:	d904      	bls.n	800b442 <_malloc_r+0x26>
 800b438:	230c      	movs	r3, #12
 800b43a:	6033      	str	r3, [r6, #0]
 800b43c:	2000      	movs	r0, #0
 800b43e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b442:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800b518 <_malloc_r+0xfc>
 800b446:	f000 f869 	bl	800b51c <__malloc_lock>
 800b44a:	f8d8 3000 	ldr.w	r3, [r8]
 800b44e:	461c      	mov	r4, r3
 800b450:	bb44      	cbnz	r4, 800b4a4 <_malloc_r+0x88>
 800b452:	4629      	mov	r1, r5
 800b454:	4630      	mov	r0, r6
 800b456:	f7ff ffbf 	bl	800b3d8 <sbrk_aligned>
 800b45a:	1c43      	adds	r3, r0, #1
 800b45c:	4604      	mov	r4, r0
 800b45e:	d158      	bne.n	800b512 <_malloc_r+0xf6>
 800b460:	f8d8 4000 	ldr.w	r4, [r8]
 800b464:	4627      	mov	r7, r4
 800b466:	2f00      	cmp	r7, #0
 800b468:	d143      	bne.n	800b4f2 <_malloc_r+0xd6>
 800b46a:	2c00      	cmp	r4, #0
 800b46c:	d04b      	beq.n	800b506 <_malloc_r+0xea>
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	4639      	mov	r1, r7
 800b472:	4630      	mov	r0, r6
 800b474:	eb04 0903 	add.w	r9, r4, r3
 800b478:	f001 f97e 	bl	800c778 <_sbrk_r>
 800b47c:	4581      	cmp	r9, r0
 800b47e:	d142      	bne.n	800b506 <_malloc_r+0xea>
 800b480:	6821      	ldr	r1, [r4, #0]
 800b482:	4630      	mov	r0, r6
 800b484:	1a6d      	subs	r5, r5, r1
 800b486:	4629      	mov	r1, r5
 800b488:	f7ff ffa6 	bl	800b3d8 <sbrk_aligned>
 800b48c:	3001      	adds	r0, #1
 800b48e:	d03a      	beq.n	800b506 <_malloc_r+0xea>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	442b      	add	r3, r5
 800b494:	6023      	str	r3, [r4, #0]
 800b496:	f8d8 3000 	ldr.w	r3, [r8]
 800b49a:	685a      	ldr	r2, [r3, #4]
 800b49c:	bb62      	cbnz	r2, 800b4f8 <_malloc_r+0xdc>
 800b49e:	f8c8 7000 	str.w	r7, [r8]
 800b4a2:	e00f      	b.n	800b4c4 <_malloc_r+0xa8>
 800b4a4:	6822      	ldr	r2, [r4, #0]
 800b4a6:	1b52      	subs	r2, r2, r5
 800b4a8:	d420      	bmi.n	800b4ec <_malloc_r+0xd0>
 800b4aa:	2a0b      	cmp	r2, #11
 800b4ac:	d917      	bls.n	800b4de <_malloc_r+0xc2>
 800b4ae:	1961      	adds	r1, r4, r5
 800b4b0:	42a3      	cmp	r3, r4
 800b4b2:	6025      	str	r5, [r4, #0]
 800b4b4:	bf18      	it	ne
 800b4b6:	6059      	strne	r1, [r3, #4]
 800b4b8:	6863      	ldr	r3, [r4, #4]
 800b4ba:	bf08      	it	eq
 800b4bc:	f8c8 1000 	streq.w	r1, [r8]
 800b4c0:	5162      	str	r2, [r4, r5]
 800b4c2:	604b      	str	r3, [r1, #4]
 800b4c4:	4630      	mov	r0, r6
 800b4c6:	f000 f82f 	bl	800b528 <__malloc_unlock>
 800b4ca:	f104 000b 	add.w	r0, r4, #11
 800b4ce:	1d23      	adds	r3, r4, #4
 800b4d0:	f020 0007 	bic.w	r0, r0, #7
 800b4d4:	1ac2      	subs	r2, r0, r3
 800b4d6:	bf1c      	itt	ne
 800b4d8:	1a1b      	subne	r3, r3, r0
 800b4da:	50a3      	strne	r3, [r4, r2]
 800b4dc:	e7af      	b.n	800b43e <_malloc_r+0x22>
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	42a3      	cmp	r3, r4
 800b4e2:	bf0c      	ite	eq
 800b4e4:	f8c8 2000 	streq.w	r2, [r8]
 800b4e8:	605a      	strne	r2, [r3, #4]
 800b4ea:	e7eb      	b.n	800b4c4 <_malloc_r+0xa8>
 800b4ec:	4623      	mov	r3, r4
 800b4ee:	6864      	ldr	r4, [r4, #4]
 800b4f0:	e7ae      	b.n	800b450 <_malloc_r+0x34>
 800b4f2:	463c      	mov	r4, r7
 800b4f4:	687f      	ldr	r7, [r7, #4]
 800b4f6:	e7b6      	b.n	800b466 <_malloc_r+0x4a>
 800b4f8:	461a      	mov	r2, r3
 800b4fa:	685b      	ldr	r3, [r3, #4]
 800b4fc:	42a3      	cmp	r3, r4
 800b4fe:	d1fb      	bne.n	800b4f8 <_malloc_r+0xdc>
 800b500:	2300      	movs	r3, #0
 800b502:	6053      	str	r3, [r2, #4]
 800b504:	e7de      	b.n	800b4c4 <_malloc_r+0xa8>
 800b506:	230c      	movs	r3, #12
 800b508:	4630      	mov	r0, r6
 800b50a:	6033      	str	r3, [r6, #0]
 800b50c:	f000 f80c 	bl	800b528 <__malloc_unlock>
 800b510:	e794      	b.n	800b43c <_malloc_r+0x20>
 800b512:	6005      	str	r5, [r0, #0]
 800b514:	e7d6      	b.n	800b4c4 <_malloc_r+0xa8>
 800b516:	bf00      	nop
 800b518:	20001d30 	.word	0x20001d30

0800b51c <__malloc_lock>:
 800b51c:	4801      	ldr	r0, [pc, #4]	@ (800b524 <__malloc_lock+0x8>)
 800b51e:	f7ff b89c 	b.w	800a65a <__retarget_lock_acquire_recursive>
 800b522:	bf00      	nop
 800b524:	20001d28 	.word	0x20001d28

0800b528 <__malloc_unlock>:
 800b528:	4801      	ldr	r0, [pc, #4]	@ (800b530 <__malloc_unlock+0x8>)
 800b52a:	f7ff b897 	b.w	800a65c <__retarget_lock_release_recursive>
 800b52e:	bf00      	nop
 800b530:	20001d28 	.word	0x20001d28

0800b534 <_Balloc>:
 800b534:	b570      	push	{r4, r5, r6, lr}
 800b536:	69c6      	ldr	r6, [r0, #28]
 800b538:	4604      	mov	r4, r0
 800b53a:	460d      	mov	r5, r1
 800b53c:	b976      	cbnz	r6, 800b55c <_Balloc+0x28>
 800b53e:	2010      	movs	r0, #16
 800b540:	f7ff ff42 	bl	800b3c8 <malloc>
 800b544:	4602      	mov	r2, r0
 800b546:	61e0      	str	r0, [r4, #28]
 800b548:	b920      	cbnz	r0, 800b554 <_Balloc+0x20>
 800b54a:	216b      	movs	r1, #107	@ 0x6b
 800b54c:	4b17      	ldr	r3, [pc, #92]	@ (800b5ac <_Balloc+0x78>)
 800b54e:	4818      	ldr	r0, [pc, #96]	@ (800b5b0 <_Balloc+0x7c>)
 800b550:	f001 f922 	bl	800c798 <__assert_func>
 800b554:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b558:	6006      	str	r6, [r0, #0]
 800b55a:	60c6      	str	r6, [r0, #12]
 800b55c:	69e6      	ldr	r6, [r4, #28]
 800b55e:	68f3      	ldr	r3, [r6, #12]
 800b560:	b183      	cbz	r3, 800b584 <_Balloc+0x50>
 800b562:	69e3      	ldr	r3, [r4, #28]
 800b564:	68db      	ldr	r3, [r3, #12]
 800b566:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b56a:	b9b8      	cbnz	r0, 800b59c <_Balloc+0x68>
 800b56c:	2101      	movs	r1, #1
 800b56e:	fa01 f605 	lsl.w	r6, r1, r5
 800b572:	1d72      	adds	r2, r6, #5
 800b574:	4620      	mov	r0, r4
 800b576:	0092      	lsls	r2, r2, #2
 800b578:	f001 f92c 	bl	800c7d4 <_calloc_r>
 800b57c:	b160      	cbz	r0, 800b598 <_Balloc+0x64>
 800b57e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b582:	e00e      	b.n	800b5a2 <_Balloc+0x6e>
 800b584:	2221      	movs	r2, #33	@ 0x21
 800b586:	2104      	movs	r1, #4
 800b588:	4620      	mov	r0, r4
 800b58a:	f001 f923 	bl	800c7d4 <_calloc_r>
 800b58e:	69e3      	ldr	r3, [r4, #28]
 800b590:	60f0      	str	r0, [r6, #12]
 800b592:	68db      	ldr	r3, [r3, #12]
 800b594:	2b00      	cmp	r3, #0
 800b596:	d1e4      	bne.n	800b562 <_Balloc+0x2e>
 800b598:	2000      	movs	r0, #0
 800b59a:	bd70      	pop	{r4, r5, r6, pc}
 800b59c:	6802      	ldr	r2, [r0, #0]
 800b59e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5a2:	2300      	movs	r3, #0
 800b5a4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5a8:	e7f7      	b.n	800b59a <_Balloc+0x66>
 800b5aa:	bf00      	nop
 800b5ac:	0800d4b7 	.word	0x0800d4b7
 800b5b0:	0800d537 	.word	0x0800d537

0800b5b4 <_Bfree>:
 800b5b4:	b570      	push	{r4, r5, r6, lr}
 800b5b6:	69c6      	ldr	r6, [r0, #28]
 800b5b8:	4605      	mov	r5, r0
 800b5ba:	460c      	mov	r4, r1
 800b5bc:	b976      	cbnz	r6, 800b5dc <_Bfree+0x28>
 800b5be:	2010      	movs	r0, #16
 800b5c0:	f7ff ff02 	bl	800b3c8 <malloc>
 800b5c4:	4602      	mov	r2, r0
 800b5c6:	61e8      	str	r0, [r5, #28]
 800b5c8:	b920      	cbnz	r0, 800b5d4 <_Bfree+0x20>
 800b5ca:	218f      	movs	r1, #143	@ 0x8f
 800b5cc:	4b08      	ldr	r3, [pc, #32]	@ (800b5f0 <_Bfree+0x3c>)
 800b5ce:	4809      	ldr	r0, [pc, #36]	@ (800b5f4 <_Bfree+0x40>)
 800b5d0:	f001 f8e2 	bl	800c798 <__assert_func>
 800b5d4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5d8:	6006      	str	r6, [r0, #0]
 800b5da:	60c6      	str	r6, [r0, #12]
 800b5dc:	b13c      	cbz	r4, 800b5ee <_Bfree+0x3a>
 800b5de:	69eb      	ldr	r3, [r5, #28]
 800b5e0:	6862      	ldr	r2, [r4, #4]
 800b5e2:	68db      	ldr	r3, [r3, #12]
 800b5e4:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b5e8:	6021      	str	r1, [r4, #0]
 800b5ea:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b5ee:	bd70      	pop	{r4, r5, r6, pc}
 800b5f0:	0800d4b7 	.word	0x0800d4b7
 800b5f4:	0800d537 	.word	0x0800d537

0800b5f8 <__multadd>:
 800b5f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5fc:	4607      	mov	r7, r0
 800b5fe:	460c      	mov	r4, r1
 800b600:	461e      	mov	r6, r3
 800b602:	2000      	movs	r0, #0
 800b604:	690d      	ldr	r5, [r1, #16]
 800b606:	f101 0c14 	add.w	ip, r1, #20
 800b60a:	f8dc 3000 	ldr.w	r3, [ip]
 800b60e:	3001      	adds	r0, #1
 800b610:	b299      	uxth	r1, r3
 800b612:	fb02 6101 	mla	r1, r2, r1, r6
 800b616:	0c1e      	lsrs	r6, r3, #16
 800b618:	0c0b      	lsrs	r3, r1, #16
 800b61a:	fb02 3306 	mla	r3, r2, r6, r3
 800b61e:	b289      	uxth	r1, r1
 800b620:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b624:	4285      	cmp	r5, r0
 800b626:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b62a:	f84c 1b04 	str.w	r1, [ip], #4
 800b62e:	dcec      	bgt.n	800b60a <__multadd+0x12>
 800b630:	b30e      	cbz	r6, 800b676 <__multadd+0x7e>
 800b632:	68a3      	ldr	r3, [r4, #8]
 800b634:	42ab      	cmp	r3, r5
 800b636:	dc19      	bgt.n	800b66c <__multadd+0x74>
 800b638:	6861      	ldr	r1, [r4, #4]
 800b63a:	4638      	mov	r0, r7
 800b63c:	3101      	adds	r1, #1
 800b63e:	f7ff ff79 	bl	800b534 <_Balloc>
 800b642:	4680      	mov	r8, r0
 800b644:	b928      	cbnz	r0, 800b652 <__multadd+0x5a>
 800b646:	4602      	mov	r2, r0
 800b648:	21ba      	movs	r1, #186	@ 0xba
 800b64a:	4b0c      	ldr	r3, [pc, #48]	@ (800b67c <__multadd+0x84>)
 800b64c:	480c      	ldr	r0, [pc, #48]	@ (800b680 <__multadd+0x88>)
 800b64e:	f001 f8a3 	bl	800c798 <__assert_func>
 800b652:	6922      	ldr	r2, [r4, #16]
 800b654:	f104 010c 	add.w	r1, r4, #12
 800b658:	3202      	adds	r2, #2
 800b65a:	0092      	lsls	r2, r2, #2
 800b65c:	300c      	adds	r0, #12
 800b65e:	f7ff f80c 	bl	800a67a <memcpy>
 800b662:	4621      	mov	r1, r4
 800b664:	4638      	mov	r0, r7
 800b666:	f7ff ffa5 	bl	800b5b4 <_Bfree>
 800b66a:	4644      	mov	r4, r8
 800b66c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b670:	3501      	adds	r5, #1
 800b672:	615e      	str	r6, [r3, #20]
 800b674:	6125      	str	r5, [r4, #16]
 800b676:	4620      	mov	r0, r4
 800b678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b67c:	0800d526 	.word	0x0800d526
 800b680:	0800d537 	.word	0x0800d537

0800b684 <__hi0bits>:
 800b684:	4603      	mov	r3, r0
 800b686:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800b68a:	bf3a      	itte	cc
 800b68c:	0403      	lslcc	r3, r0, #16
 800b68e:	2010      	movcc	r0, #16
 800b690:	2000      	movcs	r0, #0
 800b692:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800b696:	bf3c      	itt	cc
 800b698:	021b      	lslcc	r3, r3, #8
 800b69a:	3008      	addcc	r0, #8
 800b69c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b6a0:	bf3c      	itt	cc
 800b6a2:	011b      	lslcc	r3, r3, #4
 800b6a4:	3004      	addcc	r0, #4
 800b6a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b6aa:	bf3c      	itt	cc
 800b6ac:	009b      	lslcc	r3, r3, #2
 800b6ae:	3002      	addcc	r0, #2
 800b6b0:	2b00      	cmp	r3, #0
 800b6b2:	db05      	blt.n	800b6c0 <__hi0bits+0x3c>
 800b6b4:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800b6b8:	f100 0001 	add.w	r0, r0, #1
 800b6bc:	bf08      	it	eq
 800b6be:	2020      	moveq	r0, #32
 800b6c0:	4770      	bx	lr

0800b6c2 <__lo0bits>:
 800b6c2:	6803      	ldr	r3, [r0, #0]
 800b6c4:	4602      	mov	r2, r0
 800b6c6:	f013 0007 	ands.w	r0, r3, #7
 800b6ca:	d00b      	beq.n	800b6e4 <__lo0bits+0x22>
 800b6cc:	07d9      	lsls	r1, r3, #31
 800b6ce:	d421      	bmi.n	800b714 <__lo0bits+0x52>
 800b6d0:	0798      	lsls	r0, r3, #30
 800b6d2:	bf49      	itett	mi
 800b6d4:	085b      	lsrmi	r3, r3, #1
 800b6d6:	089b      	lsrpl	r3, r3, #2
 800b6d8:	2001      	movmi	r0, #1
 800b6da:	6013      	strmi	r3, [r2, #0]
 800b6dc:	bf5c      	itt	pl
 800b6de:	2002      	movpl	r0, #2
 800b6e0:	6013      	strpl	r3, [r2, #0]
 800b6e2:	4770      	bx	lr
 800b6e4:	b299      	uxth	r1, r3
 800b6e6:	b909      	cbnz	r1, 800b6ec <__lo0bits+0x2a>
 800b6e8:	2010      	movs	r0, #16
 800b6ea:	0c1b      	lsrs	r3, r3, #16
 800b6ec:	b2d9      	uxtb	r1, r3
 800b6ee:	b909      	cbnz	r1, 800b6f4 <__lo0bits+0x32>
 800b6f0:	3008      	adds	r0, #8
 800b6f2:	0a1b      	lsrs	r3, r3, #8
 800b6f4:	0719      	lsls	r1, r3, #28
 800b6f6:	bf04      	itt	eq
 800b6f8:	091b      	lsreq	r3, r3, #4
 800b6fa:	3004      	addeq	r0, #4
 800b6fc:	0799      	lsls	r1, r3, #30
 800b6fe:	bf04      	itt	eq
 800b700:	089b      	lsreq	r3, r3, #2
 800b702:	3002      	addeq	r0, #2
 800b704:	07d9      	lsls	r1, r3, #31
 800b706:	d403      	bmi.n	800b710 <__lo0bits+0x4e>
 800b708:	085b      	lsrs	r3, r3, #1
 800b70a:	f100 0001 	add.w	r0, r0, #1
 800b70e:	d003      	beq.n	800b718 <__lo0bits+0x56>
 800b710:	6013      	str	r3, [r2, #0]
 800b712:	4770      	bx	lr
 800b714:	2000      	movs	r0, #0
 800b716:	4770      	bx	lr
 800b718:	2020      	movs	r0, #32
 800b71a:	4770      	bx	lr

0800b71c <__i2b>:
 800b71c:	b510      	push	{r4, lr}
 800b71e:	460c      	mov	r4, r1
 800b720:	2101      	movs	r1, #1
 800b722:	f7ff ff07 	bl	800b534 <_Balloc>
 800b726:	4602      	mov	r2, r0
 800b728:	b928      	cbnz	r0, 800b736 <__i2b+0x1a>
 800b72a:	f240 1145 	movw	r1, #325	@ 0x145
 800b72e:	4b04      	ldr	r3, [pc, #16]	@ (800b740 <__i2b+0x24>)
 800b730:	4804      	ldr	r0, [pc, #16]	@ (800b744 <__i2b+0x28>)
 800b732:	f001 f831 	bl	800c798 <__assert_func>
 800b736:	2301      	movs	r3, #1
 800b738:	6144      	str	r4, [r0, #20]
 800b73a:	6103      	str	r3, [r0, #16]
 800b73c:	bd10      	pop	{r4, pc}
 800b73e:	bf00      	nop
 800b740:	0800d526 	.word	0x0800d526
 800b744:	0800d537 	.word	0x0800d537

0800b748 <__multiply>:
 800b748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b74c:	4614      	mov	r4, r2
 800b74e:	690a      	ldr	r2, [r1, #16]
 800b750:	6923      	ldr	r3, [r4, #16]
 800b752:	460f      	mov	r7, r1
 800b754:	429a      	cmp	r2, r3
 800b756:	bfa2      	ittt	ge
 800b758:	4623      	movge	r3, r4
 800b75a:	460c      	movge	r4, r1
 800b75c:	461f      	movge	r7, r3
 800b75e:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800b762:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800b766:	68a3      	ldr	r3, [r4, #8]
 800b768:	6861      	ldr	r1, [r4, #4]
 800b76a:	eb0a 0609 	add.w	r6, sl, r9
 800b76e:	42b3      	cmp	r3, r6
 800b770:	b085      	sub	sp, #20
 800b772:	bfb8      	it	lt
 800b774:	3101      	addlt	r1, #1
 800b776:	f7ff fedd 	bl	800b534 <_Balloc>
 800b77a:	b930      	cbnz	r0, 800b78a <__multiply+0x42>
 800b77c:	4602      	mov	r2, r0
 800b77e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800b782:	4b43      	ldr	r3, [pc, #268]	@ (800b890 <__multiply+0x148>)
 800b784:	4843      	ldr	r0, [pc, #268]	@ (800b894 <__multiply+0x14c>)
 800b786:	f001 f807 	bl	800c798 <__assert_func>
 800b78a:	f100 0514 	add.w	r5, r0, #20
 800b78e:	462b      	mov	r3, r5
 800b790:	2200      	movs	r2, #0
 800b792:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b796:	4543      	cmp	r3, r8
 800b798:	d321      	bcc.n	800b7de <__multiply+0x96>
 800b79a:	f107 0114 	add.w	r1, r7, #20
 800b79e:	f104 0214 	add.w	r2, r4, #20
 800b7a2:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800b7a6:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800b7aa:	9302      	str	r3, [sp, #8]
 800b7ac:	1b13      	subs	r3, r2, r4
 800b7ae:	3b15      	subs	r3, #21
 800b7b0:	f023 0303 	bic.w	r3, r3, #3
 800b7b4:	3304      	adds	r3, #4
 800b7b6:	f104 0715 	add.w	r7, r4, #21
 800b7ba:	42ba      	cmp	r2, r7
 800b7bc:	bf38      	it	cc
 800b7be:	2304      	movcc	r3, #4
 800b7c0:	9301      	str	r3, [sp, #4]
 800b7c2:	9b02      	ldr	r3, [sp, #8]
 800b7c4:	9103      	str	r1, [sp, #12]
 800b7c6:	428b      	cmp	r3, r1
 800b7c8:	d80c      	bhi.n	800b7e4 <__multiply+0x9c>
 800b7ca:	2e00      	cmp	r6, #0
 800b7cc:	dd03      	ble.n	800b7d6 <__multiply+0x8e>
 800b7ce:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7d2:	2b00      	cmp	r3, #0
 800b7d4:	d05a      	beq.n	800b88c <__multiply+0x144>
 800b7d6:	6106      	str	r6, [r0, #16]
 800b7d8:	b005      	add	sp, #20
 800b7da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7de:	f843 2b04 	str.w	r2, [r3], #4
 800b7e2:	e7d8      	b.n	800b796 <__multiply+0x4e>
 800b7e4:	f8b1 a000 	ldrh.w	sl, [r1]
 800b7e8:	f1ba 0f00 	cmp.w	sl, #0
 800b7ec:	d023      	beq.n	800b836 <__multiply+0xee>
 800b7ee:	46a9      	mov	r9, r5
 800b7f0:	f04f 0c00 	mov.w	ip, #0
 800b7f4:	f104 0e14 	add.w	lr, r4, #20
 800b7f8:	f85e 7b04 	ldr.w	r7, [lr], #4
 800b7fc:	f8d9 3000 	ldr.w	r3, [r9]
 800b800:	fa1f fb87 	uxth.w	fp, r7
 800b804:	b29b      	uxth	r3, r3
 800b806:	fb0a 330b 	mla	r3, sl, fp, r3
 800b80a:	4463      	add	r3, ip
 800b80c:	f8d9 c000 	ldr.w	ip, [r9]
 800b810:	0c3f      	lsrs	r7, r7, #16
 800b812:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 800b816:	fb0a c707 	mla	r7, sl, r7, ip
 800b81a:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800b81e:	b29b      	uxth	r3, r3
 800b820:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b824:	4572      	cmp	r2, lr
 800b826:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800b82a:	f849 3b04 	str.w	r3, [r9], #4
 800b82e:	d8e3      	bhi.n	800b7f8 <__multiply+0xb0>
 800b830:	9b01      	ldr	r3, [sp, #4]
 800b832:	f845 c003 	str.w	ip, [r5, r3]
 800b836:	9b03      	ldr	r3, [sp, #12]
 800b838:	3104      	adds	r1, #4
 800b83a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800b83e:	f1b9 0f00 	cmp.w	r9, #0
 800b842:	d021      	beq.n	800b888 <__multiply+0x140>
 800b844:	46ae      	mov	lr, r5
 800b846:	f04f 0a00 	mov.w	sl, #0
 800b84a:	682b      	ldr	r3, [r5, #0]
 800b84c:	f104 0c14 	add.w	ip, r4, #20
 800b850:	f8bc b000 	ldrh.w	fp, [ip]
 800b854:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800b858:	b29b      	uxth	r3, r3
 800b85a:	fb09 770b 	mla	r7, r9, fp, r7
 800b85e:	4457      	add	r7, sl
 800b860:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800b864:	f84e 3b04 	str.w	r3, [lr], #4
 800b868:	f85c 3b04 	ldr.w	r3, [ip], #4
 800b86c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b870:	f8be 3000 	ldrh.w	r3, [lr]
 800b874:	4562      	cmp	r2, ip
 800b876:	fb09 330a 	mla	r3, r9, sl, r3
 800b87a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800b87e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800b882:	d8e5      	bhi.n	800b850 <__multiply+0x108>
 800b884:	9f01      	ldr	r7, [sp, #4]
 800b886:	51eb      	str	r3, [r5, r7]
 800b888:	3504      	adds	r5, #4
 800b88a:	e79a      	b.n	800b7c2 <__multiply+0x7a>
 800b88c:	3e01      	subs	r6, #1
 800b88e:	e79c      	b.n	800b7ca <__multiply+0x82>
 800b890:	0800d526 	.word	0x0800d526
 800b894:	0800d537 	.word	0x0800d537

0800b898 <__pow5mult>:
 800b898:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b89c:	4615      	mov	r5, r2
 800b89e:	f012 0203 	ands.w	r2, r2, #3
 800b8a2:	4607      	mov	r7, r0
 800b8a4:	460e      	mov	r6, r1
 800b8a6:	d007      	beq.n	800b8b8 <__pow5mult+0x20>
 800b8a8:	4c25      	ldr	r4, [pc, #148]	@ (800b940 <__pow5mult+0xa8>)
 800b8aa:	3a01      	subs	r2, #1
 800b8ac:	2300      	movs	r3, #0
 800b8ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8b2:	f7ff fea1 	bl	800b5f8 <__multadd>
 800b8b6:	4606      	mov	r6, r0
 800b8b8:	10ad      	asrs	r5, r5, #2
 800b8ba:	d03d      	beq.n	800b938 <__pow5mult+0xa0>
 800b8bc:	69fc      	ldr	r4, [r7, #28]
 800b8be:	b97c      	cbnz	r4, 800b8e0 <__pow5mult+0x48>
 800b8c0:	2010      	movs	r0, #16
 800b8c2:	f7ff fd81 	bl	800b3c8 <malloc>
 800b8c6:	4602      	mov	r2, r0
 800b8c8:	61f8      	str	r0, [r7, #28]
 800b8ca:	b928      	cbnz	r0, 800b8d8 <__pow5mult+0x40>
 800b8cc:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800b8d0:	4b1c      	ldr	r3, [pc, #112]	@ (800b944 <__pow5mult+0xac>)
 800b8d2:	481d      	ldr	r0, [pc, #116]	@ (800b948 <__pow5mult+0xb0>)
 800b8d4:	f000 ff60 	bl	800c798 <__assert_func>
 800b8d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b8dc:	6004      	str	r4, [r0, #0]
 800b8de:	60c4      	str	r4, [r0, #12]
 800b8e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800b8e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b8e8:	b94c      	cbnz	r4, 800b8fe <__pow5mult+0x66>
 800b8ea:	f240 2171 	movw	r1, #625	@ 0x271
 800b8ee:	4638      	mov	r0, r7
 800b8f0:	f7ff ff14 	bl	800b71c <__i2b>
 800b8f4:	2300      	movs	r3, #0
 800b8f6:	4604      	mov	r4, r0
 800b8f8:	f8c8 0008 	str.w	r0, [r8, #8]
 800b8fc:	6003      	str	r3, [r0, #0]
 800b8fe:	f04f 0900 	mov.w	r9, #0
 800b902:	07eb      	lsls	r3, r5, #31
 800b904:	d50a      	bpl.n	800b91c <__pow5mult+0x84>
 800b906:	4631      	mov	r1, r6
 800b908:	4622      	mov	r2, r4
 800b90a:	4638      	mov	r0, r7
 800b90c:	f7ff ff1c 	bl	800b748 <__multiply>
 800b910:	4680      	mov	r8, r0
 800b912:	4631      	mov	r1, r6
 800b914:	4638      	mov	r0, r7
 800b916:	f7ff fe4d 	bl	800b5b4 <_Bfree>
 800b91a:	4646      	mov	r6, r8
 800b91c:	106d      	asrs	r5, r5, #1
 800b91e:	d00b      	beq.n	800b938 <__pow5mult+0xa0>
 800b920:	6820      	ldr	r0, [r4, #0]
 800b922:	b938      	cbnz	r0, 800b934 <__pow5mult+0x9c>
 800b924:	4622      	mov	r2, r4
 800b926:	4621      	mov	r1, r4
 800b928:	4638      	mov	r0, r7
 800b92a:	f7ff ff0d 	bl	800b748 <__multiply>
 800b92e:	6020      	str	r0, [r4, #0]
 800b930:	f8c0 9000 	str.w	r9, [r0]
 800b934:	4604      	mov	r4, r0
 800b936:	e7e4      	b.n	800b902 <__pow5mult+0x6a>
 800b938:	4630      	mov	r0, r6
 800b93a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b93e:	bf00      	nop
 800b940:	0800d590 	.word	0x0800d590
 800b944:	0800d4b7 	.word	0x0800d4b7
 800b948:	0800d537 	.word	0x0800d537

0800b94c <__lshift>:
 800b94c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b950:	460c      	mov	r4, r1
 800b952:	4607      	mov	r7, r0
 800b954:	4691      	mov	r9, r2
 800b956:	6923      	ldr	r3, [r4, #16]
 800b958:	6849      	ldr	r1, [r1, #4]
 800b95a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b95e:	68a3      	ldr	r3, [r4, #8]
 800b960:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b964:	f108 0601 	add.w	r6, r8, #1
 800b968:	42b3      	cmp	r3, r6
 800b96a:	db0b      	blt.n	800b984 <__lshift+0x38>
 800b96c:	4638      	mov	r0, r7
 800b96e:	f7ff fde1 	bl	800b534 <_Balloc>
 800b972:	4605      	mov	r5, r0
 800b974:	b948      	cbnz	r0, 800b98a <__lshift+0x3e>
 800b976:	4602      	mov	r2, r0
 800b978:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800b97c:	4b27      	ldr	r3, [pc, #156]	@ (800ba1c <__lshift+0xd0>)
 800b97e:	4828      	ldr	r0, [pc, #160]	@ (800ba20 <__lshift+0xd4>)
 800b980:	f000 ff0a 	bl	800c798 <__assert_func>
 800b984:	3101      	adds	r1, #1
 800b986:	005b      	lsls	r3, r3, #1
 800b988:	e7ee      	b.n	800b968 <__lshift+0x1c>
 800b98a:	2300      	movs	r3, #0
 800b98c:	f100 0114 	add.w	r1, r0, #20
 800b990:	f100 0210 	add.w	r2, r0, #16
 800b994:	4618      	mov	r0, r3
 800b996:	4553      	cmp	r3, sl
 800b998:	db33      	blt.n	800ba02 <__lshift+0xb6>
 800b99a:	6920      	ldr	r0, [r4, #16]
 800b99c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9a0:	f104 0314 	add.w	r3, r4, #20
 800b9a4:	f019 091f 	ands.w	r9, r9, #31
 800b9a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9b0:	d02b      	beq.n	800ba0a <__lshift+0xbe>
 800b9b2:	468a      	mov	sl, r1
 800b9b4:	2200      	movs	r2, #0
 800b9b6:	f1c9 0e20 	rsb	lr, r9, #32
 800b9ba:	6818      	ldr	r0, [r3, #0]
 800b9bc:	fa00 f009 	lsl.w	r0, r0, r9
 800b9c0:	4310      	orrs	r0, r2
 800b9c2:	f84a 0b04 	str.w	r0, [sl], #4
 800b9c6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9ca:	459c      	cmp	ip, r3
 800b9cc:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9d0:	d8f3      	bhi.n	800b9ba <__lshift+0x6e>
 800b9d2:	ebac 0304 	sub.w	r3, ip, r4
 800b9d6:	3b15      	subs	r3, #21
 800b9d8:	f023 0303 	bic.w	r3, r3, #3
 800b9dc:	3304      	adds	r3, #4
 800b9de:	f104 0015 	add.w	r0, r4, #21
 800b9e2:	4584      	cmp	ip, r0
 800b9e4:	bf38      	it	cc
 800b9e6:	2304      	movcc	r3, #4
 800b9e8:	50ca      	str	r2, [r1, r3]
 800b9ea:	b10a      	cbz	r2, 800b9f0 <__lshift+0xa4>
 800b9ec:	f108 0602 	add.w	r6, r8, #2
 800b9f0:	3e01      	subs	r6, #1
 800b9f2:	4638      	mov	r0, r7
 800b9f4:	4621      	mov	r1, r4
 800b9f6:	612e      	str	r6, [r5, #16]
 800b9f8:	f7ff fddc 	bl	800b5b4 <_Bfree>
 800b9fc:	4628      	mov	r0, r5
 800b9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba02:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba06:	3301      	adds	r3, #1
 800ba08:	e7c5      	b.n	800b996 <__lshift+0x4a>
 800ba0a:	3904      	subs	r1, #4
 800ba0c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba10:	459c      	cmp	ip, r3
 800ba12:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba16:	d8f9      	bhi.n	800ba0c <__lshift+0xc0>
 800ba18:	e7ea      	b.n	800b9f0 <__lshift+0xa4>
 800ba1a:	bf00      	nop
 800ba1c:	0800d526 	.word	0x0800d526
 800ba20:	0800d537 	.word	0x0800d537

0800ba24 <__mcmp>:
 800ba24:	4603      	mov	r3, r0
 800ba26:	690a      	ldr	r2, [r1, #16]
 800ba28:	6900      	ldr	r0, [r0, #16]
 800ba2a:	b530      	push	{r4, r5, lr}
 800ba2c:	1a80      	subs	r0, r0, r2
 800ba2e:	d10e      	bne.n	800ba4e <__mcmp+0x2a>
 800ba30:	3314      	adds	r3, #20
 800ba32:	3114      	adds	r1, #20
 800ba34:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ba38:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ba3c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ba40:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ba44:	4295      	cmp	r5, r2
 800ba46:	d003      	beq.n	800ba50 <__mcmp+0x2c>
 800ba48:	d205      	bcs.n	800ba56 <__mcmp+0x32>
 800ba4a:	f04f 30ff 	mov.w	r0, #4294967295
 800ba4e:	bd30      	pop	{r4, r5, pc}
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	d3f3      	bcc.n	800ba3c <__mcmp+0x18>
 800ba54:	e7fb      	b.n	800ba4e <__mcmp+0x2a>
 800ba56:	2001      	movs	r0, #1
 800ba58:	e7f9      	b.n	800ba4e <__mcmp+0x2a>
	...

0800ba5c <__mdiff>:
 800ba5c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba60:	4689      	mov	r9, r1
 800ba62:	4606      	mov	r6, r0
 800ba64:	4611      	mov	r1, r2
 800ba66:	4648      	mov	r0, r9
 800ba68:	4614      	mov	r4, r2
 800ba6a:	f7ff ffdb 	bl	800ba24 <__mcmp>
 800ba6e:	1e05      	subs	r5, r0, #0
 800ba70:	d112      	bne.n	800ba98 <__mdiff+0x3c>
 800ba72:	4629      	mov	r1, r5
 800ba74:	4630      	mov	r0, r6
 800ba76:	f7ff fd5d 	bl	800b534 <_Balloc>
 800ba7a:	4602      	mov	r2, r0
 800ba7c:	b928      	cbnz	r0, 800ba8a <__mdiff+0x2e>
 800ba7e:	f240 2137 	movw	r1, #567	@ 0x237
 800ba82:	4b3e      	ldr	r3, [pc, #248]	@ (800bb7c <__mdiff+0x120>)
 800ba84:	483e      	ldr	r0, [pc, #248]	@ (800bb80 <__mdiff+0x124>)
 800ba86:	f000 fe87 	bl	800c798 <__assert_func>
 800ba8a:	2301      	movs	r3, #1
 800ba8c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ba90:	4610      	mov	r0, r2
 800ba92:	b003      	add	sp, #12
 800ba94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ba98:	bfbc      	itt	lt
 800ba9a:	464b      	movlt	r3, r9
 800ba9c:	46a1      	movlt	r9, r4
 800ba9e:	4630      	mov	r0, r6
 800baa0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800baa4:	bfba      	itte	lt
 800baa6:	461c      	movlt	r4, r3
 800baa8:	2501      	movlt	r5, #1
 800baaa:	2500      	movge	r5, #0
 800baac:	f7ff fd42 	bl	800b534 <_Balloc>
 800bab0:	4602      	mov	r2, r0
 800bab2:	b918      	cbnz	r0, 800babc <__mdiff+0x60>
 800bab4:	f240 2145 	movw	r1, #581	@ 0x245
 800bab8:	4b30      	ldr	r3, [pc, #192]	@ (800bb7c <__mdiff+0x120>)
 800baba:	e7e3      	b.n	800ba84 <__mdiff+0x28>
 800babc:	f100 0b14 	add.w	fp, r0, #20
 800bac0:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800bac4:	f109 0310 	add.w	r3, r9, #16
 800bac8:	60c5      	str	r5, [r0, #12]
 800baca:	f04f 0c00 	mov.w	ip, #0
 800bace:	f109 0514 	add.w	r5, r9, #20
 800bad2:	46d9      	mov	r9, fp
 800bad4:	6926      	ldr	r6, [r4, #16]
 800bad6:	f104 0e14 	add.w	lr, r4, #20
 800bada:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800bade:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800bae2:	9301      	str	r3, [sp, #4]
 800bae4:	9b01      	ldr	r3, [sp, #4]
 800bae6:	f85e 0b04 	ldr.w	r0, [lr], #4
 800baea:	f853 af04 	ldr.w	sl, [r3, #4]!
 800baee:	b281      	uxth	r1, r0
 800baf0:	9301      	str	r3, [sp, #4]
 800baf2:	fa1f f38a 	uxth.w	r3, sl
 800baf6:	1a5b      	subs	r3, r3, r1
 800baf8:	0c00      	lsrs	r0, r0, #16
 800bafa:	4463      	add	r3, ip
 800bafc:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800bb00:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800bb04:	b29b      	uxth	r3, r3
 800bb06:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800bb0a:	4576      	cmp	r6, lr
 800bb0c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb10:	f849 3b04 	str.w	r3, [r9], #4
 800bb14:	d8e6      	bhi.n	800bae4 <__mdiff+0x88>
 800bb16:	1b33      	subs	r3, r6, r4
 800bb18:	3b15      	subs	r3, #21
 800bb1a:	f023 0303 	bic.w	r3, r3, #3
 800bb1e:	3415      	adds	r4, #21
 800bb20:	3304      	adds	r3, #4
 800bb22:	42a6      	cmp	r6, r4
 800bb24:	bf38      	it	cc
 800bb26:	2304      	movcc	r3, #4
 800bb28:	441d      	add	r5, r3
 800bb2a:	445b      	add	r3, fp
 800bb2c:	461e      	mov	r6, r3
 800bb2e:	462c      	mov	r4, r5
 800bb30:	4544      	cmp	r4, r8
 800bb32:	d30e      	bcc.n	800bb52 <__mdiff+0xf6>
 800bb34:	f108 0103 	add.w	r1, r8, #3
 800bb38:	1b49      	subs	r1, r1, r5
 800bb3a:	f021 0103 	bic.w	r1, r1, #3
 800bb3e:	3d03      	subs	r5, #3
 800bb40:	45a8      	cmp	r8, r5
 800bb42:	bf38      	it	cc
 800bb44:	2100      	movcc	r1, #0
 800bb46:	440b      	add	r3, r1
 800bb48:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800bb4c:	b199      	cbz	r1, 800bb76 <__mdiff+0x11a>
 800bb4e:	6117      	str	r7, [r2, #16]
 800bb50:	e79e      	b.n	800ba90 <__mdiff+0x34>
 800bb52:	46e6      	mov	lr, ip
 800bb54:	f854 1b04 	ldr.w	r1, [r4], #4
 800bb58:	fa1f fc81 	uxth.w	ip, r1
 800bb5c:	44f4      	add	ip, lr
 800bb5e:	0c08      	lsrs	r0, r1, #16
 800bb60:	4471      	add	r1, lr
 800bb62:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800bb66:	b289      	uxth	r1, r1
 800bb68:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800bb6c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800bb70:	f846 1b04 	str.w	r1, [r6], #4
 800bb74:	e7dc      	b.n	800bb30 <__mdiff+0xd4>
 800bb76:	3f01      	subs	r7, #1
 800bb78:	e7e6      	b.n	800bb48 <__mdiff+0xec>
 800bb7a:	bf00      	nop
 800bb7c:	0800d526 	.word	0x0800d526
 800bb80:	0800d537 	.word	0x0800d537

0800bb84 <__d2b>:
 800bb84:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 800bb88:	2101      	movs	r1, #1
 800bb8a:	4690      	mov	r8, r2
 800bb8c:	4699      	mov	r9, r3
 800bb8e:	9e08      	ldr	r6, [sp, #32]
 800bb90:	f7ff fcd0 	bl	800b534 <_Balloc>
 800bb94:	4604      	mov	r4, r0
 800bb96:	b930      	cbnz	r0, 800bba6 <__d2b+0x22>
 800bb98:	4602      	mov	r2, r0
 800bb9a:	f240 310f 	movw	r1, #783	@ 0x30f
 800bb9e:	4b23      	ldr	r3, [pc, #140]	@ (800bc2c <__d2b+0xa8>)
 800bba0:	4823      	ldr	r0, [pc, #140]	@ (800bc30 <__d2b+0xac>)
 800bba2:	f000 fdf9 	bl	800c798 <__assert_func>
 800bba6:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbaa:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbae:	b10d      	cbz	r5, 800bbb4 <__d2b+0x30>
 800bbb0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	f1b8 0300 	subs.w	r3, r8, #0
 800bbba:	d024      	beq.n	800bc06 <__d2b+0x82>
 800bbbc:	4668      	mov	r0, sp
 800bbbe:	9300      	str	r3, [sp, #0]
 800bbc0:	f7ff fd7f 	bl	800b6c2 <__lo0bits>
 800bbc4:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbc8:	b1d8      	cbz	r0, 800bc02 <__d2b+0x7e>
 800bbca:	f1c0 0320 	rsb	r3, r0, #32
 800bbce:	fa02 f303 	lsl.w	r3, r2, r3
 800bbd2:	430b      	orrs	r3, r1
 800bbd4:	40c2      	lsrs	r2, r0
 800bbd6:	6163      	str	r3, [r4, #20]
 800bbd8:	9201      	str	r2, [sp, #4]
 800bbda:	9b01      	ldr	r3, [sp, #4]
 800bbdc:	2b00      	cmp	r3, #0
 800bbde:	bf0c      	ite	eq
 800bbe0:	2201      	moveq	r2, #1
 800bbe2:	2202      	movne	r2, #2
 800bbe4:	61a3      	str	r3, [r4, #24]
 800bbe6:	6122      	str	r2, [r4, #16]
 800bbe8:	b1ad      	cbz	r5, 800bc16 <__d2b+0x92>
 800bbea:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800bbee:	4405      	add	r5, r0
 800bbf0:	6035      	str	r5, [r6, #0]
 800bbf2:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800bbf6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bbf8:	6018      	str	r0, [r3, #0]
 800bbfa:	4620      	mov	r0, r4
 800bbfc:	b002      	add	sp, #8
 800bbfe:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800bc02:	6161      	str	r1, [r4, #20]
 800bc04:	e7e9      	b.n	800bbda <__d2b+0x56>
 800bc06:	a801      	add	r0, sp, #4
 800bc08:	f7ff fd5b 	bl	800b6c2 <__lo0bits>
 800bc0c:	9b01      	ldr	r3, [sp, #4]
 800bc0e:	2201      	movs	r2, #1
 800bc10:	6163      	str	r3, [r4, #20]
 800bc12:	3020      	adds	r0, #32
 800bc14:	e7e7      	b.n	800bbe6 <__d2b+0x62>
 800bc16:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800bc1a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc1e:	6030      	str	r0, [r6, #0]
 800bc20:	6918      	ldr	r0, [r3, #16]
 800bc22:	f7ff fd2f 	bl	800b684 <__hi0bits>
 800bc26:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc2a:	e7e4      	b.n	800bbf6 <__d2b+0x72>
 800bc2c:	0800d526 	.word	0x0800d526
 800bc30:	0800d537 	.word	0x0800d537

0800bc34 <__ssputs_r>:
 800bc34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc38:	461f      	mov	r7, r3
 800bc3a:	688e      	ldr	r6, [r1, #8]
 800bc3c:	4682      	mov	sl, r0
 800bc3e:	42be      	cmp	r6, r7
 800bc40:	460c      	mov	r4, r1
 800bc42:	4690      	mov	r8, r2
 800bc44:	680b      	ldr	r3, [r1, #0]
 800bc46:	d82d      	bhi.n	800bca4 <__ssputs_r+0x70>
 800bc48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800bc4c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800bc50:	d026      	beq.n	800bca0 <__ssputs_r+0x6c>
 800bc52:	6965      	ldr	r5, [r4, #20]
 800bc54:	6909      	ldr	r1, [r1, #16]
 800bc56:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc5a:	eba3 0901 	sub.w	r9, r3, r1
 800bc5e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc62:	1c7b      	adds	r3, r7, #1
 800bc64:	444b      	add	r3, r9
 800bc66:	106d      	asrs	r5, r5, #1
 800bc68:	429d      	cmp	r5, r3
 800bc6a:	bf38      	it	cc
 800bc6c:	461d      	movcc	r5, r3
 800bc6e:	0553      	lsls	r3, r2, #21
 800bc70:	d527      	bpl.n	800bcc2 <__ssputs_r+0x8e>
 800bc72:	4629      	mov	r1, r5
 800bc74:	f7ff fbd2 	bl	800b41c <_malloc_r>
 800bc78:	4606      	mov	r6, r0
 800bc7a:	b360      	cbz	r0, 800bcd6 <__ssputs_r+0xa2>
 800bc7c:	464a      	mov	r2, r9
 800bc7e:	6921      	ldr	r1, [r4, #16]
 800bc80:	f7fe fcfb 	bl	800a67a <memcpy>
 800bc84:	89a3      	ldrh	r3, [r4, #12]
 800bc86:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800bc8a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc8e:	81a3      	strh	r3, [r4, #12]
 800bc90:	6126      	str	r6, [r4, #16]
 800bc92:	444e      	add	r6, r9
 800bc94:	6026      	str	r6, [r4, #0]
 800bc96:	463e      	mov	r6, r7
 800bc98:	6165      	str	r5, [r4, #20]
 800bc9a:	eba5 0509 	sub.w	r5, r5, r9
 800bc9e:	60a5      	str	r5, [r4, #8]
 800bca0:	42be      	cmp	r6, r7
 800bca2:	d900      	bls.n	800bca6 <__ssputs_r+0x72>
 800bca4:	463e      	mov	r6, r7
 800bca6:	4632      	mov	r2, r6
 800bca8:	4641      	mov	r1, r8
 800bcaa:	6820      	ldr	r0, [r4, #0]
 800bcac:	f000 fd49 	bl	800c742 <memmove>
 800bcb0:	2000      	movs	r0, #0
 800bcb2:	68a3      	ldr	r3, [r4, #8]
 800bcb4:	1b9b      	subs	r3, r3, r6
 800bcb6:	60a3      	str	r3, [r4, #8]
 800bcb8:	6823      	ldr	r3, [r4, #0]
 800bcba:	4433      	add	r3, r6
 800bcbc:	6023      	str	r3, [r4, #0]
 800bcbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcc2:	462a      	mov	r2, r5
 800bcc4:	f000 fdac 	bl	800c820 <_realloc_r>
 800bcc8:	4606      	mov	r6, r0
 800bcca:	2800      	cmp	r0, #0
 800bccc:	d1e0      	bne.n	800bc90 <__ssputs_r+0x5c>
 800bcce:	4650      	mov	r0, sl
 800bcd0:	6921      	ldr	r1, [r4, #16]
 800bcd2:	f7ff fb31 	bl	800b338 <_free_r>
 800bcd6:	230c      	movs	r3, #12
 800bcd8:	f8ca 3000 	str.w	r3, [sl]
 800bcdc:	89a3      	ldrh	r3, [r4, #12]
 800bcde:	f04f 30ff 	mov.w	r0, #4294967295
 800bce2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bce6:	81a3      	strh	r3, [r4, #12]
 800bce8:	e7e9      	b.n	800bcbe <__ssputs_r+0x8a>
	...

0800bcec <_svfiprintf_r>:
 800bcec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcf0:	4698      	mov	r8, r3
 800bcf2:	898b      	ldrh	r3, [r1, #12]
 800bcf4:	4607      	mov	r7, r0
 800bcf6:	061b      	lsls	r3, r3, #24
 800bcf8:	460d      	mov	r5, r1
 800bcfa:	4614      	mov	r4, r2
 800bcfc:	b09d      	sub	sp, #116	@ 0x74
 800bcfe:	d510      	bpl.n	800bd22 <_svfiprintf_r+0x36>
 800bd00:	690b      	ldr	r3, [r1, #16]
 800bd02:	b973      	cbnz	r3, 800bd22 <_svfiprintf_r+0x36>
 800bd04:	2140      	movs	r1, #64	@ 0x40
 800bd06:	f7ff fb89 	bl	800b41c <_malloc_r>
 800bd0a:	6028      	str	r0, [r5, #0]
 800bd0c:	6128      	str	r0, [r5, #16]
 800bd0e:	b930      	cbnz	r0, 800bd1e <_svfiprintf_r+0x32>
 800bd10:	230c      	movs	r3, #12
 800bd12:	603b      	str	r3, [r7, #0]
 800bd14:	f04f 30ff 	mov.w	r0, #4294967295
 800bd18:	b01d      	add	sp, #116	@ 0x74
 800bd1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd1e:	2340      	movs	r3, #64	@ 0x40
 800bd20:	616b      	str	r3, [r5, #20]
 800bd22:	2300      	movs	r3, #0
 800bd24:	9309      	str	r3, [sp, #36]	@ 0x24
 800bd26:	2320      	movs	r3, #32
 800bd28:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800bd2c:	2330      	movs	r3, #48	@ 0x30
 800bd2e:	f04f 0901 	mov.w	r9, #1
 800bd32:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd36:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 800bed0 <_svfiprintf_r+0x1e4>
 800bd3a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800bd3e:	4623      	mov	r3, r4
 800bd40:	469a      	mov	sl, r3
 800bd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd46:	b10a      	cbz	r2, 800bd4c <_svfiprintf_r+0x60>
 800bd48:	2a25      	cmp	r2, #37	@ 0x25
 800bd4a:	d1f9      	bne.n	800bd40 <_svfiprintf_r+0x54>
 800bd4c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd50:	d00b      	beq.n	800bd6a <_svfiprintf_r+0x7e>
 800bd52:	465b      	mov	r3, fp
 800bd54:	4622      	mov	r2, r4
 800bd56:	4629      	mov	r1, r5
 800bd58:	4638      	mov	r0, r7
 800bd5a:	f7ff ff6b 	bl	800bc34 <__ssputs_r>
 800bd5e:	3001      	adds	r0, #1
 800bd60:	f000 80a7 	beq.w	800beb2 <_svfiprintf_r+0x1c6>
 800bd64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800bd66:	445a      	add	r2, fp
 800bd68:	9209      	str	r2, [sp, #36]	@ 0x24
 800bd6a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd6e:	2b00      	cmp	r3, #0
 800bd70:	f000 809f 	beq.w	800beb2 <_svfiprintf_r+0x1c6>
 800bd74:	2300      	movs	r3, #0
 800bd76:	f04f 32ff 	mov.w	r2, #4294967295
 800bd7a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd7e:	f10a 0a01 	add.w	sl, sl, #1
 800bd82:	9304      	str	r3, [sp, #16]
 800bd84:	9307      	str	r3, [sp, #28]
 800bd86:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800bd8a:	931a      	str	r3, [sp, #104]	@ 0x68
 800bd8c:	4654      	mov	r4, sl
 800bd8e:	2205      	movs	r2, #5
 800bd90:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bd94:	484e      	ldr	r0, [pc, #312]	@ (800bed0 <_svfiprintf_r+0x1e4>)
 800bd96:	f7fe fc62 	bl	800a65e <memchr>
 800bd9a:	9a04      	ldr	r2, [sp, #16]
 800bd9c:	b9d8      	cbnz	r0, 800bdd6 <_svfiprintf_r+0xea>
 800bd9e:	06d0      	lsls	r0, r2, #27
 800bda0:	bf44      	itt	mi
 800bda2:	2320      	movmi	r3, #32
 800bda4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bda8:	0711      	lsls	r1, r2, #28
 800bdaa:	bf44      	itt	mi
 800bdac:	232b      	movmi	r3, #43	@ 0x2b
 800bdae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800bdb2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdb6:	2b2a      	cmp	r3, #42	@ 0x2a
 800bdb8:	d015      	beq.n	800bde6 <_svfiprintf_r+0xfa>
 800bdba:	4654      	mov	r4, sl
 800bdbc:	2000      	movs	r0, #0
 800bdbe:	f04f 0c0a 	mov.w	ip, #10
 800bdc2:	9a07      	ldr	r2, [sp, #28]
 800bdc4:	4621      	mov	r1, r4
 800bdc6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdca:	3b30      	subs	r3, #48	@ 0x30
 800bdcc:	2b09      	cmp	r3, #9
 800bdce:	d94b      	bls.n	800be68 <_svfiprintf_r+0x17c>
 800bdd0:	b1b0      	cbz	r0, 800be00 <_svfiprintf_r+0x114>
 800bdd2:	9207      	str	r2, [sp, #28]
 800bdd4:	e014      	b.n	800be00 <_svfiprintf_r+0x114>
 800bdd6:	eba0 0308 	sub.w	r3, r0, r8
 800bdda:	fa09 f303 	lsl.w	r3, r9, r3
 800bdde:	4313      	orrs	r3, r2
 800bde0:	46a2      	mov	sl, r4
 800bde2:	9304      	str	r3, [sp, #16]
 800bde4:	e7d2      	b.n	800bd8c <_svfiprintf_r+0xa0>
 800bde6:	9b03      	ldr	r3, [sp, #12]
 800bde8:	1d19      	adds	r1, r3, #4
 800bdea:	681b      	ldr	r3, [r3, #0]
 800bdec:	9103      	str	r1, [sp, #12]
 800bdee:	2b00      	cmp	r3, #0
 800bdf0:	bfbb      	ittet	lt
 800bdf2:	425b      	neglt	r3, r3
 800bdf4:	f042 0202 	orrlt.w	r2, r2, #2
 800bdf8:	9307      	strge	r3, [sp, #28]
 800bdfa:	9307      	strlt	r3, [sp, #28]
 800bdfc:	bfb8      	it	lt
 800bdfe:	9204      	strlt	r2, [sp, #16]
 800be00:	7823      	ldrb	r3, [r4, #0]
 800be02:	2b2e      	cmp	r3, #46	@ 0x2e
 800be04:	d10a      	bne.n	800be1c <_svfiprintf_r+0x130>
 800be06:	7863      	ldrb	r3, [r4, #1]
 800be08:	2b2a      	cmp	r3, #42	@ 0x2a
 800be0a:	d132      	bne.n	800be72 <_svfiprintf_r+0x186>
 800be0c:	9b03      	ldr	r3, [sp, #12]
 800be0e:	3402      	adds	r4, #2
 800be10:	1d1a      	adds	r2, r3, #4
 800be12:	681b      	ldr	r3, [r3, #0]
 800be14:	9203      	str	r2, [sp, #12]
 800be16:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800be1a:	9305      	str	r3, [sp, #20]
 800be1c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 800bed4 <_svfiprintf_r+0x1e8>
 800be20:	2203      	movs	r2, #3
 800be22:	4650      	mov	r0, sl
 800be24:	7821      	ldrb	r1, [r4, #0]
 800be26:	f7fe fc1a 	bl	800a65e <memchr>
 800be2a:	b138      	cbz	r0, 800be3c <_svfiprintf_r+0x150>
 800be2c:	2240      	movs	r2, #64	@ 0x40
 800be2e:	9b04      	ldr	r3, [sp, #16]
 800be30:	eba0 000a 	sub.w	r0, r0, sl
 800be34:	4082      	lsls	r2, r0
 800be36:	4313      	orrs	r3, r2
 800be38:	3401      	adds	r4, #1
 800be3a:	9304      	str	r3, [sp, #16]
 800be3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be40:	2206      	movs	r2, #6
 800be42:	4825      	ldr	r0, [pc, #148]	@ (800bed8 <_svfiprintf_r+0x1ec>)
 800be44:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800be48:	f7fe fc09 	bl	800a65e <memchr>
 800be4c:	2800      	cmp	r0, #0
 800be4e:	d036      	beq.n	800bebe <_svfiprintf_r+0x1d2>
 800be50:	4b22      	ldr	r3, [pc, #136]	@ (800bedc <_svfiprintf_r+0x1f0>)
 800be52:	bb1b      	cbnz	r3, 800be9c <_svfiprintf_r+0x1b0>
 800be54:	9b03      	ldr	r3, [sp, #12]
 800be56:	3307      	adds	r3, #7
 800be58:	f023 0307 	bic.w	r3, r3, #7
 800be5c:	3308      	adds	r3, #8
 800be5e:	9303      	str	r3, [sp, #12]
 800be60:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800be62:	4433      	add	r3, r6
 800be64:	9309      	str	r3, [sp, #36]	@ 0x24
 800be66:	e76a      	b.n	800bd3e <_svfiprintf_r+0x52>
 800be68:	460c      	mov	r4, r1
 800be6a:	2001      	movs	r0, #1
 800be6c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be70:	e7a8      	b.n	800bdc4 <_svfiprintf_r+0xd8>
 800be72:	2300      	movs	r3, #0
 800be74:	f04f 0c0a 	mov.w	ip, #10
 800be78:	4619      	mov	r1, r3
 800be7a:	3401      	adds	r4, #1
 800be7c:	9305      	str	r3, [sp, #20]
 800be7e:	4620      	mov	r0, r4
 800be80:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be84:	3a30      	subs	r2, #48	@ 0x30
 800be86:	2a09      	cmp	r2, #9
 800be88:	d903      	bls.n	800be92 <_svfiprintf_r+0x1a6>
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d0c6      	beq.n	800be1c <_svfiprintf_r+0x130>
 800be8e:	9105      	str	r1, [sp, #20]
 800be90:	e7c4      	b.n	800be1c <_svfiprintf_r+0x130>
 800be92:	4604      	mov	r4, r0
 800be94:	2301      	movs	r3, #1
 800be96:	fb0c 2101 	mla	r1, ip, r1, r2
 800be9a:	e7f0      	b.n	800be7e <_svfiprintf_r+0x192>
 800be9c:	ab03      	add	r3, sp, #12
 800be9e:	9300      	str	r3, [sp, #0]
 800bea0:	462a      	mov	r2, r5
 800bea2:	4638      	mov	r0, r7
 800bea4:	4b0e      	ldr	r3, [pc, #56]	@ (800bee0 <_svfiprintf_r+0x1f4>)
 800bea6:	a904      	add	r1, sp, #16
 800bea8:	f7fd fe14 	bl	8009ad4 <_printf_float>
 800beac:	1c42      	adds	r2, r0, #1
 800beae:	4606      	mov	r6, r0
 800beb0:	d1d6      	bne.n	800be60 <_svfiprintf_r+0x174>
 800beb2:	89ab      	ldrh	r3, [r5, #12]
 800beb4:	065b      	lsls	r3, r3, #25
 800beb6:	f53f af2d 	bmi.w	800bd14 <_svfiprintf_r+0x28>
 800beba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800bebc:	e72c      	b.n	800bd18 <_svfiprintf_r+0x2c>
 800bebe:	ab03      	add	r3, sp, #12
 800bec0:	9300      	str	r3, [sp, #0]
 800bec2:	462a      	mov	r2, r5
 800bec4:	4638      	mov	r0, r7
 800bec6:	4b06      	ldr	r3, [pc, #24]	@ (800bee0 <_svfiprintf_r+0x1f4>)
 800bec8:	a904      	add	r1, sp, #16
 800beca:	f7fe f8a1 	bl	800a010 <_printf_i>
 800bece:	e7ed      	b.n	800beac <_svfiprintf_r+0x1c0>
 800bed0:	0800d690 	.word	0x0800d690
 800bed4:	0800d696 	.word	0x0800d696
 800bed8:	0800d69a 	.word	0x0800d69a
 800bedc:	08009ad5 	.word	0x08009ad5
 800bee0:	0800bc35 	.word	0x0800bc35

0800bee4 <_sungetc_r>:
 800bee4:	b538      	push	{r3, r4, r5, lr}
 800bee6:	1c4b      	adds	r3, r1, #1
 800bee8:	4614      	mov	r4, r2
 800beea:	d103      	bne.n	800bef4 <_sungetc_r+0x10>
 800beec:	f04f 35ff 	mov.w	r5, #4294967295
 800bef0:	4628      	mov	r0, r5
 800bef2:	bd38      	pop	{r3, r4, r5, pc}
 800bef4:	8993      	ldrh	r3, [r2, #12]
 800bef6:	b2cd      	uxtb	r5, r1
 800bef8:	f023 0320 	bic.w	r3, r3, #32
 800befc:	8193      	strh	r3, [r2, #12]
 800befe:	6853      	ldr	r3, [r2, #4]
 800bf00:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800bf02:	b18a      	cbz	r2, 800bf28 <_sungetc_r+0x44>
 800bf04:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800bf06:	429a      	cmp	r2, r3
 800bf08:	dd08      	ble.n	800bf1c <_sungetc_r+0x38>
 800bf0a:	6823      	ldr	r3, [r4, #0]
 800bf0c:	1e5a      	subs	r2, r3, #1
 800bf0e:	6022      	str	r2, [r4, #0]
 800bf10:	f803 5c01 	strb.w	r5, [r3, #-1]
 800bf14:	6863      	ldr	r3, [r4, #4]
 800bf16:	3301      	adds	r3, #1
 800bf18:	6063      	str	r3, [r4, #4]
 800bf1a:	e7e9      	b.n	800bef0 <_sungetc_r+0xc>
 800bf1c:	4621      	mov	r1, r4
 800bf1e:	f000 fbd8 	bl	800c6d2 <__submore>
 800bf22:	2800      	cmp	r0, #0
 800bf24:	d0f1      	beq.n	800bf0a <_sungetc_r+0x26>
 800bf26:	e7e1      	b.n	800beec <_sungetc_r+0x8>
 800bf28:	6921      	ldr	r1, [r4, #16]
 800bf2a:	6822      	ldr	r2, [r4, #0]
 800bf2c:	b141      	cbz	r1, 800bf40 <_sungetc_r+0x5c>
 800bf2e:	4291      	cmp	r1, r2
 800bf30:	d206      	bcs.n	800bf40 <_sungetc_r+0x5c>
 800bf32:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 800bf36:	42a9      	cmp	r1, r5
 800bf38:	d102      	bne.n	800bf40 <_sungetc_r+0x5c>
 800bf3a:	3a01      	subs	r2, #1
 800bf3c:	6022      	str	r2, [r4, #0]
 800bf3e:	e7ea      	b.n	800bf16 <_sungetc_r+0x32>
 800bf40:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 800bf44:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf48:	6363      	str	r3, [r4, #52]	@ 0x34
 800bf4a:	2303      	movs	r3, #3
 800bf4c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800bf4e:	4623      	mov	r3, r4
 800bf50:	f803 5f46 	strb.w	r5, [r3, #70]!
 800bf54:	6023      	str	r3, [r4, #0]
 800bf56:	2301      	movs	r3, #1
 800bf58:	e7de      	b.n	800bf18 <_sungetc_r+0x34>

0800bf5a <__ssrefill_r>:
 800bf5a:	b510      	push	{r4, lr}
 800bf5c:	460c      	mov	r4, r1
 800bf5e:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800bf60:	b169      	cbz	r1, 800bf7e <__ssrefill_r+0x24>
 800bf62:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bf66:	4299      	cmp	r1, r3
 800bf68:	d001      	beq.n	800bf6e <__ssrefill_r+0x14>
 800bf6a:	f7ff f9e5 	bl	800b338 <_free_r>
 800bf6e:	2000      	movs	r0, #0
 800bf70:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bf72:	6360      	str	r0, [r4, #52]	@ 0x34
 800bf74:	6063      	str	r3, [r4, #4]
 800bf76:	b113      	cbz	r3, 800bf7e <__ssrefill_r+0x24>
 800bf78:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800bf7a:	6023      	str	r3, [r4, #0]
 800bf7c:	bd10      	pop	{r4, pc}
 800bf7e:	6923      	ldr	r3, [r4, #16]
 800bf80:	f04f 30ff 	mov.w	r0, #4294967295
 800bf84:	6023      	str	r3, [r4, #0]
 800bf86:	2300      	movs	r3, #0
 800bf88:	6063      	str	r3, [r4, #4]
 800bf8a:	89a3      	ldrh	r3, [r4, #12]
 800bf8c:	f043 0320 	orr.w	r3, r3, #32
 800bf90:	81a3      	strh	r3, [r4, #12]
 800bf92:	e7f3      	b.n	800bf7c <__ssrefill_r+0x22>

0800bf94 <__ssvfiscanf_r>:
 800bf94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bf98:	460c      	mov	r4, r1
 800bf9a:	2100      	movs	r1, #0
 800bf9c:	4606      	mov	r6, r0
 800bf9e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800bfa2:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800bfa6:	49aa      	ldr	r1, [pc, #680]	@ (800c250 <__ssvfiscanf_r+0x2bc>)
 800bfa8:	f10d 0804 	add.w	r8, sp, #4
 800bfac:	91a0      	str	r1, [sp, #640]	@ 0x280
 800bfae:	49a9      	ldr	r1, [pc, #676]	@ (800c254 <__ssvfiscanf_r+0x2c0>)
 800bfb0:	4fa9      	ldr	r7, [pc, #676]	@ (800c258 <__ssvfiscanf_r+0x2c4>)
 800bfb2:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800bfb6:	91a1      	str	r1, [sp, #644]	@ 0x284
 800bfb8:	9300      	str	r3, [sp, #0]
 800bfba:	7813      	ldrb	r3, [r2, #0]
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	f000 8159 	beq.w	800c274 <__ssvfiscanf_r+0x2e0>
 800bfc2:	5cf9      	ldrb	r1, [r7, r3]
 800bfc4:	1c55      	adds	r5, r2, #1
 800bfc6:	f011 0108 	ands.w	r1, r1, #8
 800bfca:	d019      	beq.n	800c000 <__ssvfiscanf_r+0x6c>
 800bfcc:	6863      	ldr	r3, [r4, #4]
 800bfce:	2b00      	cmp	r3, #0
 800bfd0:	dd0f      	ble.n	800bff2 <__ssvfiscanf_r+0x5e>
 800bfd2:	6823      	ldr	r3, [r4, #0]
 800bfd4:	781a      	ldrb	r2, [r3, #0]
 800bfd6:	5cba      	ldrb	r2, [r7, r2]
 800bfd8:	0712      	lsls	r2, r2, #28
 800bfda:	d401      	bmi.n	800bfe0 <__ssvfiscanf_r+0x4c>
 800bfdc:	462a      	mov	r2, r5
 800bfde:	e7ec      	b.n	800bfba <__ssvfiscanf_r+0x26>
 800bfe0:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800bfe2:	3301      	adds	r3, #1
 800bfe4:	3201      	adds	r2, #1
 800bfe6:	9245      	str	r2, [sp, #276]	@ 0x114
 800bfe8:	6862      	ldr	r2, [r4, #4]
 800bfea:	6023      	str	r3, [r4, #0]
 800bfec:	3a01      	subs	r2, #1
 800bfee:	6062      	str	r2, [r4, #4]
 800bff0:	e7ec      	b.n	800bfcc <__ssvfiscanf_r+0x38>
 800bff2:	4621      	mov	r1, r4
 800bff4:	4630      	mov	r0, r6
 800bff6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800bff8:	4798      	blx	r3
 800bffa:	2800      	cmp	r0, #0
 800bffc:	d0e9      	beq.n	800bfd2 <__ssvfiscanf_r+0x3e>
 800bffe:	e7ed      	b.n	800bfdc <__ssvfiscanf_r+0x48>
 800c000:	2b25      	cmp	r3, #37	@ 0x25
 800c002:	d012      	beq.n	800c02a <__ssvfiscanf_r+0x96>
 800c004:	4699      	mov	r9, r3
 800c006:	6863      	ldr	r3, [r4, #4]
 800c008:	2b00      	cmp	r3, #0
 800c00a:	f340 8094 	ble.w	800c136 <__ssvfiscanf_r+0x1a2>
 800c00e:	6822      	ldr	r2, [r4, #0]
 800c010:	7813      	ldrb	r3, [r2, #0]
 800c012:	454b      	cmp	r3, r9
 800c014:	f040 812e 	bne.w	800c274 <__ssvfiscanf_r+0x2e0>
 800c018:	6863      	ldr	r3, [r4, #4]
 800c01a:	3201      	adds	r2, #1
 800c01c:	3b01      	subs	r3, #1
 800c01e:	6063      	str	r3, [r4, #4]
 800c020:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800c022:	6022      	str	r2, [r4, #0]
 800c024:	3301      	adds	r3, #1
 800c026:	9345      	str	r3, [sp, #276]	@ 0x114
 800c028:	e7d8      	b.n	800bfdc <__ssvfiscanf_r+0x48>
 800c02a:	9141      	str	r1, [sp, #260]	@ 0x104
 800c02c:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c02e:	7853      	ldrb	r3, [r2, #1]
 800c030:	2b2a      	cmp	r3, #42	@ 0x2a
 800c032:	bf04      	itt	eq
 800c034:	2310      	moveq	r3, #16
 800c036:	1c95      	addeq	r5, r2, #2
 800c038:	f04f 020a 	mov.w	r2, #10
 800c03c:	bf08      	it	eq
 800c03e:	9341      	streq	r3, [sp, #260]	@ 0x104
 800c040:	46a9      	mov	r9, r5
 800c042:	f819 1b01 	ldrb.w	r1, [r9], #1
 800c046:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800c04a:	2b09      	cmp	r3, #9
 800c04c:	d91e      	bls.n	800c08c <__ssvfiscanf_r+0xf8>
 800c04e:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800c25c <__ssvfiscanf_r+0x2c8>
 800c052:	2203      	movs	r2, #3
 800c054:	4650      	mov	r0, sl
 800c056:	f7fe fb02 	bl	800a65e <memchr>
 800c05a:	b138      	cbz	r0, 800c06c <__ssvfiscanf_r+0xd8>
 800c05c:	2301      	movs	r3, #1
 800c05e:	464d      	mov	r5, r9
 800c060:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c062:	eba0 000a 	sub.w	r0, r0, sl
 800c066:	4083      	lsls	r3, r0
 800c068:	4313      	orrs	r3, r2
 800c06a:	9341      	str	r3, [sp, #260]	@ 0x104
 800c06c:	f815 3b01 	ldrb.w	r3, [r5], #1
 800c070:	2b78      	cmp	r3, #120	@ 0x78
 800c072:	d806      	bhi.n	800c082 <__ssvfiscanf_r+0xee>
 800c074:	2b57      	cmp	r3, #87	@ 0x57
 800c076:	d810      	bhi.n	800c09a <__ssvfiscanf_r+0x106>
 800c078:	2b25      	cmp	r3, #37	@ 0x25
 800c07a:	d0c3      	beq.n	800c004 <__ssvfiscanf_r+0x70>
 800c07c:	d856      	bhi.n	800c12c <__ssvfiscanf_r+0x198>
 800c07e:	2b00      	cmp	r3, #0
 800c080:	d064      	beq.n	800c14c <__ssvfiscanf_r+0x1b8>
 800c082:	2303      	movs	r3, #3
 800c084:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c086:	230a      	movs	r3, #10
 800c088:	9342      	str	r3, [sp, #264]	@ 0x108
 800c08a:	e077      	b.n	800c17c <__ssvfiscanf_r+0x1e8>
 800c08c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800c08e:	464d      	mov	r5, r9
 800c090:	fb02 1103 	mla	r1, r2, r3, r1
 800c094:	3930      	subs	r1, #48	@ 0x30
 800c096:	9143      	str	r1, [sp, #268]	@ 0x10c
 800c098:	e7d2      	b.n	800c040 <__ssvfiscanf_r+0xac>
 800c09a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800c09e:	2a20      	cmp	r2, #32
 800c0a0:	d8ef      	bhi.n	800c082 <__ssvfiscanf_r+0xee>
 800c0a2:	a101      	add	r1, pc, #4	@ (adr r1, 800c0a8 <__ssvfiscanf_r+0x114>)
 800c0a4:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800c0a8:	0800c15b 	.word	0x0800c15b
 800c0ac:	0800c083 	.word	0x0800c083
 800c0b0:	0800c083 	.word	0x0800c083
 800c0b4:	0800c1b5 	.word	0x0800c1b5
 800c0b8:	0800c083 	.word	0x0800c083
 800c0bc:	0800c083 	.word	0x0800c083
 800c0c0:	0800c083 	.word	0x0800c083
 800c0c4:	0800c083 	.word	0x0800c083
 800c0c8:	0800c083 	.word	0x0800c083
 800c0cc:	0800c083 	.word	0x0800c083
 800c0d0:	0800c083 	.word	0x0800c083
 800c0d4:	0800c1cb 	.word	0x0800c1cb
 800c0d8:	0800c1b1 	.word	0x0800c1b1
 800c0dc:	0800c133 	.word	0x0800c133
 800c0e0:	0800c133 	.word	0x0800c133
 800c0e4:	0800c133 	.word	0x0800c133
 800c0e8:	0800c083 	.word	0x0800c083
 800c0ec:	0800c16d 	.word	0x0800c16d
 800c0f0:	0800c083 	.word	0x0800c083
 800c0f4:	0800c083 	.word	0x0800c083
 800c0f8:	0800c083 	.word	0x0800c083
 800c0fc:	0800c083 	.word	0x0800c083
 800c100:	0800c1db 	.word	0x0800c1db
 800c104:	0800c175 	.word	0x0800c175
 800c108:	0800c153 	.word	0x0800c153
 800c10c:	0800c083 	.word	0x0800c083
 800c110:	0800c083 	.word	0x0800c083
 800c114:	0800c1d7 	.word	0x0800c1d7
 800c118:	0800c083 	.word	0x0800c083
 800c11c:	0800c1b1 	.word	0x0800c1b1
 800c120:	0800c083 	.word	0x0800c083
 800c124:	0800c083 	.word	0x0800c083
 800c128:	0800c15b 	.word	0x0800c15b
 800c12c:	3b45      	subs	r3, #69	@ 0x45
 800c12e:	2b02      	cmp	r3, #2
 800c130:	d8a7      	bhi.n	800c082 <__ssvfiscanf_r+0xee>
 800c132:	2305      	movs	r3, #5
 800c134:	e021      	b.n	800c17a <__ssvfiscanf_r+0x1e6>
 800c136:	4621      	mov	r1, r4
 800c138:	4630      	mov	r0, r6
 800c13a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c13c:	4798      	blx	r3
 800c13e:	2800      	cmp	r0, #0
 800c140:	f43f af65 	beq.w	800c00e <__ssvfiscanf_r+0x7a>
 800c144:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c146:	2800      	cmp	r0, #0
 800c148:	f040 808c 	bne.w	800c264 <__ssvfiscanf_r+0x2d0>
 800c14c:	f04f 30ff 	mov.w	r0, #4294967295
 800c150:	e08c      	b.n	800c26c <__ssvfiscanf_r+0x2d8>
 800c152:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c154:	f042 0220 	orr.w	r2, r2, #32
 800c158:	9241      	str	r2, [sp, #260]	@ 0x104
 800c15a:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800c15c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c160:	9241      	str	r2, [sp, #260]	@ 0x104
 800c162:	2210      	movs	r2, #16
 800c164:	2b6e      	cmp	r3, #110	@ 0x6e
 800c166:	9242      	str	r2, [sp, #264]	@ 0x108
 800c168:	d902      	bls.n	800c170 <__ssvfiscanf_r+0x1dc>
 800c16a:	e005      	b.n	800c178 <__ssvfiscanf_r+0x1e4>
 800c16c:	2300      	movs	r3, #0
 800c16e:	9342      	str	r3, [sp, #264]	@ 0x108
 800c170:	2303      	movs	r3, #3
 800c172:	e002      	b.n	800c17a <__ssvfiscanf_r+0x1e6>
 800c174:	2308      	movs	r3, #8
 800c176:	9342      	str	r3, [sp, #264]	@ 0x108
 800c178:	2304      	movs	r3, #4
 800c17a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800c17c:	6863      	ldr	r3, [r4, #4]
 800c17e:	2b00      	cmp	r3, #0
 800c180:	dd39      	ble.n	800c1f6 <__ssvfiscanf_r+0x262>
 800c182:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c184:	0659      	lsls	r1, r3, #25
 800c186:	d404      	bmi.n	800c192 <__ssvfiscanf_r+0x1fe>
 800c188:	6823      	ldr	r3, [r4, #0]
 800c18a:	781a      	ldrb	r2, [r3, #0]
 800c18c:	5cba      	ldrb	r2, [r7, r2]
 800c18e:	0712      	lsls	r2, r2, #28
 800c190:	d438      	bmi.n	800c204 <__ssvfiscanf_r+0x270>
 800c192:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800c194:	2b02      	cmp	r3, #2
 800c196:	dc47      	bgt.n	800c228 <__ssvfiscanf_r+0x294>
 800c198:	466b      	mov	r3, sp
 800c19a:	4622      	mov	r2, r4
 800c19c:	4630      	mov	r0, r6
 800c19e:	a941      	add	r1, sp, #260	@ 0x104
 800c1a0:	f000 f86a 	bl	800c278 <_scanf_chars>
 800c1a4:	2801      	cmp	r0, #1
 800c1a6:	d065      	beq.n	800c274 <__ssvfiscanf_r+0x2e0>
 800c1a8:	2802      	cmp	r0, #2
 800c1aa:	f47f af17 	bne.w	800bfdc <__ssvfiscanf_r+0x48>
 800c1ae:	e7c9      	b.n	800c144 <__ssvfiscanf_r+0x1b0>
 800c1b0:	220a      	movs	r2, #10
 800c1b2:	e7d7      	b.n	800c164 <__ssvfiscanf_r+0x1d0>
 800c1b4:	4629      	mov	r1, r5
 800c1b6:	4640      	mov	r0, r8
 800c1b8:	f000 fa52 	bl	800c660 <__sccl>
 800c1bc:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c1be:	4605      	mov	r5, r0
 800c1c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1c4:	9341      	str	r3, [sp, #260]	@ 0x104
 800c1c6:	2301      	movs	r3, #1
 800c1c8:	e7d7      	b.n	800c17a <__ssvfiscanf_r+0x1e6>
 800c1ca:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800c1cc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c1d0:	9341      	str	r3, [sp, #260]	@ 0x104
 800c1d2:	2300      	movs	r3, #0
 800c1d4:	e7d1      	b.n	800c17a <__ssvfiscanf_r+0x1e6>
 800c1d6:	2302      	movs	r3, #2
 800c1d8:	e7cf      	b.n	800c17a <__ssvfiscanf_r+0x1e6>
 800c1da:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800c1dc:	06c3      	lsls	r3, r0, #27
 800c1de:	f53f aefd 	bmi.w	800bfdc <__ssvfiscanf_r+0x48>
 800c1e2:	9b00      	ldr	r3, [sp, #0]
 800c1e4:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c1e6:	1d19      	adds	r1, r3, #4
 800c1e8:	9100      	str	r1, [sp, #0]
 800c1ea:	681b      	ldr	r3, [r3, #0]
 800c1ec:	07c0      	lsls	r0, r0, #31
 800c1ee:	bf4c      	ite	mi
 800c1f0:	801a      	strhmi	r2, [r3, #0]
 800c1f2:	601a      	strpl	r2, [r3, #0]
 800c1f4:	e6f2      	b.n	800bfdc <__ssvfiscanf_r+0x48>
 800c1f6:	4621      	mov	r1, r4
 800c1f8:	4630      	mov	r0, r6
 800c1fa:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c1fc:	4798      	blx	r3
 800c1fe:	2800      	cmp	r0, #0
 800c200:	d0bf      	beq.n	800c182 <__ssvfiscanf_r+0x1ee>
 800c202:	e79f      	b.n	800c144 <__ssvfiscanf_r+0x1b0>
 800c204:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800c206:	3201      	adds	r2, #1
 800c208:	9245      	str	r2, [sp, #276]	@ 0x114
 800c20a:	6862      	ldr	r2, [r4, #4]
 800c20c:	3a01      	subs	r2, #1
 800c20e:	2a00      	cmp	r2, #0
 800c210:	6062      	str	r2, [r4, #4]
 800c212:	dd02      	ble.n	800c21a <__ssvfiscanf_r+0x286>
 800c214:	3301      	adds	r3, #1
 800c216:	6023      	str	r3, [r4, #0]
 800c218:	e7b6      	b.n	800c188 <__ssvfiscanf_r+0x1f4>
 800c21a:	4621      	mov	r1, r4
 800c21c:	4630      	mov	r0, r6
 800c21e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800c220:	4798      	blx	r3
 800c222:	2800      	cmp	r0, #0
 800c224:	d0b0      	beq.n	800c188 <__ssvfiscanf_r+0x1f4>
 800c226:	e78d      	b.n	800c144 <__ssvfiscanf_r+0x1b0>
 800c228:	2b04      	cmp	r3, #4
 800c22a:	dc06      	bgt.n	800c23a <__ssvfiscanf_r+0x2a6>
 800c22c:	466b      	mov	r3, sp
 800c22e:	4622      	mov	r2, r4
 800c230:	4630      	mov	r0, r6
 800c232:	a941      	add	r1, sp, #260	@ 0x104
 800c234:	f000 f87a 	bl	800c32c <_scanf_i>
 800c238:	e7b4      	b.n	800c1a4 <__ssvfiscanf_r+0x210>
 800c23a:	4b09      	ldr	r3, [pc, #36]	@ (800c260 <__ssvfiscanf_r+0x2cc>)
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	f43f aecd 	beq.w	800bfdc <__ssvfiscanf_r+0x48>
 800c242:	466b      	mov	r3, sp
 800c244:	4622      	mov	r2, r4
 800c246:	4630      	mov	r0, r6
 800c248:	a941      	add	r1, sp, #260	@ 0x104
 800c24a:	f3af 8000 	nop.w
 800c24e:	e7a9      	b.n	800c1a4 <__ssvfiscanf_r+0x210>
 800c250:	0800bee5 	.word	0x0800bee5
 800c254:	0800bf5b 	.word	0x0800bf5b
 800c258:	0800d703 	.word	0x0800d703
 800c25c:	0800d696 	.word	0x0800d696
 800c260:	00000000 	.word	0x00000000
 800c264:	89a3      	ldrh	r3, [r4, #12]
 800c266:	065b      	lsls	r3, r3, #25
 800c268:	f53f af70 	bmi.w	800c14c <__ssvfiscanf_r+0x1b8>
 800c26c:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800c270:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c274:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800c276:	e7f9      	b.n	800c26c <__ssvfiscanf_r+0x2d8>

0800c278 <_scanf_chars>:
 800c278:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c27c:	4615      	mov	r5, r2
 800c27e:	688a      	ldr	r2, [r1, #8]
 800c280:	4680      	mov	r8, r0
 800c282:	460c      	mov	r4, r1
 800c284:	b932      	cbnz	r2, 800c294 <_scanf_chars+0x1c>
 800c286:	698a      	ldr	r2, [r1, #24]
 800c288:	2a00      	cmp	r2, #0
 800c28a:	bf14      	ite	ne
 800c28c:	f04f 32ff 	movne.w	r2, #4294967295
 800c290:	2201      	moveq	r2, #1
 800c292:	608a      	str	r2, [r1, #8]
 800c294:	2700      	movs	r7, #0
 800c296:	6822      	ldr	r2, [r4, #0]
 800c298:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800c328 <_scanf_chars+0xb0>
 800c29c:	06d1      	lsls	r1, r2, #27
 800c29e:	bf5f      	itttt	pl
 800c2a0:	681a      	ldrpl	r2, [r3, #0]
 800c2a2:	1d11      	addpl	r1, r2, #4
 800c2a4:	6019      	strpl	r1, [r3, #0]
 800c2a6:	6816      	ldrpl	r6, [r2, #0]
 800c2a8:	69a0      	ldr	r0, [r4, #24]
 800c2aa:	b188      	cbz	r0, 800c2d0 <_scanf_chars+0x58>
 800c2ac:	2801      	cmp	r0, #1
 800c2ae:	d107      	bne.n	800c2c0 <_scanf_chars+0x48>
 800c2b0:	682b      	ldr	r3, [r5, #0]
 800c2b2:	781a      	ldrb	r2, [r3, #0]
 800c2b4:	6963      	ldr	r3, [r4, #20]
 800c2b6:	5c9b      	ldrb	r3, [r3, r2]
 800c2b8:	b953      	cbnz	r3, 800c2d0 <_scanf_chars+0x58>
 800c2ba:	2f00      	cmp	r7, #0
 800c2bc:	d031      	beq.n	800c322 <_scanf_chars+0xaa>
 800c2be:	e022      	b.n	800c306 <_scanf_chars+0x8e>
 800c2c0:	2802      	cmp	r0, #2
 800c2c2:	d120      	bne.n	800c306 <_scanf_chars+0x8e>
 800c2c4:	682b      	ldr	r3, [r5, #0]
 800c2c6:	781b      	ldrb	r3, [r3, #0]
 800c2c8:	f819 3003 	ldrb.w	r3, [r9, r3]
 800c2cc:	071b      	lsls	r3, r3, #28
 800c2ce:	d41a      	bmi.n	800c306 <_scanf_chars+0x8e>
 800c2d0:	6823      	ldr	r3, [r4, #0]
 800c2d2:	3701      	adds	r7, #1
 800c2d4:	06da      	lsls	r2, r3, #27
 800c2d6:	bf5e      	ittt	pl
 800c2d8:	682b      	ldrpl	r3, [r5, #0]
 800c2da:	781b      	ldrbpl	r3, [r3, #0]
 800c2dc:	f806 3b01 	strbpl.w	r3, [r6], #1
 800c2e0:	682a      	ldr	r2, [r5, #0]
 800c2e2:	686b      	ldr	r3, [r5, #4]
 800c2e4:	3201      	adds	r2, #1
 800c2e6:	602a      	str	r2, [r5, #0]
 800c2e8:	68a2      	ldr	r2, [r4, #8]
 800c2ea:	3b01      	subs	r3, #1
 800c2ec:	3a01      	subs	r2, #1
 800c2ee:	606b      	str	r3, [r5, #4]
 800c2f0:	60a2      	str	r2, [r4, #8]
 800c2f2:	b142      	cbz	r2, 800c306 <_scanf_chars+0x8e>
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	dcd7      	bgt.n	800c2a8 <_scanf_chars+0x30>
 800c2f8:	4629      	mov	r1, r5
 800c2fa:	4640      	mov	r0, r8
 800c2fc:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c300:	4798      	blx	r3
 800c302:	2800      	cmp	r0, #0
 800c304:	d0d0      	beq.n	800c2a8 <_scanf_chars+0x30>
 800c306:	6823      	ldr	r3, [r4, #0]
 800c308:	f013 0310 	ands.w	r3, r3, #16
 800c30c:	d105      	bne.n	800c31a <_scanf_chars+0xa2>
 800c30e:	68e2      	ldr	r2, [r4, #12]
 800c310:	3201      	adds	r2, #1
 800c312:	60e2      	str	r2, [r4, #12]
 800c314:	69a2      	ldr	r2, [r4, #24]
 800c316:	b102      	cbz	r2, 800c31a <_scanf_chars+0xa2>
 800c318:	7033      	strb	r3, [r6, #0]
 800c31a:	2000      	movs	r0, #0
 800c31c:	6923      	ldr	r3, [r4, #16]
 800c31e:	443b      	add	r3, r7
 800c320:	6123      	str	r3, [r4, #16]
 800c322:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c326:	bf00      	nop
 800c328:	0800d703 	.word	0x0800d703

0800c32c <_scanf_i>:
 800c32c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c330:	460c      	mov	r4, r1
 800c332:	4698      	mov	r8, r3
 800c334:	4b72      	ldr	r3, [pc, #456]	@ (800c500 <_scanf_i+0x1d4>)
 800c336:	b087      	sub	sp, #28
 800c338:	4682      	mov	sl, r0
 800c33a:	4616      	mov	r6, r2
 800c33c:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800c340:	ab03      	add	r3, sp, #12
 800c342:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800c346:	4b6f      	ldr	r3, [pc, #444]	@ (800c504 <_scanf_i+0x1d8>)
 800c348:	69a1      	ldr	r1, [r4, #24]
 800c34a:	4a6f      	ldr	r2, [pc, #444]	@ (800c508 <_scanf_i+0x1dc>)
 800c34c:	4627      	mov	r7, r4
 800c34e:	2903      	cmp	r1, #3
 800c350:	bf08      	it	eq
 800c352:	461a      	moveq	r2, r3
 800c354:	68a3      	ldr	r3, [r4, #8]
 800c356:	9201      	str	r2, [sp, #4]
 800c358:	1e5a      	subs	r2, r3, #1
 800c35a:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800c35e:	bf81      	itttt	hi
 800c360:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800c364:	eb03 0905 	addhi.w	r9, r3, r5
 800c368:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800c36c:	60a3      	strhi	r3, [r4, #8]
 800c36e:	f857 3b1c 	ldr.w	r3, [r7], #28
 800c372:	bf98      	it	ls
 800c374:	f04f 0900 	movls.w	r9, #0
 800c378:	463d      	mov	r5, r7
 800c37a:	f04f 0b00 	mov.w	fp, #0
 800c37e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800c382:	6023      	str	r3, [r4, #0]
 800c384:	6831      	ldr	r1, [r6, #0]
 800c386:	ab03      	add	r3, sp, #12
 800c388:	2202      	movs	r2, #2
 800c38a:	7809      	ldrb	r1, [r1, #0]
 800c38c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800c390:	f7fe f965 	bl	800a65e <memchr>
 800c394:	b328      	cbz	r0, 800c3e2 <_scanf_i+0xb6>
 800c396:	f1bb 0f01 	cmp.w	fp, #1
 800c39a:	d159      	bne.n	800c450 <_scanf_i+0x124>
 800c39c:	6862      	ldr	r2, [r4, #4]
 800c39e:	b92a      	cbnz	r2, 800c3ac <_scanf_i+0x80>
 800c3a0:	2108      	movs	r1, #8
 800c3a2:	6822      	ldr	r2, [r4, #0]
 800c3a4:	6061      	str	r1, [r4, #4]
 800c3a6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800c3aa:	6022      	str	r2, [r4, #0]
 800c3ac:	6822      	ldr	r2, [r4, #0]
 800c3ae:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800c3b2:	6022      	str	r2, [r4, #0]
 800c3b4:	68a2      	ldr	r2, [r4, #8]
 800c3b6:	1e51      	subs	r1, r2, #1
 800c3b8:	60a1      	str	r1, [r4, #8]
 800c3ba:	b192      	cbz	r2, 800c3e2 <_scanf_i+0xb6>
 800c3bc:	6832      	ldr	r2, [r6, #0]
 800c3be:	1c51      	adds	r1, r2, #1
 800c3c0:	6031      	str	r1, [r6, #0]
 800c3c2:	7812      	ldrb	r2, [r2, #0]
 800c3c4:	f805 2b01 	strb.w	r2, [r5], #1
 800c3c8:	6872      	ldr	r2, [r6, #4]
 800c3ca:	3a01      	subs	r2, #1
 800c3cc:	2a00      	cmp	r2, #0
 800c3ce:	6072      	str	r2, [r6, #4]
 800c3d0:	dc07      	bgt.n	800c3e2 <_scanf_i+0xb6>
 800c3d2:	4631      	mov	r1, r6
 800c3d4:	4650      	mov	r0, sl
 800c3d6:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800c3da:	4790      	blx	r2
 800c3dc:	2800      	cmp	r0, #0
 800c3de:	f040 8085 	bne.w	800c4ec <_scanf_i+0x1c0>
 800c3e2:	f10b 0b01 	add.w	fp, fp, #1
 800c3e6:	f1bb 0f03 	cmp.w	fp, #3
 800c3ea:	d1cb      	bne.n	800c384 <_scanf_i+0x58>
 800c3ec:	6863      	ldr	r3, [r4, #4]
 800c3ee:	b90b      	cbnz	r3, 800c3f4 <_scanf_i+0xc8>
 800c3f0:	230a      	movs	r3, #10
 800c3f2:	6063      	str	r3, [r4, #4]
 800c3f4:	6863      	ldr	r3, [r4, #4]
 800c3f6:	4945      	ldr	r1, [pc, #276]	@ (800c50c <_scanf_i+0x1e0>)
 800c3f8:	6960      	ldr	r0, [r4, #20]
 800c3fa:	1ac9      	subs	r1, r1, r3
 800c3fc:	f000 f930 	bl	800c660 <__sccl>
 800c400:	f04f 0b00 	mov.w	fp, #0
 800c404:	68a3      	ldr	r3, [r4, #8]
 800c406:	6822      	ldr	r2, [r4, #0]
 800c408:	2b00      	cmp	r3, #0
 800c40a:	d03d      	beq.n	800c488 <_scanf_i+0x15c>
 800c40c:	6831      	ldr	r1, [r6, #0]
 800c40e:	6960      	ldr	r0, [r4, #20]
 800c410:	f891 c000 	ldrb.w	ip, [r1]
 800c414:	f810 000c 	ldrb.w	r0, [r0, ip]
 800c418:	2800      	cmp	r0, #0
 800c41a:	d035      	beq.n	800c488 <_scanf_i+0x15c>
 800c41c:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800c420:	d124      	bne.n	800c46c <_scanf_i+0x140>
 800c422:	0510      	lsls	r0, r2, #20
 800c424:	d522      	bpl.n	800c46c <_scanf_i+0x140>
 800c426:	f10b 0b01 	add.w	fp, fp, #1
 800c42a:	f1b9 0f00 	cmp.w	r9, #0
 800c42e:	d003      	beq.n	800c438 <_scanf_i+0x10c>
 800c430:	3301      	adds	r3, #1
 800c432:	f109 39ff 	add.w	r9, r9, #4294967295
 800c436:	60a3      	str	r3, [r4, #8]
 800c438:	6873      	ldr	r3, [r6, #4]
 800c43a:	3b01      	subs	r3, #1
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	6073      	str	r3, [r6, #4]
 800c440:	dd1b      	ble.n	800c47a <_scanf_i+0x14e>
 800c442:	6833      	ldr	r3, [r6, #0]
 800c444:	3301      	adds	r3, #1
 800c446:	6033      	str	r3, [r6, #0]
 800c448:	68a3      	ldr	r3, [r4, #8]
 800c44a:	3b01      	subs	r3, #1
 800c44c:	60a3      	str	r3, [r4, #8]
 800c44e:	e7d9      	b.n	800c404 <_scanf_i+0xd8>
 800c450:	f1bb 0f02 	cmp.w	fp, #2
 800c454:	d1ae      	bne.n	800c3b4 <_scanf_i+0x88>
 800c456:	6822      	ldr	r2, [r4, #0]
 800c458:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800c45c:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800c460:	d1bf      	bne.n	800c3e2 <_scanf_i+0xb6>
 800c462:	2110      	movs	r1, #16
 800c464:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800c468:	6061      	str	r1, [r4, #4]
 800c46a:	e7a2      	b.n	800c3b2 <_scanf_i+0x86>
 800c46c:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800c470:	6022      	str	r2, [r4, #0]
 800c472:	780b      	ldrb	r3, [r1, #0]
 800c474:	f805 3b01 	strb.w	r3, [r5], #1
 800c478:	e7de      	b.n	800c438 <_scanf_i+0x10c>
 800c47a:	4631      	mov	r1, r6
 800c47c:	4650      	mov	r0, sl
 800c47e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800c482:	4798      	blx	r3
 800c484:	2800      	cmp	r0, #0
 800c486:	d0df      	beq.n	800c448 <_scanf_i+0x11c>
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	05d9      	lsls	r1, r3, #23
 800c48c:	d50d      	bpl.n	800c4aa <_scanf_i+0x17e>
 800c48e:	42bd      	cmp	r5, r7
 800c490:	d909      	bls.n	800c4a6 <_scanf_i+0x17a>
 800c492:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800c496:	4632      	mov	r2, r6
 800c498:	4650      	mov	r0, sl
 800c49a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800c49e:	f105 39ff 	add.w	r9, r5, #4294967295
 800c4a2:	4798      	blx	r3
 800c4a4:	464d      	mov	r5, r9
 800c4a6:	42bd      	cmp	r5, r7
 800c4a8:	d028      	beq.n	800c4fc <_scanf_i+0x1d0>
 800c4aa:	6822      	ldr	r2, [r4, #0]
 800c4ac:	f012 0210 	ands.w	r2, r2, #16
 800c4b0:	d113      	bne.n	800c4da <_scanf_i+0x1ae>
 800c4b2:	702a      	strb	r2, [r5, #0]
 800c4b4:	4639      	mov	r1, r7
 800c4b6:	6863      	ldr	r3, [r4, #4]
 800c4b8:	4650      	mov	r0, sl
 800c4ba:	9e01      	ldr	r6, [sp, #4]
 800c4bc:	47b0      	blx	r6
 800c4be:	f8d8 3000 	ldr.w	r3, [r8]
 800c4c2:	6821      	ldr	r1, [r4, #0]
 800c4c4:	1d1a      	adds	r2, r3, #4
 800c4c6:	f8c8 2000 	str.w	r2, [r8]
 800c4ca:	f011 0f20 	tst.w	r1, #32
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	d00f      	beq.n	800c4f2 <_scanf_i+0x1c6>
 800c4d2:	6018      	str	r0, [r3, #0]
 800c4d4:	68e3      	ldr	r3, [r4, #12]
 800c4d6:	3301      	adds	r3, #1
 800c4d8:	60e3      	str	r3, [r4, #12]
 800c4da:	2000      	movs	r0, #0
 800c4dc:	6923      	ldr	r3, [r4, #16]
 800c4de:	1bed      	subs	r5, r5, r7
 800c4e0:	445d      	add	r5, fp
 800c4e2:	442b      	add	r3, r5
 800c4e4:	6123      	str	r3, [r4, #16]
 800c4e6:	b007      	add	sp, #28
 800c4e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c4ec:	f04f 0b00 	mov.w	fp, #0
 800c4f0:	e7ca      	b.n	800c488 <_scanf_i+0x15c>
 800c4f2:	07ca      	lsls	r2, r1, #31
 800c4f4:	bf4c      	ite	mi
 800c4f6:	8018      	strhmi	r0, [r3, #0]
 800c4f8:	6018      	strpl	r0, [r3, #0]
 800c4fa:	e7eb      	b.n	800c4d4 <_scanf_i+0x1a8>
 800c4fc:	2001      	movs	r0, #1
 800c4fe:	e7f2      	b.n	800c4e6 <_scanf_i+0x1ba>
 800c500:	0800d254 	.word	0x0800d254
 800c504:	0800c971 	.word	0x0800c971
 800c508:	0800ca51 	.word	0x0800ca51
 800c50c:	0800d6b1 	.word	0x0800d6b1

0800c510 <__sflush_r>:
 800c510:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800c514:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c516:	0716      	lsls	r6, r2, #28
 800c518:	4605      	mov	r5, r0
 800c51a:	460c      	mov	r4, r1
 800c51c:	d454      	bmi.n	800c5c8 <__sflush_r+0xb8>
 800c51e:	684b      	ldr	r3, [r1, #4]
 800c520:	2b00      	cmp	r3, #0
 800c522:	dc02      	bgt.n	800c52a <__sflush_r+0x1a>
 800c524:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c526:	2b00      	cmp	r3, #0
 800c528:	dd48      	ble.n	800c5bc <__sflush_r+0xac>
 800c52a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c52c:	2e00      	cmp	r6, #0
 800c52e:	d045      	beq.n	800c5bc <__sflush_r+0xac>
 800c530:	2300      	movs	r3, #0
 800c532:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800c536:	682f      	ldr	r7, [r5, #0]
 800c538:	6a21      	ldr	r1, [r4, #32]
 800c53a:	602b      	str	r3, [r5, #0]
 800c53c:	d030      	beq.n	800c5a0 <__sflush_r+0x90>
 800c53e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c540:	89a3      	ldrh	r3, [r4, #12]
 800c542:	0759      	lsls	r1, r3, #29
 800c544:	d505      	bpl.n	800c552 <__sflush_r+0x42>
 800c546:	6863      	ldr	r3, [r4, #4]
 800c548:	1ad2      	subs	r2, r2, r3
 800c54a:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800c54c:	b10b      	cbz	r3, 800c552 <__sflush_r+0x42>
 800c54e:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800c550:	1ad2      	subs	r2, r2, r3
 800c552:	2300      	movs	r3, #0
 800c554:	4628      	mov	r0, r5
 800c556:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800c558:	6a21      	ldr	r1, [r4, #32]
 800c55a:	47b0      	blx	r6
 800c55c:	1c43      	adds	r3, r0, #1
 800c55e:	89a3      	ldrh	r3, [r4, #12]
 800c560:	d106      	bne.n	800c570 <__sflush_r+0x60>
 800c562:	6829      	ldr	r1, [r5, #0]
 800c564:	291d      	cmp	r1, #29
 800c566:	d82b      	bhi.n	800c5c0 <__sflush_r+0xb0>
 800c568:	4a28      	ldr	r2, [pc, #160]	@ (800c60c <__sflush_r+0xfc>)
 800c56a:	410a      	asrs	r2, r1
 800c56c:	07d6      	lsls	r6, r2, #31
 800c56e:	d427      	bmi.n	800c5c0 <__sflush_r+0xb0>
 800c570:	2200      	movs	r2, #0
 800c572:	6062      	str	r2, [r4, #4]
 800c574:	6922      	ldr	r2, [r4, #16]
 800c576:	04d9      	lsls	r1, r3, #19
 800c578:	6022      	str	r2, [r4, #0]
 800c57a:	d504      	bpl.n	800c586 <__sflush_r+0x76>
 800c57c:	1c42      	adds	r2, r0, #1
 800c57e:	d101      	bne.n	800c584 <__sflush_r+0x74>
 800c580:	682b      	ldr	r3, [r5, #0]
 800c582:	b903      	cbnz	r3, 800c586 <__sflush_r+0x76>
 800c584:	6560      	str	r0, [r4, #84]	@ 0x54
 800c586:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800c588:	602f      	str	r7, [r5, #0]
 800c58a:	b1b9      	cbz	r1, 800c5bc <__sflush_r+0xac>
 800c58c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c590:	4299      	cmp	r1, r3
 800c592:	d002      	beq.n	800c59a <__sflush_r+0x8a>
 800c594:	4628      	mov	r0, r5
 800c596:	f7fe fecf 	bl	800b338 <_free_r>
 800c59a:	2300      	movs	r3, #0
 800c59c:	6363      	str	r3, [r4, #52]	@ 0x34
 800c59e:	e00d      	b.n	800c5bc <__sflush_r+0xac>
 800c5a0:	2301      	movs	r3, #1
 800c5a2:	4628      	mov	r0, r5
 800c5a4:	47b0      	blx	r6
 800c5a6:	4602      	mov	r2, r0
 800c5a8:	1c50      	adds	r0, r2, #1
 800c5aa:	d1c9      	bne.n	800c540 <__sflush_r+0x30>
 800c5ac:	682b      	ldr	r3, [r5, #0]
 800c5ae:	2b00      	cmp	r3, #0
 800c5b0:	d0c6      	beq.n	800c540 <__sflush_r+0x30>
 800c5b2:	2b1d      	cmp	r3, #29
 800c5b4:	d001      	beq.n	800c5ba <__sflush_r+0xaa>
 800c5b6:	2b16      	cmp	r3, #22
 800c5b8:	d11d      	bne.n	800c5f6 <__sflush_r+0xe6>
 800c5ba:	602f      	str	r7, [r5, #0]
 800c5bc:	2000      	movs	r0, #0
 800c5be:	e021      	b.n	800c604 <__sflush_r+0xf4>
 800c5c0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5c4:	b21b      	sxth	r3, r3
 800c5c6:	e01a      	b.n	800c5fe <__sflush_r+0xee>
 800c5c8:	690f      	ldr	r7, [r1, #16]
 800c5ca:	2f00      	cmp	r7, #0
 800c5cc:	d0f6      	beq.n	800c5bc <__sflush_r+0xac>
 800c5ce:	0793      	lsls	r3, r2, #30
 800c5d0:	bf18      	it	ne
 800c5d2:	2300      	movne	r3, #0
 800c5d4:	680e      	ldr	r6, [r1, #0]
 800c5d6:	bf08      	it	eq
 800c5d8:	694b      	ldreq	r3, [r1, #20]
 800c5da:	1bf6      	subs	r6, r6, r7
 800c5dc:	600f      	str	r7, [r1, #0]
 800c5de:	608b      	str	r3, [r1, #8]
 800c5e0:	2e00      	cmp	r6, #0
 800c5e2:	ddeb      	ble.n	800c5bc <__sflush_r+0xac>
 800c5e4:	4633      	mov	r3, r6
 800c5e6:	463a      	mov	r2, r7
 800c5e8:	4628      	mov	r0, r5
 800c5ea:	6a21      	ldr	r1, [r4, #32]
 800c5ec:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800c5f0:	47e0      	blx	ip
 800c5f2:	2800      	cmp	r0, #0
 800c5f4:	dc07      	bgt.n	800c606 <__sflush_r+0xf6>
 800c5f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c5fa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800c5fe:	f04f 30ff 	mov.w	r0, #4294967295
 800c602:	81a3      	strh	r3, [r4, #12]
 800c604:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c606:	4407      	add	r7, r0
 800c608:	1a36      	subs	r6, r6, r0
 800c60a:	e7e9      	b.n	800c5e0 <__sflush_r+0xd0>
 800c60c:	dfbffffe 	.word	0xdfbffffe

0800c610 <_fflush_r>:
 800c610:	b538      	push	{r3, r4, r5, lr}
 800c612:	690b      	ldr	r3, [r1, #16]
 800c614:	4605      	mov	r5, r0
 800c616:	460c      	mov	r4, r1
 800c618:	b913      	cbnz	r3, 800c620 <_fflush_r+0x10>
 800c61a:	2500      	movs	r5, #0
 800c61c:	4628      	mov	r0, r5
 800c61e:	bd38      	pop	{r3, r4, r5, pc}
 800c620:	b118      	cbz	r0, 800c62a <_fflush_r+0x1a>
 800c622:	6a03      	ldr	r3, [r0, #32]
 800c624:	b90b      	cbnz	r3, 800c62a <_fflush_r+0x1a>
 800c626:	f7fd fe9f 	bl	800a368 <__sinit>
 800c62a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c62e:	2b00      	cmp	r3, #0
 800c630:	d0f3      	beq.n	800c61a <_fflush_r+0xa>
 800c632:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800c634:	07d0      	lsls	r0, r2, #31
 800c636:	d404      	bmi.n	800c642 <_fflush_r+0x32>
 800c638:	0599      	lsls	r1, r3, #22
 800c63a:	d402      	bmi.n	800c642 <_fflush_r+0x32>
 800c63c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c63e:	f7fe f80c 	bl	800a65a <__retarget_lock_acquire_recursive>
 800c642:	4628      	mov	r0, r5
 800c644:	4621      	mov	r1, r4
 800c646:	f7ff ff63 	bl	800c510 <__sflush_r>
 800c64a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800c64c:	4605      	mov	r5, r0
 800c64e:	07da      	lsls	r2, r3, #31
 800c650:	d4e4      	bmi.n	800c61c <_fflush_r+0xc>
 800c652:	89a3      	ldrh	r3, [r4, #12]
 800c654:	059b      	lsls	r3, r3, #22
 800c656:	d4e1      	bmi.n	800c61c <_fflush_r+0xc>
 800c658:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800c65a:	f7fd ffff 	bl	800a65c <__retarget_lock_release_recursive>
 800c65e:	e7dd      	b.n	800c61c <_fflush_r+0xc>

0800c660 <__sccl>:
 800c660:	b570      	push	{r4, r5, r6, lr}
 800c662:	780b      	ldrb	r3, [r1, #0]
 800c664:	4604      	mov	r4, r0
 800c666:	2b5e      	cmp	r3, #94	@ 0x5e
 800c668:	bf0b      	itete	eq
 800c66a:	784b      	ldrbeq	r3, [r1, #1]
 800c66c:	1c4a      	addne	r2, r1, #1
 800c66e:	1c8a      	addeq	r2, r1, #2
 800c670:	2100      	movne	r1, #0
 800c672:	bf08      	it	eq
 800c674:	2101      	moveq	r1, #1
 800c676:	3801      	subs	r0, #1
 800c678:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800c67c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800c680:	42a8      	cmp	r0, r5
 800c682:	d1fb      	bne.n	800c67c <__sccl+0x1c>
 800c684:	b90b      	cbnz	r3, 800c68a <__sccl+0x2a>
 800c686:	1e50      	subs	r0, r2, #1
 800c688:	bd70      	pop	{r4, r5, r6, pc}
 800c68a:	f081 0101 	eor.w	r1, r1, #1
 800c68e:	4610      	mov	r0, r2
 800c690:	54e1      	strb	r1, [r4, r3]
 800c692:	4602      	mov	r2, r0
 800c694:	f812 5b01 	ldrb.w	r5, [r2], #1
 800c698:	2d2d      	cmp	r5, #45	@ 0x2d
 800c69a:	d005      	beq.n	800c6a8 <__sccl+0x48>
 800c69c:	2d5d      	cmp	r5, #93	@ 0x5d
 800c69e:	d016      	beq.n	800c6ce <__sccl+0x6e>
 800c6a0:	2d00      	cmp	r5, #0
 800c6a2:	d0f1      	beq.n	800c688 <__sccl+0x28>
 800c6a4:	462b      	mov	r3, r5
 800c6a6:	e7f2      	b.n	800c68e <__sccl+0x2e>
 800c6a8:	7846      	ldrb	r6, [r0, #1]
 800c6aa:	2e5d      	cmp	r6, #93	@ 0x5d
 800c6ac:	d0fa      	beq.n	800c6a4 <__sccl+0x44>
 800c6ae:	42b3      	cmp	r3, r6
 800c6b0:	dcf8      	bgt.n	800c6a4 <__sccl+0x44>
 800c6b2:	461a      	mov	r2, r3
 800c6b4:	3002      	adds	r0, #2
 800c6b6:	3201      	adds	r2, #1
 800c6b8:	4296      	cmp	r6, r2
 800c6ba:	54a1      	strb	r1, [r4, r2]
 800c6bc:	dcfb      	bgt.n	800c6b6 <__sccl+0x56>
 800c6be:	1af2      	subs	r2, r6, r3
 800c6c0:	3a01      	subs	r2, #1
 800c6c2:	42b3      	cmp	r3, r6
 800c6c4:	bfa8      	it	ge
 800c6c6:	2200      	movge	r2, #0
 800c6c8:	1c5d      	adds	r5, r3, #1
 800c6ca:	18ab      	adds	r3, r5, r2
 800c6cc:	e7e1      	b.n	800c692 <__sccl+0x32>
 800c6ce:	4610      	mov	r0, r2
 800c6d0:	e7da      	b.n	800c688 <__sccl+0x28>

0800c6d2 <__submore>:
 800c6d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c6d6:	460c      	mov	r4, r1
 800c6d8:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800c6da:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800c6de:	4299      	cmp	r1, r3
 800c6e0:	d11b      	bne.n	800c71a <__submore+0x48>
 800c6e2:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800c6e6:	f7fe fe99 	bl	800b41c <_malloc_r>
 800c6ea:	b918      	cbnz	r0, 800c6f4 <__submore+0x22>
 800c6ec:	f04f 30ff 	mov.w	r0, #4294967295
 800c6f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6f4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800c6f8:	63a3      	str	r3, [r4, #56]	@ 0x38
 800c6fa:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800c6fe:	6360      	str	r0, [r4, #52]	@ 0x34
 800c700:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800c704:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800c708:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800c70c:	7043      	strb	r3, [r0, #1]
 800c70e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800c712:	7003      	strb	r3, [r0, #0]
 800c714:	6020      	str	r0, [r4, #0]
 800c716:	2000      	movs	r0, #0
 800c718:	e7ea      	b.n	800c6f0 <__submore+0x1e>
 800c71a:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800c71c:	0077      	lsls	r7, r6, #1
 800c71e:	463a      	mov	r2, r7
 800c720:	f000 f87e 	bl	800c820 <_realloc_r>
 800c724:	4605      	mov	r5, r0
 800c726:	2800      	cmp	r0, #0
 800c728:	d0e0      	beq.n	800c6ec <__submore+0x1a>
 800c72a:	eb00 0806 	add.w	r8, r0, r6
 800c72e:	4601      	mov	r1, r0
 800c730:	4632      	mov	r2, r6
 800c732:	4640      	mov	r0, r8
 800c734:	f7fd ffa1 	bl	800a67a <memcpy>
 800c738:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800c73c:	f8c4 8000 	str.w	r8, [r4]
 800c740:	e7e9      	b.n	800c716 <__submore+0x44>

0800c742 <memmove>:
 800c742:	4288      	cmp	r0, r1
 800c744:	b510      	push	{r4, lr}
 800c746:	eb01 0402 	add.w	r4, r1, r2
 800c74a:	d902      	bls.n	800c752 <memmove+0x10>
 800c74c:	4284      	cmp	r4, r0
 800c74e:	4623      	mov	r3, r4
 800c750:	d807      	bhi.n	800c762 <memmove+0x20>
 800c752:	1e43      	subs	r3, r0, #1
 800c754:	42a1      	cmp	r1, r4
 800c756:	d008      	beq.n	800c76a <memmove+0x28>
 800c758:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c75c:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c760:	e7f8      	b.n	800c754 <memmove+0x12>
 800c762:	4601      	mov	r1, r0
 800c764:	4402      	add	r2, r0
 800c766:	428a      	cmp	r2, r1
 800c768:	d100      	bne.n	800c76c <memmove+0x2a>
 800c76a:	bd10      	pop	{r4, pc}
 800c76c:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c770:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c774:	e7f7      	b.n	800c766 <memmove+0x24>
	...

0800c778 <_sbrk_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	2300      	movs	r3, #0
 800c77c:	4d05      	ldr	r5, [pc, #20]	@ (800c794 <_sbrk_r+0x1c>)
 800c77e:	4604      	mov	r4, r0
 800c780:	4608      	mov	r0, r1
 800c782:	602b      	str	r3, [r5, #0]
 800c784:	f7f5 fd52 	bl	800222c <_sbrk>
 800c788:	1c43      	adds	r3, r0, #1
 800c78a:	d102      	bne.n	800c792 <_sbrk_r+0x1a>
 800c78c:	682b      	ldr	r3, [r5, #0]
 800c78e:	b103      	cbz	r3, 800c792 <_sbrk_r+0x1a>
 800c790:	6023      	str	r3, [r4, #0]
 800c792:	bd38      	pop	{r3, r4, r5, pc}
 800c794:	20001d24 	.word	0x20001d24

0800c798 <__assert_func>:
 800c798:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c79a:	4614      	mov	r4, r2
 800c79c:	461a      	mov	r2, r3
 800c79e:	4b09      	ldr	r3, [pc, #36]	@ (800c7c4 <__assert_func+0x2c>)
 800c7a0:	4605      	mov	r5, r0
 800c7a2:	681b      	ldr	r3, [r3, #0]
 800c7a4:	68d8      	ldr	r0, [r3, #12]
 800c7a6:	b954      	cbnz	r4, 800c7be <__assert_func+0x26>
 800c7a8:	4b07      	ldr	r3, [pc, #28]	@ (800c7c8 <__assert_func+0x30>)
 800c7aa:	461c      	mov	r4, r3
 800c7ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c7b0:	9100      	str	r1, [sp, #0]
 800c7b2:	462b      	mov	r3, r5
 800c7b4:	4905      	ldr	r1, [pc, #20]	@ (800c7cc <__assert_func+0x34>)
 800c7b6:	f000 f95b 	bl	800ca70 <fiprintf>
 800c7ba:	f000 f96b 	bl	800ca94 <abort>
 800c7be:	4b04      	ldr	r3, [pc, #16]	@ (800c7d0 <__assert_func+0x38>)
 800c7c0:	e7f4      	b.n	800c7ac <__assert_func+0x14>
 800c7c2:	bf00      	nop
 800c7c4:	2000001c 	.word	0x2000001c
 800c7c8:	0800d701 	.word	0x0800d701
 800c7cc:	0800d6d3 	.word	0x0800d6d3
 800c7d0:	0800d6c6 	.word	0x0800d6c6

0800c7d4 <_calloc_r>:
 800c7d4:	b570      	push	{r4, r5, r6, lr}
 800c7d6:	fba1 5402 	umull	r5, r4, r1, r2
 800c7da:	b93c      	cbnz	r4, 800c7ec <_calloc_r+0x18>
 800c7dc:	4629      	mov	r1, r5
 800c7de:	f7fe fe1d 	bl	800b41c <_malloc_r>
 800c7e2:	4606      	mov	r6, r0
 800c7e4:	b928      	cbnz	r0, 800c7f2 <_calloc_r+0x1e>
 800c7e6:	2600      	movs	r6, #0
 800c7e8:	4630      	mov	r0, r6
 800c7ea:	bd70      	pop	{r4, r5, r6, pc}
 800c7ec:	220c      	movs	r2, #12
 800c7ee:	6002      	str	r2, [r0, #0]
 800c7f0:	e7f9      	b.n	800c7e6 <_calloc_r+0x12>
 800c7f2:	462a      	mov	r2, r5
 800c7f4:	4621      	mov	r1, r4
 800c7f6:	f7fd fe90 	bl	800a51a <memset>
 800c7fa:	e7f5      	b.n	800c7e8 <_calloc_r+0x14>

0800c7fc <__ascii_mbtowc>:
 800c7fc:	b082      	sub	sp, #8
 800c7fe:	b901      	cbnz	r1, 800c802 <__ascii_mbtowc+0x6>
 800c800:	a901      	add	r1, sp, #4
 800c802:	b142      	cbz	r2, 800c816 <__ascii_mbtowc+0x1a>
 800c804:	b14b      	cbz	r3, 800c81a <__ascii_mbtowc+0x1e>
 800c806:	7813      	ldrb	r3, [r2, #0]
 800c808:	600b      	str	r3, [r1, #0]
 800c80a:	7812      	ldrb	r2, [r2, #0]
 800c80c:	1e10      	subs	r0, r2, #0
 800c80e:	bf18      	it	ne
 800c810:	2001      	movne	r0, #1
 800c812:	b002      	add	sp, #8
 800c814:	4770      	bx	lr
 800c816:	4610      	mov	r0, r2
 800c818:	e7fb      	b.n	800c812 <__ascii_mbtowc+0x16>
 800c81a:	f06f 0001 	mvn.w	r0, #1
 800c81e:	e7f8      	b.n	800c812 <__ascii_mbtowc+0x16>

0800c820 <_realloc_r>:
 800c820:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c824:	4680      	mov	r8, r0
 800c826:	4615      	mov	r5, r2
 800c828:	460c      	mov	r4, r1
 800c82a:	b921      	cbnz	r1, 800c836 <_realloc_r+0x16>
 800c82c:	4611      	mov	r1, r2
 800c82e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c832:	f7fe bdf3 	b.w	800b41c <_malloc_r>
 800c836:	b92a      	cbnz	r2, 800c844 <_realloc_r+0x24>
 800c838:	f7fe fd7e 	bl	800b338 <_free_r>
 800c83c:	2400      	movs	r4, #0
 800c83e:	4620      	mov	r0, r4
 800c840:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c844:	f000 f92d 	bl	800caa2 <_malloc_usable_size_r>
 800c848:	4285      	cmp	r5, r0
 800c84a:	4606      	mov	r6, r0
 800c84c:	d802      	bhi.n	800c854 <_realloc_r+0x34>
 800c84e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800c852:	d8f4      	bhi.n	800c83e <_realloc_r+0x1e>
 800c854:	4629      	mov	r1, r5
 800c856:	4640      	mov	r0, r8
 800c858:	f7fe fde0 	bl	800b41c <_malloc_r>
 800c85c:	4607      	mov	r7, r0
 800c85e:	2800      	cmp	r0, #0
 800c860:	d0ec      	beq.n	800c83c <_realloc_r+0x1c>
 800c862:	42b5      	cmp	r5, r6
 800c864:	462a      	mov	r2, r5
 800c866:	4621      	mov	r1, r4
 800c868:	bf28      	it	cs
 800c86a:	4632      	movcs	r2, r6
 800c86c:	f7fd ff05 	bl	800a67a <memcpy>
 800c870:	4621      	mov	r1, r4
 800c872:	4640      	mov	r0, r8
 800c874:	f7fe fd60 	bl	800b338 <_free_r>
 800c878:	463c      	mov	r4, r7
 800c87a:	e7e0      	b.n	800c83e <_realloc_r+0x1e>

0800c87c <_strtol_l.constprop.0>:
 800c87c:	2b24      	cmp	r3, #36	@ 0x24
 800c87e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c882:	4686      	mov	lr, r0
 800c884:	4690      	mov	r8, r2
 800c886:	d801      	bhi.n	800c88c <_strtol_l.constprop.0+0x10>
 800c888:	2b01      	cmp	r3, #1
 800c88a:	d106      	bne.n	800c89a <_strtol_l.constprop.0+0x1e>
 800c88c:	f7fd feba 	bl	800a604 <__errno>
 800c890:	2316      	movs	r3, #22
 800c892:	6003      	str	r3, [r0, #0]
 800c894:	2000      	movs	r0, #0
 800c896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c89a:	460d      	mov	r5, r1
 800c89c:	4833      	ldr	r0, [pc, #204]	@ (800c96c <_strtol_l.constprop.0+0xf0>)
 800c89e:	462a      	mov	r2, r5
 800c8a0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c8a4:	5d06      	ldrb	r6, [r0, r4]
 800c8a6:	f016 0608 	ands.w	r6, r6, #8
 800c8aa:	d1f8      	bne.n	800c89e <_strtol_l.constprop.0+0x22>
 800c8ac:	2c2d      	cmp	r4, #45	@ 0x2d
 800c8ae:	d12d      	bne.n	800c90c <_strtol_l.constprop.0+0x90>
 800c8b0:	2601      	movs	r6, #1
 800c8b2:	782c      	ldrb	r4, [r5, #0]
 800c8b4:	1c95      	adds	r5, r2, #2
 800c8b6:	f033 0210 	bics.w	r2, r3, #16
 800c8ba:	d109      	bne.n	800c8d0 <_strtol_l.constprop.0+0x54>
 800c8bc:	2c30      	cmp	r4, #48	@ 0x30
 800c8be:	d12a      	bne.n	800c916 <_strtol_l.constprop.0+0x9a>
 800c8c0:	782a      	ldrb	r2, [r5, #0]
 800c8c2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800c8c6:	2a58      	cmp	r2, #88	@ 0x58
 800c8c8:	d125      	bne.n	800c916 <_strtol_l.constprop.0+0x9a>
 800c8ca:	2310      	movs	r3, #16
 800c8cc:	786c      	ldrb	r4, [r5, #1]
 800c8ce:	3502      	adds	r5, #2
 800c8d0:	2200      	movs	r2, #0
 800c8d2:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800c8d6:	f10c 3cff 	add.w	ip, ip, #4294967295
 800c8da:	fbbc f9f3 	udiv	r9, ip, r3
 800c8de:	4610      	mov	r0, r2
 800c8e0:	fb03 ca19 	mls	sl, r3, r9, ip
 800c8e4:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800c8e8:	2f09      	cmp	r7, #9
 800c8ea:	d81b      	bhi.n	800c924 <_strtol_l.constprop.0+0xa8>
 800c8ec:	463c      	mov	r4, r7
 800c8ee:	42a3      	cmp	r3, r4
 800c8f0:	dd27      	ble.n	800c942 <_strtol_l.constprop.0+0xc6>
 800c8f2:	1c57      	adds	r7, r2, #1
 800c8f4:	d007      	beq.n	800c906 <_strtol_l.constprop.0+0x8a>
 800c8f6:	4581      	cmp	r9, r0
 800c8f8:	d320      	bcc.n	800c93c <_strtol_l.constprop.0+0xc0>
 800c8fa:	d101      	bne.n	800c900 <_strtol_l.constprop.0+0x84>
 800c8fc:	45a2      	cmp	sl, r4
 800c8fe:	db1d      	blt.n	800c93c <_strtol_l.constprop.0+0xc0>
 800c900:	2201      	movs	r2, #1
 800c902:	fb00 4003 	mla	r0, r0, r3, r4
 800c906:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c90a:	e7eb      	b.n	800c8e4 <_strtol_l.constprop.0+0x68>
 800c90c:	2c2b      	cmp	r4, #43	@ 0x2b
 800c90e:	bf04      	itt	eq
 800c910:	782c      	ldrbeq	r4, [r5, #0]
 800c912:	1c95      	addeq	r5, r2, #2
 800c914:	e7cf      	b.n	800c8b6 <_strtol_l.constprop.0+0x3a>
 800c916:	2b00      	cmp	r3, #0
 800c918:	d1da      	bne.n	800c8d0 <_strtol_l.constprop.0+0x54>
 800c91a:	2c30      	cmp	r4, #48	@ 0x30
 800c91c:	bf0c      	ite	eq
 800c91e:	2308      	moveq	r3, #8
 800c920:	230a      	movne	r3, #10
 800c922:	e7d5      	b.n	800c8d0 <_strtol_l.constprop.0+0x54>
 800c924:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800c928:	2f19      	cmp	r7, #25
 800c92a:	d801      	bhi.n	800c930 <_strtol_l.constprop.0+0xb4>
 800c92c:	3c37      	subs	r4, #55	@ 0x37
 800c92e:	e7de      	b.n	800c8ee <_strtol_l.constprop.0+0x72>
 800c930:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800c934:	2f19      	cmp	r7, #25
 800c936:	d804      	bhi.n	800c942 <_strtol_l.constprop.0+0xc6>
 800c938:	3c57      	subs	r4, #87	@ 0x57
 800c93a:	e7d8      	b.n	800c8ee <_strtol_l.constprop.0+0x72>
 800c93c:	f04f 32ff 	mov.w	r2, #4294967295
 800c940:	e7e1      	b.n	800c906 <_strtol_l.constprop.0+0x8a>
 800c942:	1c53      	adds	r3, r2, #1
 800c944:	d108      	bne.n	800c958 <_strtol_l.constprop.0+0xdc>
 800c946:	2322      	movs	r3, #34	@ 0x22
 800c948:	4660      	mov	r0, ip
 800c94a:	f8ce 3000 	str.w	r3, [lr]
 800c94e:	f1b8 0f00 	cmp.w	r8, #0
 800c952:	d0a0      	beq.n	800c896 <_strtol_l.constprop.0+0x1a>
 800c954:	1e69      	subs	r1, r5, #1
 800c956:	e006      	b.n	800c966 <_strtol_l.constprop.0+0xea>
 800c958:	b106      	cbz	r6, 800c95c <_strtol_l.constprop.0+0xe0>
 800c95a:	4240      	negs	r0, r0
 800c95c:	f1b8 0f00 	cmp.w	r8, #0
 800c960:	d099      	beq.n	800c896 <_strtol_l.constprop.0+0x1a>
 800c962:	2a00      	cmp	r2, #0
 800c964:	d1f6      	bne.n	800c954 <_strtol_l.constprop.0+0xd8>
 800c966:	f8c8 1000 	str.w	r1, [r8]
 800c96a:	e794      	b.n	800c896 <_strtol_l.constprop.0+0x1a>
 800c96c:	0800d703 	.word	0x0800d703

0800c970 <_strtol_r>:
 800c970:	f7ff bf84 	b.w	800c87c <_strtol_l.constprop.0>

0800c974 <_strtoul_l.constprop.0>:
 800c974:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c978:	4686      	mov	lr, r0
 800c97a:	460d      	mov	r5, r1
 800c97c:	4e33      	ldr	r6, [pc, #204]	@ (800ca4c <_strtoul_l.constprop.0+0xd8>)
 800c97e:	4628      	mov	r0, r5
 800c980:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c984:	5d37      	ldrb	r7, [r6, r4]
 800c986:	f017 0708 	ands.w	r7, r7, #8
 800c98a:	d1f8      	bne.n	800c97e <_strtoul_l.constprop.0+0xa>
 800c98c:	2c2d      	cmp	r4, #45	@ 0x2d
 800c98e:	d12f      	bne.n	800c9f0 <_strtoul_l.constprop.0+0x7c>
 800c990:	2701      	movs	r7, #1
 800c992:	782c      	ldrb	r4, [r5, #0]
 800c994:	1c85      	adds	r5, r0, #2
 800c996:	f033 0010 	bics.w	r0, r3, #16
 800c99a:	d109      	bne.n	800c9b0 <_strtoul_l.constprop.0+0x3c>
 800c99c:	2c30      	cmp	r4, #48	@ 0x30
 800c99e:	d12c      	bne.n	800c9fa <_strtoul_l.constprop.0+0x86>
 800c9a0:	7828      	ldrb	r0, [r5, #0]
 800c9a2:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800c9a6:	2858      	cmp	r0, #88	@ 0x58
 800c9a8:	d127      	bne.n	800c9fa <_strtoul_l.constprop.0+0x86>
 800c9aa:	2310      	movs	r3, #16
 800c9ac:	786c      	ldrb	r4, [r5, #1]
 800c9ae:	3502      	adds	r5, #2
 800c9b0:	f04f 38ff 	mov.w	r8, #4294967295
 800c9b4:	fbb8 f8f3 	udiv	r8, r8, r3
 800c9b8:	2600      	movs	r6, #0
 800c9ba:	fb03 f908 	mul.w	r9, r3, r8
 800c9be:	4630      	mov	r0, r6
 800c9c0:	ea6f 0909 	mvn.w	r9, r9
 800c9c4:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800c9c8:	f1bc 0f09 	cmp.w	ip, #9
 800c9cc:	d81c      	bhi.n	800ca08 <_strtoul_l.constprop.0+0x94>
 800c9ce:	4664      	mov	r4, ip
 800c9d0:	42a3      	cmp	r3, r4
 800c9d2:	dd2a      	ble.n	800ca2a <_strtoul_l.constprop.0+0xb6>
 800c9d4:	f1b6 3fff 	cmp.w	r6, #4294967295
 800c9d8:	d007      	beq.n	800c9ea <_strtoul_l.constprop.0+0x76>
 800c9da:	4580      	cmp	r8, r0
 800c9dc:	d322      	bcc.n	800ca24 <_strtoul_l.constprop.0+0xb0>
 800c9de:	d101      	bne.n	800c9e4 <_strtoul_l.constprop.0+0x70>
 800c9e0:	45a1      	cmp	r9, r4
 800c9e2:	db1f      	blt.n	800ca24 <_strtoul_l.constprop.0+0xb0>
 800c9e4:	2601      	movs	r6, #1
 800c9e6:	fb00 4003 	mla	r0, r0, r3, r4
 800c9ea:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c9ee:	e7e9      	b.n	800c9c4 <_strtoul_l.constprop.0+0x50>
 800c9f0:	2c2b      	cmp	r4, #43	@ 0x2b
 800c9f2:	bf04      	itt	eq
 800c9f4:	782c      	ldrbeq	r4, [r5, #0]
 800c9f6:	1c85      	addeq	r5, r0, #2
 800c9f8:	e7cd      	b.n	800c996 <_strtoul_l.constprop.0+0x22>
 800c9fa:	2b00      	cmp	r3, #0
 800c9fc:	d1d8      	bne.n	800c9b0 <_strtoul_l.constprop.0+0x3c>
 800c9fe:	2c30      	cmp	r4, #48	@ 0x30
 800ca00:	bf0c      	ite	eq
 800ca02:	2308      	moveq	r3, #8
 800ca04:	230a      	movne	r3, #10
 800ca06:	e7d3      	b.n	800c9b0 <_strtoul_l.constprop.0+0x3c>
 800ca08:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800ca0c:	f1bc 0f19 	cmp.w	ip, #25
 800ca10:	d801      	bhi.n	800ca16 <_strtoul_l.constprop.0+0xa2>
 800ca12:	3c37      	subs	r4, #55	@ 0x37
 800ca14:	e7dc      	b.n	800c9d0 <_strtoul_l.constprop.0+0x5c>
 800ca16:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800ca1a:	f1bc 0f19 	cmp.w	ip, #25
 800ca1e:	d804      	bhi.n	800ca2a <_strtoul_l.constprop.0+0xb6>
 800ca20:	3c57      	subs	r4, #87	@ 0x57
 800ca22:	e7d5      	b.n	800c9d0 <_strtoul_l.constprop.0+0x5c>
 800ca24:	f04f 36ff 	mov.w	r6, #4294967295
 800ca28:	e7df      	b.n	800c9ea <_strtoul_l.constprop.0+0x76>
 800ca2a:	1c73      	adds	r3, r6, #1
 800ca2c:	d106      	bne.n	800ca3c <_strtoul_l.constprop.0+0xc8>
 800ca2e:	2322      	movs	r3, #34	@ 0x22
 800ca30:	4630      	mov	r0, r6
 800ca32:	f8ce 3000 	str.w	r3, [lr]
 800ca36:	b932      	cbnz	r2, 800ca46 <_strtoul_l.constprop.0+0xd2>
 800ca38:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca3c:	b107      	cbz	r7, 800ca40 <_strtoul_l.constprop.0+0xcc>
 800ca3e:	4240      	negs	r0, r0
 800ca40:	2a00      	cmp	r2, #0
 800ca42:	d0f9      	beq.n	800ca38 <_strtoul_l.constprop.0+0xc4>
 800ca44:	b106      	cbz	r6, 800ca48 <_strtoul_l.constprop.0+0xd4>
 800ca46:	1e69      	subs	r1, r5, #1
 800ca48:	6011      	str	r1, [r2, #0]
 800ca4a:	e7f5      	b.n	800ca38 <_strtoul_l.constprop.0+0xc4>
 800ca4c:	0800d703 	.word	0x0800d703

0800ca50 <_strtoul_r>:
 800ca50:	f7ff bf90 	b.w	800c974 <_strtoul_l.constprop.0>

0800ca54 <__ascii_wctomb>:
 800ca54:	4603      	mov	r3, r0
 800ca56:	4608      	mov	r0, r1
 800ca58:	b141      	cbz	r1, 800ca6c <__ascii_wctomb+0x18>
 800ca5a:	2aff      	cmp	r2, #255	@ 0xff
 800ca5c:	d904      	bls.n	800ca68 <__ascii_wctomb+0x14>
 800ca5e:	228a      	movs	r2, #138	@ 0x8a
 800ca60:	f04f 30ff 	mov.w	r0, #4294967295
 800ca64:	601a      	str	r2, [r3, #0]
 800ca66:	4770      	bx	lr
 800ca68:	2001      	movs	r0, #1
 800ca6a:	700a      	strb	r2, [r1, #0]
 800ca6c:	4770      	bx	lr
	...

0800ca70 <fiprintf>:
 800ca70:	b40e      	push	{r1, r2, r3}
 800ca72:	b503      	push	{r0, r1, lr}
 800ca74:	4601      	mov	r1, r0
 800ca76:	ab03      	add	r3, sp, #12
 800ca78:	4805      	ldr	r0, [pc, #20]	@ (800ca90 <fiprintf+0x20>)
 800ca7a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ca7e:	6800      	ldr	r0, [r0, #0]
 800ca80:	9301      	str	r3, [sp, #4]
 800ca82:	f000 f83d 	bl	800cb00 <_vfiprintf_r>
 800ca86:	b002      	add	sp, #8
 800ca88:	f85d eb04 	ldr.w	lr, [sp], #4
 800ca8c:	b003      	add	sp, #12
 800ca8e:	4770      	bx	lr
 800ca90:	2000001c 	.word	0x2000001c

0800ca94 <abort>:
 800ca94:	2006      	movs	r0, #6
 800ca96:	b508      	push	{r3, lr}
 800ca98:	f000 fa06 	bl	800cea8 <raise>
 800ca9c:	2001      	movs	r0, #1
 800ca9e:	f7f5 fb50 	bl	8002142 <_exit>

0800caa2 <_malloc_usable_size_r>:
 800caa2:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800caa6:	1f18      	subs	r0, r3, #4
 800caa8:	2b00      	cmp	r3, #0
 800caaa:	bfbc      	itt	lt
 800caac:	580b      	ldrlt	r3, [r1, r0]
 800caae:	18c0      	addlt	r0, r0, r3
 800cab0:	4770      	bx	lr

0800cab2 <__sfputc_r>:
 800cab2:	6893      	ldr	r3, [r2, #8]
 800cab4:	b410      	push	{r4}
 800cab6:	3b01      	subs	r3, #1
 800cab8:	2b00      	cmp	r3, #0
 800caba:	6093      	str	r3, [r2, #8]
 800cabc:	da07      	bge.n	800cace <__sfputc_r+0x1c>
 800cabe:	6994      	ldr	r4, [r2, #24]
 800cac0:	42a3      	cmp	r3, r4
 800cac2:	db01      	blt.n	800cac8 <__sfputc_r+0x16>
 800cac4:	290a      	cmp	r1, #10
 800cac6:	d102      	bne.n	800cace <__sfputc_r+0x1c>
 800cac8:	bc10      	pop	{r4}
 800caca:	f000 b931 	b.w	800cd30 <__swbuf_r>
 800cace:	6813      	ldr	r3, [r2, #0]
 800cad0:	1c58      	adds	r0, r3, #1
 800cad2:	6010      	str	r0, [r2, #0]
 800cad4:	7019      	strb	r1, [r3, #0]
 800cad6:	4608      	mov	r0, r1
 800cad8:	bc10      	pop	{r4}
 800cada:	4770      	bx	lr

0800cadc <__sfputs_r>:
 800cadc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	4614      	mov	r4, r2
 800cae4:	18d5      	adds	r5, r2, r3
 800cae6:	42ac      	cmp	r4, r5
 800cae8:	d101      	bne.n	800caee <__sfputs_r+0x12>
 800caea:	2000      	movs	r0, #0
 800caec:	e007      	b.n	800cafe <__sfputs_r+0x22>
 800caee:	463a      	mov	r2, r7
 800caf0:	4630      	mov	r0, r6
 800caf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800caf6:	f7ff ffdc 	bl	800cab2 <__sfputc_r>
 800cafa:	1c43      	adds	r3, r0, #1
 800cafc:	d1f3      	bne.n	800cae6 <__sfputs_r+0xa>
 800cafe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800cb00 <_vfiprintf_r>:
 800cb00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb04:	460d      	mov	r5, r1
 800cb06:	4614      	mov	r4, r2
 800cb08:	4698      	mov	r8, r3
 800cb0a:	4606      	mov	r6, r0
 800cb0c:	b09d      	sub	sp, #116	@ 0x74
 800cb0e:	b118      	cbz	r0, 800cb18 <_vfiprintf_r+0x18>
 800cb10:	6a03      	ldr	r3, [r0, #32]
 800cb12:	b90b      	cbnz	r3, 800cb18 <_vfiprintf_r+0x18>
 800cb14:	f7fd fc28 	bl	800a368 <__sinit>
 800cb18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb1a:	07d9      	lsls	r1, r3, #31
 800cb1c:	d405      	bmi.n	800cb2a <_vfiprintf_r+0x2a>
 800cb1e:	89ab      	ldrh	r3, [r5, #12]
 800cb20:	059a      	lsls	r2, r3, #22
 800cb22:	d402      	bmi.n	800cb2a <_vfiprintf_r+0x2a>
 800cb24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb26:	f7fd fd98 	bl	800a65a <__retarget_lock_acquire_recursive>
 800cb2a:	89ab      	ldrh	r3, [r5, #12]
 800cb2c:	071b      	lsls	r3, r3, #28
 800cb2e:	d501      	bpl.n	800cb34 <_vfiprintf_r+0x34>
 800cb30:	692b      	ldr	r3, [r5, #16]
 800cb32:	b99b      	cbnz	r3, 800cb5c <_vfiprintf_r+0x5c>
 800cb34:	4629      	mov	r1, r5
 800cb36:	4630      	mov	r0, r6
 800cb38:	f000 f938 	bl	800cdac <__swsetup_r>
 800cb3c:	b170      	cbz	r0, 800cb5c <_vfiprintf_r+0x5c>
 800cb3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800cb40:	07dc      	lsls	r4, r3, #31
 800cb42:	d504      	bpl.n	800cb4e <_vfiprintf_r+0x4e>
 800cb44:	f04f 30ff 	mov.w	r0, #4294967295
 800cb48:	b01d      	add	sp, #116	@ 0x74
 800cb4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb4e:	89ab      	ldrh	r3, [r5, #12]
 800cb50:	0598      	lsls	r0, r3, #22
 800cb52:	d4f7      	bmi.n	800cb44 <_vfiprintf_r+0x44>
 800cb54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800cb56:	f7fd fd81 	bl	800a65c <__retarget_lock_release_recursive>
 800cb5a:	e7f3      	b.n	800cb44 <_vfiprintf_r+0x44>
 800cb5c:	2300      	movs	r3, #0
 800cb5e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cb60:	2320      	movs	r3, #32
 800cb62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800cb66:	2330      	movs	r3, #48	@ 0x30
 800cb68:	f04f 0901 	mov.w	r9, #1
 800cb6c:	f8cd 800c 	str.w	r8, [sp, #12]
 800cb70:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800cd1c <_vfiprintf_r+0x21c>
 800cb74:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800cb78:	4623      	mov	r3, r4
 800cb7a:	469a      	mov	sl, r3
 800cb7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cb80:	b10a      	cbz	r2, 800cb86 <_vfiprintf_r+0x86>
 800cb82:	2a25      	cmp	r2, #37	@ 0x25
 800cb84:	d1f9      	bne.n	800cb7a <_vfiprintf_r+0x7a>
 800cb86:	ebba 0b04 	subs.w	fp, sl, r4
 800cb8a:	d00b      	beq.n	800cba4 <_vfiprintf_r+0xa4>
 800cb8c:	465b      	mov	r3, fp
 800cb8e:	4622      	mov	r2, r4
 800cb90:	4629      	mov	r1, r5
 800cb92:	4630      	mov	r0, r6
 800cb94:	f7ff ffa2 	bl	800cadc <__sfputs_r>
 800cb98:	3001      	adds	r0, #1
 800cb9a:	f000 80a7 	beq.w	800ccec <_vfiprintf_r+0x1ec>
 800cb9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800cba0:	445a      	add	r2, fp
 800cba2:	9209      	str	r2, [sp, #36]	@ 0x24
 800cba4:	f89a 3000 	ldrb.w	r3, [sl]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	f000 809f 	beq.w	800ccec <_vfiprintf_r+0x1ec>
 800cbae:	2300      	movs	r3, #0
 800cbb0:	f04f 32ff 	mov.w	r2, #4294967295
 800cbb4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cbb8:	f10a 0a01 	add.w	sl, sl, #1
 800cbbc:	9304      	str	r3, [sp, #16]
 800cbbe:	9307      	str	r3, [sp, #28]
 800cbc0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800cbc4:	931a      	str	r3, [sp, #104]	@ 0x68
 800cbc6:	4654      	mov	r4, sl
 800cbc8:	2205      	movs	r2, #5
 800cbca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cbce:	4853      	ldr	r0, [pc, #332]	@ (800cd1c <_vfiprintf_r+0x21c>)
 800cbd0:	f7fd fd45 	bl	800a65e <memchr>
 800cbd4:	9a04      	ldr	r2, [sp, #16]
 800cbd6:	b9d8      	cbnz	r0, 800cc10 <_vfiprintf_r+0x110>
 800cbd8:	06d1      	lsls	r1, r2, #27
 800cbda:	bf44      	itt	mi
 800cbdc:	2320      	movmi	r3, #32
 800cbde:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbe2:	0713      	lsls	r3, r2, #28
 800cbe4:	bf44      	itt	mi
 800cbe6:	232b      	movmi	r3, #43	@ 0x2b
 800cbe8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800cbec:	f89a 3000 	ldrb.w	r3, [sl]
 800cbf0:	2b2a      	cmp	r3, #42	@ 0x2a
 800cbf2:	d015      	beq.n	800cc20 <_vfiprintf_r+0x120>
 800cbf4:	4654      	mov	r4, sl
 800cbf6:	2000      	movs	r0, #0
 800cbf8:	f04f 0c0a 	mov.w	ip, #10
 800cbfc:	9a07      	ldr	r2, [sp, #28]
 800cbfe:	4621      	mov	r1, r4
 800cc00:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cc04:	3b30      	subs	r3, #48	@ 0x30
 800cc06:	2b09      	cmp	r3, #9
 800cc08:	d94b      	bls.n	800cca2 <_vfiprintf_r+0x1a2>
 800cc0a:	b1b0      	cbz	r0, 800cc3a <_vfiprintf_r+0x13a>
 800cc0c:	9207      	str	r2, [sp, #28]
 800cc0e:	e014      	b.n	800cc3a <_vfiprintf_r+0x13a>
 800cc10:	eba0 0308 	sub.w	r3, r0, r8
 800cc14:	fa09 f303 	lsl.w	r3, r9, r3
 800cc18:	4313      	orrs	r3, r2
 800cc1a:	46a2      	mov	sl, r4
 800cc1c:	9304      	str	r3, [sp, #16]
 800cc1e:	e7d2      	b.n	800cbc6 <_vfiprintf_r+0xc6>
 800cc20:	9b03      	ldr	r3, [sp, #12]
 800cc22:	1d19      	adds	r1, r3, #4
 800cc24:	681b      	ldr	r3, [r3, #0]
 800cc26:	9103      	str	r1, [sp, #12]
 800cc28:	2b00      	cmp	r3, #0
 800cc2a:	bfbb      	ittet	lt
 800cc2c:	425b      	neglt	r3, r3
 800cc2e:	f042 0202 	orrlt.w	r2, r2, #2
 800cc32:	9307      	strge	r3, [sp, #28]
 800cc34:	9307      	strlt	r3, [sp, #28]
 800cc36:	bfb8      	it	lt
 800cc38:	9204      	strlt	r2, [sp, #16]
 800cc3a:	7823      	ldrb	r3, [r4, #0]
 800cc3c:	2b2e      	cmp	r3, #46	@ 0x2e
 800cc3e:	d10a      	bne.n	800cc56 <_vfiprintf_r+0x156>
 800cc40:	7863      	ldrb	r3, [r4, #1]
 800cc42:	2b2a      	cmp	r3, #42	@ 0x2a
 800cc44:	d132      	bne.n	800ccac <_vfiprintf_r+0x1ac>
 800cc46:	9b03      	ldr	r3, [sp, #12]
 800cc48:	3402      	adds	r4, #2
 800cc4a:	1d1a      	adds	r2, r3, #4
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	9203      	str	r2, [sp, #12]
 800cc50:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800cc54:	9305      	str	r3, [sp, #20]
 800cc56:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800cd20 <_vfiprintf_r+0x220>
 800cc5a:	2203      	movs	r2, #3
 800cc5c:	4650      	mov	r0, sl
 800cc5e:	7821      	ldrb	r1, [r4, #0]
 800cc60:	f7fd fcfd 	bl	800a65e <memchr>
 800cc64:	b138      	cbz	r0, 800cc76 <_vfiprintf_r+0x176>
 800cc66:	2240      	movs	r2, #64	@ 0x40
 800cc68:	9b04      	ldr	r3, [sp, #16]
 800cc6a:	eba0 000a 	sub.w	r0, r0, sl
 800cc6e:	4082      	lsls	r2, r0
 800cc70:	4313      	orrs	r3, r2
 800cc72:	3401      	adds	r4, #1
 800cc74:	9304      	str	r3, [sp, #16]
 800cc76:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cc7a:	2206      	movs	r2, #6
 800cc7c:	4829      	ldr	r0, [pc, #164]	@ (800cd24 <_vfiprintf_r+0x224>)
 800cc7e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800cc82:	f7fd fcec 	bl	800a65e <memchr>
 800cc86:	2800      	cmp	r0, #0
 800cc88:	d03f      	beq.n	800cd0a <_vfiprintf_r+0x20a>
 800cc8a:	4b27      	ldr	r3, [pc, #156]	@ (800cd28 <_vfiprintf_r+0x228>)
 800cc8c:	bb1b      	cbnz	r3, 800ccd6 <_vfiprintf_r+0x1d6>
 800cc8e:	9b03      	ldr	r3, [sp, #12]
 800cc90:	3307      	adds	r3, #7
 800cc92:	f023 0307 	bic.w	r3, r3, #7
 800cc96:	3308      	adds	r3, #8
 800cc98:	9303      	str	r3, [sp, #12]
 800cc9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cc9c:	443b      	add	r3, r7
 800cc9e:	9309      	str	r3, [sp, #36]	@ 0x24
 800cca0:	e76a      	b.n	800cb78 <_vfiprintf_r+0x78>
 800cca2:	460c      	mov	r4, r1
 800cca4:	2001      	movs	r0, #1
 800cca6:	fb0c 3202 	mla	r2, ip, r2, r3
 800ccaa:	e7a8      	b.n	800cbfe <_vfiprintf_r+0xfe>
 800ccac:	2300      	movs	r3, #0
 800ccae:	f04f 0c0a 	mov.w	ip, #10
 800ccb2:	4619      	mov	r1, r3
 800ccb4:	3401      	adds	r4, #1
 800ccb6:	9305      	str	r3, [sp, #20]
 800ccb8:	4620      	mov	r0, r4
 800ccba:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ccbe:	3a30      	subs	r2, #48	@ 0x30
 800ccc0:	2a09      	cmp	r2, #9
 800ccc2:	d903      	bls.n	800cccc <_vfiprintf_r+0x1cc>
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d0c6      	beq.n	800cc56 <_vfiprintf_r+0x156>
 800ccc8:	9105      	str	r1, [sp, #20]
 800ccca:	e7c4      	b.n	800cc56 <_vfiprintf_r+0x156>
 800cccc:	4604      	mov	r4, r0
 800ccce:	2301      	movs	r3, #1
 800ccd0:	fb0c 2101 	mla	r1, ip, r1, r2
 800ccd4:	e7f0      	b.n	800ccb8 <_vfiprintf_r+0x1b8>
 800ccd6:	ab03      	add	r3, sp, #12
 800ccd8:	9300      	str	r3, [sp, #0]
 800ccda:	462a      	mov	r2, r5
 800ccdc:	4630      	mov	r0, r6
 800ccde:	4b13      	ldr	r3, [pc, #76]	@ (800cd2c <_vfiprintf_r+0x22c>)
 800cce0:	a904      	add	r1, sp, #16
 800cce2:	f7fc fef7 	bl	8009ad4 <_printf_float>
 800cce6:	4607      	mov	r7, r0
 800cce8:	1c78      	adds	r0, r7, #1
 800ccea:	d1d6      	bne.n	800cc9a <_vfiprintf_r+0x19a>
 800ccec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ccee:	07d9      	lsls	r1, r3, #31
 800ccf0:	d405      	bmi.n	800ccfe <_vfiprintf_r+0x1fe>
 800ccf2:	89ab      	ldrh	r3, [r5, #12]
 800ccf4:	059a      	lsls	r2, r3, #22
 800ccf6:	d402      	bmi.n	800ccfe <_vfiprintf_r+0x1fe>
 800ccf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ccfa:	f7fd fcaf 	bl	800a65c <__retarget_lock_release_recursive>
 800ccfe:	89ab      	ldrh	r3, [r5, #12]
 800cd00:	065b      	lsls	r3, r3, #25
 800cd02:	f53f af1f 	bmi.w	800cb44 <_vfiprintf_r+0x44>
 800cd06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800cd08:	e71e      	b.n	800cb48 <_vfiprintf_r+0x48>
 800cd0a:	ab03      	add	r3, sp, #12
 800cd0c:	9300      	str	r3, [sp, #0]
 800cd0e:	462a      	mov	r2, r5
 800cd10:	4630      	mov	r0, r6
 800cd12:	4b06      	ldr	r3, [pc, #24]	@ (800cd2c <_vfiprintf_r+0x22c>)
 800cd14:	a904      	add	r1, sp, #16
 800cd16:	f7fd f97b 	bl	800a010 <_printf_i>
 800cd1a:	e7e4      	b.n	800cce6 <_vfiprintf_r+0x1e6>
 800cd1c:	0800d690 	.word	0x0800d690
 800cd20:	0800d696 	.word	0x0800d696
 800cd24:	0800d69a 	.word	0x0800d69a
 800cd28:	08009ad5 	.word	0x08009ad5
 800cd2c:	0800cadd 	.word	0x0800cadd

0800cd30 <__swbuf_r>:
 800cd30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd32:	460e      	mov	r6, r1
 800cd34:	4614      	mov	r4, r2
 800cd36:	4605      	mov	r5, r0
 800cd38:	b118      	cbz	r0, 800cd42 <__swbuf_r+0x12>
 800cd3a:	6a03      	ldr	r3, [r0, #32]
 800cd3c:	b90b      	cbnz	r3, 800cd42 <__swbuf_r+0x12>
 800cd3e:	f7fd fb13 	bl	800a368 <__sinit>
 800cd42:	69a3      	ldr	r3, [r4, #24]
 800cd44:	60a3      	str	r3, [r4, #8]
 800cd46:	89a3      	ldrh	r3, [r4, #12]
 800cd48:	071a      	lsls	r2, r3, #28
 800cd4a:	d501      	bpl.n	800cd50 <__swbuf_r+0x20>
 800cd4c:	6923      	ldr	r3, [r4, #16]
 800cd4e:	b943      	cbnz	r3, 800cd62 <__swbuf_r+0x32>
 800cd50:	4621      	mov	r1, r4
 800cd52:	4628      	mov	r0, r5
 800cd54:	f000 f82a 	bl	800cdac <__swsetup_r>
 800cd58:	b118      	cbz	r0, 800cd62 <__swbuf_r+0x32>
 800cd5a:	f04f 37ff 	mov.w	r7, #4294967295
 800cd5e:	4638      	mov	r0, r7
 800cd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800cd62:	6823      	ldr	r3, [r4, #0]
 800cd64:	6922      	ldr	r2, [r4, #16]
 800cd66:	b2f6      	uxtb	r6, r6
 800cd68:	1a98      	subs	r0, r3, r2
 800cd6a:	6963      	ldr	r3, [r4, #20]
 800cd6c:	4637      	mov	r7, r6
 800cd6e:	4283      	cmp	r3, r0
 800cd70:	dc05      	bgt.n	800cd7e <__swbuf_r+0x4e>
 800cd72:	4621      	mov	r1, r4
 800cd74:	4628      	mov	r0, r5
 800cd76:	f7ff fc4b 	bl	800c610 <_fflush_r>
 800cd7a:	2800      	cmp	r0, #0
 800cd7c:	d1ed      	bne.n	800cd5a <__swbuf_r+0x2a>
 800cd7e:	68a3      	ldr	r3, [r4, #8]
 800cd80:	3b01      	subs	r3, #1
 800cd82:	60a3      	str	r3, [r4, #8]
 800cd84:	6823      	ldr	r3, [r4, #0]
 800cd86:	1c5a      	adds	r2, r3, #1
 800cd88:	6022      	str	r2, [r4, #0]
 800cd8a:	701e      	strb	r6, [r3, #0]
 800cd8c:	6962      	ldr	r2, [r4, #20]
 800cd8e:	1c43      	adds	r3, r0, #1
 800cd90:	429a      	cmp	r2, r3
 800cd92:	d004      	beq.n	800cd9e <__swbuf_r+0x6e>
 800cd94:	89a3      	ldrh	r3, [r4, #12]
 800cd96:	07db      	lsls	r3, r3, #31
 800cd98:	d5e1      	bpl.n	800cd5e <__swbuf_r+0x2e>
 800cd9a:	2e0a      	cmp	r6, #10
 800cd9c:	d1df      	bne.n	800cd5e <__swbuf_r+0x2e>
 800cd9e:	4621      	mov	r1, r4
 800cda0:	4628      	mov	r0, r5
 800cda2:	f7ff fc35 	bl	800c610 <_fflush_r>
 800cda6:	2800      	cmp	r0, #0
 800cda8:	d0d9      	beq.n	800cd5e <__swbuf_r+0x2e>
 800cdaa:	e7d6      	b.n	800cd5a <__swbuf_r+0x2a>

0800cdac <__swsetup_r>:
 800cdac:	b538      	push	{r3, r4, r5, lr}
 800cdae:	4b29      	ldr	r3, [pc, #164]	@ (800ce54 <__swsetup_r+0xa8>)
 800cdb0:	4605      	mov	r5, r0
 800cdb2:	6818      	ldr	r0, [r3, #0]
 800cdb4:	460c      	mov	r4, r1
 800cdb6:	b118      	cbz	r0, 800cdc0 <__swsetup_r+0x14>
 800cdb8:	6a03      	ldr	r3, [r0, #32]
 800cdba:	b90b      	cbnz	r3, 800cdc0 <__swsetup_r+0x14>
 800cdbc:	f7fd fad4 	bl	800a368 <__sinit>
 800cdc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cdc4:	0719      	lsls	r1, r3, #28
 800cdc6:	d422      	bmi.n	800ce0e <__swsetup_r+0x62>
 800cdc8:	06da      	lsls	r2, r3, #27
 800cdca:	d407      	bmi.n	800cddc <__swsetup_r+0x30>
 800cdcc:	2209      	movs	r2, #9
 800cdce:	602a      	str	r2, [r5, #0]
 800cdd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800cdd4:	f04f 30ff 	mov.w	r0, #4294967295
 800cdd8:	81a3      	strh	r3, [r4, #12]
 800cdda:	e033      	b.n	800ce44 <__swsetup_r+0x98>
 800cddc:	0758      	lsls	r0, r3, #29
 800cdde:	d512      	bpl.n	800ce06 <__swsetup_r+0x5a>
 800cde0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800cde2:	b141      	cbz	r1, 800cdf6 <__swsetup_r+0x4a>
 800cde4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800cde8:	4299      	cmp	r1, r3
 800cdea:	d002      	beq.n	800cdf2 <__swsetup_r+0x46>
 800cdec:	4628      	mov	r0, r5
 800cdee:	f7fe faa3 	bl	800b338 <_free_r>
 800cdf2:	2300      	movs	r3, #0
 800cdf4:	6363      	str	r3, [r4, #52]	@ 0x34
 800cdf6:	89a3      	ldrh	r3, [r4, #12]
 800cdf8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800cdfc:	81a3      	strh	r3, [r4, #12]
 800cdfe:	2300      	movs	r3, #0
 800ce00:	6063      	str	r3, [r4, #4]
 800ce02:	6923      	ldr	r3, [r4, #16]
 800ce04:	6023      	str	r3, [r4, #0]
 800ce06:	89a3      	ldrh	r3, [r4, #12]
 800ce08:	f043 0308 	orr.w	r3, r3, #8
 800ce0c:	81a3      	strh	r3, [r4, #12]
 800ce0e:	6923      	ldr	r3, [r4, #16]
 800ce10:	b94b      	cbnz	r3, 800ce26 <__swsetup_r+0x7a>
 800ce12:	89a3      	ldrh	r3, [r4, #12]
 800ce14:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ce18:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ce1c:	d003      	beq.n	800ce26 <__swsetup_r+0x7a>
 800ce1e:	4621      	mov	r1, r4
 800ce20:	4628      	mov	r0, r5
 800ce22:	f000 f882 	bl	800cf2a <__smakebuf_r>
 800ce26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ce2a:	f013 0201 	ands.w	r2, r3, #1
 800ce2e:	d00a      	beq.n	800ce46 <__swsetup_r+0x9a>
 800ce30:	2200      	movs	r2, #0
 800ce32:	60a2      	str	r2, [r4, #8]
 800ce34:	6962      	ldr	r2, [r4, #20]
 800ce36:	4252      	negs	r2, r2
 800ce38:	61a2      	str	r2, [r4, #24]
 800ce3a:	6922      	ldr	r2, [r4, #16]
 800ce3c:	b942      	cbnz	r2, 800ce50 <__swsetup_r+0xa4>
 800ce3e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ce42:	d1c5      	bne.n	800cdd0 <__swsetup_r+0x24>
 800ce44:	bd38      	pop	{r3, r4, r5, pc}
 800ce46:	0799      	lsls	r1, r3, #30
 800ce48:	bf58      	it	pl
 800ce4a:	6962      	ldrpl	r2, [r4, #20]
 800ce4c:	60a2      	str	r2, [r4, #8]
 800ce4e:	e7f4      	b.n	800ce3a <__swsetup_r+0x8e>
 800ce50:	2000      	movs	r0, #0
 800ce52:	e7f7      	b.n	800ce44 <__swsetup_r+0x98>
 800ce54:	2000001c 	.word	0x2000001c

0800ce58 <_raise_r>:
 800ce58:	291f      	cmp	r1, #31
 800ce5a:	b538      	push	{r3, r4, r5, lr}
 800ce5c:	4605      	mov	r5, r0
 800ce5e:	460c      	mov	r4, r1
 800ce60:	d904      	bls.n	800ce6c <_raise_r+0x14>
 800ce62:	2316      	movs	r3, #22
 800ce64:	6003      	str	r3, [r0, #0]
 800ce66:	f04f 30ff 	mov.w	r0, #4294967295
 800ce6a:	bd38      	pop	{r3, r4, r5, pc}
 800ce6c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ce6e:	b112      	cbz	r2, 800ce76 <_raise_r+0x1e>
 800ce70:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ce74:	b94b      	cbnz	r3, 800ce8a <_raise_r+0x32>
 800ce76:	4628      	mov	r0, r5
 800ce78:	f000 f830 	bl	800cedc <_getpid_r>
 800ce7c:	4622      	mov	r2, r4
 800ce7e:	4601      	mov	r1, r0
 800ce80:	4628      	mov	r0, r5
 800ce82:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ce86:	f000 b817 	b.w	800ceb8 <_kill_r>
 800ce8a:	2b01      	cmp	r3, #1
 800ce8c:	d00a      	beq.n	800cea4 <_raise_r+0x4c>
 800ce8e:	1c59      	adds	r1, r3, #1
 800ce90:	d103      	bne.n	800ce9a <_raise_r+0x42>
 800ce92:	2316      	movs	r3, #22
 800ce94:	6003      	str	r3, [r0, #0]
 800ce96:	2001      	movs	r0, #1
 800ce98:	e7e7      	b.n	800ce6a <_raise_r+0x12>
 800ce9a:	2100      	movs	r1, #0
 800ce9c:	4620      	mov	r0, r4
 800ce9e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800cea2:	4798      	blx	r3
 800cea4:	2000      	movs	r0, #0
 800cea6:	e7e0      	b.n	800ce6a <_raise_r+0x12>

0800cea8 <raise>:
 800cea8:	4b02      	ldr	r3, [pc, #8]	@ (800ceb4 <raise+0xc>)
 800ceaa:	4601      	mov	r1, r0
 800ceac:	6818      	ldr	r0, [r3, #0]
 800ceae:	f7ff bfd3 	b.w	800ce58 <_raise_r>
 800ceb2:	bf00      	nop
 800ceb4:	2000001c 	.word	0x2000001c

0800ceb8 <_kill_r>:
 800ceb8:	b538      	push	{r3, r4, r5, lr}
 800ceba:	2300      	movs	r3, #0
 800cebc:	4d06      	ldr	r5, [pc, #24]	@ (800ced8 <_kill_r+0x20>)
 800cebe:	4604      	mov	r4, r0
 800cec0:	4608      	mov	r0, r1
 800cec2:	4611      	mov	r1, r2
 800cec4:	602b      	str	r3, [r5, #0]
 800cec6:	f7f5 f92c 	bl	8002122 <_kill>
 800ceca:	1c43      	adds	r3, r0, #1
 800cecc:	d102      	bne.n	800ced4 <_kill_r+0x1c>
 800cece:	682b      	ldr	r3, [r5, #0]
 800ced0:	b103      	cbz	r3, 800ced4 <_kill_r+0x1c>
 800ced2:	6023      	str	r3, [r4, #0]
 800ced4:	bd38      	pop	{r3, r4, r5, pc}
 800ced6:	bf00      	nop
 800ced8:	20001d24 	.word	0x20001d24

0800cedc <_getpid_r>:
 800cedc:	f7f5 b91a 	b.w	8002114 <_getpid>

0800cee0 <__swhatbuf_r>:
 800cee0:	b570      	push	{r4, r5, r6, lr}
 800cee2:	460c      	mov	r4, r1
 800cee4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cee8:	4615      	mov	r5, r2
 800ceea:	2900      	cmp	r1, #0
 800ceec:	461e      	mov	r6, r3
 800ceee:	b096      	sub	sp, #88	@ 0x58
 800cef0:	da0c      	bge.n	800cf0c <__swhatbuf_r+0x2c>
 800cef2:	89a3      	ldrh	r3, [r4, #12]
 800cef4:	2100      	movs	r1, #0
 800cef6:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800cefa:	bf14      	ite	ne
 800cefc:	2340      	movne	r3, #64	@ 0x40
 800cefe:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800cf02:	2000      	movs	r0, #0
 800cf04:	6031      	str	r1, [r6, #0]
 800cf06:	602b      	str	r3, [r5, #0]
 800cf08:	b016      	add	sp, #88	@ 0x58
 800cf0a:	bd70      	pop	{r4, r5, r6, pc}
 800cf0c:	466a      	mov	r2, sp
 800cf0e:	f000 f849 	bl	800cfa4 <_fstat_r>
 800cf12:	2800      	cmp	r0, #0
 800cf14:	dbed      	blt.n	800cef2 <__swhatbuf_r+0x12>
 800cf16:	9901      	ldr	r1, [sp, #4]
 800cf18:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800cf1c:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800cf20:	4259      	negs	r1, r3
 800cf22:	4159      	adcs	r1, r3
 800cf24:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800cf28:	e7eb      	b.n	800cf02 <__swhatbuf_r+0x22>

0800cf2a <__smakebuf_r>:
 800cf2a:	898b      	ldrh	r3, [r1, #12]
 800cf2c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cf2e:	079d      	lsls	r5, r3, #30
 800cf30:	4606      	mov	r6, r0
 800cf32:	460c      	mov	r4, r1
 800cf34:	d507      	bpl.n	800cf46 <__smakebuf_r+0x1c>
 800cf36:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800cf3a:	6023      	str	r3, [r4, #0]
 800cf3c:	6123      	str	r3, [r4, #16]
 800cf3e:	2301      	movs	r3, #1
 800cf40:	6163      	str	r3, [r4, #20]
 800cf42:	b003      	add	sp, #12
 800cf44:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cf46:	466a      	mov	r2, sp
 800cf48:	ab01      	add	r3, sp, #4
 800cf4a:	f7ff ffc9 	bl	800cee0 <__swhatbuf_r>
 800cf4e:	9f00      	ldr	r7, [sp, #0]
 800cf50:	4605      	mov	r5, r0
 800cf52:	4639      	mov	r1, r7
 800cf54:	4630      	mov	r0, r6
 800cf56:	f7fe fa61 	bl	800b41c <_malloc_r>
 800cf5a:	b948      	cbnz	r0, 800cf70 <__smakebuf_r+0x46>
 800cf5c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cf60:	059a      	lsls	r2, r3, #22
 800cf62:	d4ee      	bmi.n	800cf42 <__smakebuf_r+0x18>
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	f043 0302 	orr.w	r3, r3, #2
 800cf6c:	81a3      	strh	r3, [r4, #12]
 800cf6e:	e7e2      	b.n	800cf36 <__smakebuf_r+0xc>
 800cf70:	89a3      	ldrh	r3, [r4, #12]
 800cf72:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800cf76:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800cf7a:	81a3      	strh	r3, [r4, #12]
 800cf7c:	9b01      	ldr	r3, [sp, #4]
 800cf7e:	6020      	str	r0, [r4, #0]
 800cf80:	b15b      	cbz	r3, 800cf9a <__smakebuf_r+0x70>
 800cf82:	4630      	mov	r0, r6
 800cf84:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cf88:	f000 f81e 	bl	800cfc8 <_isatty_r>
 800cf8c:	b128      	cbz	r0, 800cf9a <__smakebuf_r+0x70>
 800cf8e:	89a3      	ldrh	r3, [r4, #12]
 800cf90:	f023 0303 	bic.w	r3, r3, #3
 800cf94:	f043 0301 	orr.w	r3, r3, #1
 800cf98:	81a3      	strh	r3, [r4, #12]
 800cf9a:	89a3      	ldrh	r3, [r4, #12]
 800cf9c:	431d      	orrs	r5, r3
 800cf9e:	81a5      	strh	r5, [r4, #12]
 800cfa0:	e7cf      	b.n	800cf42 <__smakebuf_r+0x18>
	...

0800cfa4 <_fstat_r>:
 800cfa4:	b538      	push	{r3, r4, r5, lr}
 800cfa6:	2300      	movs	r3, #0
 800cfa8:	4d06      	ldr	r5, [pc, #24]	@ (800cfc4 <_fstat_r+0x20>)
 800cfaa:	4604      	mov	r4, r0
 800cfac:	4608      	mov	r0, r1
 800cfae:	4611      	mov	r1, r2
 800cfb0:	602b      	str	r3, [r5, #0]
 800cfb2:	f7f5 f915 	bl	80021e0 <_fstat>
 800cfb6:	1c43      	adds	r3, r0, #1
 800cfb8:	d102      	bne.n	800cfc0 <_fstat_r+0x1c>
 800cfba:	682b      	ldr	r3, [r5, #0]
 800cfbc:	b103      	cbz	r3, 800cfc0 <_fstat_r+0x1c>
 800cfbe:	6023      	str	r3, [r4, #0]
 800cfc0:	bd38      	pop	{r3, r4, r5, pc}
 800cfc2:	bf00      	nop
 800cfc4:	20001d24 	.word	0x20001d24

0800cfc8 <_isatty_r>:
 800cfc8:	b538      	push	{r3, r4, r5, lr}
 800cfca:	2300      	movs	r3, #0
 800cfcc:	4d05      	ldr	r5, [pc, #20]	@ (800cfe4 <_isatty_r+0x1c>)
 800cfce:	4604      	mov	r4, r0
 800cfd0:	4608      	mov	r0, r1
 800cfd2:	602b      	str	r3, [r5, #0]
 800cfd4:	f7f5 f913 	bl	80021fe <_isatty>
 800cfd8:	1c43      	adds	r3, r0, #1
 800cfda:	d102      	bne.n	800cfe2 <_isatty_r+0x1a>
 800cfdc:	682b      	ldr	r3, [r5, #0]
 800cfde:	b103      	cbz	r3, 800cfe2 <_isatty_r+0x1a>
 800cfe0:	6023      	str	r3, [r4, #0]
 800cfe2:	bd38      	pop	{r3, r4, r5, pc}
 800cfe4:	20001d24 	.word	0x20001d24

0800cfe8 <_init>:
 800cfe8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cfea:	bf00      	nop
 800cfec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cfee:	bc08      	pop	{r3}
 800cff0:	469e      	mov	lr, r3
 800cff2:	4770      	bx	lr

0800cff4 <_fini>:
 800cff4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cff6:	bf00      	nop
 800cff8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cffa:	bc08      	pop	{r3}
 800cffc:	469e      	mov	lr, r3
 800cffe:	4770      	bx	lr
