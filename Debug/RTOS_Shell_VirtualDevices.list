
RTOS_Shell_VirtualDevices.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000af80  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000057c  0800b090  0800b090  0000c090  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b60c  0800b60c  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b60c  0800b60c  0000c60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b614  0800b614  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000008  0800b614  0800b614  0000c614  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b61c  0800b61c  0000c61c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b620  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b2c  200001d8  0800b7f8  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001d04  0800b7f8  0000dd04  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017391  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000044dc  00000000  00000000  00024592  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001248  00000000  00000000  00028a70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000dc1  00000000  00000000  00029cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001ec55  00000000  00000000  0002aa79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017b97  00000000  00000000  000496ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d935  00000000  00000000  00061265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000feb9a  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005ccc  00000000  00000000  000febe0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  001048ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800b078 	.word	0x0800b078

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800b078 	.word	0x0800b078

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <StartShellTask>:
	snprintf(response, max_len, "Time: %02d:%02d:%02d Date: %02d-%02d-%04d\n",
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
			2000 + sDate.Year);
}

void StartShellTask(void *argument) {
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	b0cd      	sub	sp, #308	@ 0x134
 8000cbc:	af06      	add	r7, sp, #24
 8000cbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cc6:	6018      	str	r0, [r3, #0]
	VirtualTemperatureSensor tempSensor;
 8000cc8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f9e9 	bl	80010a4 <_ZN24VirtualTemperatureSensorC1Ev>
	VirtualVoltageSensor voltageSensor;

	char rxChar;
	char command[100];
	char response[100];
	unsigned int cmdIndex = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	while (1) {
		// Read one byte at a time
		if (xStreamBufferReceive(uartRxStreamBuffer, &rxChar, 1, portMAX_DELAY) == 1) {
 8000cd8:	4bc8      	ldr	r3, [pc, #800]	@ (8000ffc <StartShellTask+0x344>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	f107 01fb 	add.w	r1, r7, #251	@ 0xfb
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f004 fc5c 	bl	80055a2 <xStreamBufferReceive>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0ee      	beq.n	8000cd8 <StartShellTask+0x20>
			if (rxChar == '\r' || rxChar == '\n') {
 8000cfa:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000cfe:	2b0d      	cmp	r3, #13
 8000d00:	d004      	beq.n	8000d0c <StartShellTask+0x54>
 8000d02:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	f040 819c 	bne.w	8001044 <StartShellTask+0x38c>
				command[cmdIndex] = '\0'; // Null-terminate
 8000d0c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8000d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
				cmdIndex = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				// Trim any trailing newline or carriage return
				command[strcspn(command, "\r\n")] = 0;
 8000d20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d24:	49b6      	ldr	r1, [pc, #728]	@ (8001000 <StartShellTask+0x348>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 fc47 	bl	80085ba <strcspn>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8000d32:	443b      	add	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	f803 2c84 	strb.w	r2, [r3, #-132]

				if (strcmp(command, "GET_TEMPERATURE") == 0) {
 8000d3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d3e:	49b1      	ldr	r1, [pc, #708]	@ (8001004 <StartShellTask+0x34c>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa05 	bl	8000150 <strcmp>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d115      	bne.n	8000d78 <StartShellTask+0xc0>
					float temp = tempSensor.getTemperature();
 8000d4c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f9b1 	bl	80010b8 <_ZN24VirtualTemperatureSensor14getTemperatureEv>
 8000d56:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
					snprintf(response, sizeof(response), "Temperature: %.2foC\n", temp);
 8000d5a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000d5e:	f7ff fb6d 	bl	800043c <__aeabi_f2d>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8000d6e:	4aa6      	ldr	r2, [pc, #664]	@ (8001008 <StartShellTask+0x350>)
 8000d70:	2164      	movs	r1, #100	@ 0x64
 8000d72:	f007 fb77 	bl	8008464 <sniprintf>
 8000d76:	e12c      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_HUMIDITY") == 0) {
 8000d78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d7c:	49a3      	ldr	r1, [pc, #652]	@ (800100c <StartShellTask+0x354>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff f9e6 	bl	8000150 <strcmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d115      	bne.n	8000db6 <StartShellTask+0xfe>
					float hum = humiditySensor.getHumidity();
 8000d8a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f96e 	bl	8001070 <_ZNK21VirtualHumiditySensor11getHumidityEv>
 8000d94:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
					snprintf(response, sizeof(response), "Humidity: %.2f%%\n", hum);
 8000d98:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000d9c:	f7ff fb4e 	bl	800043c <__aeabi_f2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000da8:	e9cd 2300 	strd	r2, r3, [sp]
 8000dac:	4a98      	ldr	r2, [pc, #608]	@ (8001010 <StartShellTask+0x358>)
 8000dae:	2164      	movs	r1, #100	@ 0x64
 8000db0:	f007 fb58 	bl	8008464 <sniprintf>
 8000db4:	e10d      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_VOLTAGE") == 0) {
 8000db6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dba:	4996      	ldr	r1, [pc, #600]	@ (8001014 <StartShellTask+0x35c>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff f9c7 	bl	8000150 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d115      	bne.n	8000df4 <StartShellTask+0x13c>
					float volt = voltageSensor.getVoltage();
 8000dc8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f9af 	bl	8001130 <_ZNK20VirtualVoltageSensor10getVoltageEv>
 8000dd2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
					snprintf(response, sizeof(response), "Voltage: %.2f V\n", volt);
 8000dd6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8000dda:	f7ff fb2f 	bl	800043c <__aeabi_f2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000de6:	e9cd 2300 	strd	r2, r3, [sp]
 8000dea:	4a8b      	ldr	r2, [pc, #556]	@ (8001018 <StartShellTask+0x360>)
 8000dec:	2164      	movs	r1, #100	@ 0x64
 8000dee:	f007 fb39 	bl	8008464 <sniprintf>
 8000df2:	e0ee      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_TIME") == 0) {
 8000df4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000df8:	4988      	ldr	r1, [pc, #544]	@ (800101c <StartShellTask+0x364>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9a8 	bl	8000150 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d12d      	bne.n	8000e62 <StartShellTask+0x1aa>
					RTC_TimeTypeDef time;
					RTC_DateTypeDef date;
					HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4884      	ldr	r0, [pc, #528]	@ (8001020 <StartShellTask+0x368>)
 8000e10:	f002 f8a0 	bl	8002f54 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4880      	ldr	r0, [pc, #512]	@ (8001020 <StartShellTask+0x368>)
 8000e1e:	f002 fa27 	bl	8003270 <HAL_RTC_GetDate>
					snprintf(response, sizeof(response),
						"Time: %02d:%02d:%02d, Date: %02d/%02d/%04d\n",
						time.Hours, time.Minutes, time.Seconds,
 8000e22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
					snprintf(response, sizeof(response),
 8000e26:	461e      	mov	r6, r3
						time.Hours, time.Minutes, time.Seconds,
 8000e28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
					snprintf(response, sizeof(response),
 8000e2c:	461a      	mov	r2, r3
						time.Hours, time.Minutes, time.Seconds,
 8000e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
					snprintf(response, sizeof(response),
 8000e32:	4619      	mov	r1, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
					snprintf(response, sizeof(response),
 8000e38:	461c      	mov	r4, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e3a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
					snprintf(response, sizeof(response),
 8000e3e:	461d      	mov	r5, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
					snprintf(response, sizeof(response),
 8000e44:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e48:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000e4c:	9304      	str	r3, [sp, #16]
 8000e4e:	9503      	str	r5, [sp, #12]
 8000e50:	9402      	str	r4, [sp, #8]
 8000e52:	9101      	str	r1, [sp, #4]
 8000e54:	9200      	str	r2, [sp, #0]
 8000e56:	4633      	mov	r3, r6
 8000e58:	4a72      	ldr	r2, [pc, #456]	@ (8001024 <StartShellTask+0x36c>)
 8000e5a:	2164      	movs	r1, #100	@ 0x64
 8000e5c:	f007 fb02 	bl	8008464 <sniprintf>
 8000e60:	e0b7      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strncmp(command, "SET_TIME", 8) == 0) {
 8000e62:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e66:	2208      	movs	r2, #8
 8000e68:	496f      	ldr	r1, [pc, #444]	@ (8001028 <StartShellTask+0x370>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fbb6 	bl	80085dc <strncmp>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 809d 	bne.w	8000fb2 <StartShellTask+0x2fa>
					int hh, mm, ss, dd, mo, yyyy;
					if (sscanf(command + 9, "%d %d %d %d %d %d", &hh, &mm, &ss, &dd, &mo, &yyyy) == 6) {
 8000e78:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8000e7c:	3009      	adds	r0, #9
 8000e7e:	f107 0120 	add.w	r1, r7, #32
 8000e82:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4962      	ldr	r1, [pc, #392]	@ (800102c <StartShellTask+0x374>)
 8000ea2:	f007 fb13 	bl	80084cc <siscanf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <StartShellTask+0x2ea>
						RTC_TimeTypeDef sTime = {0};
 8000eb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	801a      	strh	r2, [r3, #0]
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	709a      	strb	r2, [r3, #2]
						RTC_DateTypeDef sDate = {0};
 8000ec8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ecc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

						sTime.Hours = hh;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000edc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ee0:	701a      	strb	r2, [r3, #0]
						sTime.Minutes = mm;
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000eee:	705a      	strb	r2, [r3, #1]
						sTime.Seconds = ss;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ef8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000efc:	709a      	strb	r2, [r3, #2]
						sDate.Date = dd;
 8000efe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f12:	709a      	strb	r2, [r3, #2]
						sDate.Month = mo;
 8000f14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f28:	705a      	strb	r2, [r3, #1]
						sDate.Year = yyyy - 2000;
 8000f2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3330      	adds	r3, #48	@ 0x30
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f42:	70da      	strb	r2, [r3, #3]
						sDate.WeekDay = RTC_WEEKDAY_MONDAY; // Not used by HAL
 8000f44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]

						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4831      	ldr	r0, [pc, #196]	@ (8001020 <StartShellTask+0x368>)
 8000f5a:	f001 ff63 	bl	8002e24 <HAL_RTC_SetTime>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <StartShellTask+0x2c4>
							HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482c      	ldr	r0, [pc, #176]	@ (8001020 <StartShellTask+0x368>)
 8000f6e:	f002 f8c9 	bl	8003104 <HAL_RTC_SetDate>
 8000f72:	4603      	mov	r3, r0
						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <StartShellTask+0x2c4>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <StartShellTask+0x2c6>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <StartShellTask+0x2da>
							snprintf(response, sizeof(response), "Time set successfully\n");
 8000f82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f86:	4a2a      	ldr	r2, [pc, #168]	@ (8001030 <StartShellTask+0x378>)
 8000f88:	2164      	movs	r1, #100	@ 0x64
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 fa6a 	bl	8008464 <sniprintf>
 8000f90:	e01f      	b.n	8000fd2 <StartShellTask+0x31a>
						} else {
							snprintf(response, sizeof(response), "Failed to set time\n");
 8000f92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f96:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <StartShellTask+0x37c>)
 8000f98:	2164      	movs	r1, #100	@ 0x64
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 fa62 	bl	8008464 <sniprintf>
 8000fa0:	e017      	b.n	8000fd2 <StartShellTask+0x31a>
						}
					} else {
						snprintf(response, sizeof(response), "Usage: SET_TIME hh mm ss dd mm yyyy\n");
 8000fa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa6:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <StartShellTask+0x380>)
 8000fa8:	2164      	movs	r1, #100	@ 0x64
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 fa5a 	bl	8008464 <sniprintf>
 8000fb0:	e00f      	b.n	8000fd2 <StartShellTask+0x31a>
					}
				} else if (strlen(command) > 0) {
 8000fb2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <StartShellTask+0x314>
					snprintf(response, sizeof(response), "Unknown command\n");
 8000fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800103c <StartShellTask+0x384>)
 8000fc2:	2164      	movs	r1, #100	@ 0x64
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 fa4d 	bl	8008464 <sniprintf>
 8000fca:	e002      	b.n	8000fd2 <StartShellTask+0x31a>
				} else {
					response[0] = '\0'; // empty command, don't respond
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
				}

				if (strlen(response) > 0) {
 8000fd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d046      	beq.n	800106a <StartShellTask+0x3b2>
					HAL_UART_Transmit(&huart2, (uint8_t*) response, strlen(response), HAL_MAX_DELAY);
 8000fdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8bf 	bl	8000164 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <StartShellTask+0x388>)
 8000ff4:	f002 fc82 	bl	80038fc <HAL_UART_Transmit>
				}
			} else if (cmdIndex < sizeof(command) - 1) {
 8000ff8:	e037      	b.n	800106a <StartShellTask+0x3b2>
 8000ffa:	bf00      	nop
 8000ffc:	200001f4 	.word	0x200001f4
 8001000:	0800b0e4 	.word	0x0800b0e4
 8001004:	0800b0e8 	.word	0x0800b0e8
 8001008:	0800b0f8 	.word	0x0800b0f8
 800100c:	0800b110 	.word	0x0800b110
 8001010:	0800b120 	.word	0x0800b120
 8001014:	0800b134 	.word	0x0800b134
 8001018:	0800b140 	.word	0x0800b140
 800101c:	0800b154 	.word	0x0800b154
 8001020:	20000248 	.word	0x20000248
 8001024:	0800b160 	.word	0x0800b160
 8001028:	0800b18c 	.word	0x0800b18c
 800102c:	0800b198 	.word	0x0800b198
 8001030:	0800b1ac 	.word	0x0800b1ac
 8001034:	0800b1c4 	.word	0x0800b1c4
 8001038:	0800b1d8 	.word	0x0800b1d8
 800103c:	0800b200 	.word	0x0800b200
 8001040:	20000200 	.word	0x20000200
 8001044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001048:	2b62      	cmp	r3, #98	@ 0x62
 800104a:	f63f ae45 	bhi.w	8000cd8 <StartShellTask+0x20>
				command[cmdIndex++] = rxChar;
 800104e:	f897 10fb 	ldrb.w	r1, [r7, #251]	@ 0xfb
 8001052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800105c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001060:	443b      	add	r3, r7
 8001062:	460a      	mov	r2, r1
 8001064:	f803 2c84 	strb.w	r2, [r3, #-132]
 8001068:	e636      	b.n	8000cd8 <StartShellTask+0x20>
			} else if (cmdIndex < sizeof(command) - 1) {
 800106a:	bf00      	nop
			}
		}
	}
 800106c:	e634      	b.n	8000cd8 <StartShellTask+0x20>
 800106e:	bf00      	nop

08001070 <_ZNK21VirtualHumiditySensor11getHumidityEv>:
#include "VirtualHumiditySensor.h"
#include "dht11.h"

extern DHT11 dht;
float VirtualHumiditySensor::getHumidity() const {
 8001070:	b580      	push	{r7, lr}
 8001072:	b084      	sub	sp, #16
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    // Simulate some constant or random humidity
    float temp, hum;
    if (dht.read(temp, hum)) {
 8001078:	f107 0208 	add.w	r2, r7, #8
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	4619      	mov	r1, r3
 8001082:	4806      	ldr	r0, [pc, #24]	@ (800109c <_ZNK21VirtualHumiditySensor11getHumidityEv+0x2c>)
 8001084:	f000 f8f0 	bl	8001268 <_ZN5DHT114readERfS0_>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x22>
        return hum;
 800108e:	68bb      	ldr	r3, [r7, #8]
 8001090:	e000      	b.n	8001094 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x24>
    } else {
        return -1000.0f;  // or some error value
 8001092:	4b03      	ldr	r3, [pc, #12]	@ (80010a0 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x30>)
    }
}
 8001094:	4618      	mov	r0, r3
 8001096:	3710      	adds	r7, #16
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	200001f8 	.word	0x200001f8
 80010a0:	c47a0000 	.word	0xc47a0000

080010a4 <_ZN24VirtualTemperatureSensorC1Ev>:
#include <cstdlib>
#include "dht11.h"

DHT11 dht(GPIOA, GPIO_PIN_1);

VirtualTemperatureSensor::VirtualTemperatureSensor() {
 80010a4:	b480      	push	{r7}
 80010a6:	b083      	sub	sp, #12
 80010a8:	af00      	add	r7, sp, #0
 80010aa:	6078      	str	r0, [r7, #4]
    // Initialization if needed
}
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	4618      	mov	r0, r3
 80010b0:	370c      	adds	r7, #12
 80010b2:	46bd      	mov	sp, r7
 80010b4:	bc80      	pop	{r7}
 80010b6:	4770      	bx	lr

080010b8 <_ZN24VirtualTemperatureSensor14getTemperatureEv>:

float VirtualTemperatureSensor::getTemperature() {
 80010b8:	b580      	push	{r7, lr}
 80010ba:	b084      	sub	sp, #16
 80010bc:	af00      	add	r7, sp, #0
 80010be:	6078      	str	r0, [r7, #4]
    float temp, hum;
    if (dht.read(temp, hum)) {
 80010c0:	f107 0208 	add.w	r2, r7, #8
 80010c4:	f107 030c 	add.w	r3, r7, #12
 80010c8:	4619      	mov	r1, r3
 80010ca:	4806      	ldr	r0, [pc, #24]	@ (80010e4 <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x2c>)
 80010cc:	f000 f8cc 	bl	8001268 <_ZN5DHT114readERfS0_>
 80010d0:	4603      	mov	r3, r0
 80010d2:	2b00      	cmp	r3, #0
 80010d4:	d001      	beq.n	80010da <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x22>
        return temp;
 80010d6:	68fb      	ldr	r3, [r7, #12]
 80010d8:	e000      	b.n	80010dc <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x24>
    } else {
        return -1000.0f;  // or some error value
 80010da:	4b03      	ldr	r3, [pc, #12]	@ (80010e8 <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x30>)
    }
}
 80010dc:	4618      	mov	r0, r3
 80010de:	3710      	adds	r7, #16
 80010e0:	46bd      	mov	sp, r7
 80010e2:	bd80      	pop	{r7, pc}
 80010e4:	200001f8 	.word	0x200001f8
 80010e8:	c47a0000 	.word	0xc47a0000

080010ec <_Z41__static_initialization_and_destruction_0ii>:
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b082      	sub	sp, #8
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2b01      	cmp	r3, #1
 80010fa:	d109      	bne.n	8001110 <_Z41__static_initialization_and_destruction_0ii+0x24>
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001102:	4293      	cmp	r3, r2
 8001104:	d104      	bne.n	8001110 <_Z41__static_initialization_and_destruction_0ii+0x24>
DHT11 dht(GPIOA, GPIO_PIN_1);
 8001106:	2202      	movs	r2, #2
 8001108:	4903      	ldr	r1, [pc, #12]	@ (8001118 <_Z41__static_initialization_and_destruction_0ii+0x2c>)
 800110a:	4804      	ldr	r0, [pc, #16]	@ (800111c <_Z41__static_initialization_and_destruction_0ii+0x30>)
 800110c:	f000 f81c 	bl	8001148 <_ZN5DHT11C1EP12GPIO_TypeDeft>
}
 8001110:	bf00      	nop
 8001112:	3708      	adds	r7, #8
 8001114:	46bd      	mov	sp, r7
 8001116:	bd80      	pop	{r7, pc}
 8001118:	40010800 	.word	0x40010800
 800111c:	200001f8 	.word	0x200001f8

08001120 <_GLOBAL__sub_I_dht>:
 8001120:	b580      	push	{r7, lr}
 8001122:	af00      	add	r7, sp, #0
 8001124:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8001128:	2001      	movs	r0, #1
 800112a:	f7ff ffdf 	bl	80010ec <_Z41__static_initialization_and_destruction_0ii>
 800112e:	bd80      	pop	{r7, pc}

08001130 <_ZNK20VirtualVoltageSensor10getVoltageEv>:
#include "VirtualVoltageSensor.h"

float VirtualVoltageSensor::getVoltage() const {
 8001130:	b480      	push	{r7}
 8001132:	b083      	sub	sp, #12
 8001134:	af00      	add	r7, sp, #0
 8001136:	6078      	str	r0, [r7, #4]
    // Simulate battery or supply voltage
    return 3.73f;
 8001138:	4b02      	ldr	r3, [pc, #8]	@ (8001144 <_ZNK20VirtualVoltageSensor10getVoltageEv+0x14>)
}
 800113a:	4618      	mov	r0, r3
 800113c:	370c      	adds	r7, #12
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	406eb852 	.word	0x406eb852

08001148 <_ZN5DHT11C1EP12GPIO_TypeDeft>:
#include "cmsis_os.h"
extern UART_HandleTypeDef huart2;

#define CPU_CYCLES_PER_US (SystemCoreClock / 1000000U)

DHT11::DHT11(GPIO_TypeDef* port, uint16_t pin)
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	60f8      	str	r0, [r7, #12]
 8001150:	60b9      	str	r1, [r7, #8]
 8001152:	4613      	mov	r3, r2
 8001154:	80fb      	strh	r3, [r7, #6]
    : _port(port), _pin(pin) {}
 8001156:	68fb      	ldr	r3, [r7, #12]
 8001158:	68ba      	ldr	r2, [r7, #8]
 800115a:	601a      	str	r2, [r3, #0]
 800115c:	68fb      	ldr	r3, [r7, #12]
 800115e:	88fa      	ldrh	r2, [r7, #6]
 8001160:	809a      	strh	r2, [r3, #4]
 8001162:	68fb      	ldr	r3, [r7, #12]
 8001164:	4618      	mov	r0, r3
 8001166:	3714      	adds	r7, #20
 8001168:	46bd      	mov	sp, r7
 800116a:	bc80      	pop	{r7}
 800116c:	4770      	bx	lr

0800116e <_ZN5DHT1112setPinOutputEv>:

void DHT11::init() {
    DWT_Delay_Init();
}

void DHT11::setPinOutput() {
 800116e:	b580      	push	{r7, lr}
 8001170:	b086      	sub	sp, #24
 8001172:	af00      	add	r7, sp, #0
 8001174:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {};
 8001176:	f107 0308 	add.w	r3, r7, #8
 800117a:	2200      	movs	r2, #0
 800117c:	601a      	str	r2, [r3, #0]
 800117e:	605a      	str	r2, [r3, #4]
 8001180:	609a      	str	r2, [r3, #8]
 8001182:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = _pin;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	889b      	ldrh	r3, [r3, #4]
 8001188:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118a:	2301      	movs	r3, #1
 800118c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800118e:	2303      	movs	r3, #3
 8001190:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(_port, &GPIO_InitStruct);
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	f107 0208 	add.w	r2, r7, #8
 800119a:	4611      	mov	r1, r2
 800119c:	4618      	mov	r0, r3
 800119e:	f000 ff2f 	bl	8002000 <HAL_GPIO_Init>
}
 80011a2:	bf00      	nop
 80011a4:	3718      	adds	r7, #24
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <_ZN5DHT1111setPinInputEv>:

void DHT11::setPinInput() {
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b086      	sub	sp, #24
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
    GPIO_InitTypeDef GPIO_InitStruct = {};
 80011b2:	f107 0308 	add.w	r3, r7, #8
 80011b6:	2200      	movs	r2, #0
 80011b8:	601a      	str	r2, [r3, #0]
 80011ba:	605a      	str	r2, [r3, #4]
 80011bc:	609a      	str	r2, [r3, #8]
 80011be:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Pin = _pin;
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	889b      	ldrh	r3, [r3, #4]
 80011c4:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011c6:	2300      	movs	r3, #0
 80011c8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ca:	2300      	movs	r3, #0
 80011cc:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(_port, &GPIO_InitStruct);
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f107 0208 	add.w	r2, r7, #8
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 ff11 	bl	8002000 <HAL_GPIO_Init>
}
 80011de:	bf00      	nop
 80011e0:	3718      	adds	r7, #24
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
	...

080011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>:

uint8_t DHT11::waitForLevel(GPIO_PinState level, uint32_t timeout_us) {
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b086      	sub	sp, #24
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	60f8      	str	r0, [r7, #12]
 80011f0:	460b      	mov	r3, r1
 80011f2:	607a      	str	r2, [r7, #4]
 80011f4:	72fb      	strb	r3, [r7, #11]
    uint32_t timeout_cycles = timeout_us * CPU_CYCLES_PER_US;
 80011f6:	4b19      	ldr	r3, [pc, #100]	@ (800125c <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x74>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	4a19      	ldr	r2, [pc, #100]	@ (8001260 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x78>)
 80011fc:	fba2 2303 	umull	r2, r3, r2, r3
 8001200:	0c9a      	lsrs	r2, r3, #18
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	fb02 f303 	mul.w	r3, r2, r3
 8001208:	617b      	str	r3, [r7, #20]
    uint32_t start = DWT->CYCCNT;
 800120a:	4b16      	ldr	r3, [pc, #88]	@ (8001264 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x7c>)
 800120c:	685b      	ldr	r3, [r3, #4]
 800120e:	613b      	str	r3, [r7, #16]
    while (HAL_GPIO_ReadPin(_port, _pin) != level) {
 8001210:	e00d      	b.n	800122e <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x46>
        if ((DWT->CYCCNT - start) > timeout_cycles) return 1;
 8001212:	4b14      	ldr	r3, [pc, #80]	@ (8001264 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x7c>)
 8001214:	685a      	ldr	r2, [r3, #4]
 8001216:	693b      	ldr	r3, [r7, #16]
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	697a      	ldr	r2, [r7, #20]
 800121c:	429a      	cmp	r2, r3
 800121e:	bf34      	ite	cc
 8001220:	2301      	movcc	r3, #1
 8001222:	2300      	movcs	r3, #0
 8001224:	b2db      	uxtb	r3, r3
 8001226:	2b00      	cmp	r3, #0
 8001228:	d001      	beq.n	800122e <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x46>
 800122a:	2301      	movs	r3, #1
 800122c:	e012      	b.n	8001254 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x6c>
    while (HAL_GPIO_ReadPin(_port, _pin) != level) {
 800122e:	68fb      	ldr	r3, [r7, #12]
 8001230:	681a      	ldr	r2, [r3, #0]
 8001232:	68fb      	ldr	r3, [r7, #12]
 8001234:	889b      	ldrh	r3, [r3, #4]
 8001236:	4619      	mov	r1, r3
 8001238:	4610      	mov	r0, r2
 800123a:	f001 f865 	bl	8002308 <HAL_GPIO_ReadPin>
 800123e:	4603      	mov	r3, r0
 8001240:	461a      	mov	r2, r3
 8001242:	7afb      	ldrb	r3, [r7, #11]
 8001244:	4293      	cmp	r3, r2
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	2b00      	cmp	r3, #0
 8001250:	d1df      	bne.n	8001212 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem+0x2a>
    }
    return 0;
 8001252:	2300      	movs	r3, #0
}
 8001254:	4618      	mov	r0, r3
 8001256:	3718      	adds	r7, #24
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	20000000 	.word	0x20000000
 8001260:	431bde83 	.word	0x431bde83
 8001264:	e0001000 	.word	0xe0001000

08001268 <_ZN5DHT114readERfS0_>:

bool DHT11::read(float& temperature, float& humidity) {
 8001268:	b580      	push	{r7, lr}
 800126a:	b088      	sub	sp, #32
 800126c:	af00      	add	r7, sp, #0
 800126e:	60f8      	str	r0, [r7, #12]
 8001270:	60b9      	str	r1, [r7, #8]
 8001272:	607a      	str	r2, [r7, #4]
    uint8_t bits[5] = {0};
 8001274:	2300      	movs	r3, #0
 8001276:	617b      	str	r3, [r7, #20]
 8001278:	2300      	movs	r3, #0
 800127a:	763b      	strb	r3, [r7, #24]

    setPinOutput();
 800127c:	68f8      	ldr	r0, [r7, #12]
 800127e:	f7ff ff76 	bl	800116e <_ZN5DHT1112setPinOutputEv>
    HAL_GPIO_WritePin(_port, _pin, GPIO_PIN_RESET);
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6818      	ldr	r0, [r3, #0]
 8001286:	68fb      	ldr	r3, [r7, #12]
 8001288:	889b      	ldrh	r3, [r3, #4]
 800128a:	2200      	movs	r2, #0
 800128c:	4619      	mov	r1, r3
 800128e:	f001 f852 	bl	8002336 <HAL_GPIO_WritePin>
    DWT_Delay_us(18000);
 8001292:	f244 6050 	movw	r0, #18000	@ 0x4650
 8001296:	f000 f8bb 	bl	8001410 <DWT_Delay_us>
    HAL_GPIO_WritePin(_port, _pin, GPIO_PIN_SET);
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	6818      	ldr	r0, [r3, #0]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	889b      	ldrh	r3, [r3, #4]
 80012a2:	2201      	movs	r2, #1
 80012a4:	4619      	mov	r1, r3
 80012a6:	f001 f846 	bl	8002336 <HAL_GPIO_WritePin>
    DWT_Delay_us(20);
 80012aa:	2014      	movs	r0, #20
 80012ac:	f000 f8b0 	bl	8001410 <DWT_Delay_us>
    setPinInput();
 80012b0:	68f8      	ldr	r0, [r7, #12]
 80012b2:	f7ff ff7a 	bl	80011aa <_ZN5DHT1111setPinInputEv>

    if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 80012b6:	2264      	movs	r2, #100	@ 0x64
 80012b8:	2100      	movs	r1, #0
 80012ba:	68f8      	ldr	r0, [r7, #12]
 80012bc:	f7ff ff94 	bl	80011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80012c0:	4603      	mov	r3, r0
 80012c2:	2b00      	cmp	r3, #0
 80012c4:	bf14      	ite	ne
 80012c6:	2301      	movne	r3, #1
 80012c8:	2300      	moveq	r3, #0
 80012ca:	b2db      	uxtb	r3, r3
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d001      	beq.n	80012d4 <_ZN5DHT114readERfS0_+0x6c>
 80012d0:	2300      	movs	r3, #0
 80012d2:	e098      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>
    if (waitForLevel(GPIO_PIN_SET, 100)) return false;
 80012d4:	2264      	movs	r2, #100	@ 0x64
 80012d6:	2101      	movs	r1, #1
 80012d8:	68f8      	ldr	r0, [r7, #12]
 80012da:	f7ff ff85 	bl	80011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80012de:	4603      	mov	r3, r0
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	bf14      	ite	ne
 80012e4:	2301      	movne	r3, #1
 80012e6:	2300      	moveq	r3, #0
 80012e8:	b2db      	uxtb	r3, r3
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	d001      	beq.n	80012f2 <_ZN5DHT114readERfS0_+0x8a>
 80012ee:	2300      	movs	r3, #0
 80012f0:	e089      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>
    if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 80012f2:	2264      	movs	r2, #100	@ 0x64
 80012f4:	2100      	movs	r1, #0
 80012f6:	68f8      	ldr	r0, [r7, #12]
 80012f8:	f7ff ff76 	bl	80011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80012fc:	4603      	mov	r3, r0
 80012fe:	2b00      	cmp	r3, #0
 8001300:	bf14      	ite	ne
 8001302:	2301      	movne	r3, #1
 8001304:	2300      	moveq	r3, #0
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <_ZN5DHT114readERfS0_+0xa8>
 800130c:	2300      	movs	r3, #0
 800130e:	e07a      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>

    for (int i = 0; i < 40; i++) {
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
 8001314:	e056      	b.n	80013c4 <_ZN5DHT114readERfS0_+0x15c>
        if (waitForLevel(GPIO_PIN_SET, 100)) return false;
 8001316:	2264      	movs	r2, #100	@ 0x64
 8001318:	2101      	movs	r1, #1
 800131a:	68f8      	ldr	r0, [r7, #12]
 800131c:	f7ff ff64 	bl	80011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 8001320:	4603      	mov	r3, r0
 8001322:	2b00      	cmp	r3, #0
 8001324:	bf14      	ite	ne
 8001326:	2301      	movne	r3, #1
 8001328:	2300      	moveq	r3, #0
 800132a:	b2db      	uxtb	r3, r3
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <_ZN5DHT114readERfS0_+0xcc>
 8001330:	2300      	movs	r3, #0
 8001332:	e068      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>

        DWT_Delay_us(35);
 8001334:	2023      	movs	r0, #35	@ 0x23
 8001336:	f000 f86b 	bl	8001410 <DWT_Delay_us>
        if (HAL_GPIO_ReadPin(_port, _pin) == GPIO_PIN_SET) {
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	681a      	ldr	r2, [r3, #0]
 800133e:	68fb      	ldr	r3, [r7, #12]
 8001340:	889b      	ldrh	r3, [r3, #4]
 8001342:	4619      	mov	r1, r3
 8001344:	4610      	mov	r0, r2
 8001346:	f000 ffdf 	bl	8002308 <HAL_GPIO_ReadPin>
 800134a:	4603      	mov	r3, r0
 800134c:	2b01      	cmp	r3, #1
 800134e:	bf0c      	ite	eq
 8001350:	2301      	moveq	r3, #1
 8001352:	2300      	movne	r3, #0
 8001354:	b2db      	uxtb	r3, r3
 8001356:	2b00      	cmp	r3, #0
 8001358:	d022      	beq.n	80013a0 <_ZN5DHT114readERfS0_+0x138>
            bits[i / 8] |= (1 << (7 - (i % 8)));
 800135a:	69fb      	ldr	r3, [r7, #28]
 800135c:	2b00      	cmp	r3, #0
 800135e:	da00      	bge.n	8001362 <_ZN5DHT114readERfS0_+0xfa>
 8001360:	3307      	adds	r3, #7
 8001362:	10db      	asrs	r3, r3, #3
 8001364:	461a      	mov	r2, r3
 8001366:	f102 0320 	add.w	r3, r2, #32
 800136a:	443b      	add	r3, r7
 800136c:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8001370:	b259      	sxtb	r1, r3
 8001372:	69fb      	ldr	r3, [r7, #28]
 8001374:	4258      	negs	r0, r3
 8001376:	f003 0307 	and.w	r3, r3, #7
 800137a:	f000 0007 	and.w	r0, r0, #7
 800137e:	bf58      	it	pl
 8001380:	4243      	negpl	r3, r0
 8001382:	f1c3 0307 	rsb	r3, r3, #7
 8001386:	2001      	movs	r0, #1
 8001388:	fa00 f303 	lsl.w	r3, r0, r3
 800138c:	b25b      	sxtb	r3, r3
 800138e:	430b      	orrs	r3, r1
 8001390:	b25b      	sxtb	r3, r3
 8001392:	b2d9      	uxtb	r1, r3
 8001394:	f102 0320 	add.w	r3, r2, #32
 8001398:	443b      	add	r3, r7
 800139a:	460a      	mov	r2, r1
 800139c:	f803 2c0c 	strb.w	r2, [r3, #-12]
        }

        if (waitForLevel(GPIO_PIN_RESET, 100)) return false;
 80013a0:	2264      	movs	r2, #100	@ 0x64
 80013a2:	2100      	movs	r1, #0
 80013a4:	68f8      	ldr	r0, [r7, #12]
 80013a6:	f7ff ff1f 	bl	80011e8 <_ZN5DHT1112waitForLevelE13GPIO_PinStatem>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf14      	ite	ne
 80013b0:	2301      	movne	r3, #1
 80013b2:	2300      	moveq	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <_ZN5DHT114readERfS0_+0x156>
 80013ba:	2300      	movs	r3, #0
 80013bc:	e023      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>
    for (int i = 0; i < 40; i++) {
 80013be:	69fb      	ldr	r3, [r7, #28]
 80013c0:	3301      	adds	r3, #1
 80013c2:	61fb      	str	r3, [r7, #28]
 80013c4:	69fb      	ldr	r3, [r7, #28]
 80013c6:	2b27      	cmp	r3, #39	@ 0x27
 80013c8:	dda5      	ble.n	8001316 <_ZN5DHT114readERfS0_+0xae>
    }

    if ((uint8_t)(bits[0] + bits[1] + bits[2] + bits[3]) != bits[4]) return false;
 80013ca:	7d3a      	ldrb	r2, [r7, #20]
 80013cc:	7d7b      	ldrb	r3, [r7, #21]
 80013ce:	4413      	add	r3, r2
 80013d0:	b2da      	uxtb	r2, r3
 80013d2:	7dbb      	ldrb	r3, [r7, #22]
 80013d4:	4413      	add	r3, r2
 80013d6:	b2da      	uxtb	r2, r3
 80013d8:	7dfb      	ldrb	r3, [r7, #23]
 80013da:	4413      	add	r3, r2
 80013dc:	b2da      	uxtb	r2, r3
 80013de:	7e3b      	ldrb	r3, [r7, #24]
 80013e0:	429a      	cmp	r2, r3
 80013e2:	d001      	beq.n	80013e8 <_ZN5DHT114readERfS0_+0x180>
 80013e4:	2300      	movs	r3, #0
 80013e6:	e00e      	b.n	8001406 <_ZN5DHT114readERfS0_+0x19e>

    humidity = static_cast<float>(bits[0]);
 80013e8:	7d3b      	ldrb	r3, [r7, #20]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff fc0c 	bl	8000c08 <__aeabi_ui2f>
 80013f0:	4602      	mov	r2, r0
 80013f2:	687b      	ldr	r3, [r7, #4]
 80013f4:	601a      	str	r2, [r3, #0]
    temperature = static_cast<float>(bits[2]);
 80013f6:	7dbb      	ldrb	r3, [r7, #22]
 80013f8:	4618      	mov	r0, r3
 80013fa:	f7ff fc05 	bl	8000c08 <__aeabi_ui2f>
 80013fe:	4602      	mov	r2, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	601a      	str	r2, [r3, #0]

    return true;
 8001404:	2301      	movs	r3, #1
}
 8001406:	4618      	mov	r0, r3
 8001408:	3720      	adds	r7, #32
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
	...

08001410 <DWT_Delay_us>:
    CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;
    DWT->CYCCNT = 0;
    DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;
}

void DWT_Delay_us(uint32_t us) {
 8001410:	b580      	push	{r7, lr}
 8001412:	b084      	sub	sp, #16
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
    uint32_t clk_cycle_start = DWT->CYCCNT;
 8001418:	4b0d      	ldr	r3, [pc, #52]	@ (8001450 <DWT_Delay_us+0x40>)
 800141a:	685b      	ldr	r3, [r3, #4]
 800141c:	60fb      	str	r3, [r7, #12]
    uint32_t ticks = us * (HAL_RCC_GetHCLKFreq() / 1000000);
 800141e:	f001 fb6f 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8001422:	4603      	mov	r3, r0
 8001424:	4a0b      	ldr	r2, [pc, #44]	@ (8001454 <DWT_Delay_us+0x44>)
 8001426:	fba2 2303 	umull	r2, r3, r2, r3
 800142a:	0c9a      	lsrs	r2, r3, #18
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	fb02 f303 	mul.w	r3, r2, r3
 8001432:	60bb      	str	r3, [r7, #8]

    while ((DWT->CYCCNT - clk_cycle_start) < ticks);
 8001434:	bf00      	nop
 8001436:	4b06      	ldr	r3, [pc, #24]	@ (8001450 <DWT_Delay_us+0x40>)
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	68fb      	ldr	r3, [r7, #12]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	68ba      	ldr	r2, [r7, #8]
 8001440:	429a      	cmp	r2, r3
 8001442:	d8f8      	bhi.n	8001436 <DWT_Delay_us+0x26>
}
 8001444:	bf00      	nop
 8001446:	bf00      	nop
 8001448:	3710      	adds	r7, #16
 800144a:	46bd      	mov	sp, r7
 800144c:	bd80      	pop	{r7, pc}
 800144e:	bf00      	nop
 8001450:	e0001000 	.word	0xe0001000
 8001454:	431bde83 	.word	0x431bde83

08001458 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	b08a      	sub	sp, #40	@ 0x28
 800145c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800145e:	f000 fbbf 	bl	8001be0 <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_RTC_Init();
 8001462:	f000 f943 	bl	80016ec <_Z11MX_RTC_Initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001466:	f000 f845 	bl	80014f4 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */
  void Timer2_Init();
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800146a:	f000 f8bd 	bl	80015e8 <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 800146e:	f000 f88d 	bl	800158c <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 8001472:	2201      	movs	r2, #1
 8001474:	491a      	ldr	r1, [pc, #104]	@ (80014e0 <main+0x88>)
 8001476:	481b      	ldr	r0, [pc, #108]	@ (80014e4 <main+0x8c>)
 8001478:	f002 facb 	bl	8003a12 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800147c:	f003 f89c 	bl	80045b8 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uartRxStreamBuffer = xStreamBufferCreate(128, 1);
 8001480:	2200      	movs	r2, #0
 8001482:	2101      	movs	r1, #1
 8001484:	2080      	movs	r0, #128	@ 0x80
 8001486:	f003 ff4b 	bl	8005320 <xStreamBufferGenericCreate>
 800148a:	4603      	mov	r3, r0
 800148c:	4a16      	ldr	r2, [pc, #88]	@ (80014e8 <main+0x90>)
 800148e:	6013      	str	r3, [r2, #0]
  configASSERT(uartRxStreamBuffer != NULL);
 8001490:	4b15      	ldr	r3, [pc, #84]	@ (80014e8 <main+0x90>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	2b00      	cmp	r3, #0
 8001496:	d10b      	bne.n	80014b0 <main+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8001498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800149c:	f383 8811 	msr	BASEPRI, r3
 80014a0:	f3bf 8f6f 	isb	sy
 80014a4:	f3bf 8f4f 	dsb	sy
 80014a8:	627b      	str	r3, [r7, #36]	@ 0x24
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80014aa:	bf00      	nop
 80014ac:	bf00      	nop
 80014ae:	e7fd      	b.n	80014ac <main+0x54>
//  };
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  const osThreadAttr_t shellTask_attributes = {
 80014b0:	463b      	mov	r3, r7
 80014b2:	2224      	movs	r2, #36	@ 0x24
 80014b4:	2100      	movs	r1, #0
 80014b6:	4618      	mov	r0, r3
 80014b8:	f007 f877 	bl	80085aa <memset>
 80014bc:	4b0b      	ldr	r3, [pc, #44]	@ (80014ec <main+0x94>)
 80014be:	603b      	str	r3, [r7, #0]
 80014c0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80014c4:	617b      	str	r3, [r7, #20]
 80014c6:	2318      	movs	r3, #24
 80014c8:	61bb      	str	r3, [r7, #24]
    .name = "ShellTask",
    .stack_size = 512 * 4,  // 2KB stack
    .priority = (osPriority_t) osPriorityNormal,
  };
  /* add threads, ... */
  osThreadNew(StartShellTask, NULL, &shellTask_attributes);
 80014ca:	463b      	mov	r3, r7
 80014cc:	461a      	mov	r2, r3
 80014ce:	2100      	movs	r1, #0
 80014d0:	4807      	ldr	r0, [pc, #28]	@ (80014f0 <main+0x98>)
 80014d2:	f003 f8b9 	bl	8004648 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80014d6:	f003 f891 	bl	80045fc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80014da:	bf00      	nop
 80014dc:	e7fd      	b.n	80014da <main+0x82>
 80014de:	bf00      	nop
 80014e0:	2000025c 	.word	0x2000025c
 80014e4:	20000200 	.word	0x20000200
 80014e8:	200001f4 	.word	0x200001f4
 80014ec:	0800b214 	.word	0x0800b214
 80014f0:	08000cb9 	.word	0x08000cb9

080014f4 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b090      	sub	sp, #64	@ 0x40
 80014f8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80014fa:	f107 0318 	add.w	r3, r7, #24
 80014fe:	2228      	movs	r2, #40	@ 0x28
 8001500:	2100      	movs	r1, #0
 8001502:	4618      	mov	r0, r3
 8001504:	f007 f851 	bl	80085aa <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001508:	1d3b      	adds	r3, r7, #4
 800150a:	2200      	movs	r2, #0
 800150c:	601a      	str	r2, [r3, #0]
 800150e:	605a      	str	r2, [r3, #4]
 8001510:	609a      	str	r2, [r3, #8]
 8001512:	60da      	str	r2, [r3, #12]
 8001514:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001516:	2302      	movs	r3, #2
 8001518:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800151a:	2301      	movs	r3, #1
 800151c:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800151e:	2310      	movs	r3, #16
 8001520:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001522:	2302      	movs	r3, #2
 8001524:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001526:	2300      	movs	r3, #0
 8001528:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800152a:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800152e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001530:	f107 0318 	add.w	r3, r7, #24
 8001534:	4618      	mov	r0, r3
 8001536:	f000 ff23 	bl	8002380 <HAL_RCC_OscConfig>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	bf14      	ite	ne
 8001540:	2301      	movne	r3, #1
 8001542:	2300      	moveq	r3, #0
 8001544:	b2db      	uxtb	r3, r3
 8001546:	2b00      	cmp	r3, #0
 8001548:	d001      	beq.n	800154e <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 800154a:	f000 f95d 	bl	8001808 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800154e:	230f      	movs	r3, #15
 8001550:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001552:	2302      	movs	r3, #2
 8001554:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001556:	2300      	movs	r3, #0
 8001558:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800155a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800155e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001560:	2300      	movs	r3, #0
 8001562:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001564:	1d3b      	adds	r3, r7, #4
 8001566:	2102      	movs	r1, #2
 8001568:	4618      	mov	r0, r3
 800156a:	f001 f98b 	bl	8002884 <HAL_RCC_ClockConfig>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	bf14      	ite	ne
 8001574:	2301      	movne	r3, #1
 8001576:	2300      	moveq	r3, #0
 8001578:	b2db      	uxtb	r3, r3
 800157a:	2b00      	cmp	r3, #0
 800157c:	d001      	beq.n	8001582 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 800157e:	f000 f943 	bl	8001808 <Error_Handler>
  }
}
 8001582:	bf00      	nop
 8001584:	3740      	adds	r7, #64	@ 0x40
 8001586:	46bd      	mov	sp, r7
 8001588:	bd80      	pop	{r7, pc}
	...

0800158c <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800158c:	b580      	push	{r7, lr}
 800158e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001590:	4b13      	ldr	r3, [pc, #76]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001592:	4a14      	ldr	r2, [pc, #80]	@ (80015e4 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001594:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001598:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800159c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800159e:	4b10      	ldr	r3, [pc, #64]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a0:	2200      	movs	r2, #0
 80015a2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80015a4:	4b0e      	ldr	r3, [pc, #56]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015a6:	2200      	movs	r2, #0
 80015a8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80015aa:	4b0d      	ldr	r3, [pc, #52]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015ac:	2200      	movs	r2, #0
 80015ae:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80015b0:	4b0b      	ldr	r3, [pc, #44]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b2:	220c      	movs	r2, #12
 80015b4:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015b6:	4b0a      	ldr	r3, [pc, #40]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80015bc:	4b08      	ldr	r3, [pc, #32]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015be:	2200      	movs	r2, #0
 80015c0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80015c2:	4807      	ldr	r0, [pc, #28]	@ (80015e0 <_ZL19MX_USART2_UART_Initv+0x54>)
 80015c4:	f002 f94a 	bl	800385c <HAL_UART_Init>
 80015c8:	4603      	mov	r3, r0
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	bf14      	ite	ne
 80015ce:	2301      	movne	r3, #1
 80015d0:	2300      	moveq	r3, #0
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 80015d8:	f000 f916 	bl	8001808 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80015dc:	bf00      	nop
 80015de:	bd80      	pop	{r7, pc}
 80015e0:	20000200 	.word	0x20000200
 80015e4:	40004400 	.word	0x40004400

080015e8 <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ee:	f107 0310 	add.w	r3, r7, #16
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]
 80015f6:	605a      	str	r2, [r3, #4]
 80015f8:	609a      	str	r2, [r3, #8]
 80015fa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015fc:	4b37      	ldr	r3, [pc, #220]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 80015fe:	699b      	ldr	r3, [r3, #24]
 8001600:	4a36      	ldr	r2, [pc, #216]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001602:	f043 0310 	orr.w	r3, r3, #16
 8001606:	6193      	str	r3, [r2, #24]
 8001608:	4b34      	ldr	r3, [pc, #208]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	f003 0310 	and.w	r3, r3, #16
 8001610:	60fb      	str	r3, [r7, #12]
 8001612:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001614:	4b31      	ldr	r3, [pc, #196]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	4a30      	ldr	r2, [pc, #192]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 800161a:	f043 0320 	orr.w	r3, r3, #32
 800161e:	6193      	str	r3, [r2, #24]
 8001620:	4b2e      	ldr	r3, [pc, #184]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	f003 0320 	and.w	r3, r3, #32
 8001628:	60bb      	str	r3, [r7, #8]
 800162a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800162c:	4b2b      	ldr	r3, [pc, #172]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	4a2a      	ldr	r2, [pc, #168]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001632:	f043 0304 	orr.w	r3, r3, #4
 8001636:	6193      	str	r3, [r2, #24]
 8001638:	4b28      	ldr	r3, [pc, #160]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 800163a:	699b      	ldr	r3, [r3, #24]
 800163c:	f003 0304 	and.w	r3, r3, #4
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001644:	4b25      	ldr	r3, [pc, #148]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001646:	699b      	ldr	r3, [r3, #24]
 8001648:	4a24      	ldr	r2, [pc, #144]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 800164a:	f043 0308 	orr.w	r3, r3, #8
 800164e:	6193      	str	r3, [r2, #24]
 8001650:	4b22      	ldr	r3, [pc, #136]	@ (80016dc <_ZL12MX_GPIO_Initv+0xf4>)
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	f003 0308 	and.w	r3, r3, #8
 8001658:	603b      	str	r3, [r7, #0]
 800165a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165c:	2200      	movs	r2, #0
 800165e:	2120      	movs	r1, #32
 8001660:	481f      	ldr	r0, [pc, #124]	@ (80016e0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001662:	f000 fe68 	bl	8002336 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001666:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800166a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800166c:	4b1d      	ldr	r3, [pc, #116]	@ (80016e4 <_ZL12MX_GPIO_Initv+0xfc>)
 800166e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001670:	2300      	movs	r3, #0
 8001672:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0310 	add.w	r3, r7, #16
 8001678:	4619      	mov	r1, r3
 800167a:	481b      	ldr	r0, [pc, #108]	@ (80016e8 <_ZL12MX_GPIO_Initv+0x100>)
 800167c:	f000 fcc0 	bl	8002000 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001680:	2320      	movs	r3, #32
 8001682:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001684:	2301      	movs	r3, #1
 8001686:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168c:	2302      	movs	r3, #2
 800168e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001690:	f107 0310 	add.w	r3, r7, #16
 8001694:	4619      	mov	r1, r3
 8001696:	4812      	ldr	r0, [pc, #72]	@ (80016e0 <_ZL12MX_GPIO_Initv+0xf8>)
 8001698:	f000 fcb2 	bl	8002000 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 800169c:	2200      	movs	r2, #0
 800169e:	2105      	movs	r1, #5
 80016a0:	2028      	movs	r0, #40	@ 0x28
 80016a2:	f000 fbc4 	bl	8001e2e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80016a6:	2028      	movs	r0, #40	@ 0x28
 80016a8:	f000 fbdd 	bl	8001e66 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
  // Set PA1 as Output Push-Pull or Open-Drain
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_1, GPIO_PIN_SET);
 80016ac:	2201      	movs	r2, #1
 80016ae:	2102      	movs	r1, #2
 80016b0:	480b      	ldr	r0, [pc, #44]	@ (80016e0 <_ZL12MX_GPIO_Initv+0xf8>)
 80016b2:	f000 fe40 	bl	8002336 <HAL_GPIO_WritePin>
  // Configure GPIO PA1 as input with pull-up resistor
  GPIO_InitStruct.Pin = GPIO_PIN_1;
 80016b6:	2302      	movs	r3, #2
 80016b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016ba:	2300      	movs	r3, #0
 80016bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;  // Enable pull-up
 80016be:	2301      	movs	r3, #1
 80016c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;  // Low speed is fine for DHT11
 80016c2:	2302      	movs	r3, #2
 80016c4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016c6:	f107 0310 	add.w	r3, r7, #16
 80016ca:	4619      	mov	r1, r3
 80016cc:	4804      	ldr	r0, [pc, #16]	@ (80016e0 <_ZL12MX_GPIO_Initv+0xf8>)
 80016ce:	f000 fc97 	bl	8002000 <HAL_GPIO_Init>
/* USER CODE END MX_GPIO_Init_2 */
}
 80016d2:	bf00      	nop
 80016d4:	3720      	adds	r7, #32
 80016d6:	46bd      	mov	sp, r7
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	40021000 	.word	0x40021000
 80016e0:	40010800 	.word	0x40010800
 80016e4:	10110000 	.word	0x10110000
 80016e8:	40011000 	.word	0x40011000

080016ec <_Z11MX_RTC_Initv>:

/* USER CODE BEGIN 4 */
void MX_RTC_Init() {
 80016ec:	b580      	push	{r7, lr}
 80016ee:	b084      	sub	sp, #16
 80016f0:	af00      	add	r7, sp, #0
    // Enable the RTC clock
    __HAL_RCC_PWR_CLK_ENABLE();
 80016f2:	4b40      	ldr	r3, [pc, #256]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 80016f4:	69db      	ldr	r3, [r3, #28]
 80016f6:	4a3f      	ldr	r2, [pc, #252]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 80016f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016fc:	61d3      	str	r3, [r2, #28]
 80016fe:	4b3d      	ldr	r3, [pc, #244]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 8001700:	69db      	ldr	r3, [r3, #28]
 8001702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001706:	607b      	str	r3, [r7, #4]
 8001708:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 800170a:	f000 fe2d 	bl	8002368 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKP_CLK_ENABLE();
 800170e:	4b39      	ldr	r3, [pc, #228]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 8001710:	69db      	ldr	r3, [r3, #28]
 8001712:	4a38      	ldr	r2, [pc, #224]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 8001714:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001718:	61d3      	str	r3, [r2, #28]
 800171a:	4b36      	ldr	r3, [pc, #216]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800171c:	69db      	ldr	r3, [r3, #28]
 800171e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001722:	603b      	str	r3, [r7, #0]
 8001724:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_RTC_ENABLE();
 8001726:	4b34      	ldr	r3, [pc, #208]	@ (80017f8 <_Z11MX_RTC_Initv+0x10c>)
 8001728:	2201      	movs	r2, #1
 800172a:	601a      	str	r2, [r3, #0]

    // Select LSI as RTC clock source
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);      // Turn off LSE
 800172c:	4b31      	ldr	r3, [pc, #196]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800172e:	6a1b      	ldr	r3, [r3, #32]
 8001730:	4a30      	ldr	r2, [pc, #192]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 8001732:	f023 0301 	bic.w	r3, r3, #1
 8001736:	6213      	str	r3, [r2, #32]
 8001738:	4b2e      	ldr	r3, [pc, #184]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800173a:	6a1b      	ldr	r3, [r3, #32]
 800173c:	4a2d      	ldr	r2, [pc, #180]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800173e:	f023 0304 	bic.w	r3, r3, #4
 8001742:	6213      	str	r3, [r2, #32]
    __HAL_RCC_LSI_ENABLE();                 // Turn on LSI
 8001744:	4b2d      	ldr	r3, [pc, #180]	@ (80017fc <_Z11MX_RTC_Initv+0x110>)
 8001746:	2201      	movs	r2, #1
 8001748:	601a      	str	r2, [r3, #0]
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET); // Wait until LSI ready
 800174a:	bf00      	nop
 800174c:	4b29      	ldr	r3, [pc, #164]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800174e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	bf0c      	ite	eq
 8001758:	2301      	moveq	r3, #1
 800175a:	2300      	movne	r3, #0
 800175c:	b2db      	uxtb	r3, r3
 800175e:	2b00      	cmp	r3, #0
 8001760:	d1f4      	bne.n	800174c <_Z11MX_RTC_Initv+0x60>
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 8001762:	4b24      	ldr	r3, [pc, #144]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 8001764:	6a1b      	ldr	r3, [r3, #32]
 8001766:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800176a:	4a22      	ldr	r2, [pc, #136]	@ (80017f4 <_Z11MX_RTC_Initv+0x108>)
 800176c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001770:	6213      	str	r3, [r2, #32]

    hrtc.Instance = RTC;
 8001772:	4b23      	ldr	r3, [pc, #140]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 8001774:	4a23      	ldr	r2, [pc, #140]	@ (8001804 <_Z11MX_RTC_Initv+0x118>)
 8001776:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001778:	4b21      	ldr	r3, [pc, #132]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 800177a:	f04f 32ff 	mov.w	r2, #4294967295
 800177e:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 8001780:	4b1f      	ldr	r3, [pc, #124]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 8001782:	2200      	movs	r2, #0
 8001784:	609a      	str	r2, [r3, #8]

    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001786:	481e      	ldr	r0, [pc, #120]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 8001788:	f001 fac0 	bl	8002d0c <HAL_RTC_Init>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	bf14      	ite	ne
 8001792:	2301      	movne	r3, #1
 8001794:	2300      	moveq	r3, #0
 8001796:	b2db      	uxtb	r3, r3
 8001798:	2b00      	cmp	r3, #0
 800179a:	d001      	beq.n	80017a0 <_Z11MX_RTC_Initv+0xb4>
        Error_Handler();
 800179c:	f000 f834 	bl	8001808 <Error_Handler>
    }

    // Set default time/date once
    RTC_TimeTypeDef sTime = {0};
 80017a0:	f107 030c 	add.w	r3, r7, #12
 80017a4:	2100      	movs	r1, #0
 80017a6:	460a      	mov	r2, r1
 80017a8:	801a      	strh	r2, [r3, #0]
 80017aa:	460a      	mov	r2, r1
 80017ac:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {0};
 80017ae:	2300      	movs	r3, #0
 80017b0:	60bb      	str	r3, [r7, #8]

    sTime.Hours = 12;
 80017b2:	230c      	movs	r3, #12
 80017b4:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0;
 80017b6:	2300      	movs	r3, #0
 80017b8:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 80017ba:	2300      	movs	r3, #0
 80017bc:	73bb      	strb	r3, [r7, #14]

    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80017be:	2301      	movs	r3, #1
 80017c0:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;
 80017c2:	2301      	movs	r3, #1
 80017c4:	727b      	strb	r3, [r7, #9]
    sDate.Date = 1;
 80017c6:	2301      	movs	r3, #1
 80017c8:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 23;
 80017ca:	2317      	movs	r3, #23
 80017cc:	72fb      	strb	r3, [r7, #11]

    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 80017ce:	f107 030c 	add.w	r3, r7, #12
 80017d2:	2200      	movs	r2, #0
 80017d4:	4619      	mov	r1, r3
 80017d6:	480a      	ldr	r0, [pc, #40]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 80017d8:	f001 fb24 	bl	8002e24 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 80017dc:	f107 0308 	add.w	r3, r7, #8
 80017e0:	2200      	movs	r2, #0
 80017e2:	4619      	mov	r1, r3
 80017e4:	4806      	ldr	r0, [pc, #24]	@ (8001800 <_Z11MX_RTC_Initv+0x114>)
 80017e6:	f001 fc8d 	bl	8003104 <HAL_RTC_SetDate>
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	40021000 	.word	0x40021000
 80017f8:	4242043c 	.word	0x4242043c
 80017fc:	42420480 	.word	0x42420480
 8001800:	20000248 	.word	0x20000248
 8001804:	40002800 	.word	0x40002800

08001808 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800180c:	b672      	cpsid	i
}
 800180e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001810:	bf00      	nop
 8001812:	e7fd      	b.n	8001810 <Error_Handler+0x8>

08001814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	b084      	sub	sp, #16
 8001818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800181a:	4b18      	ldr	r3, [pc, #96]	@ (800187c <HAL_MspInit+0x68>)
 800181c:	699b      	ldr	r3, [r3, #24]
 800181e:	4a17      	ldr	r2, [pc, #92]	@ (800187c <HAL_MspInit+0x68>)
 8001820:	f043 0301 	orr.w	r3, r3, #1
 8001824:	6193      	str	r3, [r2, #24]
 8001826:	4b15      	ldr	r3, [pc, #84]	@ (800187c <HAL_MspInit+0x68>)
 8001828:	699b      	ldr	r3, [r3, #24]
 800182a:	f003 0301 	and.w	r3, r3, #1
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001832:	4b12      	ldr	r3, [pc, #72]	@ (800187c <HAL_MspInit+0x68>)
 8001834:	69db      	ldr	r3, [r3, #28]
 8001836:	4a11      	ldr	r2, [pc, #68]	@ (800187c <HAL_MspInit+0x68>)
 8001838:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800183c:	61d3      	str	r3, [r2, #28]
 800183e:	4b0f      	ldr	r3, [pc, #60]	@ (800187c <HAL_MspInit+0x68>)
 8001840:	69db      	ldr	r3, [r3, #28]
 8001842:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001846:	607b      	str	r3, [r7, #4]
 8001848:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800184a:	2200      	movs	r2, #0
 800184c:	210f      	movs	r1, #15
 800184e:	f06f 0001 	mvn.w	r0, #1
 8001852:	f000 faec 	bl	8001e2e <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001856:	4b0a      	ldr	r3, [pc, #40]	@ (8001880 <HAL_MspInit+0x6c>)
 8001858:	685b      	ldr	r3, [r3, #4]
 800185a:	60fb      	str	r3, [r7, #12]
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001862:	60fb      	str	r3, [r7, #12]
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800186a:	60fb      	str	r3, [r7, #12]
 800186c:	4a04      	ldr	r2, [pc, #16]	@ (8001880 <HAL_MspInit+0x6c>)
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001872:	bf00      	nop
 8001874:	3710      	adds	r7, #16
 8001876:	46bd      	mov	sp, r7
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	40021000 	.word	0x40021000
 8001880:	40010000 	.word	0x40010000

08001884 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b084      	sub	sp, #16
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	4a0b      	ldr	r2, [pc, #44]	@ (80018c0 <HAL_RTC_MspInit+0x3c>)
 8001892:	4293      	cmp	r3, r2
 8001894:	d110      	bne.n	80018b8 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001896:	f000 fd67 	bl	8002368 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 800189a:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <HAL_RTC_MspInit+0x40>)
 800189c:	69db      	ldr	r3, [r3, #28]
 800189e:	4a09      	ldr	r2, [pc, #36]	@ (80018c4 <HAL_RTC_MspInit+0x40>)
 80018a0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80018a4:	61d3      	str	r3, [r2, #28]
 80018a6:	4b07      	ldr	r3, [pc, #28]	@ (80018c4 <HAL_RTC_MspInit+0x40>)
 80018a8:	69db      	ldr	r3, [r3, #28]
 80018aa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80018ae:	60fb      	str	r3, [r7, #12]
 80018b0:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <HAL_RTC_MspInit+0x44>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 80018b8:	bf00      	nop
 80018ba:	3710      	adds	r7, #16
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	40002800 	.word	0x40002800
 80018c4:	40021000 	.word	0x40021000
 80018c8:	4242043c 	.word	0x4242043c

080018cc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b088      	sub	sp, #32
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018d4:	f107 0310 	add.w	r3, r7, #16
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
 80018dc:	605a      	str	r2, [r3, #4]
 80018de:	609a      	str	r2, [r3, #8]
 80018e0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4a19      	ldr	r2, [pc, #100]	@ (800194c <HAL_UART_MspInit+0x80>)
 80018e8:	4293      	cmp	r3, r2
 80018ea:	d12b      	bne.n	8001944 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80018ec:	4b18      	ldr	r3, [pc, #96]	@ (8001950 <HAL_UART_MspInit+0x84>)
 80018ee:	69db      	ldr	r3, [r3, #28]
 80018f0:	4a17      	ldr	r2, [pc, #92]	@ (8001950 <HAL_UART_MspInit+0x84>)
 80018f2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80018f6:	61d3      	str	r3, [r2, #28]
 80018f8:	4b15      	ldr	r3, [pc, #84]	@ (8001950 <HAL_UART_MspInit+0x84>)
 80018fa:	69db      	ldr	r3, [r3, #28]
 80018fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001900:	60fb      	str	r3, [r7, #12]
 8001902:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001904:	4b12      	ldr	r3, [pc, #72]	@ (8001950 <HAL_UART_MspInit+0x84>)
 8001906:	699b      	ldr	r3, [r3, #24]
 8001908:	4a11      	ldr	r2, [pc, #68]	@ (8001950 <HAL_UART_MspInit+0x84>)
 800190a:	f043 0304 	orr.w	r3, r3, #4
 800190e:	6193      	str	r3, [r2, #24]
 8001910:	4b0f      	ldr	r3, [pc, #60]	@ (8001950 <HAL_UART_MspInit+0x84>)
 8001912:	699b      	ldr	r3, [r3, #24]
 8001914:	f003 0304 	and.w	r3, r3, #4
 8001918:	60bb      	str	r3, [r7, #8]
 800191a:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800191c:	230c      	movs	r3, #12
 800191e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001924:	2302      	movs	r3, #2
 8001926:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001928:	f107 0310 	add.w	r3, r7, #16
 800192c:	4619      	mov	r1, r3
 800192e:	4809      	ldr	r0, [pc, #36]	@ (8001954 <HAL_UART_MspInit+0x88>)
 8001930:	f000 fb66 	bl	8002000 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001934:	2200      	movs	r2, #0
 8001936:	2105      	movs	r1, #5
 8001938:	2026      	movs	r0, #38	@ 0x26
 800193a:	f000 fa78 	bl	8001e2e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800193e:	2026      	movs	r0, #38	@ 0x26
 8001940:	f000 fa91 	bl	8001e66 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001944:	bf00      	nop
 8001946:	3720      	adds	r7, #32
 8001948:	46bd      	mov	sp, r7
 800194a:	bd80      	pop	{r7, pc}
 800194c:	40004400 	.word	0x40004400
 8001950:	40021000 	.word	0x40021000
 8001954:	40010800 	.word	0x40010800

08001958 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001958:	b480      	push	{r7}
 800195a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800195c:	bf00      	nop
 800195e:	e7fd      	b.n	800195c <NMI_Handler+0x4>

08001960 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001960:	b480      	push	{r7}
 8001962:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001964:	bf00      	nop
 8001966:	e7fd      	b.n	8001964 <HardFault_Handler+0x4>

08001968 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001968:	b480      	push	{r7}
 800196a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800196c:	bf00      	nop
 800196e:	e7fd      	b.n	800196c <MemManage_Handler+0x4>

08001970 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001974:	bf00      	nop
 8001976:	e7fd      	b.n	8001974 <BusFault_Handler+0x4>

08001978 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001978:	b480      	push	{r7}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800197c:	bf00      	nop
 800197e:	e7fd      	b.n	800197c <UsageFault_Handler+0x4>

08001980 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001980:	b480      	push	{r7}
 8001982:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001984:	bf00      	nop
 8001986:	46bd      	mov	sp, r7
 8001988:	bc80      	pop	{r7}
 800198a:	4770      	bx	lr

0800198c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <USART2_IRQHandler+0x10>)
 8001992:	f002 f863 	bl	8003a5c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	20000200 	.word	0x20000200

080019a0 <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */
extern StreamBufferHandle_t uartRxStreamBuffer;
extern UART_HandleTypeDef huart2;
extern uint8_t uartRxByte;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b084      	sub	sp, #16
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	4a10      	ldr	r2, [pc, #64]	@ (80019f0 <HAL_UART_RxCpltCallback+0x50>)
 80019ae:	4293      	cmp	r3, r2
 80019b0:	d119      	bne.n	80019e6 <HAL_UART_RxCpltCallback+0x46>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80019b2:	2300      	movs	r3, #0
 80019b4:	60fb      	str	r3, [r7, #12]

        // Push the received byte into the stream buffer (from ISR)
        xStreamBufferSendFromISR(uartRxStreamBuffer, &uartRxByte, 1, &xHigherPriorityTaskWoken);
 80019b6:	4b0f      	ldr	r3, [pc, #60]	@ (80019f4 <HAL_UART_RxCpltCallback+0x54>)
 80019b8:	6818      	ldr	r0, [r3, #0]
 80019ba:	f107 030c 	add.w	r3, r7, #12
 80019be:	2201      	movs	r2, #1
 80019c0:	490d      	ldr	r1, [pc, #52]	@ (80019f8 <HAL_UART_RxCpltCallback+0x58>)
 80019c2:	f003 fd3e 	bl	8005442 <xStreamBufferSendFromISR>

        // Restart UART interrupt for next byte
        HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 80019c6:	2201      	movs	r2, #1
 80019c8:	490b      	ldr	r1, [pc, #44]	@ (80019f8 <HAL_UART_RxCpltCallback+0x58>)
 80019ca:	480c      	ldr	r0, [pc, #48]	@ (80019fc <HAL_UART_RxCpltCallback+0x5c>)
 80019cc:	f002 f821 	bl	8003a12 <HAL_UART_Receive_IT>

        // Yield if needed
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d007      	beq.n	80019e6 <HAL_UART_RxCpltCallback+0x46>
 80019d6:	4b0a      	ldr	r3, [pc, #40]	@ (8001a00 <HAL_UART_RxCpltCallback+0x60>)
 80019d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80019dc:	601a      	str	r2, [r3, #0]
 80019de:	f3bf 8f4f 	dsb	sy
 80019e2:	f3bf 8f6f 	isb	sy
    }
}
 80019e6:	bf00      	nop
 80019e8:	3710      	adds	r7, #16
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	40004400 	.word	0x40004400
 80019f4:	200001f4 	.word	0x200001f4
 80019f8:	2000025c 	.word	0x2000025c
 80019fc:	20000200 	.word	0x20000200
 8001a00:	e000ed04 	.word	0xe000ed04

08001a04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a04:	b480      	push	{r7}
 8001a06:	af00      	add	r7, sp, #0
  return 1;
 8001a08:	2301      	movs	r3, #1
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr

08001a12 <_kill>:

int _kill(int pid, int sig)
{
 8001a12:	b580      	push	{r7, lr}
 8001a14:	b082      	sub	sp, #8
 8001a16:	af00      	add	r7, sp, #0
 8001a18:	6078      	str	r0, [r7, #4]
 8001a1a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a1c:	f006 fe3a 	bl	8008694 <__errno>
 8001a20:	4603      	mov	r3, r0
 8001a22:	2216      	movs	r2, #22
 8001a24:	601a      	str	r2, [r3, #0]
  return -1;
 8001a26:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	3708      	adds	r7, #8
 8001a2e:	46bd      	mov	sp, r7
 8001a30:	bd80      	pop	{r7, pc}

08001a32 <_exit>:

void _exit (int status)
{
 8001a32:	b580      	push	{r7, lr}
 8001a34:	b082      	sub	sp, #8
 8001a36:	af00      	add	r7, sp, #0
 8001a38:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a3a:	f04f 31ff 	mov.w	r1, #4294967295
 8001a3e:	6878      	ldr	r0, [r7, #4]
 8001a40:	f7ff ffe7 	bl	8001a12 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a44:	bf00      	nop
 8001a46:	e7fd      	b.n	8001a44 <_exit+0x12>

08001a48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b086      	sub	sp, #24
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	60f8      	str	r0, [r7, #12]
 8001a50:	60b9      	str	r1, [r7, #8]
 8001a52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a54:	2300      	movs	r3, #0
 8001a56:	617b      	str	r3, [r7, #20]
 8001a58:	e00a      	b.n	8001a70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a5a:	f3af 8000 	nop.w
 8001a5e:	4601      	mov	r1, r0
 8001a60:	68bb      	ldr	r3, [r7, #8]
 8001a62:	1c5a      	adds	r2, r3, #1
 8001a64:	60ba      	str	r2, [r7, #8]
 8001a66:	b2ca      	uxtb	r2, r1
 8001a68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a6a:	697b      	ldr	r3, [r7, #20]
 8001a6c:	3301      	adds	r3, #1
 8001a6e:	617b      	str	r3, [r7, #20]
 8001a70:	697a      	ldr	r2, [r7, #20]
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	429a      	cmp	r2, r3
 8001a76:	dbf0      	blt.n	8001a5a <_read+0x12>
  }

  return len;
 8001a78:	687b      	ldr	r3, [r7, #4]
}
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	3718      	adds	r7, #24
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	60f8      	str	r0, [r7, #12]
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a8e:	2300      	movs	r3, #0
 8001a90:	617b      	str	r3, [r7, #20]
 8001a92:	e009      	b.n	8001aa8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a94:	68bb      	ldr	r3, [r7, #8]
 8001a96:	1c5a      	adds	r2, r3, #1
 8001a98:	60ba      	str	r2, [r7, #8]
 8001a9a:	781b      	ldrb	r3, [r3, #0]
 8001a9c:	4618      	mov	r0, r3
 8001a9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aa2:	697b      	ldr	r3, [r7, #20]
 8001aa4:	3301      	adds	r3, #1
 8001aa6:	617b      	str	r3, [r7, #20]
 8001aa8:	697a      	ldr	r2, [r7, #20]
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	429a      	cmp	r2, r3
 8001aae:	dbf1      	blt.n	8001a94 <_write+0x12>
  }
  return len;
 8001ab0:	687b      	ldr	r3, [r7, #4]
}
 8001ab2:	4618      	mov	r0, r3
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <_close>:

int _close(int file)
{
 8001aba:	b480      	push	{r7}
 8001abc:	b083      	sub	sp, #12
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001ac2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ac6:	4618      	mov	r0, r3
 8001ac8:	370c      	adds	r7, #12
 8001aca:	46bd      	mov	sp, r7
 8001acc:	bc80      	pop	{r7}
 8001ace:	4770      	bx	lr

08001ad0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
 8001ad8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001ae0:	605a      	str	r2, [r3, #4]
  return 0;
 8001ae2:	2300      	movs	r3, #0
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	370c      	adds	r7, #12
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bc80      	pop	{r7}
 8001aec:	4770      	bx	lr

08001aee <_isatty>:

int _isatty(int file)
{
 8001aee:	b480      	push	{r7}
 8001af0:	b083      	sub	sp, #12
 8001af2:	af00      	add	r7, sp, #0
 8001af4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001af6:	2301      	movs	r3, #1
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	370c      	adds	r7, #12
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bc80      	pop	{r7}
 8001b00:	4770      	bx	lr

08001b02 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b02:	b480      	push	{r7}
 8001b04:	b085      	sub	sp, #20
 8001b06:	af00      	add	r7, sp, #0
 8001b08:	60f8      	str	r0, [r7, #12]
 8001b0a:	60b9      	str	r1, [r7, #8]
 8001b0c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b0e:	2300      	movs	r3, #0
}
 8001b10:	4618      	mov	r0, r3
 8001b12:	3714      	adds	r7, #20
 8001b14:	46bd      	mov	sp, r7
 8001b16:	bc80      	pop	{r7}
 8001b18:	4770      	bx	lr
	...

08001b1c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b24:	4a14      	ldr	r2, [pc, #80]	@ (8001b78 <_sbrk+0x5c>)
 8001b26:	4b15      	ldr	r3, [pc, #84]	@ (8001b7c <_sbrk+0x60>)
 8001b28:	1ad3      	subs	r3, r2, r3
 8001b2a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b2c:	697b      	ldr	r3, [r7, #20]
 8001b2e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b30:	4b13      	ldr	r3, [pc, #76]	@ (8001b80 <_sbrk+0x64>)
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d102      	bne.n	8001b3e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b38:	4b11      	ldr	r3, [pc, #68]	@ (8001b80 <_sbrk+0x64>)
 8001b3a:	4a12      	ldr	r2, [pc, #72]	@ (8001b84 <_sbrk+0x68>)
 8001b3c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b3e:	4b10      	ldr	r3, [pc, #64]	@ (8001b80 <_sbrk+0x64>)
 8001b40:	681a      	ldr	r2, [r3, #0]
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	4413      	add	r3, r2
 8001b46:	693a      	ldr	r2, [r7, #16]
 8001b48:	429a      	cmp	r2, r3
 8001b4a:	d207      	bcs.n	8001b5c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001b4c:	f006 fda2 	bl	8008694 <__errno>
 8001b50:	4603      	mov	r3, r0
 8001b52:	220c      	movs	r2, #12
 8001b54:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001b56:	f04f 33ff 	mov.w	r3, #4294967295
 8001b5a:	e009      	b.n	8001b70 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001b5c:	4b08      	ldr	r3, [pc, #32]	@ (8001b80 <_sbrk+0x64>)
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001b62:	4b07      	ldr	r3, [pc, #28]	@ (8001b80 <_sbrk+0x64>)
 8001b64:	681a      	ldr	r2, [r3, #0]
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	4413      	add	r3, r2
 8001b6a:	4a05      	ldr	r2, [pc, #20]	@ (8001b80 <_sbrk+0x64>)
 8001b6c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001b6e:	68fb      	ldr	r3, [r7, #12]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3718      	adds	r7, #24
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bd80      	pop	{r7, pc}
 8001b78:	20005000 	.word	0x20005000
 8001b7c:	00000400 	.word	0x00000400
 8001b80:	20000260 	.word	0x20000260
 8001b84:	20001d08 	.word	0x20001d08

08001b88 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b8c:	bf00      	nop
 8001b8e:	46bd      	mov	sp, r7
 8001b90:	bc80      	pop	{r7}
 8001b92:	4770      	bx	lr

08001b94 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001b94:	f7ff fff8 	bl	8001b88 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b98:	480b      	ldr	r0, [pc, #44]	@ (8001bc8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001b9a:	490c      	ldr	r1, [pc, #48]	@ (8001bcc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8001bd0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001b9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ba0:	e002      	b.n	8001ba8 <LoopCopyDataInit>

08001ba2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ba2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba6:	3304      	adds	r3, #4

08001ba8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001baa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bac:	d3f9      	bcc.n	8001ba2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bae:	4a09      	ldr	r2, [pc, #36]	@ (8001bd4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001bb0:	4c09      	ldr	r4, [pc, #36]	@ (8001bd8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001bb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb4:	e001      	b.n	8001bba <LoopFillZerobss>

08001bb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb8:	3204      	adds	r2, #4

08001bba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bbc:	d3fb      	bcc.n	8001bb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bbe:	f006 fd6f 	bl	80086a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001bc2:	f7ff fc49 	bl	8001458 <main>
  bx lr
 8001bc6:	4770      	bx	lr
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001bd0:	0800b620 	.word	0x0800b620
  ldr r2, =_sbss
 8001bd4:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001bd8:	20001d04 	.word	0x20001d04

08001bdc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC1_2_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001be4:	4b08      	ldr	r3, [pc, #32]	@ (8001c08 <HAL_Init+0x28>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a07      	ldr	r2, [pc, #28]	@ (8001c08 <HAL_Init+0x28>)
 8001bea:	f043 0310 	orr.w	r3, r3, #16
 8001bee:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001bf0:	2003      	movs	r0, #3
 8001bf2:	f000 f911 	bl	8001e18 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001bf6:	200f      	movs	r0, #15
 8001bf8:	f000 f808 	bl	8001c0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001bfc:	f7ff fe0a 	bl	8001814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c00:	2300      	movs	r3, #0
}
 8001c02:	4618      	mov	r0, r3
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	40022000 	.word	0x40022000

08001c0c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c0c:	b580      	push	{r7, lr}
 8001c0e:	b082      	sub	sp, #8
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c14:	4b12      	ldr	r3, [pc, #72]	@ (8001c60 <HAL_InitTick+0x54>)
 8001c16:	681a      	ldr	r2, [r3, #0]
 8001c18:	4b12      	ldr	r3, [pc, #72]	@ (8001c64 <HAL_InitTick+0x58>)
 8001c1a:	781b      	ldrb	r3, [r3, #0]
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c22:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c26:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 f929 	bl	8001e82 <HAL_SYSTICK_Config>
 8001c30:	4603      	mov	r3, r0
 8001c32:	2b00      	cmp	r3, #0
 8001c34:	d001      	beq.n	8001c3a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00e      	b.n	8001c58 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	2b0f      	cmp	r3, #15
 8001c3e:	d80a      	bhi.n	8001c56 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c40:	2200      	movs	r2, #0
 8001c42:	6879      	ldr	r1, [r7, #4]
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f000 f8f1 	bl	8001e2e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c4c:	4a06      	ldr	r2, [pc, #24]	@ (8001c68 <HAL_InitTick+0x5c>)
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c52:	2300      	movs	r3, #0
 8001c54:	e000      	b.n	8001c58 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c56:	2301      	movs	r3, #1
}
 8001c58:	4618      	mov	r0, r3
 8001c5a:	3708      	adds	r7, #8
 8001c5c:	46bd      	mov	sp, r7
 8001c5e:	bd80      	pop	{r7, pc}
 8001c60:	20000000 	.word	0x20000000
 8001c64:	20000008 	.word	0x20000008
 8001c68:	20000004 	.word	0x20000004

08001c6c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c70:	4b02      	ldr	r3, [pc, #8]	@ (8001c7c <HAL_GetTick+0x10>)
 8001c72:	681b      	ldr	r3, [r3, #0]
}
 8001c74:	4618      	mov	r0, r3
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr
 8001c7c:	20000264 	.word	0x20000264

08001c80 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c80:	b480      	push	{r7}
 8001c82:	b085      	sub	sp, #20
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	f003 0307 	and.w	r3, r3, #7
 8001c8e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c90:	4b0c      	ldr	r3, [pc, #48]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001c92:	68db      	ldr	r3, [r3, #12]
 8001c94:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c96:	68ba      	ldr	r2, [r7, #8]
 8001c98:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001c9c:	4013      	ands	r3, r2
 8001c9e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ca4:	68bb      	ldr	r3, [r7, #8]
 8001ca6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ca8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001cac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001cb0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001cb2:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <__NVIC_SetPriorityGrouping+0x44>)
 8001cb4:	68bb      	ldr	r3, [r7, #8]
 8001cb6:	60d3      	str	r3, [r2, #12]
}
 8001cb8:	bf00      	nop
 8001cba:	3714      	adds	r7, #20
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bc80      	pop	{r7}
 8001cc0:	4770      	bx	lr
 8001cc2:	bf00      	nop
 8001cc4:	e000ed00 	.word	0xe000ed00

08001cc8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ccc:	4b04      	ldr	r3, [pc, #16]	@ (8001ce0 <__NVIC_GetPriorityGrouping+0x18>)
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	0a1b      	lsrs	r3, r3, #8
 8001cd2:	f003 0307 	and.w	r3, r3, #7
}
 8001cd6:	4618      	mov	r0, r3
 8001cd8:	46bd      	mov	sp, r7
 8001cda:	bc80      	pop	{r7}
 8001cdc:	4770      	bx	lr
 8001cde:	bf00      	nop
 8001ce0:	e000ed00 	.word	0xe000ed00

08001ce4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ce4:	b480      	push	{r7}
 8001ce6:	b083      	sub	sp, #12
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	4603      	mov	r3, r0
 8001cec:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	db0b      	blt.n	8001d0e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001cf6:	79fb      	ldrb	r3, [r7, #7]
 8001cf8:	f003 021f 	and.w	r2, r3, #31
 8001cfc:	4906      	ldr	r1, [pc, #24]	@ (8001d18 <__NVIC_EnableIRQ+0x34>)
 8001cfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d02:	095b      	lsrs	r3, r3, #5
 8001d04:	2001      	movs	r0, #1
 8001d06:	fa00 f202 	lsl.w	r2, r0, r2
 8001d0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr
 8001d18:	e000e100 	.word	0xe000e100

08001d1c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d2c:	2b00      	cmp	r3, #0
 8001d2e:	db0a      	blt.n	8001d46 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	b2da      	uxtb	r2, r3
 8001d34:	490c      	ldr	r1, [pc, #48]	@ (8001d68 <__NVIC_SetPriority+0x4c>)
 8001d36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d3a:	0112      	lsls	r2, r2, #4
 8001d3c:	b2d2      	uxtb	r2, r2
 8001d3e:	440b      	add	r3, r1
 8001d40:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001d44:	e00a      	b.n	8001d5c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	b2da      	uxtb	r2, r3
 8001d4a:	4908      	ldr	r1, [pc, #32]	@ (8001d6c <__NVIC_SetPriority+0x50>)
 8001d4c:	79fb      	ldrb	r3, [r7, #7]
 8001d4e:	f003 030f 	and.w	r3, r3, #15
 8001d52:	3b04      	subs	r3, #4
 8001d54:	0112      	lsls	r2, r2, #4
 8001d56:	b2d2      	uxtb	r2, r2
 8001d58:	440b      	add	r3, r1
 8001d5a:	761a      	strb	r2, [r3, #24]
}
 8001d5c:	bf00      	nop
 8001d5e:	370c      	adds	r7, #12
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bc80      	pop	{r7}
 8001d64:	4770      	bx	lr
 8001d66:	bf00      	nop
 8001d68:	e000e100 	.word	0xe000e100
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d70:	b480      	push	{r7}
 8001d72:	b089      	sub	sp, #36	@ 0x24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	60f8      	str	r0, [r7, #12]
 8001d78:	60b9      	str	r1, [r7, #8]
 8001d7a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f003 0307 	and.w	r3, r3, #7
 8001d82:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f1c3 0307 	rsb	r3, r3, #7
 8001d8a:	2b04      	cmp	r3, #4
 8001d8c:	bf28      	it	cs
 8001d8e:	2304      	movcs	r3, #4
 8001d90:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d92:	69fb      	ldr	r3, [r7, #28]
 8001d94:	3304      	adds	r3, #4
 8001d96:	2b06      	cmp	r3, #6
 8001d98:	d902      	bls.n	8001da0 <NVIC_EncodePriority+0x30>
 8001d9a:	69fb      	ldr	r3, [r7, #28]
 8001d9c:	3b03      	subs	r3, #3
 8001d9e:	e000      	b.n	8001da2 <NVIC_EncodePriority+0x32>
 8001da0:	2300      	movs	r3, #0
 8001da2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001da4:	f04f 32ff 	mov.w	r2, #4294967295
 8001da8:	69bb      	ldr	r3, [r7, #24]
 8001daa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dae:	43da      	mvns	r2, r3
 8001db0:	68bb      	ldr	r3, [r7, #8]
 8001db2:	401a      	ands	r2, r3
 8001db4:	697b      	ldr	r3, [r7, #20]
 8001db6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001db8:	f04f 31ff 	mov.w	r1, #4294967295
 8001dbc:	697b      	ldr	r3, [r7, #20]
 8001dbe:	fa01 f303 	lsl.w	r3, r1, r3
 8001dc2:	43d9      	mvns	r1, r3
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001dc8:	4313      	orrs	r3, r2
         );
}
 8001dca:	4618      	mov	r0, r3
 8001dcc:	3724      	adds	r7, #36	@ 0x24
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr

08001dd4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b082      	sub	sp, #8
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	3b01      	subs	r3, #1
 8001de0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001de4:	d301      	bcc.n	8001dea <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001de6:	2301      	movs	r3, #1
 8001de8:	e00f      	b.n	8001e0a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001dea:	4a0a      	ldr	r2, [pc, #40]	@ (8001e14 <SysTick_Config+0x40>)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3b01      	subs	r3, #1
 8001df0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001df2:	210f      	movs	r1, #15
 8001df4:	f04f 30ff 	mov.w	r0, #4294967295
 8001df8:	f7ff ff90 	bl	8001d1c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001dfc:	4b05      	ldr	r3, [pc, #20]	@ (8001e14 <SysTick_Config+0x40>)
 8001dfe:	2200      	movs	r2, #0
 8001e00:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e02:	4b04      	ldr	r3, [pc, #16]	@ (8001e14 <SysTick_Config+0x40>)
 8001e04:	2207      	movs	r2, #7
 8001e06:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e08:	2300      	movs	r3, #0
}
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	3708      	adds	r7, #8
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	e000e010 	.word	0xe000e010

08001e18 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e20:	6878      	ldr	r0, [r7, #4]
 8001e22:	f7ff ff2d 	bl	8001c80 <__NVIC_SetPriorityGrouping>
}
 8001e26:	bf00      	nop
 8001e28:	3708      	adds	r7, #8
 8001e2a:	46bd      	mov	sp, r7
 8001e2c:	bd80      	pop	{r7, pc}

08001e2e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001e2e:	b580      	push	{r7, lr}
 8001e30:	b086      	sub	sp, #24
 8001e32:	af00      	add	r7, sp, #0
 8001e34:	4603      	mov	r3, r0
 8001e36:	60b9      	str	r1, [r7, #8]
 8001e38:	607a      	str	r2, [r7, #4]
 8001e3a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001e40:	f7ff ff42 	bl	8001cc8 <__NVIC_GetPriorityGrouping>
 8001e44:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001e46:	687a      	ldr	r2, [r7, #4]
 8001e48:	68b9      	ldr	r1, [r7, #8]
 8001e4a:	6978      	ldr	r0, [r7, #20]
 8001e4c:	f7ff ff90 	bl	8001d70 <NVIC_EncodePriority>
 8001e50:	4602      	mov	r2, r0
 8001e52:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001e56:	4611      	mov	r1, r2
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff ff5f 	bl	8001d1c <__NVIC_SetPriority>
}
 8001e5e:	bf00      	nop
 8001e60:	3718      	adds	r7, #24
 8001e62:	46bd      	mov	sp, r7
 8001e64:	bd80      	pop	{r7, pc}

08001e66 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	b082      	sub	sp, #8
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e70:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e74:	4618      	mov	r0, r3
 8001e76:	f7ff ff35 	bl	8001ce4 <__NVIC_EnableIRQ>
}
 8001e7a:	bf00      	nop
 8001e7c:	3708      	adds	r7, #8
 8001e7e:	46bd      	mov	sp, r7
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e82:	b580      	push	{r7, lr}
 8001e84:	b082      	sub	sp, #8
 8001e86:	af00      	add	r7, sp, #0
 8001e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e8a:	6878      	ldr	r0, [r7, #4]
 8001e8c:	f7ff ffa2 	bl	8001dd4 <SysTick_Config>
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3708      	adds	r7, #8
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd80      	pop	{r7, pc}

08001e9a <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001e9a:	b480      	push	{r7}
 8001e9c:	b085      	sub	sp, #20
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d008      	beq.n	8001ec4 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2204      	movs	r2, #4
 8001eb6:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2200      	movs	r2, #0
 8001ebc:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001ec0:	2301      	movs	r3, #1
 8001ec2:	e020      	b.n	8001f06 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f022 020e 	bic.w	r2, r2, #14
 8001ed2:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	681a      	ldr	r2, [r3, #0]
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f022 0201 	bic.w	r2, r2, #1
 8001ee2:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001ee4:	687b      	ldr	r3, [r7, #4]
 8001ee6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001eec:	2101      	movs	r1, #1
 8001eee:	fa01 f202 	lsl.w	r2, r1, r2
 8001ef2:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	2200      	movs	r2, #0
 8001f00:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001f04:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3714      	adds	r7, #20
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bc80      	pop	{r7}
 8001f0e:	4770      	bx	lr

08001f10 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b084      	sub	sp, #16
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	2b02      	cmp	r3, #2
 8001f26:	d005      	beq.n	8001f34 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	2204      	movs	r2, #4
 8001f2c:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	73fb      	strb	r3, [r7, #15]
 8001f32:	e051      	b.n	8001fd8 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	681a      	ldr	r2, [r3, #0]
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	f022 020e 	bic.w	r2, r2, #14
 8001f42:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	681a      	ldr	r2, [r3, #0]
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f022 0201 	bic.w	r2, r2, #1
 8001f52:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	681b      	ldr	r3, [r3, #0]
 8001f58:	4a22      	ldr	r2, [pc, #136]	@ (8001fe4 <HAL_DMA_Abort_IT+0xd4>)
 8001f5a:	4293      	cmp	r3, r2
 8001f5c:	d029      	beq.n	8001fb2 <HAL_DMA_Abort_IT+0xa2>
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a21      	ldr	r2, [pc, #132]	@ (8001fe8 <HAL_DMA_Abort_IT+0xd8>)
 8001f64:	4293      	cmp	r3, r2
 8001f66:	d022      	beq.n	8001fae <HAL_DMA_Abort_IT+0x9e>
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a1f      	ldr	r2, [pc, #124]	@ (8001fec <HAL_DMA_Abort_IT+0xdc>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d01a      	beq.n	8001fa8 <HAL_DMA_Abort_IT+0x98>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a1e      	ldr	r2, [pc, #120]	@ (8001ff0 <HAL_DMA_Abort_IT+0xe0>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d012      	beq.n	8001fa2 <HAL_DMA_Abort_IT+0x92>
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4a1c      	ldr	r2, [pc, #112]	@ (8001ff4 <HAL_DMA_Abort_IT+0xe4>)
 8001f82:	4293      	cmp	r3, r2
 8001f84:	d00a      	beq.n	8001f9c <HAL_DMA_Abort_IT+0x8c>
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	4a1b      	ldr	r2, [pc, #108]	@ (8001ff8 <HAL_DMA_Abort_IT+0xe8>)
 8001f8c:	4293      	cmp	r3, r2
 8001f8e:	d102      	bne.n	8001f96 <HAL_DMA_Abort_IT+0x86>
 8001f90:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001f94:	e00e      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001f96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001f9a:	e00b      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001f9c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001fa0:	e008      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001fa2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fa6:	e005      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001fa8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001fac:	e002      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001fae:	2310      	movs	r3, #16
 8001fb0:	e000      	b.n	8001fb4 <HAL_DMA_Abort_IT+0xa4>
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	4a11      	ldr	r2, [pc, #68]	@ (8001ffc <HAL_DMA_Abort_IT+0xec>)
 8001fb6:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	2201      	movs	r2, #1
 8001fbc:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	2200      	movs	r2, #0
 8001fc4:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d003      	beq.n	8001fd8 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd4:	6878      	ldr	r0, [r7, #4]
 8001fd6:	4798      	blx	r3
    } 
  }
  return status;
 8001fd8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fda:	4618      	mov	r0, r3
 8001fdc:	3710      	adds	r7, #16
 8001fde:	46bd      	mov	sp, r7
 8001fe0:	bd80      	pop	{r7, pc}
 8001fe2:	bf00      	nop
 8001fe4:	40020008 	.word	0x40020008
 8001fe8:	4002001c 	.word	0x4002001c
 8001fec:	40020030 	.word	0x40020030
 8001ff0:	40020044 	.word	0x40020044
 8001ff4:	40020058 	.word	0x40020058
 8001ff8:	4002006c 	.word	0x4002006c
 8001ffc:	40020000 	.word	0x40020000

08002000 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002000:	b480      	push	{r7}
 8002002:	b08b      	sub	sp, #44	@ 0x2c
 8002004:	af00      	add	r7, sp, #0
 8002006:	6078      	str	r0, [r7, #4]
 8002008:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800200a:	2300      	movs	r3, #0
 800200c:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 800200e:	2300      	movs	r3, #0
 8002010:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002012:	e169      	b.n	80022e8 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002014:	2201      	movs	r2, #1
 8002016:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	69fa      	ldr	r2, [r7, #28]
 8002024:	4013      	ands	r3, r2
 8002026:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002028:	69ba      	ldr	r2, [r7, #24]
 800202a:	69fb      	ldr	r3, [r7, #28]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8158 	bne.w	80022e2 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	685b      	ldr	r3, [r3, #4]
 8002036:	4a9a      	ldr	r2, [pc, #616]	@ (80022a0 <HAL_GPIO_Init+0x2a0>)
 8002038:	4293      	cmp	r3, r2
 800203a:	d05e      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800203c:	4a98      	ldr	r2, [pc, #608]	@ (80022a0 <HAL_GPIO_Init+0x2a0>)
 800203e:	4293      	cmp	r3, r2
 8002040:	d875      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002042:	4a98      	ldr	r2, [pc, #608]	@ (80022a4 <HAL_GPIO_Init+0x2a4>)
 8002044:	4293      	cmp	r3, r2
 8002046:	d058      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002048:	4a96      	ldr	r2, [pc, #600]	@ (80022a4 <HAL_GPIO_Init+0x2a4>)
 800204a:	4293      	cmp	r3, r2
 800204c:	d86f      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800204e:	4a96      	ldr	r2, [pc, #600]	@ (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d052      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002054:	4a94      	ldr	r2, [pc, #592]	@ (80022a8 <HAL_GPIO_Init+0x2a8>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d869      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800205a:	4a94      	ldr	r2, [pc, #592]	@ (80022ac <HAL_GPIO_Init+0x2ac>)
 800205c:	4293      	cmp	r3, r2
 800205e:	d04c      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 8002060:	4a92      	ldr	r2, [pc, #584]	@ (80022ac <HAL_GPIO_Init+0x2ac>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d863      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002066:	4a92      	ldr	r2, [pc, #584]	@ (80022b0 <HAL_GPIO_Init+0x2b0>)
 8002068:	4293      	cmp	r3, r2
 800206a:	d046      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
 800206c:	4a90      	ldr	r2, [pc, #576]	@ (80022b0 <HAL_GPIO_Init+0x2b0>)
 800206e:	4293      	cmp	r3, r2
 8002070:	d85d      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 8002072:	2b12      	cmp	r3, #18
 8002074:	d82a      	bhi.n	80020cc <HAL_GPIO_Init+0xcc>
 8002076:	2b12      	cmp	r3, #18
 8002078:	d859      	bhi.n	800212e <HAL_GPIO_Init+0x12e>
 800207a:	a201      	add	r2, pc, #4	@ (adr r2, 8002080 <HAL_GPIO_Init+0x80>)
 800207c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002080:	080020fb 	.word	0x080020fb
 8002084:	080020d5 	.word	0x080020d5
 8002088:	080020e7 	.word	0x080020e7
 800208c:	08002129 	.word	0x08002129
 8002090:	0800212f 	.word	0x0800212f
 8002094:	0800212f 	.word	0x0800212f
 8002098:	0800212f 	.word	0x0800212f
 800209c:	0800212f 	.word	0x0800212f
 80020a0:	0800212f 	.word	0x0800212f
 80020a4:	0800212f 	.word	0x0800212f
 80020a8:	0800212f 	.word	0x0800212f
 80020ac:	0800212f 	.word	0x0800212f
 80020b0:	0800212f 	.word	0x0800212f
 80020b4:	0800212f 	.word	0x0800212f
 80020b8:	0800212f 	.word	0x0800212f
 80020bc:	0800212f 	.word	0x0800212f
 80020c0:	0800212f 	.word	0x0800212f
 80020c4:	080020dd 	.word	0x080020dd
 80020c8:	080020f1 	.word	0x080020f1
 80020cc:	4a79      	ldr	r2, [pc, #484]	@ (80022b4 <HAL_GPIO_Init+0x2b4>)
 80020ce:	4293      	cmp	r3, r2
 80020d0:	d013      	beq.n	80020fa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80020d2:	e02c      	b.n	800212e <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80020d4:	683b      	ldr	r3, [r7, #0]
 80020d6:	68db      	ldr	r3, [r3, #12]
 80020d8:	623b      	str	r3, [r7, #32]
          break;
 80020da:	e029      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80020dc:	683b      	ldr	r3, [r7, #0]
 80020de:	68db      	ldr	r3, [r3, #12]
 80020e0:	3304      	adds	r3, #4
 80020e2:	623b      	str	r3, [r7, #32]
          break;
 80020e4:	e024      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80020e6:	683b      	ldr	r3, [r7, #0]
 80020e8:	68db      	ldr	r3, [r3, #12]
 80020ea:	3308      	adds	r3, #8
 80020ec:	623b      	str	r3, [r7, #32]
          break;
 80020ee:	e01f      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80020f0:	683b      	ldr	r3, [r7, #0]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	330c      	adds	r3, #12
 80020f6:	623b      	str	r3, [r7, #32]
          break;
 80020f8:	e01a      	b.n	8002130 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80020fa:	683b      	ldr	r3, [r7, #0]
 80020fc:	689b      	ldr	r3, [r3, #8]
 80020fe:	2b00      	cmp	r3, #0
 8002100:	d102      	bne.n	8002108 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002102:	2304      	movs	r3, #4
 8002104:	623b      	str	r3, [r7, #32]
          break;
 8002106:	e013      	b.n	8002130 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002108:	683b      	ldr	r3, [r7, #0]
 800210a:	689b      	ldr	r3, [r3, #8]
 800210c:	2b01      	cmp	r3, #1
 800210e:	d105      	bne.n	800211c <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002110:	2308      	movs	r3, #8
 8002112:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	611a      	str	r2, [r3, #16]
          break;
 800211a:	e009      	b.n	8002130 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 800211c:	2308      	movs	r3, #8
 800211e:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	69fa      	ldr	r2, [r7, #28]
 8002124:	615a      	str	r2, [r3, #20]
          break;
 8002126:	e003      	b.n	8002130 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002128:	2300      	movs	r3, #0
 800212a:	623b      	str	r3, [r7, #32]
          break;
 800212c:	e000      	b.n	8002130 <HAL_GPIO_Init+0x130>
          break;
 800212e:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002130:	69bb      	ldr	r3, [r7, #24]
 8002132:	2bff      	cmp	r3, #255	@ 0xff
 8002134:	d801      	bhi.n	800213a <HAL_GPIO_Init+0x13a>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	e001      	b.n	800213e <HAL_GPIO_Init+0x13e>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	3304      	adds	r3, #4
 800213e:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002140:	69bb      	ldr	r3, [r7, #24]
 8002142:	2bff      	cmp	r3, #255	@ 0xff
 8002144:	d802      	bhi.n	800214c <HAL_GPIO_Init+0x14c>
 8002146:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002148:	009b      	lsls	r3, r3, #2
 800214a:	e002      	b.n	8002152 <HAL_GPIO_Init+0x152>
 800214c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800214e:	3b08      	subs	r3, #8
 8002150:	009b      	lsls	r3, r3, #2
 8002152:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002154:	697b      	ldr	r3, [r7, #20]
 8002156:	681a      	ldr	r2, [r3, #0]
 8002158:	210f      	movs	r1, #15
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	fa01 f303 	lsl.w	r3, r1, r3
 8002160:	43db      	mvns	r3, r3
 8002162:	401a      	ands	r2, r3
 8002164:	6a39      	ldr	r1, [r7, #32]
 8002166:	693b      	ldr	r3, [r7, #16]
 8002168:	fa01 f303 	lsl.w	r3, r1, r3
 800216c:	431a      	orrs	r2, r3
 800216e:	697b      	ldr	r3, [r7, #20]
 8002170:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	685b      	ldr	r3, [r3, #4]
 8002176:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800217a:	2b00      	cmp	r3, #0
 800217c:	f000 80b1 	beq.w	80022e2 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002180:	4b4d      	ldr	r3, [pc, #308]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002182:	699b      	ldr	r3, [r3, #24]
 8002184:	4a4c      	ldr	r2, [pc, #304]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 8002186:	f043 0301 	orr.w	r3, r3, #1
 800218a:	6193      	str	r3, [r2, #24]
 800218c:	4b4a      	ldr	r3, [pc, #296]	@ (80022b8 <HAL_GPIO_Init+0x2b8>)
 800218e:	699b      	ldr	r3, [r3, #24]
 8002190:	f003 0301 	and.w	r3, r3, #1
 8002194:	60bb      	str	r3, [r7, #8]
 8002196:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002198:	4a48      	ldr	r2, [pc, #288]	@ (80022bc <HAL_GPIO_Init+0x2bc>)
 800219a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800219c:	089b      	lsrs	r3, r3, #2
 800219e:	3302      	adds	r3, #2
 80021a0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80021a4:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80021a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021a8:	f003 0303 	and.w	r3, r3, #3
 80021ac:	009b      	lsls	r3, r3, #2
 80021ae:	220f      	movs	r2, #15
 80021b0:	fa02 f303 	lsl.w	r3, r2, r3
 80021b4:	43db      	mvns	r3, r3
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	4013      	ands	r3, r2
 80021ba:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	4a40      	ldr	r2, [pc, #256]	@ (80022c0 <HAL_GPIO_Init+0x2c0>)
 80021c0:	4293      	cmp	r3, r2
 80021c2:	d013      	beq.n	80021ec <HAL_GPIO_Init+0x1ec>
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	4a3f      	ldr	r2, [pc, #252]	@ (80022c4 <HAL_GPIO_Init+0x2c4>)
 80021c8:	4293      	cmp	r3, r2
 80021ca:	d00d      	beq.n	80021e8 <HAL_GPIO_Init+0x1e8>
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	4a3e      	ldr	r2, [pc, #248]	@ (80022c8 <HAL_GPIO_Init+0x2c8>)
 80021d0:	4293      	cmp	r3, r2
 80021d2:	d007      	beq.n	80021e4 <HAL_GPIO_Init+0x1e4>
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	4a3d      	ldr	r2, [pc, #244]	@ (80022cc <HAL_GPIO_Init+0x2cc>)
 80021d8:	4293      	cmp	r3, r2
 80021da:	d101      	bne.n	80021e0 <HAL_GPIO_Init+0x1e0>
 80021dc:	2303      	movs	r3, #3
 80021de:	e006      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e0:	2304      	movs	r3, #4
 80021e2:	e004      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e4:	2302      	movs	r3, #2
 80021e6:	e002      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021e8:	2301      	movs	r3, #1
 80021ea:	e000      	b.n	80021ee <HAL_GPIO_Init+0x1ee>
 80021ec:	2300      	movs	r3, #0
 80021ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80021f0:	f002 0203 	and.w	r2, r2, #3
 80021f4:	0092      	lsls	r2, r2, #2
 80021f6:	4093      	lsls	r3, r2
 80021f8:	68fa      	ldr	r2, [r7, #12]
 80021fa:	4313      	orrs	r3, r2
 80021fc:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80021fe:	492f      	ldr	r1, [pc, #188]	@ (80022bc <HAL_GPIO_Init+0x2bc>)
 8002200:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002202:	089b      	lsrs	r3, r3, #2
 8002204:	3302      	adds	r3, #2
 8002206:	68fa      	ldr	r2, [r7, #12]
 8002208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	685b      	ldr	r3, [r3, #4]
 8002210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002214:	2b00      	cmp	r3, #0
 8002216:	d006      	beq.n	8002226 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002218:	4b2d      	ldr	r3, [pc, #180]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221a:	689a      	ldr	r2, [r3, #8]
 800221c:	492c      	ldr	r1, [pc, #176]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800221e:	69bb      	ldr	r3, [r7, #24]
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
 8002224:	e006      	b.n	8002234 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002226:	4b2a      	ldr	r3, [pc, #168]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002228:	689a      	ldr	r2, [r3, #8]
 800222a:	69bb      	ldr	r3, [r7, #24]
 800222c:	43db      	mvns	r3, r3
 800222e:	4928      	ldr	r1, [pc, #160]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002230:	4013      	ands	r3, r2
 8002232:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002234:	683b      	ldr	r3, [r7, #0]
 8002236:	685b      	ldr	r3, [r3, #4]
 8002238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800223c:	2b00      	cmp	r3, #0
 800223e:	d006      	beq.n	800224e <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002240:	4b23      	ldr	r3, [pc, #140]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002242:	68da      	ldr	r2, [r3, #12]
 8002244:	4922      	ldr	r1, [pc, #136]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002246:	69bb      	ldr	r3, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	60cb      	str	r3, [r1, #12]
 800224c:	e006      	b.n	800225c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 800224e:	4b20      	ldr	r3, [pc, #128]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002250:	68da      	ldr	r2, [r3, #12]
 8002252:	69bb      	ldr	r3, [r7, #24]
 8002254:	43db      	mvns	r3, r3
 8002256:	491e      	ldr	r1, [pc, #120]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002258:	4013      	ands	r3, r2
 800225a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	685b      	ldr	r3, [r3, #4]
 8002260:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002264:	2b00      	cmp	r3, #0
 8002266:	d006      	beq.n	8002276 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002268:	4b19      	ldr	r3, [pc, #100]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226a:	685a      	ldr	r2, [r3, #4]
 800226c:	4918      	ldr	r1, [pc, #96]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 800226e:	69bb      	ldr	r3, [r7, #24]
 8002270:	4313      	orrs	r3, r2
 8002272:	604b      	str	r3, [r1, #4]
 8002274:	e006      	b.n	8002284 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002276:	4b16      	ldr	r3, [pc, #88]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002278:	685a      	ldr	r2, [r3, #4]
 800227a:	69bb      	ldr	r3, [r7, #24]
 800227c:	43db      	mvns	r3, r3
 800227e:	4914      	ldr	r1, [pc, #80]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002280:	4013      	ands	r3, r2
 8002282:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800228c:	2b00      	cmp	r3, #0
 800228e:	d021      	beq.n	80022d4 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002290:	4b0f      	ldr	r3, [pc, #60]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002292:	681a      	ldr	r2, [r3, #0]
 8002294:	490e      	ldr	r1, [pc, #56]	@ (80022d0 <HAL_GPIO_Init+0x2d0>)
 8002296:	69bb      	ldr	r3, [r7, #24]
 8002298:	4313      	orrs	r3, r2
 800229a:	600b      	str	r3, [r1, #0]
 800229c:	e021      	b.n	80022e2 <HAL_GPIO_Init+0x2e2>
 800229e:	bf00      	nop
 80022a0:	10320000 	.word	0x10320000
 80022a4:	10310000 	.word	0x10310000
 80022a8:	10220000 	.word	0x10220000
 80022ac:	10210000 	.word	0x10210000
 80022b0:	10120000 	.word	0x10120000
 80022b4:	10110000 	.word	0x10110000
 80022b8:	40021000 	.word	0x40021000
 80022bc:	40010000 	.word	0x40010000
 80022c0:	40010800 	.word	0x40010800
 80022c4:	40010c00 	.word	0x40010c00
 80022c8:	40011000 	.word	0x40011000
 80022cc:	40011400 	.word	0x40011400
 80022d0:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80022d4:	4b0b      	ldr	r3, [pc, #44]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022d6:	681a      	ldr	r2, [r3, #0]
 80022d8:	69bb      	ldr	r3, [r7, #24]
 80022da:	43db      	mvns	r3, r3
 80022dc:	4909      	ldr	r1, [pc, #36]	@ (8002304 <HAL_GPIO_Init+0x304>)
 80022de:	4013      	ands	r3, r2
 80022e0:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80022e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022e4:	3301      	adds	r3, #1
 80022e6:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80022e8:	683b      	ldr	r3, [r7, #0]
 80022ea:	681a      	ldr	r2, [r3, #0]
 80022ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022ee:	fa22 f303 	lsr.w	r3, r2, r3
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f47f ae8e 	bne.w	8002014 <HAL_GPIO_Init+0x14>
  }
}
 80022f8:	bf00      	nop
 80022fa:	bf00      	nop
 80022fc:	372c      	adds	r7, #44	@ 0x2c
 80022fe:	46bd      	mov	sp, r7
 8002300:	bc80      	pop	{r7}
 8002302:	4770      	bx	lr
 8002304:	40010400 	.word	0x40010400

08002308 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002308:	b480      	push	{r7}
 800230a:	b085      	sub	sp, #20
 800230c:	af00      	add	r7, sp, #0
 800230e:	6078      	str	r0, [r7, #4]
 8002310:	460b      	mov	r3, r1
 8002312:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	689a      	ldr	r2, [r3, #8]
 8002318:	887b      	ldrh	r3, [r7, #2]
 800231a:	4013      	ands	r3, r2
 800231c:	2b00      	cmp	r3, #0
 800231e:	d002      	beq.n	8002326 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002320:	2301      	movs	r3, #1
 8002322:	73fb      	strb	r3, [r7, #15]
 8002324:	e001      	b.n	800232a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002326:	2300      	movs	r3, #0
 8002328:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800232a:	7bfb      	ldrb	r3, [r7, #15]
}
 800232c:	4618      	mov	r0, r3
 800232e:	3714      	adds	r7, #20
 8002330:	46bd      	mov	sp, r7
 8002332:	bc80      	pop	{r7}
 8002334:	4770      	bx	lr

08002336 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002336:	b480      	push	{r7}
 8002338:	b083      	sub	sp, #12
 800233a:	af00      	add	r7, sp, #0
 800233c:	6078      	str	r0, [r7, #4]
 800233e:	460b      	mov	r3, r1
 8002340:	807b      	strh	r3, [r7, #2]
 8002342:	4613      	mov	r3, r2
 8002344:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002346:	787b      	ldrb	r3, [r7, #1]
 8002348:	2b00      	cmp	r3, #0
 800234a:	d003      	beq.n	8002354 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800234c:	887a      	ldrh	r2, [r7, #2]
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002352:	e003      	b.n	800235c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002354:	887b      	ldrh	r3, [r7, #2]
 8002356:	041a      	lsls	r2, r3, #16
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	611a      	str	r2, [r3, #16]
}
 800235c:	bf00      	nop
 800235e:	370c      	adds	r7, #12
 8002360:	46bd      	mov	sp, r7
 8002362:	bc80      	pop	{r7}
 8002364:	4770      	bx	lr
	...

08002368 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002368:	b480      	push	{r7}
 800236a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 800236c:	4b03      	ldr	r3, [pc, #12]	@ (800237c <HAL_PWR_EnableBkUpAccess+0x14>)
 800236e:	2201      	movs	r2, #1
 8002370:	601a      	str	r2, [r3, #0]
}
 8002372:	bf00      	nop
 8002374:	46bd      	mov	sp, r7
 8002376:	bc80      	pop	{r7}
 8002378:	4770      	bx	lr
 800237a:	bf00      	nop
 800237c:	420e0020 	.word	0x420e0020

08002380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002380:	b580      	push	{r7, lr}
 8002382:	b086      	sub	sp, #24
 8002384:	af00      	add	r7, sp, #0
 8002386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	2b00      	cmp	r3, #0
 800238c:	d101      	bne.n	8002392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800238e:	2301      	movs	r3, #1
 8002390:	e272      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f003 0301 	and.w	r3, r3, #1
 800239a:	2b00      	cmp	r3, #0
 800239c:	f000 8087 	beq.w	80024ae <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80023a0:	4b92      	ldr	r3, [pc, #584]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 030c 	and.w	r3, r3, #12
 80023a8:	2b04      	cmp	r3, #4
 80023aa:	d00c      	beq.n	80023c6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80023ac:	4b8f      	ldr	r3, [pc, #572]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ae:	685b      	ldr	r3, [r3, #4]
 80023b0:	f003 030c 	and.w	r3, r3, #12
 80023b4:	2b08      	cmp	r3, #8
 80023b6:	d112      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
 80023b8:	4b8c      	ldr	r3, [pc, #560]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023c0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023c4:	d10b      	bne.n	80023de <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023c6:	4b89      	ldr	r3, [pc, #548]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d06c      	beq.n	80024ac <HAL_RCC_OscConfig+0x12c>
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	685b      	ldr	r3, [r3, #4]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d168      	bne.n	80024ac <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80023da:	2301      	movs	r3, #1
 80023dc:	e24c      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80023de:	687b      	ldr	r3, [r7, #4]
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023e6:	d106      	bne.n	80023f6 <HAL_RCC_OscConfig+0x76>
 80023e8:	4b80      	ldr	r3, [pc, #512]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	4a7f      	ldr	r2, [pc, #508]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80023ee:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e02e      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	685b      	ldr	r3, [r3, #4]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10c      	bne.n	8002418 <HAL_RCC_OscConfig+0x98>
 80023fe:	4b7b      	ldr	r3, [pc, #492]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	4a7a      	ldr	r2, [pc, #488]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002404:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002408:	6013      	str	r3, [r2, #0]
 800240a:	4b78      	ldr	r3, [pc, #480]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4a77      	ldr	r2, [pc, #476]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002410:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002414:	6013      	str	r3, [r2, #0]
 8002416:	e01d      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	685b      	ldr	r3, [r3, #4]
 800241c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002420:	d10c      	bne.n	800243c <HAL_RCC_OscConfig+0xbc>
 8002422:	4b72      	ldr	r3, [pc, #456]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	4a71      	ldr	r2, [pc, #452]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002428:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800242c:	6013      	str	r3, [r2, #0]
 800242e:	4b6f      	ldr	r3, [pc, #444]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	4a6e      	ldr	r2, [pc, #440]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002434:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002438:	6013      	str	r3, [r2, #0]
 800243a:	e00b      	b.n	8002454 <HAL_RCC_OscConfig+0xd4>
 800243c:	4b6b      	ldr	r3, [pc, #428]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a6a      	ldr	r2, [pc, #424]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002442:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002446:	6013      	str	r3, [r2, #0]
 8002448:	4b68      	ldr	r3, [pc, #416]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	4a67      	ldr	r2, [pc, #412]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 800244e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002452:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d013      	beq.n	8002484 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fc06 	bl	8001c6c <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002464:	f7ff fc02 	bl	8001c6c <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b64      	cmp	r3, #100	@ 0x64
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e200      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002476:	4b5d      	ldr	r3, [pc, #372]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d0f0      	beq.n	8002464 <HAL_RCC_OscConfig+0xe4>
 8002482:	e014      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002484:	f7ff fbf2 	bl	8001c6c <HAL_GetTick>
 8002488:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800248a:	e008      	b.n	800249e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800248c:	f7ff fbee 	bl	8001c6c <HAL_GetTick>
 8002490:	4602      	mov	r2, r0
 8002492:	693b      	ldr	r3, [r7, #16]
 8002494:	1ad3      	subs	r3, r2, r3
 8002496:	2b64      	cmp	r3, #100	@ 0x64
 8002498:	d901      	bls.n	800249e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800249a:	2303      	movs	r3, #3
 800249c:	e1ec      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800249e:	4b53      	ldr	r3, [pc, #332]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024a6:	2b00      	cmp	r3, #0
 80024a8:	d1f0      	bne.n	800248c <HAL_RCC_OscConfig+0x10c>
 80024aa:	e000      	b.n	80024ae <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80024ac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	f003 0302 	and.w	r3, r3, #2
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d063      	beq.n	8002582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80024ba:	4b4c      	ldr	r3, [pc, #304]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024bc:	685b      	ldr	r3, [r3, #4]
 80024be:	f003 030c 	and.w	r3, r3, #12
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d00b      	beq.n	80024de <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80024c6:	4b49      	ldr	r3, [pc, #292]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024c8:	685b      	ldr	r3, [r3, #4]
 80024ca:	f003 030c 	and.w	r3, r3, #12
 80024ce:	2b08      	cmp	r3, #8
 80024d0:	d11c      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
 80024d2:	4b46      	ldr	r3, [pc, #280]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024d4:	685b      	ldr	r3, [r3, #4]
 80024d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d116      	bne.n	800250c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80024de:	4b43      	ldr	r3, [pc, #268]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	f003 0302 	and.w	r3, r3, #2
 80024e6:	2b00      	cmp	r3, #0
 80024e8:	d005      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
 80024ea:	687b      	ldr	r3, [r7, #4]
 80024ec:	691b      	ldr	r3, [r3, #16]
 80024ee:	2b01      	cmp	r3, #1
 80024f0:	d001      	beq.n	80024f6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e1c0      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80024f6:	4b3d      	ldr	r3, [pc, #244]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	695b      	ldr	r3, [r3, #20]
 8002502:	00db      	lsls	r3, r3, #3
 8002504:	4939      	ldr	r1, [pc, #228]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002506:	4313      	orrs	r3, r2
 8002508:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800250a:	e03a      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	691b      	ldr	r3, [r3, #16]
 8002510:	2b00      	cmp	r3, #0
 8002512:	d020      	beq.n	8002556 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002514:	4b36      	ldr	r3, [pc, #216]	@ (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002516:	2201      	movs	r2, #1
 8002518:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251a:	f7ff fba7 	bl	8001c6c <HAL_GetTick>
 800251e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002520:	e008      	b.n	8002534 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002522:	f7ff fba3 	bl	8001c6c <HAL_GetTick>
 8002526:	4602      	mov	r2, r0
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	1ad3      	subs	r3, r2, r3
 800252c:	2b02      	cmp	r3, #2
 800252e:	d901      	bls.n	8002534 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002530:	2303      	movs	r3, #3
 8002532:	e1a1      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002534:	4b2d      	ldr	r3, [pc, #180]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0302 	and.w	r3, r3, #2
 800253c:	2b00      	cmp	r3, #0
 800253e:	d0f0      	beq.n	8002522 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002540:	4b2a      	ldr	r3, [pc, #168]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	695b      	ldr	r3, [r3, #20]
 800254c:	00db      	lsls	r3, r3, #3
 800254e:	4927      	ldr	r1, [pc, #156]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002550:	4313      	orrs	r3, r2
 8002552:	600b      	str	r3, [r1, #0]
 8002554:	e015      	b.n	8002582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002556:	4b26      	ldr	r3, [pc, #152]	@ (80025f0 <HAL_RCC_OscConfig+0x270>)
 8002558:	2200      	movs	r2, #0
 800255a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800255c:	f7ff fb86 	bl	8001c6c <HAL_GetTick>
 8002560:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002562:	e008      	b.n	8002576 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002564:	f7ff fb82 	bl	8001c6c <HAL_GetTick>
 8002568:	4602      	mov	r2, r0
 800256a:	693b      	ldr	r3, [r7, #16]
 800256c:	1ad3      	subs	r3, r2, r3
 800256e:	2b02      	cmp	r3, #2
 8002570:	d901      	bls.n	8002576 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002572:	2303      	movs	r3, #3
 8002574:	e180      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002576:	4b1d      	ldr	r3, [pc, #116]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f003 0302 	and.w	r3, r3, #2
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1f0      	bne.n	8002564 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0308 	and.w	r3, r3, #8
 800258a:	2b00      	cmp	r3, #0
 800258c:	d03a      	beq.n	8002604 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	699b      	ldr	r3, [r3, #24]
 8002592:	2b00      	cmp	r3, #0
 8002594:	d019      	beq.n	80025ca <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002596:	4b17      	ldr	r3, [pc, #92]	@ (80025f4 <HAL_RCC_OscConfig+0x274>)
 8002598:	2201      	movs	r2, #1
 800259a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800259c:	f7ff fb66 	bl	8001c6c <HAL_GetTick>
 80025a0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025a2:	e008      	b.n	80025b6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025a4:	f7ff fb62 	bl	8001c6c <HAL_GetTick>
 80025a8:	4602      	mov	r2, r0
 80025aa:	693b      	ldr	r3, [r7, #16]
 80025ac:	1ad3      	subs	r3, r2, r3
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d901      	bls.n	80025b6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80025b2:	2303      	movs	r3, #3
 80025b4:	e160      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025b6:	4b0d      	ldr	r3, [pc, #52]	@ (80025ec <HAL_RCC_OscConfig+0x26c>)
 80025b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ba:	f003 0302 	and.w	r3, r3, #2
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d0f0      	beq.n	80025a4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80025c2:	2001      	movs	r0, #1
 80025c4:	f000 face 	bl	8002b64 <RCC_Delay>
 80025c8:	e01c      	b.n	8002604 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80025ca:	4b0a      	ldr	r3, [pc, #40]	@ (80025f4 <HAL_RCC_OscConfig+0x274>)
 80025cc:	2200      	movs	r2, #0
 80025ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025d0:	f7ff fb4c 	bl	8001c6c <HAL_GetTick>
 80025d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025d6:	e00f      	b.n	80025f8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025d8:	f7ff fb48 	bl	8001c6c <HAL_GetTick>
 80025dc:	4602      	mov	r2, r0
 80025de:	693b      	ldr	r3, [r7, #16]
 80025e0:	1ad3      	subs	r3, r2, r3
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d908      	bls.n	80025f8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80025e6:	2303      	movs	r3, #3
 80025e8:	e146      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
 80025ea:	bf00      	nop
 80025ec:	40021000 	.word	0x40021000
 80025f0:	42420000 	.word	0x42420000
 80025f4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80025f8:	4b92      	ldr	r3, [pc, #584]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80025fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	2b00      	cmp	r3, #0
 8002602:	d1e9      	bne.n	80025d8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	f003 0304 	and.w	r3, r3, #4
 800260c:	2b00      	cmp	r3, #0
 800260e:	f000 80a6 	beq.w	800275e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002612:	2300      	movs	r3, #0
 8002614:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002616:	4b8b      	ldr	r3, [pc, #556]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002618:	69db      	ldr	r3, [r3, #28]
 800261a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261e:	2b00      	cmp	r3, #0
 8002620:	d10d      	bne.n	800263e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002622:	4b88      	ldr	r3, [pc, #544]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	4a87      	ldr	r2, [pc, #540]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002628:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800262c:	61d3      	str	r3, [r2, #28]
 800262e:	4b85      	ldr	r3, [pc, #532]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002630:	69db      	ldr	r3, [r3, #28]
 8002632:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002636:	60bb      	str	r3, [r7, #8]
 8002638:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800263a:	2301      	movs	r3, #1
 800263c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800263e:	4b82      	ldr	r3, [pc, #520]	@ (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002646:	2b00      	cmp	r3, #0
 8002648:	d118      	bne.n	800267c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800264a:	4b7f      	ldr	r3, [pc, #508]	@ (8002848 <HAL_RCC_OscConfig+0x4c8>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	4a7e      	ldr	r2, [pc, #504]	@ (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002650:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002654:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002656:	f7ff fb09 	bl	8001c6c <HAL_GetTick>
 800265a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800265c:	e008      	b.n	8002670 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800265e:	f7ff fb05 	bl	8001c6c <HAL_GetTick>
 8002662:	4602      	mov	r2, r0
 8002664:	693b      	ldr	r3, [r7, #16]
 8002666:	1ad3      	subs	r3, r2, r3
 8002668:	2b64      	cmp	r3, #100	@ 0x64
 800266a:	d901      	bls.n	8002670 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800266c:	2303      	movs	r3, #3
 800266e:	e103      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002670:	4b75      	ldr	r3, [pc, #468]	@ (8002848 <HAL_RCC_OscConfig+0x4c8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002678:	2b00      	cmp	r3, #0
 800267a:	d0f0      	beq.n	800265e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	2b01      	cmp	r3, #1
 8002682:	d106      	bne.n	8002692 <HAL_RCC_OscConfig+0x312>
 8002684:	4b6f      	ldr	r3, [pc, #444]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002686:	6a1b      	ldr	r3, [r3, #32]
 8002688:	4a6e      	ldr	r2, [pc, #440]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800268a:	f043 0301 	orr.w	r3, r3, #1
 800268e:	6213      	str	r3, [r2, #32]
 8002690:	e02d      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	68db      	ldr	r3, [r3, #12]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d10c      	bne.n	80026b4 <HAL_RCC_OscConfig+0x334>
 800269a:	4b6a      	ldr	r3, [pc, #424]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800269c:	6a1b      	ldr	r3, [r3, #32]
 800269e:	4a69      	ldr	r2, [pc, #420]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026a0:	f023 0301 	bic.w	r3, r3, #1
 80026a4:	6213      	str	r3, [r2, #32]
 80026a6:	4b67      	ldr	r3, [pc, #412]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026a8:	6a1b      	ldr	r3, [r3, #32]
 80026aa:	4a66      	ldr	r2, [pc, #408]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ac:	f023 0304 	bic.w	r3, r3, #4
 80026b0:	6213      	str	r3, [r2, #32]
 80026b2:	e01c      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	68db      	ldr	r3, [r3, #12]
 80026b8:	2b05      	cmp	r3, #5
 80026ba:	d10c      	bne.n	80026d6 <HAL_RCC_OscConfig+0x356>
 80026bc:	4b61      	ldr	r3, [pc, #388]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026be:	6a1b      	ldr	r3, [r3, #32]
 80026c0:	4a60      	ldr	r2, [pc, #384]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026c2:	f043 0304 	orr.w	r3, r3, #4
 80026c6:	6213      	str	r3, [r2, #32]
 80026c8:	4b5e      	ldr	r3, [pc, #376]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ca:	6a1b      	ldr	r3, [r3, #32]
 80026cc:	4a5d      	ldr	r2, [pc, #372]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026ce:	f043 0301 	orr.w	r3, r3, #1
 80026d2:	6213      	str	r3, [r2, #32]
 80026d4:	e00b      	b.n	80026ee <HAL_RCC_OscConfig+0x36e>
 80026d6:	4b5b      	ldr	r3, [pc, #364]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	6a1b      	ldr	r3, [r3, #32]
 80026da:	4a5a      	ldr	r2, [pc, #360]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026dc:	f023 0301 	bic.w	r3, r3, #1
 80026e0:	6213      	str	r3, [r2, #32]
 80026e2:	4b58      	ldr	r3, [pc, #352]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	6a1b      	ldr	r3, [r3, #32]
 80026e6:	4a57      	ldr	r2, [pc, #348]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f023 0304 	bic.w	r3, r3, #4
 80026ec:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d015      	beq.n	8002722 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80026f6:	f7ff fab9 	bl	8001c6c <HAL_GetTick>
 80026fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026fc:	e00a      	b.n	8002714 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026fe:	f7ff fab5 	bl	8001c6c <HAL_GetTick>
 8002702:	4602      	mov	r2, r0
 8002704:	693b      	ldr	r3, [r7, #16]
 8002706:	1ad3      	subs	r3, r2, r3
 8002708:	f241 3288 	movw	r2, #5000	@ 0x1388
 800270c:	4293      	cmp	r3, r2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e0b1      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002714:	4b4b      	ldr	r3, [pc, #300]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002716:	6a1b      	ldr	r3, [r3, #32]
 8002718:	f003 0302 	and.w	r3, r3, #2
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0ee      	beq.n	80026fe <HAL_RCC_OscConfig+0x37e>
 8002720:	e014      	b.n	800274c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002722:	f7ff faa3 	bl	8001c6c <HAL_GetTick>
 8002726:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002728:	e00a      	b.n	8002740 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272a:	f7ff fa9f 	bl	8001c6c <HAL_GetTick>
 800272e:	4602      	mov	r2, r0
 8002730:	693b      	ldr	r3, [r7, #16]
 8002732:	1ad3      	subs	r3, r2, r3
 8002734:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002738:	4293      	cmp	r3, r2
 800273a:	d901      	bls.n	8002740 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800273c:	2303      	movs	r3, #3
 800273e:	e09b      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002740:	4b40      	ldr	r3, [pc, #256]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002742:	6a1b      	ldr	r3, [r3, #32]
 8002744:	f003 0302 	and.w	r3, r3, #2
 8002748:	2b00      	cmp	r3, #0
 800274a:	d1ee      	bne.n	800272a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b01      	cmp	r3, #1
 8002750:	d105      	bne.n	800275e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002752:	4b3c      	ldr	r3, [pc, #240]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002754:	69db      	ldr	r3, [r3, #28]
 8002756:	4a3b      	ldr	r2, [pc, #236]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 8002758:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800275c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	69db      	ldr	r3, [r3, #28]
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002768:	4b36      	ldr	r3, [pc, #216]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b08      	cmp	r3, #8
 8002772:	d061      	beq.n	8002838 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	69db      	ldr	r3, [r3, #28]
 8002778:	2b02      	cmp	r3, #2
 800277a:	d146      	bne.n	800280a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800277c:	4b33      	ldr	r3, [pc, #204]	@ (800284c <HAL_RCC_OscConfig+0x4cc>)
 800277e:	2200      	movs	r2, #0
 8002780:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002782:	f7ff fa73 	bl	8001c6c <HAL_GetTick>
 8002786:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002788:	e008      	b.n	800279c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800278a:	f7ff fa6f 	bl	8001c6c <HAL_GetTick>
 800278e:	4602      	mov	r2, r0
 8002790:	693b      	ldr	r3, [r7, #16]
 8002792:	1ad3      	subs	r3, r2, r3
 8002794:	2b02      	cmp	r3, #2
 8002796:	d901      	bls.n	800279c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002798:	2303      	movs	r3, #3
 800279a:	e06d      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800279c:	4b29      	ldr	r3, [pc, #164]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800279e:	681b      	ldr	r3, [r3, #0]
 80027a0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027a4:	2b00      	cmp	r3, #0
 80027a6:	d1f0      	bne.n	800278a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	6a1b      	ldr	r3, [r3, #32]
 80027ac:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80027b0:	d108      	bne.n	80027c4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80027b2:	4b24      	ldr	r3, [pc, #144]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027b4:	685b      	ldr	r3, [r3, #4]
 80027b6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	689b      	ldr	r3, [r3, #8]
 80027be:	4921      	ldr	r1, [pc, #132]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027c0:	4313      	orrs	r3, r2
 80027c2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80027c4:	4b1f      	ldr	r3, [pc, #124]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a19      	ldr	r1, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027d4:	430b      	orrs	r3, r1
 80027d6:	491b      	ldr	r1, [pc, #108]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80027dc:	4b1b      	ldr	r3, [pc, #108]	@ (800284c <HAL_RCC_OscConfig+0x4cc>)
 80027de:	2201      	movs	r2, #1
 80027e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027e2:	f7ff fa43 	bl	8001c6c <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027e8:	e008      	b.n	80027fc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027ea:	f7ff fa3f 	bl	8001c6c <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	2b02      	cmp	r3, #2
 80027f6:	d901      	bls.n	80027fc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80027f8:	2303      	movs	r3, #3
 80027fa:	e03d      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80027fc:	4b11      	ldr	r3, [pc, #68]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d0f0      	beq.n	80027ea <HAL_RCC_OscConfig+0x46a>
 8002808:	e035      	b.n	8002876 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800280a:	4b10      	ldr	r3, [pc, #64]	@ (800284c <HAL_RCC_OscConfig+0x4cc>)
 800280c:	2200      	movs	r2, #0
 800280e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002810:	f7ff fa2c 	bl	8001c6c <HAL_GetTick>
 8002814:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002816:	e008      	b.n	800282a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002818:	f7ff fa28 	bl	8001c6c <HAL_GetTick>
 800281c:	4602      	mov	r2, r0
 800281e:	693b      	ldr	r3, [r7, #16]
 8002820:	1ad3      	subs	r3, r2, r3
 8002822:	2b02      	cmp	r3, #2
 8002824:	d901      	bls.n	800282a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002826:	2303      	movs	r3, #3
 8002828:	e026      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_RCC_OscConfig+0x4c4>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d1f0      	bne.n	8002818 <HAL_RCC_OscConfig+0x498>
 8002836:	e01e      	b.n	8002876 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	69db      	ldr	r3, [r3, #28]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d107      	bne.n	8002850 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002840:	2301      	movs	r3, #1
 8002842:	e019      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
 8002844:	40021000 	.word	0x40021000
 8002848:	40007000 	.word	0x40007000
 800284c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002850:	4b0b      	ldr	r3, [pc, #44]	@ (8002880 <HAL_RCC_OscConfig+0x500>)
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	6a1b      	ldr	r3, [r3, #32]
 8002860:	429a      	cmp	r2, r3
 8002862:	d106      	bne.n	8002872 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800286e:	429a      	cmp	r2, r3
 8002870:	d001      	beq.n	8002876 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002872:	2301      	movs	r3, #1
 8002874:	e000      	b.n	8002878 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}
 8002880:	40021000 	.word	0x40021000

08002884 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b084      	sub	sp, #16
 8002888:	af00      	add	r7, sp, #0
 800288a:	6078      	str	r0, [r7, #4]
 800288c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	2b00      	cmp	r3, #0
 8002892:	d101      	bne.n	8002898 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002894:	2301      	movs	r3, #1
 8002896:	e0d0      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002898:	4b6a      	ldr	r3, [pc, #424]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 800289a:	681b      	ldr	r3, [r3, #0]
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	683a      	ldr	r2, [r7, #0]
 80028a2:	429a      	cmp	r2, r3
 80028a4:	d910      	bls.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80028a6:	4b67      	ldr	r3, [pc, #412]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f023 0207 	bic.w	r2, r3, #7
 80028ae:	4965      	ldr	r1, [pc, #404]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	4313      	orrs	r3, r2
 80028b4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80028b6:	4b63      	ldr	r3, [pc, #396]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80028b8:	681b      	ldr	r3, [r3, #0]
 80028ba:	f003 0307 	and.w	r3, r3, #7
 80028be:	683a      	ldr	r2, [r7, #0]
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d001      	beq.n	80028c8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80028c4:	2301      	movs	r3, #1
 80028c6:	e0b8      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	f003 0302 	and.w	r3, r3, #2
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d020      	beq.n	8002916 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	f003 0304 	and.w	r3, r3, #4
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d005      	beq.n	80028ec <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80028e0:	4b59      	ldr	r3, [pc, #356]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	4a58      	ldr	r2, [pc, #352]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028e6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80028ea:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	f003 0308 	and.w	r3, r3, #8
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d005      	beq.n	8002904 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80028f8:	4b53      	ldr	r3, [pc, #332]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fa:	685b      	ldr	r3, [r3, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80028fe:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002902:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002904:	4b50      	ldr	r3, [pc, #320]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	494d      	ldr	r1, [pc, #308]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002912:	4313      	orrs	r3, r2
 8002914:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d040      	beq.n	80029a4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	685b      	ldr	r3, [r3, #4]
 8002926:	2b01      	cmp	r3, #1
 8002928:	d107      	bne.n	800293a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800292a:	4b47      	ldr	r3, [pc, #284]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002932:	2b00      	cmp	r3, #0
 8002934:	d115      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e07f      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	685b      	ldr	r3, [r3, #4]
 800293e:	2b02      	cmp	r3, #2
 8002940:	d107      	bne.n	8002952 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002942:	4b41      	ldr	r3, [pc, #260]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800294a:	2b00      	cmp	r3, #0
 800294c:	d109      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	e073      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002952:	4b3d      	ldr	r3, [pc, #244]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f003 0302 	and.w	r3, r3, #2
 800295a:	2b00      	cmp	r3, #0
 800295c:	d101      	bne.n	8002962 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800295e:	2301      	movs	r3, #1
 8002960:	e06b      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002962:	4b39      	ldr	r3, [pc, #228]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	f023 0203 	bic.w	r2, r3, #3
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	685b      	ldr	r3, [r3, #4]
 800296e:	4936      	ldr	r1, [pc, #216]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002970:	4313      	orrs	r3, r2
 8002972:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002974:	f7ff f97a 	bl	8001c6c <HAL_GetTick>
 8002978:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800297a:	e00a      	b.n	8002992 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800297c:	f7ff f976 	bl	8001c6c <HAL_GetTick>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	1ad3      	subs	r3, r2, r3
 8002986:	f241 3288 	movw	r2, #5000	@ 0x1388
 800298a:	4293      	cmp	r3, r2
 800298c:	d901      	bls.n	8002992 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800298e:	2303      	movs	r3, #3
 8002990:	e053      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002992:	4b2d      	ldr	r3, [pc, #180]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002994:	685b      	ldr	r3, [r3, #4]
 8002996:	f003 020c 	and.w	r2, r3, #12
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	685b      	ldr	r3, [r3, #4]
 800299e:	009b      	lsls	r3, r3, #2
 80029a0:	429a      	cmp	r2, r3
 80029a2:	d1eb      	bne.n	800297c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80029a4:	4b27      	ldr	r3, [pc, #156]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	f003 0307 	and.w	r3, r3, #7
 80029ac:	683a      	ldr	r2, [r7, #0]
 80029ae:	429a      	cmp	r2, r3
 80029b0:	d210      	bcs.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80029b2:	4b24      	ldr	r3, [pc, #144]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f023 0207 	bic.w	r2, r3, #7
 80029ba:	4922      	ldr	r1, [pc, #136]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	4313      	orrs	r3, r2
 80029c0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80029c2:	4b20      	ldr	r3, [pc, #128]	@ (8002a44 <HAL_RCC_ClockConfig+0x1c0>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	f003 0307 	and.w	r3, r3, #7
 80029ca:	683a      	ldr	r2, [r7, #0]
 80029cc:	429a      	cmp	r2, r3
 80029ce:	d001      	beq.n	80029d4 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80029d0:	2301      	movs	r3, #1
 80029d2:	e032      	b.n	8002a3a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	f003 0304 	and.w	r3, r3, #4
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d008      	beq.n	80029f2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80029e0:	4b19      	ldr	r3, [pc, #100]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68db      	ldr	r3, [r3, #12]
 80029ec:	4916      	ldr	r1, [pc, #88]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 80029ee:	4313      	orrs	r3, r2
 80029f0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f003 0308 	and.w	r3, r3, #8
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d009      	beq.n	8002a12 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	691b      	ldr	r3, [r3, #16]
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	490e      	ldr	r1, [pc, #56]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a0e:	4313      	orrs	r3, r2
 8002a10:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a12:	f000 f821 	bl	8002a58 <HAL_RCC_GetSysClockFreq>
 8002a16:	4602      	mov	r2, r0
 8002a18:	4b0b      	ldr	r3, [pc, #44]	@ (8002a48 <HAL_RCC_ClockConfig+0x1c4>)
 8002a1a:	685b      	ldr	r3, [r3, #4]
 8002a1c:	091b      	lsrs	r3, r3, #4
 8002a1e:	f003 030f 	and.w	r3, r3, #15
 8002a22:	490a      	ldr	r1, [pc, #40]	@ (8002a4c <HAL_RCC_ClockConfig+0x1c8>)
 8002a24:	5ccb      	ldrb	r3, [r1, r3]
 8002a26:	fa22 f303 	lsr.w	r3, r2, r3
 8002a2a:	4a09      	ldr	r2, [pc, #36]	@ (8002a50 <HAL_RCC_ClockConfig+0x1cc>)
 8002a2c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002a2e:	4b09      	ldr	r3, [pc, #36]	@ (8002a54 <HAL_RCC_ClockConfig+0x1d0>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f7ff f8ea 	bl	8001c0c <HAL_InitTick>

  return HAL_OK;
 8002a38:	2300      	movs	r3, #0
}
 8002a3a:	4618      	mov	r0, r3
 8002a3c:	3710      	adds	r7, #16
 8002a3e:	46bd      	mov	sp, r7
 8002a40:	bd80      	pop	{r7, pc}
 8002a42:	bf00      	nop
 8002a44:	40022000 	.word	0x40022000
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	0800b244 	.word	0x0800b244
 8002a50:	20000000 	.word	0x20000000
 8002a54:	20000004 	.word	0x20000004

08002a58 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a58:	b480      	push	{r7}
 8002a5a:	b087      	sub	sp, #28
 8002a5c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002a5e:	2300      	movs	r3, #0
 8002a60:	60fb      	str	r3, [r7, #12]
 8002a62:	2300      	movs	r3, #0
 8002a64:	60bb      	str	r3, [r7, #8]
 8002a66:	2300      	movs	r3, #0
 8002a68:	617b      	str	r3, [r7, #20]
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002a6e:	2300      	movs	r3, #0
 8002a70:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002a72:	4b1e      	ldr	r3, [pc, #120]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x94>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f003 030c 	and.w	r3, r3, #12
 8002a7e:	2b04      	cmp	r3, #4
 8002a80:	d002      	beq.n	8002a88 <HAL_RCC_GetSysClockFreq+0x30>
 8002a82:	2b08      	cmp	r3, #8
 8002a84:	d003      	beq.n	8002a8e <HAL_RCC_GetSysClockFreq+0x36>
 8002a86:	e027      	b.n	8002ad8 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002a88:	4b19      	ldr	r3, [pc, #100]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002a8a:	613b      	str	r3, [r7, #16]
      break;
 8002a8c:	e027      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	0c9b      	lsrs	r3, r3, #18
 8002a92:	f003 030f 	and.w	r3, r3, #15
 8002a96:	4a17      	ldr	r2, [pc, #92]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002a98:	5cd3      	ldrb	r3, [r2, r3]
 8002a9a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d010      	beq.n	8002ac8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002aa6:	4b11      	ldr	r3, [pc, #68]	@ (8002aec <HAL_RCC_GetSysClockFreq+0x94>)
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	0c5b      	lsrs	r3, r3, #17
 8002aac:	f003 0301 	and.w	r3, r3, #1
 8002ab0:	4a11      	ldr	r2, [pc, #68]	@ (8002af8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002ab2:	5cd3      	ldrb	r3, [r2, r3]
 8002ab4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	4a0d      	ldr	r2, [pc, #52]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002aba:	fb03 f202 	mul.w	r2, r3, r2
 8002abe:	68bb      	ldr	r3, [r7, #8]
 8002ac0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ac4:	617b      	str	r3, [r7, #20]
 8002ac6:	e004      	b.n	8002ad2 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	4a0c      	ldr	r2, [pc, #48]	@ (8002afc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002acc:	fb02 f303 	mul.w	r3, r2, r3
 8002ad0:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002ad2:	697b      	ldr	r3, [r7, #20]
 8002ad4:	613b      	str	r3, [r7, #16]
      break;
 8002ad6:	e002      	b.n	8002ade <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002ada:	613b      	str	r3, [r7, #16]
      break;
 8002adc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ade:	693b      	ldr	r3, [r7, #16]
}
 8002ae0:	4618      	mov	r0, r3
 8002ae2:	371c      	adds	r7, #28
 8002ae4:	46bd      	mov	sp, r7
 8002ae6:	bc80      	pop	{r7}
 8002ae8:	4770      	bx	lr
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	007a1200 	.word	0x007a1200
 8002af4:	0800b25c 	.word	0x0800b25c
 8002af8:	0800b26c 	.word	0x0800b26c
 8002afc:	003d0900 	.word	0x003d0900

08002b00 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b04:	4b02      	ldr	r3, [pc, #8]	@ (8002b10 <HAL_RCC_GetHCLKFreq+0x10>)
 8002b06:	681b      	ldr	r3, [r3, #0]
}
 8002b08:	4618      	mov	r0, r3
 8002b0a:	46bd      	mov	sp, r7
 8002b0c:	bc80      	pop	{r7}
 8002b0e:	4770      	bx	lr
 8002b10:	20000000 	.word	0x20000000

08002b14 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002b18:	f7ff fff2 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	0a1b      	lsrs	r3, r3, #8
 8002b24:	f003 0307 	and.w	r3, r3, #7
 8002b28:	4903      	ldr	r1, [pc, #12]	@ (8002b38 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b2a:	5ccb      	ldrb	r3, [r1, r3]
 8002b2c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b30:	4618      	mov	r0, r3
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40021000 	.word	0x40021000
 8002b38:	0800b254 	.word	0x0800b254

08002b3c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002b40:	f7ff ffde 	bl	8002b00 <HAL_RCC_GetHCLKFreq>
 8002b44:	4602      	mov	r2, r0
 8002b46:	4b05      	ldr	r3, [pc, #20]	@ (8002b5c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b48:	685b      	ldr	r3, [r3, #4]
 8002b4a:	0adb      	lsrs	r3, r3, #11
 8002b4c:	f003 0307 	and.w	r3, r3, #7
 8002b50:	4903      	ldr	r1, [pc, #12]	@ (8002b60 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b52:	5ccb      	ldrb	r3, [r1, r3]
 8002b54:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b58:	4618      	mov	r0, r3
 8002b5a:	bd80      	pop	{r7, pc}
 8002b5c:	40021000 	.word	0x40021000
 8002b60:	0800b254 	.word	0x0800b254

08002b64 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002b64:	b480      	push	{r7}
 8002b66:	b085      	sub	sp, #20
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8002b98 <RCC_Delay+0x34>)
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	4a0a      	ldr	r2, [pc, #40]	@ (8002b9c <RCC_Delay+0x38>)
 8002b72:	fba2 2303 	umull	r2, r3, r2, r3
 8002b76:	0a5b      	lsrs	r3, r3, #9
 8002b78:	687a      	ldr	r2, [r7, #4]
 8002b7a:	fb02 f303 	mul.w	r3, r2, r3
 8002b7e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002b80:	bf00      	nop
  }
  while (Delay --);
 8002b82:	68fb      	ldr	r3, [r7, #12]
 8002b84:	1e5a      	subs	r2, r3, #1
 8002b86:	60fa      	str	r2, [r7, #12]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d1f9      	bne.n	8002b80 <RCC_Delay+0x1c>
}
 8002b8c:	bf00      	nop
 8002b8e:	bf00      	nop
 8002b90:	3714      	adds	r7, #20
 8002b92:	46bd      	mov	sp, r7
 8002b94:	bc80      	pop	{r7}
 8002b96:	4770      	bx	lr
 8002b98:	20000000 	.word	0x20000000
 8002b9c:	10624dd3 	.word	0x10624dd3

08002ba0 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]
 8002bac:	2300      	movs	r3, #0
 8002bae:	61fb      	str	r3, [r7, #28]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	2b10      	cmp	r3, #16
 8002bc0:	d00a      	beq.n	8002bd8 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	2b10      	cmp	r3, #16
 8002bc6:	f200 808a 	bhi.w	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2b01      	cmp	r3, #1
 8002bce:	d045      	beq.n	8002c5c <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	2b02      	cmp	r3, #2
 8002bd4:	d075      	beq.n	8002cc2 <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002bd6:	e082      	b.n	8002cde <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002bd8:	4b46      	ldr	r3, [pc, #280]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002bda:	685b      	ldr	r3, [r3, #4]
 8002bdc:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8002bde:	4b45      	ldr	r3, [pc, #276]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d07b      	beq.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	0c9b      	lsrs	r3, r3, #18
 8002bee:	f003 030f 	and.w	r3, r3, #15
 8002bf2:	4a41      	ldr	r2, [pc, #260]	@ (8002cf8 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002bf4:	5cd3      	ldrb	r3, [r2, r3]
 8002bf6:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d015      	beq.n	8002c2e <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002c02:	4b3c      	ldr	r3, [pc, #240]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c04:	685b      	ldr	r3, [r3, #4]
 8002c06:	0c5b      	lsrs	r3, r3, #17
 8002c08:	f003 0301 	and.w	r3, r3, #1
 8002c0c:	4a3b      	ldr	r2, [pc, #236]	@ (8002cfc <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 8002c0e:	5cd3      	ldrb	r3, [r2, r3]
 8002c10:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002c18:	2b00      	cmp	r3, #0
 8002c1a:	d00d      	beq.n	8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002c1c:	4a38      	ldr	r2, [pc, #224]	@ (8002d00 <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	fbb2 f2f3 	udiv	r2, r2, r3
 8002c24:	693b      	ldr	r3, [r7, #16]
 8002c26:	fb02 f303 	mul.w	r3, r2, r3
 8002c2a:	61fb      	str	r3, [r7, #28]
 8002c2c:	e004      	b.n	8002c38 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002c2e:	693b      	ldr	r3, [r7, #16]
 8002c30:	4a34      	ldr	r2, [pc, #208]	@ (8002d04 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 8002c32:	fb02 f303 	mul.w	r3, r2, r3
 8002c36:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002c38:	4b2e      	ldr	r3, [pc, #184]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c40:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002c44:	d102      	bne.n	8002c4c <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002c46:	69fb      	ldr	r3, [r7, #28]
 8002c48:	61bb      	str	r3, [r7, #24]
      break;
 8002c4a:	e04a      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002c4c:	69fb      	ldr	r3, [r7, #28]
 8002c4e:	005b      	lsls	r3, r3, #1
 8002c50:	4a2d      	ldr	r2, [pc, #180]	@ (8002d08 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 8002c52:	fba2 2303 	umull	r2, r3, r2, r3
 8002c56:	085b      	lsrs	r3, r3, #1
 8002c58:	61bb      	str	r3, [r7, #24]
      break;
 8002c5a:	e042      	b.n	8002ce2 <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 8002c5c:	4b25      	ldr	r3, [pc, #148]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c5e:	6a1b      	ldr	r3, [r3, #32]
 8002c60:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c68:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c6c:	d108      	bne.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 8002c6e:	68fb      	ldr	r3, [r7, #12]
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d003      	beq.n	8002c80 <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 8002c78:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8002c7c:	61bb      	str	r3, [r7, #24]
 8002c7e:	e01f      	b.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002c86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002c8a:	d109      	bne.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 8002c8c:	4b19      	ldr	r3, [pc, #100]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002c8e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d003      	beq.n	8002ca0 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 8002c98:	f649 4340 	movw	r3, #40000	@ 0x9c40
 8002c9c:	61bb      	str	r3, [r7, #24]
 8002c9e:	e00f      	b.n	8002cc0 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002ca6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002caa:	d11c      	bne.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cac:	4b11      	ldr	r3, [pc, #68]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cae:	681b      	ldr	r3, [r3, #0]
 8002cb0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d016      	beq.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002cb8:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002cbc:	61bb      	str	r3, [r7, #24]
      break;
 8002cbe:	e012      	b.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 8002cc0:	e011      	b.n	8002ce6 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 8002cc2:	f7ff ff3b 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	0b9b      	lsrs	r3, r3, #14
 8002cce:	f003 0303 	and.w	r3, r3, #3
 8002cd2:	3301      	adds	r3, #1
 8002cd4:	005b      	lsls	r3, r3, #1
 8002cd6:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cda:	61bb      	str	r3, [r7, #24]
      break;
 8002cdc:	e004      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002cde:	bf00      	nop
 8002ce0:	e002      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ce2:	bf00      	nop
 8002ce4:	e000      	b.n	8002ce8 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002ce6:	bf00      	nop
    }
  }
  return (frequency);
 8002ce8:	69bb      	ldr	r3, [r7, #24]
}
 8002cea:	4618      	mov	r0, r3
 8002cec:	3720      	adds	r7, #32
 8002cee:	46bd      	mov	sp, r7
 8002cf0:	bd80      	pop	{r7, pc}
 8002cf2:	bf00      	nop
 8002cf4:	40021000 	.word	0x40021000
 8002cf8:	0800b270 	.word	0x0800b270
 8002cfc:	0800b280 	.word	0x0800b280
 8002d00:	007a1200 	.word	0x007a1200
 8002d04:	003d0900 	.word	0x003d0900
 8002d08:	aaaaaaab 	.word	0xaaaaaaab

08002d0c <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002d0c:	b580      	push	{r7, lr}
 8002d0e:	b084      	sub	sp, #16
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002d14:	2300      	movs	r3, #0
 8002d16:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d101      	bne.n	8002d22 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e07a      	b.n	8002e18 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	7c5b      	ldrb	r3, [r3, #17]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d105      	bne.n	8002d38 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	2200      	movs	r2, #0
 8002d30:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7fe fda6 	bl	8001884 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2202      	movs	r2, #2
 8002d3c:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 faea 	bl	8003318 <HAL_RTC_WaitForSynchro>
 8002d44:	4603      	mov	r3, r0
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d004      	beq.n	8002d54 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	2204      	movs	r2, #4
 8002d4e:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d50:	2301      	movs	r3, #1
 8002d52:	e061      	b.n	8002e18 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8002d54:	6878      	ldr	r0, [r7, #4]
 8002d56:	f000 fba3 	bl	80034a0 <RTC_EnterInitMode>
 8002d5a:	4603      	mov	r3, r0
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d004      	beq.n	8002d6a <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2204      	movs	r2, #4
 8002d64:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 8002d66:	2301      	movs	r3, #1
 8002d68:	e056      	b.n	8002e18 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	685a      	ldr	r2, [r3, #4]
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	f022 0207 	bic.w	r2, r2, #7
 8002d78:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	689b      	ldr	r3, [r3, #8]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d005      	beq.n	8002d8e <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 8002d82:	4b27      	ldr	r3, [pc, #156]	@ (8002e20 <HAL_RTC_Init+0x114>)
 8002d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d86:	4a26      	ldr	r2, [pc, #152]	@ (8002e20 <HAL_RTC_Init+0x114>)
 8002d88:	f023 0301 	bic.w	r3, r3, #1
 8002d8c:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 8002d8e:	4b24      	ldr	r3, [pc, #144]	@ (8002e20 <HAL_RTC_Init+0x114>)
 8002d90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d92:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	689b      	ldr	r3, [r3, #8]
 8002d9a:	4921      	ldr	r1, [pc, #132]	@ (8002e20 <HAL_RTC_Init+0x114>)
 8002d9c:	4313      	orrs	r3, r2
 8002d9e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002da8:	d003      	beq.n	8002db2 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	685b      	ldr	r3, [r3, #4]
 8002dae:	60fb      	str	r3, [r7, #12]
 8002db0:	e00e      	b.n	8002dd0 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8002db2:	2001      	movs	r0, #1
 8002db4:	f7ff fef4 	bl	8002ba0 <HAL_RCCEx_GetPeriphCLKFreq>
 8002db8:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d104      	bne.n	8002dca <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2204      	movs	r2, #4
 8002dc4:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002dc6:	2301      	movs	r3, #1
 8002dc8:	e026      	b.n	8002e18 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	0c1a      	lsrs	r2, r3, #16
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	f002 020f 	and.w	r2, r2, #15
 8002ddc:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68fa      	ldr	r2, [r7, #12]
 8002de4:	b292      	uxth	r2, r2
 8002de6:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002de8:	6878      	ldr	r0, [r7, #4]
 8002dea:	f000 fb81 	bl	80034f0 <RTC_ExitInitMode>
 8002dee:	4603      	mov	r3, r0
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d004      	beq.n	8002dfe <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2204      	movs	r2, #4
 8002df8:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002dfa:	2301      	movs	r3, #1
 8002dfc:	e00c      	b.n	8002e18 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	2200      	movs	r2, #0
 8002e02:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	2201      	movs	r2, #1
 8002e14:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002e16:	2300      	movs	r3, #0
  }
}
 8002e18:	4618      	mov	r0, r3
 8002e1a:	3710      	adds	r7, #16
 8002e1c:	46bd      	mov	sp, r7
 8002e1e:	bd80      	pop	{r7, pc}
 8002e20:	40006c00 	.word	0x40006c00

08002e24 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002e24:	b590      	push	{r4, r7, lr}
 8002e26:	b087      	sub	sp, #28
 8002e28:	af00      	add	r7, sp, #0
 8002e2a:	60f8      	str	r0, [r7, #12]
 8002e2c:	60b9      	str	r1, [r7, #8]
 8002e2e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002e30:	2300      	movs	r3, #0
 8002e32:	617b      	str	r3, [r7, #20]
 8002e34:	2300      	movs	r3, #0
 8002e36:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d002      	beq.n	8002e44 <HAL_RTC_SetTime+0x20>
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e080      	b.n	8002f4a <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	7c1b      	ldrb	r3, [r3, #16]
 8002e4c:	2b01      	cmp	r3, #1
 8002e4e:	d101      	bne.n	8002e54 <HAL_RTC_SetTime+0x30>
 8002e50:	2302      	movs	r3, #2
 8002e52:	e07a      	b.n	8002f4a <HAL_RTC_SetTime+0x126>
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2201      	movs	r2, #1
 8002e58:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2202      	movs	r2, #2
 8002e5e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d113      	bne.n	8002e8e <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e66:	68bb      	ldr	r3, [r7, #8]
 8002e68:	781b      	ldrb	r3, [r3, #0]
 8002e6a:	461a      	mov	r2, r3
 8002e6c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002e70:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	785b      	ldrb	r3, [r3, #1]
 8002e78:	4619      	mov	r1, r3
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	011b      	lsls	r3, r3, #4
 8002e7e:	1a5b      	subs	r3, r3, r1
 8002e80:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e82:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002e84:	68ba      	ldr	r2, [r7, #8]
 8002e86:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002e88:	4413      	add	r3, r2
 8002e8a:	617b      	str	r3, [r7, #20]
 8002e8c:	e01e      	b.n	8002ecc <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002e8e:	68bb      	ldr	r3, [r7, #8]
 8002e90:	781b      	ldrb	r3, [r3, #0]
 8002e92:	4618      	mov	r0, r3
 8002e94:	f000 fb71 	bl	800357a <RTC_Bcd2ToByte>
 8002e98:	4603      	mov	r3, r0
 8002e9a:	461a      	mov	r2, r3
 8002e9c:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002ea0:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002ea4:	68bb      	ldr	r3, [r7, #8]
 8002ea6:	785b      	ldrb	r3, [r3, #1]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f000 fb66 	bl	800357a <RTC_Bcd2ToByte>
 8002eae:	4603      	mov	r3, r0
 8002eb0:	461a      	mov	r2, r3
 8002eb2:	4613      	mov	r3, r2
 8002eb4:	011b      	lsls	r3, r3, #4
 8002eb6:	1a9b      	subs	r3, r3, r2
 8002eb8:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002eba:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	789b      	ldrb	r3, [r3, #2]
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	f000 fb5a 	bl	800357a <RTC_Bcd2ToByte>
 8002ec6:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ec8:	4423      	add	r3, r4
 8002eca:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002ecc:	6979      	ldr	r1, [r7, #20]
 8002ece:	68f8      	ldr	r0, [r7, #12]
 8002ed0:	f000 fa7f 	bl	80033d2 <RTC_WriteTimeCounter>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d007      	beq.n	8002eea <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002eda:	68fb      	ldr	r3, [r7, #12]
 8002edc:	2204      	movs	r2, #4
 8002ede:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e02f      	b.n	8002f4a <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	685a      	ldr	r2, [r3, #4]
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	f022 0205 	bic.w	r2, r2, #5
 8002ef8:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002efa:	68f8      	ldr	r0, [r7, #12]
 8002efc:	f000 fa90 	bl	8003420 <RTC_ReadAlarmCounter>
 8002f00:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f08:	d018      	beq.n	8002f3c <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002f0a:	693a      	ldr	r2, [r7, #16]
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	429a      	cmp	r2, r3
 8002f10:	d214      	bcs.n	8002f3c <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002f12:	693b      	ldr	r3, [r7, #16]
 8002f14:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002f18:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002f1c:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002f1e:	6939      	ldr	r1, [r7, #16]
 8002f20:	68f8      	ldr	r0, [r7, #12]
 8002f22:	f000 fa96 	bl	8003452 <RTC_WriteAlarmCounter>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d007      	beq.n	8002f3c <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	2204      	movs	r2, #4
 8002f30:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2200      	movs	r2, #0
 8002f36:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002f38:	2301      	movs	r3, #1
 8002f3a:	e006      	b.n	8002f4a <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	2200      	movs	r2, #0
 8002f46:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002f48:	2300      	movs	r3, #0
  }
}
 8002f4a:	4618      	mov	r0, r3
 8002f4c:	371c      	adds	r7, #28
 8002f4e:	46bd      	mov	sp, r7
 8002f50:	bd90      	pop	{r4, r7, pc}
	...

08002f54 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b088      	sub	sp, #32
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002f60:	2300      	movs	r3, #0
 8002f62:	61bb      	str	r3, [r7, #24]
 8002f64:	2300      	movs	r3, #0
 8002f66:	61fb      	str	r3, [r7, #28]
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d002      	beq.n	8002f7c <HAL_RTC_GetTime+0x28>
 8002f76:	68bb      	ldr	r3, [r7, #8]
 8002f78:	2b00      	cmp	r3, #0
 8002f7a:	d101      	bne.n	8002f80 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002f7c:	2301      	movs	r3, #1
 8002f7e:	e0b5      	b.n	80030ec <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	685b      	ldr	r3, [r3, #4]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d001      	beq.n	8002f92 <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002f8e:	2301      	movs	r3, #1
 8002f90:	e0ac      	b.n	80030ec <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002f92:	68f8      	ldr	r0, [r7, #12]
 8002f94:	f000 f9ed 	bl	8003372 <RTC_ReadTimeCounter>
 8002f98:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002f9a:	69bb      	ldr	r3, [r7, #24]
 8002f9c:	4a55      	ldr	r2, [pc, #340]	@ (80030f4 <HAL_RTC_GetTime+0x1a0>)
 8002f9e:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa2:	0adb      	lsrs	r3, r3, #11
 8002fa4:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	4b52      	ldr	r3, [pc, #328]	@ (80030f4 <HAL_RTC_GetTime+0x1a0>)
 8002faa:	fba3 1302 	umull	r1, r3, r3, r2
 8002fae:	0adb      	lsrs	r3, r3, #11
 8002fb0:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002fb4:	fb01 f303 	mul.w	r3, r1, r3
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	4a4f      	ldr	r2, [pc, #316]	@ (80030f8 <HAL_RTC_GetTime+0x1a4>)
 8002fbc:	fba2 2303 	umull	r2, r3, r2, r3
 8002fc0:	095b      	lsrs	r3, r3, #5
 8002fc2:	b2da      	uxtb	r2, r3
 8002fc4:	68bb      	ldr	r3, [r7, #8]
 8002fc6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002fc8:	69bb      	ldr	r3, [r7, #24]
 8002fca:	4a4a      	ldr	r2, [pc, #296]	@ (80030f4 <HAL_RTC_GetTime+0x1a0>)
 8002fcc:	fba2 1203 	umull	r1, r2, r2, r3
 8002fd0:	0ad2      	lsrs	r2, r2, #11
 8002fd2:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002fd6:	fb01 f202 	mul.w	r2, r1, r2
 8002fda:	1a9a      	subs	r2, r3, r2
 8002fdc:	4b46      	ldr	r3, [pc, #280]	@ (80030f8 <HAL_RTC_GetTime+0x1a4>)
 8002fde:	fba3 1302 	umull	r1, r3, r3, r2
 8002fe2:	0959      	lsrs	r1, r3, #5
 8002fe4:	460b      	mov	r3, r1
 8002fe6:	011b      	lsls	r3, r3, #4
 8002fe8:	1a5b      	subs	r3, r3, r1
 8002fea:	009b      	lsls	r3, r3, #2
 8002fec:	1ad1      	subs	r1, r2, r3
 8002fee:	b2ca      	uxtb	r2, r1
 8002ff0:	68bb      	ldr	r3, [r7, #8]
 8002ff2:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002ff4:	693b      	ldr	r3, [r7, #16]
 8002ff6:	2b17      	cmp	r3, #23
 8002ff8:	d955      	bls.n	80030a6 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4a3f      	ldr	r2, [pc, #252]	@ (80030fc <HAL_RTC_GetTime+0x1a8>)
 8002ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8003002:	091b      	lsrs	r3, r3, #4
 8003004:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8003006:	6939      	ldr	r1, [r7, #16]
 8003008:	4b3c      	ldr	r3, [pc, #240]	@ (80030fc <HAL_RTC_GetTime+0x1a8>)
 800300a:	fba3 2301 	umull	r2, r3, r3, r1
 800300e:	091a      	lsrs	r2, r3, #4
 8003010:	4613      	mov	r3, r2
 8003012:	005b      	lsls	r3, r3, #1
 8003014:	4413      	add	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	1aca      	subs	r2, r1, r3
 800301a:	b2d2      	uxtb	r2, r2
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003020:	68f8      	ldr	r0, [r7, #12]
 8003022:	f000 f9fd 	bl	8003420 <RTC_ReadAlarmCounter>
 8003026:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8003028:	69fb      	ldr	r3, [r7, #28]
 800302a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800302e:	d008      	beq.n	8003042 <HAL_RTC_GetTime+0xee>
 8003030:	69fa      	ldr	r2, [r7, #28]
 8003032:	69bb      	ldr	r3, [r7, #24]
 8003034:	429a      	cmp	r2, r3
 8003036:	d904      	bls.n	8003042 <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8003038:	69fa      	ldr	r2, [r7, #28]
 800303a:	69bb      	ldr	r3, [r7, #24]
 800303c:	1ad3      	subs	r3, r2, r3
 800303e:	61fb      	str	r3, [r7, #28]
 8003040:	e002      	b.n	8003048 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8003042:	f04f 33ff 	mov.w	r3, #4294967295
 8003046:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8003048:	697b      	ldr	r3, [r7, #20]
 800304a:	4a2d      	ldr	r2, [pc, #180]	@ (8003100 <HAL_RTC_GetTime+0x1ac>)
 800304c:	fb02 f303 	mul.w	r3, r2, r3
 8003050:	69ba      	ldr	r2, [r7, #24]
 8003052:	1ad3      	subs	r3, r2, r3
 8003054:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003056:	69b9      	ldr	r1, [r7, #24]
 8003058:	68f8      	ldr	r0, [r7, #12]
 800305a:	f000 f9ba 	bl	80033d2 <RTC_WriteTimeCounter>
 800305e:	4603      	mov	r3, r0
 8003060:	2b00      	cmp	r3, #0
 8003062:	d001      	beq.n	8003068 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8003064:	2301      	movs	r3, #1
 8003066:	e041      	b.n	80030ec <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003068:	69fb      	ldr	r3, [r7, #28]
 800306a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800306e:	d00c      	beq.n	800308a <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8003070:	69fa      	ldr	r2, [r7, #28]
 8003072:	69bb      	ldr	r3, [r7, #24]
 8003074:	4413      	add	r3, r2
 8003076:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003078:	69f9      	ldr	r1, [r7, #28]
 800307a:	68f8      	ldr	r0, [r7, #12]
 800307c:	f000 f9e9 	bl	8003452 <RTC_WriteAlarmCounter>
 8003080:	4603      	mov	r3, r0
 8003082:	2b00      	cmp	r3, #0
 8003084:	d00a      	beq.n	800309c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e030      	b.n	80030ec <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 800308a:	69f9      	ldr	r1, [r7, #28]
 800308c:	68f8      	ldr	r0, [r7, #12]
 800308e:	f000 f9e0 	bl	8003452 <RTC_WriteAlarmCounter>
 8003092:	4603      	mov	r3, r0
 8003094:	2b00      	cmp	r3, #0
 8003096:	d001      	beq.n	800309c <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003098:	2301      	movs	r3, #1
 800309a:	e027      	b.n	80030ec <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 800309c:	6979      	ldr	r1, [r7, #20]
 800309e:	68f8      	ldr	r0, [r7, #12]
 80030a0:	f000 fa88 	bl	80035b4 <RTC_DateUpdate>
 80030a4:	e003      	b.n	80030ae <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 80030a6:	693b      	ldr	r3, [r7, #16]
 80030a8:	b2da      	uxtb	r2, r3
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d01a      	beq.n	80030ea <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 80030b4:	68bb      	ldr	r3, [r7, #8]
 80030b6:	781b      	ldrb	r3, [r3, #0]
 80030b8:	4618      	mov	r0, r3
 80030ba:	f000 fa41 	bl	8003540 <RTC_ByteToBcd2>
 80030be:	4603      	mov	r3, r0
 80030c0:	461a      	mov	r2, r3
 80030c2:	68bb      	ldr	r3, [r7, #8]
 80030c4:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 80030c6:	68bb      	ldr	r3, [r7, #8]
 80030c8:	785b      	ldrb	r3, [r3, #1]
 80030ca:	4618      	mov	r0, r3
 80030cc:	f000 fa38 	bl	8003540 <RTC_ByteToBcd2>
 80030d0:	4603      	mov	r3, r0
 80030d2:	461a      	mov	r2, r3
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 80030d8:	68bb      	ldr	r3, [r7, #8]
 80030da:	789b      	ldrb	r3, [r3, #2]
 80030dc:	4618      	mov	r0, r3
 80030de:	f000 fa2f 	bl	8003540 <RTC_ByteToBcd2>
 80030e2:	4603      	mov	r3, r0
 80030e4:	461a      	mov	r2, r3
 80030e6:	68bb      	ldr	r3, [r7, #8]
 80030e8:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3720      	adds	r7, #32
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	91a2b3c5 	.word	0x91a2b3c5
 80030f8:	88888889 	.word	0x88888889
 80030fc:	aaaaaaab 	.word	0xaaaaaaab
 8003100:	00015180 	.word	0x00015180

08003104 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003104:	b580      	push	{r7, lr}
 8003106:	b088      	sub	sp, #32
 8003108:	af00      	add	r7, sp, #0
 800310a:	60f8      	str	r0, [r7, #12]
 800310c:	60b9      	str	r1, [r7, #8]
 800310e:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003110:	2300      	movs	r3, #0
 8003112:	61fb      	str	r3, [r7, #28]
 8003114:	2300      	movs	r3, #0
 8003116:	61bb      	str	r3, [r7, #24]
 8003118:	2300      	movs	r3, #0
 800311a:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	2b00      	cmp	r3, #0
 8003120:	d002      	beq.n	8003128 <HAL_RTC_SetDate+0x24>
 8003122:	68bb      	ldr	r3, [r7, #8]
 8003124:	2b00      	cmp	r3, #0
 8003126:	d101      	bne.n	800312c <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8003128:	2301      	movs	r3, #1
 800312a:	e097      	b.n	800325c <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	7c1b      	ldrb	r3, [r3, #16]
 8003130:	2b01      	cmp	r3, #1
 8003132:	d101      	bne.n	8003138 <HAL_RTC_SetDate+0x34>
 8003134:	2302      	movs	r3, #2
 8003136:	e091      	b.n	800325c <HAL_RTC_SetDate+0x158>
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2201      	movs	r2, #1
 800313c:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2202      	movs	r2, #2
 8003142:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b00      	cmp	r3, #0
 8003148:	d10c      	bne.n	8003164 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 800314a:	68bb      	ldr	r3, [r7, #8]
 800314c:	78da      	ldrb	r2, [r3, #3]
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8003152:	68bb      	ldr	r3, [r7, #8]
 8003154:	785a      	ldrb	r2, [r3, #1]
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	789a      	ldrb	r2, [r3, #2]
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	739a      	strb	r2, [r3, #14]
 8003162:	e01a      	b.n	800319a <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8003164:	68bb      	ldr	r3, [r7, #8]
 8003166:	78db      	ldrb	r3, [r3, #3]
 8003168:	4618      	mov	r0, r3
 800316a:	f000 fa06 	bl	800357a <RTC_Bcd2ToByte>
 800316e:	4603      	mov	r3, r0
 8003170:	461a      	mov	r2, r3
 8003172:	68fb      	ldr	r3, [r7, #12]
 8003174:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	785b      	ldrb	r3, [r3, #1]
 800317a:	4618      	mov	r0, r3
 800317c:	f000 f9fd 	bl	800357a <RTC_Bcd2ToByte>
 8003180:	4603      	mov	r3, r0
 8003182:	461a      	mov	r2, r3
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003188:	68bb      	ldr	r3, [r7, #8]
 800318a:	789b      	ldrb	r3, [r3, #2]
 800318c:	4618      	mov	r0, r3
 800318e:	f000 f9f4 	bl	800357a <RTC_Bcd2ToByte>
 8003192:	4603      	mov	r3, r0
 8003194:	461a      	mov	r2, r3
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	7bdb      	ldrb	r3, [r3, #15]
 800319e:	4618      	mov	r0, r3
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	7b59      	ldrb	r1, [r3, #13]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	7b9b      	ldrb	r3, [r3, #14]
 80031a8:	461a      	mov	r2, r3
 80031aa:	f000 fadf 	bl	800376c <RTC_WeekDayNum>
 80031ae:	4603      	mov	r3, r0
 80031b0:	461a      	mov	r2, r3
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	7b1a      	ldrb	r2, [r3, #12]
 80031ba:	68bb      	ldr	r3, [r7, #8]
 80031bc:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 80031be:	68f8      	ldr	r0, [r7, #12]
 80031c0:	f000 f8d7 	bl	8003372 <RTC_ReadTimeCounter>
 80031c4:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 80031c6:	69fb      	ldr	r3, [r7, #28]
 80031c8:	4a26      	ldr	r2, [pc, #152]	@ (8003264 <HAL_RTC_SetDate+0x160>)
 80031ca:	fba2 2303 	umull	r2, r3, r2, r3
 80031ce:	0adb      	lsrs	r3, r3, #11
 80031d0:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 80031d2:	697b      	ldr	r3, [r7, #20]
 80031d4:	2b18      	cmp	r3, #24
 80031d6:	d93a      	bls.n	800324e <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 80031d8:	697b      	ldr	r3, [r7, #20]
 80031da:	4a23      	ldr	r2, [pc, #140]	@ (8003268 <HAL_RTC_SetDate+0x164>)
 80031dc:	fba2 2303 	umull	r2, r3, r2, r3
 80031e0:	091b      	lsrs	r3, r3, #4
 80031e2:	4a22      	ldr	r2, [pc, #136]	@ (800326c <HAL_RTC_SetDate+0x168>)
 80031e4:	fb02 f303 	mul.w	r3, r2, r3
 80031e8:	69fa      	ldr	r2, [r7, #28]
 80031ea:	1ad3      	subs	r3, r2, r3
 80031ec:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80031ee:	69f9      	ldr	r1, [r7, #28]
 80031f0:	68f8      	ldr	r0, [r7, #12]
 80031f2:	f000 f8ee 	bl	80033d2 <RTC_WriteTimeCounter>
 80031f6:	4603      	mov	r3, r0
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d007      	beq.n	800320c <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	2204      	movs	r2, #4
 8003200:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	2200      	movs	r2, #0
 8003206:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e027      	b.n	800325c <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f000 f907 	bl	8003420 <RTC_ReadAlarmCounter>
 8003212:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8003214:	69bb      	ldr	r3, [r7, #24]
 8003216:	f1b3 3fff 	cmp.w	r3, #4294967295
 800321a:	d018      	beq.n	800324e <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	69fb      	ldr	r3, [r7, #28]
 8003220:	429a      	cmp	r2, r3
 8003222:	d214      	bcs.n	800324e <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8003224:	69bb      	ldr	r3, [r7, #24]
 8003226:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 800322a:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 800322e:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003230:	69b9      	ldr	r1, [r7, #24]
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f000 f90d 	bl	8003452 <RTC_WriteAlarmCounter>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d007      	beq.n	800324e <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	2204      	movs	r2, #4
 8003242:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8003244:	68fb      	ldr	r3, [r7, #12]
 8003246:	2200      	movs	r2, #0
 8003248:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 800324a:	2301      	movs	r3, #1
 800324c:	e006      	b.n	800325c <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2201      	movs	r2, #1
 8003252:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8003254:	68fb      	ldr	r3, [r7, #12]
 8003256:	2200      	movs	r2, #0
 8003258:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800325a:	2300      	movs	r3, #0
}
 800325c:	4618      	mov	r0, r3
 800325e:	3720      	adds	r7, #32
 8003260:	46bd      	mov	sp, r7
 8003262:	bd80      	pop	{r7, pc}
 8003264:	91a2b3c5 	.word	0x91a2b3c5
 8003268:	aaaaaaab 	.word	0xaaaaaaab
 800326c:	00015180 	.word	0x00015180

08003270 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b086      	sub	sp, #24
 8003274:	af00      	add	r7, sp, #0
 8003276:	60f8      	str	r0, [r7, #12]
 8003278:	60b9      	str	r1, [r7, #8]
 800327a:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 800327c:	f107 0314 	add.w	r3, r7, #20
 8003280:	2100      	movs	r1, #0
 8003282:	460a      	mov	r2, r1
 8003284:	801a      	strh	r2, [r3, #0]
 8003286:	460a      	mov	r2, r1
 8003288:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 800328a:	68fb      	ldr	r3, [r7, #12]
 800328c:	2b00      	cmp	r3, #0
 800328e:	d002      	beq.n	8003296 <HAL_RTC_GetDate+0x26>
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e03a      	b.n	8003310 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 800329a:	f107 0314 	add.w	r3, r7, #20
 800329e:	2200      	movs	r2, #0
 80032a0:	4619      	mov	r1, r3
 80032a2:	68f8      	ldr	r0, [r7, #12]
 80032a4:	f7ff fe56 	bl	8002f54 <HAL_RTC_GetTime>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d001      	beq.n	80032b2 <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 80032ae:	2301      	movs	r3, #1
 80032b0:	e02e      	b.n	8003310 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	7b1a      	ldrb	r2, [r3, #12]
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	7bda      	ldrb	r2, [r3, #15]
 80032be:	68bb      	ldr	r3, [r7, #8]
 80032c0:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	7b5a      	ldrb	r2, [r3, #13]
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	7b9a      	ldrb	r2, [r3, #14]
 80032ce:	68bb      	ldr	r3, [r7, #8]
 80032d0:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d01a      	beq.n	800330e <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	78db      	ldrb	r3, [r3, #3]
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f92f 	bl	8003540 <RTC_ByteToBcd2>
 80032e2:	4603      	mov	r3, r0
 80032e4:	461a      	mov	r2, r3
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 80032ea:	68bb      	ldr	r3, [r7, #8]
 80032ec:	785b      	ldrb	r3, [r3, #1]
 80032ee:	4618      	mov	r0, r3
 80032f0:	f000 f926 	bl	8003540 <RTC_ByteToBcd2>
 80032f4:	4603      	mov	r3, r0
 80032f6:	461a      	mov	r2, r3
 80032f8:	68bb      	ldr	r3, [r7, #8]
 80032fa:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	789b      	ldrb	r3, [r3, #2]
 8003300:	4618      	mov	r0, r3
 8003302:	f000 f91d 	bl	8003540 <RTC_ByteToBcd2>
 8003306:	4603      	mov	r3, r0
 8003308:	461a      	mov	r2, r3
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800330e:	2300      	movs	r3, #0
}
 8003310:	4618      	mov	r0, r3
 8003312:	3718      	adds	r7, #24
 8003314:	46bd      	mov	sp, r7
 8003316:	bd80      	pop	{r7, pc}

08003318 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b084      	sub	sp, #16
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003320:	2300      	movs	r3, #0
 8003322:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d101      	bne.n	800332e <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e01d      	b.n	800336a <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685a      	ldr	r2, [r3, #4]
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f022 0208 	bic.w	r2, r2, #8
 800333c:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800333e:	f7fe fc95 	bl	8001c6c <HAL_GetTick>
 8003342:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8003344:	e009      	b.n	800335a <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003346:	f7fe fc91 	bl	8001c6c <HAL_GetTick>
 800334a:	4602      	mov	r2, r0
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	1ad3      	subs	r3, r2, r3
 8003350:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003354:	d901      	bls.n	800335a <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e007      	b.n	800336a <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 0308 	and.w	r3, r3, #8
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0ee      	beq.n	8003346 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3710      	adds	r7, #16
 800336e:	46bd      	mov	sp, r7
 8003370:	bd80      	pop	{r7, pc}

08003372 <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8003372:	b480      	push	{r7}
 8003374:	b087      	sub	sp, #28
 8003376:	af00      	add	r7, sp, #0
 8003378:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 800337a:	2300      	movs	r3, #0
 800337c:	827b      	strh	r3, [r7, #18]
 800337e:	2300      	movs	r3, #0
 8003380:	823b      	strh	r3, [r7, #16]
 8003382:	2300      	movs	r3, #0
 8003384:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69db      	ldr	r3, [r3, #28]
 8003398:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 80033a2:	8a7a      	ldrh	r2, [r7, #18]
 80033a4:	8a3b      	ldrh	r3, [r7, #16]
 80033a6:	429a      	cmp	r2, r3
 80033a8:	d008      	beq.n	80033bc <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 80033aa:	8a3b      	ldrh	r3, [r7, #16]
 80033ac:	041a      	lsls	r2, r3, #16
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	69db      	ldr	r3, [r3, #28]
 80033b4:	b29b      	uxth	r3, r3
 80033b6:	4313      	orrs	r3, r2
 80033b8:	617b      	str	r3, [r7, #20]
 80033ba:	e004      	b.n	80033c6 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 80033bc:	8a7b      	ldrh	r3, [r7, #18]
 80033be:	041a      	lsls	r2, r3, #16
 80033c0:	89fb      	ldrh	r3, [r7, #14]
 80033c2:	4313      	orrs	r3, r2
 80033c4:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 80033c6:	697b      	ldr	r3, [r7, #20]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	371c      	adds	r7, #28
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bc80      	pop	{r7}
 80033d0:	4770      	bx	lr

080033d2 <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b084      	sub	sp, #16
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
 80033da:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033dc:	2300      	movs	r3, #0
 80033de:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80033e0:	6878      	ldr	r0, [r7, #4]
 80033e2:	f000 f85d 	bl	80034a0 <RTC_EnterInitMode>
 80033e6:	4603      	mov	r3, r0
 80033e8:	2b00      	cmp	r3, #0
 80033ea:	d002      	beq.n	80033f2 <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 80033ec:	2301      	movs	r3, #1
 80033ee:	73fb      	strb	r3, [r7, #15]
 80033f0:	e011      	b.n	8003416 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	683a      	ldr	r2, [r7, #0]
 80033f8:	0c12      	lsrs	r2, r2, #16
 80033fa:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	b292      	uxth	r2, r2
 8003404:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003406:	6878      	ldr	r0, [r7, #4]
 8003408:	f000 f872 	bl	80034f0 <RTC_ExitInitMode>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d001      	beq.n	8003416 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 8003412:	2301      	movs	r3, #1
 8003414:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003416:	7bfb      	ldrb	r3, [r7, #15]
}
 8003418:	4618      	mov	r0, r3
 800341a:	3710      	adds	r7, #16
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003420:	b480      	push	{r7}
 8003422:	b085      	sub	sp, #20
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003428:	2300      	movs	r3, #0
 800342a:	81fb      	strh	r3, [r7, #14]
 800342c:	2300      	movs	r3, #0
 800342e:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	6a1b      	ldr	r3, [r3, #32]
 8003436:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800343e:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 8003440:	89fb      	ldrh	r3, [r7, #14]
 8003442:	041a      	lsls	r2, r3, #16
 8003444:	89bb      	ldrh	r3, [r7, #12]
 8003446:	4313      	orrs	r3, r2
}
 8003448:	4618      	mov	r0, r3
 800344a:	3714      	adds	r7, #20
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 8003452:	b580      	push	{r7, lr}
 8003454:	b084      	sub	sp, #16
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800345c:	2300      	movs	r3, #0
 800345e:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f81d 	bl	80034a0 <RTC_EnterInitMode>
 8003466:	4603      	mov	r3, r0
 8003468:	2b00      	cmp	r3, #0
 800346a:	d002      	beq.n	8003472 <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 800346c:	2301      	movs	r3, #1
 800346e:	73fb      	strb	r3, [r7, #15]
 8003470:	e011      	b.n	8003496 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	683a      	ldr	r2, [r7, #0]
 8003478:	0c12      	lsrs	r2, r2, #16
 800347a:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	683a      	ldr	r2, [r7, #0]
 8003482:	b292      	uxth	r2, r2
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003486:	6878      	ldr	r0, [r7, #4]
 8003488:	f000 f832 	bl	80034f0 <RTC_ExitInitMode>
 800348c:	4603      	mov	r3, r0
 800348e:	2b00      	cmp	r3, #0
 8003490:	d001      	beq.n	8003496 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003492:	2301      	movs	r3, #1
 8003494:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003496:	7bfb      	ldrb	r3, [r7, #15]
}
 8003498:	4618      	mov	r0, r3
 800349a:	3710      	adds	r7, #16
 800349c:	46bd      	mov	sp, r7
 800349e:	bd80      	pop	{r7, pc}

080034a0 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80034a0:	b580      	push	{r7, lr}
 80034a2:	b084      	sub	sp, #16
 80034a4:	af00      	add	r7, sp, #0
 80034a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034a8:	2300      	movs	r3, #0
 80034aa:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80034ac:	f7fe fbde 	bl	8001c6c <HAL_GetTick>
 80034b0:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034b2:	e009      	b.n	80034c8 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80034b4:	f7fe fbda 	bl	8001c6c <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80034c2:	d901      	bls.n	80034c8 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 80034c4:	2303      	movs	r3, #3
 80034c6:	e00f      	b.n	80034e8 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f003 0320 	and.w	r3, r3, #32
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d0ee      	beq.n	80034b4 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	685a      	ldr	r2, [r3, #4]
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	f042 0210 	orr.w	r2, r2, #16
 80034e4:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 80034e6:	2300      	movs	r3, #0
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80034f8:	2300      	movs	r3, #0
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	685a      	ldr	r2, [r3, #4]
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f022 0210 	bic.w	r2, r2, #16
 800350a:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 800350c:	f7fe fbae 	bl	8001c6c <HAL_GetTick>
 8003510:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003512:	e009      	b.n	8003528 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003514:	f7fe fbaa 	bl	8001c6c <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003522:	d901      	bls.n	8003528 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003524:	2303      	movs	r3, #3
 8003526:	e007      	b.n	8003538 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	685b      	ldr	r3, [r3, #4]
 800352e:	f003 0320 	and.w	r3, r3, #32
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0ee      	beq.n	8003514 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003536:	2300      	movs	r3, #0
}
 8003538:	4618      	mov	r0, r3
 800353a:	3710      	adds	r7, #16
 800353c:	46bd      	mov	sp, r7
 800353e:	bd80      	pop	{r7, pc}

08003540 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003540:	b480      	push	{r7}
 8003542:	b085      	sub	sp, #20
 8003544:	af00      	add	r7, sp, #0
 8003546:	4603      	mov	r3, r0
 8003548:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 800354a:	2300      	movs	r3, #0
 800354c:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800354e:	e005      	b.n	800355c <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	3301      	adds	r3, #1
 8003554:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003556:	79fb      	ldrb	r3, [r7, #7]
 8003558:	3b0a      	subs	r3, #10
 800355a:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 800355c:	79fb      	ldrb	r3, [r7, #7]
 800355e:	2b09      	cmp	r3, #9
 8003560:	d8f6      	bhi.n	8003550 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	b2db      	uxtb	r3, r3
 8003566:	011b      	lsls	r3, r3, #4
 8003568:	b2da      	uxtb	r2, r3
 800356a:	79fb      	ldrb	r3, [r7, #7]
 800356c:	4313      	orrs	r3, r2
 800356e:	b2db      	uxtb	r3, r3
}
 8003570:	4618      	mov	r0, r3
 8003572:	3714      	adds	r7, #20
 8003574:	46bd      	mov	sp, r7
 8003576:	bc80      	pop	{r7}
 8003578:	4770      	bx	lr

0800357a <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 800357a:	b480      	push	{r7}
 800357c:	b085      	sub	sp, #20
 800357e:	af00      	add	r7, sp, #0
 8003580:	4603      	mov	r3, r0
 8003582:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003584:	2300      	movs	r3, #0
 8003586:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003588:	79fb      	ldrb	r3, [r7, #7]
 800358a:	091b      	lsrs	r3, r3, #4
 800358c:	b2db      	uxtb	r3, r3
 800358e:	461a      	mov	r2, r3
 8003590:	4613      	mov	r3, r2
 8003592:	009b      	lsls	r3, r3, #2
 8003594:	4413      	add	r3, r2
 8003596:	005b      	lsls	r3, r3, #1
 8003598:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 800359a:	79fb      	ldrb	r3, [r7, #7]
 800359c:	f003 030f 	and.w	r3, r3, #15
 80035a0:	b2da      	uxtb	r2, r3
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	4413      	add	r3, r2
 80035a8:	b2db      	uxtb	r3, r3
}
 80035aa:	4618      	mov	r0, r3
 80035ac:	3714      	adds	r7, #20
 80035ae:	46bd      	mov	sp, r7
 80035b0:	bc80      	pop	{r7}
 80035b2:	4770      	bx	lr

080035b4 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 80035b4:	b580      	push	{r7, lr}
 80035b6:	b086      	sub	sp, #24
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	617b      	str	r3, [r7, #20]
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	2300      	movs	r3, #0
 80035c8:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 80035ca:	2300      	movs	r3, #0
 80035cc:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	7bdb      	ldrb	r3, [r3, #15]
 80035d2:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	7b5b      	ldrb	r3, [r3, #13]
 80035d8:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	7b9b      	ldrb	r3, [r3, #14]
 80035de:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 80035e0:	2300      	movs	r3, #0
 80035e2:	60bb      	str	r3, [r7, #8]
 80035e4:	e06f      	b.n	80036c6 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d011      	beq.n	8003610 <RTC_DateUpdate+0x5c>
 80035ec:	693b      	ldr	r3, [r7, #16]
 80035ee:	2b03      	cmp	r3, #3
 80035f0:	d00e      	beq.n	8003610 <RTC_DateUpdate+0x5c>
 80035f2:	693b      	ldr	r3, [r7, #16]
 80035f4:	2b05      	cmp	r3, #5
 80035f6:	d00b      	beq.n	8003610 <RTC_DateUpdate+0x5c>
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	2b07      	cmp	r3, #7
 80035fc:	d008      	beq.n	8003610 <RTC_DateUpdate+0x5c>
 80035fe:	693b      	ldr	r3, [r7, #16]
 8003600:	2b08      	cmp	r3, #8
 8003602:	d005      	beq.n	8003610 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003604:	693b      	ldr	r3, [r7, #16]
 8003606:	2b0a      	cmp	r3, #10
 8003608:	d002      	beq.n	8003610 <RTC_DateUpdate+0x5c>
 800360a:	693b      	ldr	r3, [r7, #16]
 800360c:	2b0c      	cmp	r3, #12
 800360e:	d117      	bne.n	8003640 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2b1e      	cmp	r3, #30
 8003614:	d803      	bhi.n	800361e <RTC_DateUpdate+0x6a>
      {
        day++;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	3301      	adds	r3, #1
 800361a:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800361c:	e050      	b.n	80036c0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	2b0c      	cmp	r3, #12
 8003622:	d005      	beq.n	8003630 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003624:	693b      	ldr	r3, [r7, #16]
 8003626:	3301      	adds	r3, #1
 8003628:	613b      	str	r3, [r7, #16]
          day = 1U;
 800362a:	2301      	movs	r3, #1
 800362c:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800362e:	e047      	b.n	80036c0 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003630:	2301      	movs	r3, #1
 8003632:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003634:	2301      	movs	r3, #1
 8003636:	60fb      	str	r3, [r7, #12]
          year++;
 8003638:	697b      	ldr	r3, [r7, #20]
 800363a:	3301      	adds	r3, #1
 800363c:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800363e:	e03f      	b.n	80036c0 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003640:	693b      	ldr	r3, [r7, #16]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d008      	beq.n	8003658 <RTC_DateUpdate+0xa4>
 8003646:	693b      	ldr	r3, [r7, #16]
 8003648:	2b06      	cmp	r3, #6
 800364a:	d005      	beq.n	8003658 <RTC_DateUpdate+0xa4>
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	2b09      	cmp	r3, #9
 8003650:	d002      	beq.n	8003658 <RTC_DateUpdate+0xa4>
 8003652:	693b      	ldr	r3, [r7, #16]
 8003654:	2b0b      	cmp	r3, #11
 8003656:	d10c      	bne.n	8003672 <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	2b1d      	cmp	r3, #29
 800365c:	d803      	bhi.n	8003666 <RTC_DateUpdate+0xb2>
      {
        day++;
 800365e:	68fb      	ldr	r3, [r7, #12]
 8003660:	3301      	adds	r3, #1
 8003662:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003664:	e02c      	b.n	80036c0 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	3301      	adds	r3, #1
 800366a:	613b      	str	r3, [r7, #16]
        day = 1U;
 800366c:	2301      	movs	r3, #1
 800366e:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003670:	e026      	b.n	80036c0 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003672:	693b      	ldr	r3, [r7, #16]
 8003674:	2b02      	cmp	r3, #2
 8003676:	d123      	bne.n	80036c0 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	2b1b      	cmp	r3, #27
 800367c:	d803      	bhi.n	8003686 <RTC_DateUpdate+0xd2>
      {
        day++;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3301      	adds	r3, #1
 8003682:	60fb      	str	r3, [r7, #12]
 8003684:	e01c      	b.n	80036c0 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	2b1c      	cmp	r3, #28
 800368a:	d111      	bne.n	80036b0 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 800368c:	697b      	ldr	r3, [r7, #20]
 800368e:	b29b      	uxth	r3, r3
 8003690:	4618      	mov	r0, r3
 8003692:	f000 f839 	bl	8003708 <RTC_IsLeapYear>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d003      	beq.n	80036a4 <RTC_DateUpdate+0xf0>
        {
          day++;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	3301      	adds	r3, #1
 80036a0:	60fb      	str	r3, [r7, #12]
 80036a2:	e00d      	b.n	80036c0 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	3301      	adds	r3, #1
 80036a8:	613b      	str	r3, [r7, #16]
          day = 1U;
 80036aa:	2301      	movs	r3, #1
 80036ac:	60fb      	str	r3, [r7, #12]
 80036ae:	e007      	b.n	80036c0 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2b1d      	cmp	r3, #29
 80036b4:	d104      	bne.n	80036c0 <RTC_DateUpdate+0x10c>
      {
        month++;
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	3301      	adds	r3, #1
 80036ba:	613b      	str	r3, [r7, #16]
        day = 1U;
 80036bc:	2301      	movs	r3, #1
 80036be:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	3301      	adds	r3, #1
 80036c4:	60bb      	str	r3, [r7, #8]
 80036c6:	68ba      	ldr	r2, [r7, #8]
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d38b      	bcc.n	80035e6 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 80036ce:	697b      	ldr	r3, [r7, #20]
 80036d0:	b2da      	uxtb	r2, r3
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 80036d6:	693b      	ldr	r3, [r7, #16]
 80036d8:	b2da      	uxtb	r2, r3
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	b2da      	uxtb	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	68fa      	ldr	r2, [r7, #12]
 80036ec:	b2d2      	uxtb	r2, r2
 80036ee:	4619      	mov	r1, r3
 80036f0:	6978      	ldr	r0, [r7, #20]
 80036f2:	f000 f83b 	bl	800376c <RTC_WeekDayNum>
 80036f6:	4603      	mov	r3, r0
 80036f8:	461a      	mov	r2, r3
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	731a      	strb	r2, [r3, #12]
}
 80036fe:	bf00      	nop
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}
	...

08003708 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003708:	b480      	push	{r7}
 800370a:	b083      	sub	sp, #12
 800370c:	af00      	add	r7, sp, #0
 800370e:	4603      	mov	r3, r0
 8003710:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003712:	88fb      	ldrh	r3, [r7, #6]
 8003714:	f003 0303 	and.w	r3, r3, #3
 8003718:	b29b      	uxth	r3, r3
 800371a:	2b00      	cmp	r3, #0
 800371c:	d001      	beq.n	8003722 <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	e01d      	b.n	800375e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003722:	88fb      	ldrh	r3, [r7, #6]
 8003724:	4a10      	ldr	r2, [pc, #64]	@ (8003768 <RTC_IsLeapYear+0x60>)
 8003726:	fba2 1203 	umull	r1, r2, r2, r3
 800372a:	0952      	lsrs	r2, r2, #5
 800372c:	2164      	movs	r1, #100	@ 0x64
 800372e:	fb01 f202 	mul.w	r2, r1, r2
 8003732:	1a9b      	subs	r3, r3, r2
 8003734:	b29b      	uxth	r3, r3
 8003736:	2b00      	cmp	r3, #0
 8003738:	d001      	beq.n	800373e <RTC_IsLeapYear+0x36>
  {
    return 1U;
 800373a:	2301      	movs	r3, #1
 800373c:	e00f      	b.n	800375e <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800373e:	88fb      	ldrh	r3, [r7, #6]
 8003740:	4a09      	ldr	r2, [pc, #36]	@ (8003768 <RTC_IsLeapYear+0x60>)
 8003742:	fba2 1203 	umull	r1, r2, r2, r3
 8003746:	09d2      	lsrs	r2, r2, #7
 8003748:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 800374c:	fb01 f202 	mul.w	r2, r1, r2
 8003750:	1a9b      	subs	r3, r3, r2
 8003752:	b29b      	uxth	r3, r3
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003758:	2301      	movs	r3, #1
 800375a:	e000      	b.n	800375e <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 800375c:	2300      	movs	r3, #0
  }
}
 800375e:	4618      	mov	r0, r3
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	bc80      	pop	{r7}
 8003766:	4770      	bx	lr
 8003768:	51eb851f 	.word	0x51eb851f

0800376c <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 800376c:	b480      	push	{r7}
 800376e:	b085      	sub	sp, #20
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
 8003774:	460b      	mov	r3, r1
 8003776:	70fb      	strb	r3, [r7, #3]
 8003778:	4613      	mov	r3, r2
 800377a:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 800377c:	2300      	movs	r3, #0
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	2300      	movs	r3, #0
 8003782:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 800378a:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 800378c:	78fb      	ldrb	r3, [r7, #3]
 800378e:	2b02      	cmp	r3, #2
 8003790:	d82d      	bhi.n	80037ee <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003792:	78fa      	ldrb	r2, [r7, #3]
 8003794:	4613      	mov	r3, r2
 8003796:	005b      	lsls	r3, r3, #1
 8003798:	4413      	add	r3, r2
 800379a:	00db      	lsls	r3, r3, #3
 800379c:	1a9b      	subs	r3, r3, r2
 800379e:	4a2c      	ldr	r2, [pc, #176]	@ (8003850 <RTC_WeekDayNum+0xe4>)
 80037a0:	fba2 2303 	umull	r2, r3, r2, r3
 80037a4:	085a      	lsrs	r2, r3, #1
 80037a6:	78bb      	ldrb	r3, [r7, #2]
 80037a8:	441a      	add	r2, r3
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	441a      	add	r2, r3
 80037ae:	68bb      	ldr	r3, [r7, #8]
 80037b0:	3b01      	subs	r3, #1
 80037b2:	089b      	lsrs	r3, r3, #2
 80037b4:	441a      	add	r2, r3
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3b01      	subs	r3, #1
 80037ba:	4926      	ldr	r1, [pc, #152]	@ (8003854 <RTC_WeekDayNum+0xe8>)
 80037bc:	fba1 1303 	umull	r1, r3, r1, r3
 80037c0:	095b      	lsrs	r3, r3, #5
 80037c2:	1ad2      	subs	r2, r2, r3
 80037c4:	68bb      	ldr	r3, [r7, #8]
 80037c6:	3b01      	subs	r3, #1
 80037c8:	4922      	ldr	r1, [pc, #136]	@ (8003854 <RTC_WeekDayNum+0xe8>)
 80037ca:	fba1 1303 	umull	r1, r3, r1, r3
 80037ce:	09db      	lsrs	r3, r3, #7
 80037d0:	4413      	add	r3, r2
 80037d2:	1d1a      	adds	r2, r3, #4
 80037d4:	4b20      	ldr	r3, [pc, #128]	@ (8003858 <RTC_WeekDayNum+0xec>)
 80037d6:	fba3 1302 	umull	r1, r3, r3, r2
 80037da:	1ad1      	subs	r1, r2, r3
 80037dc:	0849      	lsrs	r1, r1, #1
 80037de:	440b      	add	r3, r1
 80037e0:	0899      	lsrs	r1, r3, #2
 80037e2:	460b      	mov	r3, r1
 80037e4:	00db      	lsls	r3, r3, #3
 80037e6:	1a5b      	subs	r3, r3, r1
 80037e8:	1ad3      	subs	r3, r2, r3
 80037ea:	60fb      	str	r3, [r7, #12]
 80037ec:	e029      	b.n	8003842 <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 80037ee:	78fa      	ldrb	r2, [r7, #3]
 80037f0:	4613      	mov	r3, r2
 80037f2:	005b      	lsls	r3, r3, #1
 80037f4:	4413      	add	r3, r2
 80037f6:	00db      	lsls	r3, r3, #3
 80037f8:	1a9b      	subs	r3, r3, r2
 80037fa:	4a15      	ldr	r2, [pc, #84]	@ (8003850 <RTC_WeekDayNum+0xe4>)
 80037fc:	fba2 2303 	umull	r2, r3, r2, r3
 8003800:	085a      	lsrs	r2, r3, #1
 8003802:	78bb      	ldrb	r3, [r7, #2]
 8003804:	441a      	add	r2, r3
 8003806:	68bb      	ldr	r3, [r7, #8]
 8003808:	441a      	add	r2, r3
 800380a:	68bb      	ldr	r3, [r7, #8]
 800380c:	089b      	lsrs	r3, r3, #2
 800380e:	441a      	add	r2, r3
 8003810:	68bb      	ldr	r3, [r7, #8]
 8003812:	4910      	ldr	r1, [pc, #64]	@ (8003854 <RTC_WeekDayNum+0xe8>)
 8003814:	fba1 1303 	umull	r1, r3, r1, r3
 8003818:	095b      	lsrs	r3, r3, #5
 800381a:	1ad2      	subs	r2, r2, r3
 800381c:	68bb      	ldr	r3, [r7, #8]
 800381e:	490d      	ldr	r1, [pc, #52]	@ (8003854 <RTC_WeekDayNum+0xe8>)
 8003820:	fba1 1303 	umull	r1, r3, r1, r3
 8003824:	09db      	lsrs	r3, r3, #7
 8003826:	4413      	add	r3, r2
 8003828:	1c9a      	adds	r2, r3, #2
 800382a:	4b0b      	ldr	r3, [pc, #44]	@ (8003858 <RTC_WeekDayNum+0xec>)
 800382c:	fba3 1302 	umull	r1, r3, r3, r2
 8003830:	1ad1      	subs	r1, r2, r3
 8003832:	0849      	lsrs	r1, r1, #1
 8003834:	440b      	add	r3, r1
 8003836:	0899      	lsrs	r1, r3, #2
 8003838:	460b      	mov	r3, r1
 800383a:	00db      	lsls	r3, r3, #3
 800383c:	1a5b      	subs	r3, r3, r1
 800383e:	1ad3      	subs	r3, r2, r3
 8003840:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	b2db      	uxtb	r3, r3
}
 8003846:	4618      	mov	r0, r3
 8003848:	3714      	adds	r7, #20
 800384a:	46bd      	mov	sp, r7
 800384c:	bc80      	pop	{r7}
 800384e:	4770      	bx	lr
 8003850:	38e38e39 	.word	0x38e38e39
 8003854:	51eb851f 	.word	0x51eb851f
 8003858:	24924925 	.word	0x24924925

0800385c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800385c:	b580      	push	{r7, lr}
 800385e:	b082      	sub	sp, #8
 8003860:	af00      	add	r7, sp, #0
 8003862:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	2b00      	cmp	r3, #0
 8003868:	d101      	bne.n	800386e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e042      	b.n	80038f4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d106      	bne.n	8003888 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	2200      	movs	r2, #0
 800387e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003882:	6878      	ldr	r0, [r7, #4]
 8003884:	f7fe f822 	bl	80018cc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	2224      	movs	r2, #36	@ 0x24
 800388c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68da      	ldr	r2, [r3, #12]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800389e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 fdb7 	bl	8004414 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	691a      	ldr	r2, [r3, #16]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80038b4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	681b      	ldr	r3, [r3, #0]
 80038ba:	695a      	ldr	r2, [r3, #20]
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80038c4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80038d4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	2200      	movs	r2, #0
 80038da:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	2220      	movs	r2, #32
 80038e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2220      	movs	r2, #32
 80038e8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	2200      	movs	r2, #0
 80038f0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80038f2:	2300      	movs	r3, #0
}
 80038f4:	4618      	mov	r0, r3
 80038f6:	3708      	adds	r7, #8
 80038f8:	46bd      	mov	sp, r7
 80038fa:	bd80      	pop	{r7, pc}

080038fc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038fc:	b580      	push	{r7, lr}
 80038fe:	b08a      	sub	sp, #40	@ 0x28
 8003900:	af02      	add	r7, sp, #8
 8003902:	60f8      	str	r0, [r7, #12]
 8003904:	60b9      	str	r1, [r7, #8]
 8003906:	603b      	str	r3, [r7, #0]
 8003908:	4613      	mov	r3, r2
 800390a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003910:	68fb      	ldr	r3, [r7, #12]
 8003912:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003916:	b2db      	uxtb	r3, r3
 8003918:	2b20      	cmp	r3, #32
 800391a:	d175      	bne.n	8003a08 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800391c:	68bb      	ldr	r3, [r7, #8]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d002      	beq.n	8003928 <HAL_UART_Transmit+0x2c>
 8003922:	88fb      	ldrh	r3, [r7, #6]
 8003924:	2b00      	cmp	r3, #0
 8003926:	d101      	bne.n	800392c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e06e      	b.n	8003a0a <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	2200      	movs	r2, #0
 8003930:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2221      	movs	r2, #33	@ 0x21
 8003936:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800393a:	f7fe f997 	bl	8001c6c <HAL_GetTick>
 800393e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	88fa      	ldrh	r2, [r7, #6]
 8003944:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	88fa      	ldrh	r2, [r7, #6]
 800394a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	689b      	ldr	r3, [r3, #8]
 8003950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003954:	d108      	bne.n	8003968 <HAL_UART_Transmit+0x6c>
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	2b00      	cmp	r3, #0
 800395c:	d104      	bne.n	8003968 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800395e:	2300      	movs	r3, #0
 8003960:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003962:	68bb      	ldr	r3, [r7, #8]
 8003964:	61bb      	str	r3, [r7, #24]
 8003966:	e003      	b.n	8003970 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8003968:	68bb      	ldr	r3, [r7, #8]
 800396a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800396c:	2300      	movs	r3, #0
 800396e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003970:	e02e      	b.n	80039d0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003972:	683b      	ldr	r3, [r7, #0]
 8003974:	9300      	str	r3, [sp, #0]
 8003976:	697b      	ldr	r3, [r7, #20]
 8003978:	2200      	movs	r2, #0
 800397a:	2180      	movs	r1, #128	@ 0x80
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 fb1c 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d005      	beq.n	8003994 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	2220      	movs	r2, #32
 800398c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8003990:	2303      	movs	r3, #3
 8003992:	e03a      	b.n	8003a0a <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	2b00      	cmp	r3, #0
 8003998:	d10b      	bne.n	80039b2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800399a:	69bb      	ldr	r3, [r7, #24]
 800399c:	881b      	ldrh	r3, [r3, #0]
 800399e:	461a      	mov	r2, r3
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80039a8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80039aa:	69bb      	ldr	r3, [r7, #24]
 80039ac:	3302      	adds	r3, #2
 80039ae:	61bb      	str	r3, [r7, #24]
 80039b0:	e007      	b.n	80039c2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80039b2:	69fb      	ldr	r3, [r7, #28]
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	3301      	adds	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039c6:	b29b      	uxth	r3, r3
 80039c8:	3b01      	subs	r3, #1
 80039ca:	b29a      	uxth	r2, r3
 80039cc:	68fb      	ldr	r3, [r7, #12]
 80039ce:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80039d4:	b29b      	uxth	r3, r3
 80039d6:	2b00      	cmp	r3, #0
 80039d8:	d1cb      	bne.n	8003972 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80039da:	683b      	ldr	r3, [r7, #0]
 80039dc:	9300      	str	r3, [sp, #0]
 80039de:	697b      	ldr	r3, [r7, #20]
 80039e0:	2200      	movs	r2, #0
 80039e2:	2140      	movs	r1, #64	@ 0x40
 80039e4:	68f8      	ldr	r0, [r7, #12]
 80039e6:	f000 fae8 	bl	8003fba <UART_WaitOnFlagUntilTimeout>
 80039ea:	4603      	mov	r3, r0
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d005      	beq.n	80039fc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	2220      	movs	r2, #32
 80039f4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80039f8:	2303      	movs	r3, #3
 80039fa:	e006      	b.n	8003a0a <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80039fc:	68fb      	ldr	r3, [r7, #12]
 80039fe:	2220      	movs	r2, #32
 8003a00:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003a04:	2300      	movs	r3, #0
 8003a06:	e000      	b.n	8003a0a <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003a08:	2302      	movs	r3, #2
  }
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}

08003a12 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003a12:	b580      	push	{r7, lr}
 8003a14:	b084      	sub	sp, #16
 8003a16:	af00      	add	r7, sp, #0
 8003a18:	60f8      	str	r0, [r7, #12]
 8003a1a:	60b9      	str	r1, [r7, #8]
 8003a1c:	4613      	mov	r3, r2
 8003a1e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003a26:	b2db      	uxtb	r3, r3
 8003a28:	2b20      	cmp	r3, #32
 8003a2a:	d112      	bne.n	8003a52 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d002      	beq.n	8003a38 <HAL_UART_Receive_IT+0x26>
 8003a32:	88fb      	ldrh	r3, [r7, #6]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d101      	bne.n	8003a3c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e00b      	b.n	8003a54 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	2200      	movs	r2, #0
 8003a40:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003a42:	88fb      	ldrh	r3, [r7, #6]
 8003a44:	461a      	mov	r2, r3
 8003a46:	68b9      	ldr	r1, [r7, #8]
 8003a48:	68f8      	ldr	r0, [r7, #12]
 8003a4a:	f000 fb0f 	bl	800406c <UART_Start_Receive_IT>
 8003a4e:	4603      	mov	r3, r0
 8003a50:	e000      	b.n	8003a54 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003a52:	2302      	movs	r3, #2
  }
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3710      	adds	r7, #16
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}

08003a5c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003a5c:	b580      	push	{r7, lr}
 8003a5e:	b0ba      	sub	sp, #232	@ 0xe8
 8003a60:	af00      	add	r7, sp, #0
 8003a62:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	68db      	ldr	r3, [r3, #12]
 8003a74:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	695b      	ldr	r3, [r3, #20]
 8003a7e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8003a82:	2300      	movs	r3, #0
 8003a84:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8003a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003a92:	f003 030f 	and.w	r3, r3, #15
 8003a96:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8003a9a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003a9e:	2b00      	cmp	r3, #0
 8003aa0:	d10f      	bne.n	8003ac2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d009      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x66>
 8003aae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ab2:	f003 0320 	and.w	r3, r3, #32
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003aba:	6878      	ldr	r0, [r7, #4]
 8003abc:	f000 fbec 	bl	8004298 <UART_Receive_IT>
      return;
 8003ac0:	e25b      	b.n	8003f7a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8003ac2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003ac6:	2b00      	cmp	r3, #0
 8003ac8:	f000 80de 	beq.w	8003c88 <HAL_UART_IRQHandler+0x22c>
 8003acc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003ad0:	f003 0301 	and.w	r3, r3, #1
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d106      	bne.n	8003ae6 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003ad8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003adc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 80d1 	beq.w	8003c88 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003ae6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003aea:	f003 0301 	and.w	r3, r3, #1
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d00b      	beq.n	8003b0a <HAL_UART_IRQHandler+0xae>
 8003af2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003af6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d005      	beq.n	8003b0a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b02:	f043 0201 	orr.w	r2, r3, #1
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b0e:	f003 0304 	and.w	r3, r3, #4
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d00b      	beq.n	8003b2e <HAL_UART_IRQHandler+0xd2>
 8003b16:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b1a:	f003 0301 	and.w	r3, r3, #1
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d005      	beq.n	8003b2e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b26:	f043 0202 	orr.w	r2, r3, #2
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003b2e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b32:	f003 0302 	and.w	r3, r3, #2
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d00b      	beq.n	8003b52 <HAL_UART_IRQHandler+0xf6>
 8003b3a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b3e:	f003 0301 	and.w	r3, r3, #1
 8003b42:	2b00      	cmp	r3, #0
 8003b44:	d005      	beq.n	8003b52 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b4a:	f043 0204 	orr.w	r2, r3, #4
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8003b52:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d011      	beq.n	8003b82 <HAL_UART_IRQHandler+0x126>
 8003b5e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b62:	f003 0320 	and.w	r3, r3, #32
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d105      	bne.n	8003b76 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003b6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d005      	beq.n	8003b82 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b7a:	f043 0208 	orr.w	r2, r3, #8
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	f000 81f2 	beq.w	8003f70 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003b8c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d008      	beq.n	8003baa <HAL_UART_IRQHandler+0x14e>
 8003b98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b9c:	f003 0320 	and.w	r3, r3, #32
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d002      	beq.n	8003baa <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003ba4:	6878      	ldr	r0, [r7, #4]
 8003ba6:	f000 fb77 	bl	8004298 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	695b      	ldr	r3, [r3, #20]
 8003bb0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb4:	2b00      	cmp	r3, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	2301      	movne	r3, #1
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	b2db      	uxtb	r3, r3
 8003bbe:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003bc6:	f003 0308 	and.w	r3, r3, #8
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d103      	bne.n	8003bd6 <HAL_UART_IRQHandler+0x17a>
 8003bce:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8003bd2:	2b00      	cmp	r3, #0
 8003bd4:	d04f      	beq.n	8003c76 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003bd6:	6878      	ldr	r0, [r7, #4]
 8003bd8:	f000 fa81 	bl	80040de <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	695b      	ldr	r3, [r3, #20]
 8003be2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d041      	beq.n	8003c6e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	3314      	adds	r3, #20
 8003bf0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003bf4:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003bf8:	e853 3f00 	ldrex	r3, [r3]
 8003bfc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8003c00:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003c04:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003c08:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	3314      	adds	r3, #20
 8003c12:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003c16:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003c1a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003c1e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8003c22:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003c26:	e841 2300 	strex	r3, r2, [r1]
 8003c2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8003c2e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d1d9      	bne.n	8003bea <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d013      	beq.n	8003c66 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c42:	4a7e      	ldr	r2, [pc, #504]	@ (8003e3c <HAL_UART_IRQHandler+0x3e0>)
 8003c44:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c4a:	4618      	mov	r0, r3
 8003c4c:	f7fe f960 	bl	8001f10 <HAL_DMA_Abort_IT>
 8003c50:	4603      	mov	r3, r0
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d016      	beq.n	8003c84 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003c5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003c5c:	687a      	ldr	r2, [r7, #4]
 8003c5e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8003c60:	4610      	mov	r0, r2
 8003c62:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c64:	e00e      	b.n	8003c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003c66:	6878      	ldr	r0, [r7, #4]
 8003c68:	f000 f993 	bl	8003f92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c6c:	e00a      	b.n	8003c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8003c6e:	6878      	ldr	r0, [r7, #4]
 8003c70:	f000 f98f 	bl	8003f92 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c74:	e006      	b.n	8003c84 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f98b 	bl	8003f92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	2200      	movs	r2, #0
 8003c80:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8003c82:	e175      	b.n	8003f70 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003c84:	bf00      	nop
    return;
 8003c86:	e173      	b.n	8003f70 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	f040 814f 	bne.w	8003f30 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8003c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003c96:	f003 0310 	and.w	r3, r3, #16
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	f000 8148 	beq.w	8003f30 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8003ca0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003ca4:	f003 0310 	and.w	r3, r3, #16
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	f000 8141 	beq.w	8003f30 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003cae:	2300      	movs	r3, #0
 8003cb0:	60bb      	str	r3, [r7, #8]
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	60bb      	str	r3, [r7, #8]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	60bb      	str	r3, [r7, #8]
 8003cc2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	695b      	ldr	r3, [r3, #20]
 8003cca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	f000 80b6 	beq.w	8003e40 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	685b      	ldr	r3, [r3, #4]
 8003cdc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8003ce0:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	f000 8145 	beq.w	8003f74 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003cee:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	f080 813e 	bcs.w	8003f74 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8003cfe:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	2b20      	cmp	r3, #32
 8003d08:	f000 8088 	beq.w	8003e1c <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	330c      	adds	r3, #12
 8003d12:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d16:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003d1a:	e853 3f00 	ldrex	r3, [r3]
 8003d1e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8003d22:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003d26:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003d2a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	330c      	adds	r3, #12
 8003d34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003d38:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003d3c:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d40:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003d44:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003d48:	e841 2300 	strex	r3, r2, [r1]
 8003d4c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8003d50:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d1d9      	bne.n	8003d0c <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	3314      	adds	r3, #20
 8003d5e:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d60:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003d62:	e853 3f00 	ldrex	r3, [r3]
 8003d66:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003d68:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003d6a:	f023 0301 	bic.w	r3, r3, #1
 8003d6e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	3314      	adds	r3, #20
 8003d78:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003d7c:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8003d80:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d82:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003d84:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003d88:	e841 2300 	strex	r3, r2, [r1]
 8003d8c:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8003d8e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	d1e1      	bne.n	8003d58 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	3314      	adds	r3, #20
 8003d9a:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d9c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003d9e:	e853 3f00 	ldrex	r3, [r3]
 8003da2:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003da4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003da6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003daa:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	3314      	adds	r3, #20
 8003db4:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003db8:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003dba:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dbc:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003dbe:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003dc0:	e841 2300 	strex	r3, r2, [r1]
 8003dc4:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003dc6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003dc8:	2b00      	cmp	r3, #0
 8003dca:	d1e3      	bne.n	8003d94 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2220      	movs	r2, #32
 8003dd0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2200      	movs	r2, #0
 8003dd8:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	330c      	adds	r3, #12
 8003de0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003de2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003de4:	e853 3f00 	ldrex	r3, [r3]
 8003de8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003dea:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003dec:	f023 0310 	bic.w	r3, r3, #16
 8003df0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	330c      	adds	r3, #12
 8003dfa:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003dfe:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003e00:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e02:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003e04:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003e06:	e841 2300 	strex	r3, r2, [r1]
 8003e0a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003e0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d1e3      	bne.n	8003dda <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e16:	4618      	mov	r0, r3
 8003e18:	f7fe f83f 	bl	8001e9a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e2a:	b29b      	uxth	r3, r3
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	b29b      	uxth	r3, r3
 8003e30:	4619      	mov	r1, r3
 8003e32:	6878      	ldr	r0, [r7, #4]
 8003e34:	f000 f8b6 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003e38:	e09c      	b.n	8003f74 <HAL_UART_IRQHandler+0x518>
 8003e3a:	bf00      	nop
 8003e3c:	080041a3 	.word	0x080041a3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e48:	b29b      	uxth	r3, r3
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003e54:	b29b      	uxth	r3, r3
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	f000 808e 	beq.w	8003f78 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003e5c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003e60:	2b00      	cmp	r3, #0
 8003e62:	f000 8089 	beq.w	8003f78 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	330c      	adds	r3, #12
 8003e6c:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003e6e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e70:	e853 3f00 	ldrex	r3, [r3]
 8003e74:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003e76:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003e7c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	330c      	adds	r3, #12
 8003e86:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003e8a:	647a      	str	r2, [r7, #68]	@ 0x44
 8003e8c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003e8e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003e90:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003e92:	e841 2300 	strex	r3, r2, [r1]
 8003e96:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003e98:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003e9a:	2b00      	cmp	r3, #0
 8003e9c:	d1e3      	bne.n	8003e66 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	3314      	adds	r3, #20
 8003ea4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea8:	e853 3f00 	ldrex	r3, [r3]
 8003eac:	623b      	str	r3, [r7, #32]
   return(result);
 8003eae:	6a3b      	ldr	r3, [r7, #32]
 8003eb0:	f023 0301 	bic.w	r3, r3, #1
 8003eb4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	3314      	adds	r3, #20
 8003ebe:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003ec2:	633a      	str	r2, [r7, #48]	@ 0x30
 8003ec4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ec6:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003ec8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003eca:	e841 2300 	strex	r3, r2, [r1]
 8003ece:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003ed0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d1e3      	bne.n	8003e9e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	2220      	movs	r2, #32
 8003eda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	330c      	adds	r3, #12
 8003eea:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003eec:	693b      	ldr	r3, [r7, #16]
 8003eee:	e853 3f00 	ldrex	r3, [r3]
 8003ef2:	60fb      	str	r3, [r7, #12]
   return(result);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f023 0310 	bic.w	r3, r3, #16
 8003efa:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	330c      	adds	r3, #12
 8003f04:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003f08:	61fa      	str	r2, [r7, #28]
 8003f0a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003f0c:	69b9      	ldr	r1, [r7, #24]
 8003f0e:	69fa      	ldr	r2, [r7, #28]
 8003f10:	e841 2300 	strex	r3, r2, [r1]
 8003f14:	617b      	str	r3, [r7, #20]
   return(result);
 8003f16:	697b      	ldr	r3, [r7, #20]
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1e3      	bne.n	8003ee4 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	2202      	movs	r2, #2
 8003f20:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003f22:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003f26:	4619      	mov	r1, r3
 8003f28:	6878      	ldr	r0, [r7, #4]
 8003f2a:	f000 f83b 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003f2e:	e023      	b.n	8003f78 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003f30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f34:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d009      	beq.n	8003f50 <HAL_UART_IRQHandler+0x4f4>
 8003f3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f44:	2b00      	cmp	r3, #0
 8003f46:	d003      	beq.n	8003f50 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f000 f93e 	bl	80041ca <UART_Transmit_IT>
    return;
 8003f4e:	e014      	b.n	8003f7a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003f54:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f58:	2b00      	cmp	r3, #0
 8003f5a:	d00e      	beq.n	8003f7a <HAL_UART_IRQHandler+0x51e>
 8003f5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003f60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f64:	2b00      	cmp	r3, #0
 8003f66:	d008      	beq.n	8003f7a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003f68:	6878      	ldr	r0, [r7, #4]
 8003f6a:	f000 f97d 	bl	8004268 <UART_EndTransmit_IT>
    return;
 8003f6e:	e004      	b.n	8003f7a <HAL_UART_IRQHandler+0x51e>
    return;
 8003f70:	bf00      	nop
 8003f72:	e002      	b.n	8003f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f74:	bf00      	nop
 8003f76:	e000      	b.n	8003f7a <HAL_UART_IRQHandler+0x51e>
      return;
 8003f78:	bf00      	nop
  }
}
 8003f7a:	37e8      	adds	r7, #232	@ 0xe8
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	bd80      	pop	{r7, pc}

08003f80 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003f80:	b480      	push	{r7}
 8003f82:	b083      	sub	sp, #12
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003f88:	bf00      	nop
 8003f8a:	370c      	adds	r7, #12
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bc80      	pop	{r7}
 8003f90:	4770      	bx	lr

08003f92 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003f92:	b480      	push	{r7}
 8003f94:	b083      	sub	sp, #12
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003f9a:	bf00      	nop
 8003f9c:	370c      	adds	r7, #12
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bc80      	pop	{r7}
 8003fa2:	4770      	bx	lr

08003fa4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003fa4:	b480      	push	{r7}
 8003fa6:	b083      	sub	sp, #12
 8003fa8:	af00      	add	r7, sp, #0
 8003faa:	6078      	str	r0, [r7, #4]
 8003fac:	460b      	mov	r3, r1
 8003fae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003fb0:	bf00      	nop
 8003fb2:	370c      	adds	r7, #12
 8003fb4:	46bd      	mov	sp, r7
 8003fb6:	bc80      	pop	{r7}
 8003fb8:	4770      	bx	lr

08003fba <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003fba:	b580      	push	{r7, lr}
 8003fbc:	b086      	sub	sp, #24
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	60b9      	str	r1, [r7, #8]
 8003fc4:	603b      	str	r3, [r7, #0]
 8003fc6:	4613      	mov	r3, r2
 8003fc8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003fca:	e03b      	b.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003fcc:	6a3b      	ldr	r3, [r7, #32]
 8003fce:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003fd2:	d037      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003fd4:	f7fd fe4a 	bl	8001c6c <HAL_GetTick>
 8003fd8:	4602      	mov	r2, r0
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	6a3a      	ldr	r2, [r7, #32]
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d302      	bcc.n	8003fea <UART_WaitOnFlagUntilTimeout+0x30>
 8003fe4:	6a3b      	ldr	r3, [r7, #32]
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d101      	bne.n	8003fee <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003fea:	2303      	movs	r3, #3
 8003fec:	e03a      	b.n	8004064 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d023      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	2b80      	cmp	r3, #128	@ 0x80
 8004000:	d020      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004002:	68bb      	ldr	r3, [r7, #8]
 8004004:	2b40      	cmp	r3, #64	@ 0x40
 8004006:	d01d      	beq.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0308 	and.w	r3, r3, #8
 8004012:	2b08      	cmp	r3, #8
 8004014:	d116      	bne.n	8004044 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004016:	2300      	movs	r3, #0
 8004018:	617b      	str	r3, [r7, #20]
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	617b      	str	r3, [r7, #20]
 8004022:	68fb      	ldr	r3, [r7, #12]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	685b      	ldr	r3, [r3, #4]
 8004028:	617b      	str	r3, [r7, #20]
 800402a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 f856 	bl	80040de <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	2208      	movs	r2, #8
 8004036:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004040:	2301      	movs	r3, #1
 8004042:	e00f      	b.n	8004064 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681a      	ldr	r2, [r3, #0]
 800404a:	68bb      	ldr	r3, [r7, #8]
 800404c:	4013      	ands	r3, r2
 800404e:	68ba      	ldr	r2, [r7, #8]
 8004050:	429a      	cmp	r2, r3
 8004052:	bf0c      	ite	eq
 8004054:	2301      	moveq	r3, #1
 8004056:	2300      	movne	r3, #0
 8004058:	b2db      	uxtb	r3, r3
 800405a:	461a      	mov	r2, r3
 800405c:	79fb      	ldrb	r3, [r7, #7]
 800405e:	429a      	cmp	r2, r3
 8004060:	d0b4      	beq.n	8003fcc <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004062:	2300      	movs	r3, #0
}
 8004064:	4618      	mov	r0, r3
 8004066:	3718      	adds	r7, #24
 8004068:	46bd      	mov	sp, r7
 800406a:	bd80      	pop	{r7, pc}

0800406c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800406c:	b480      	push	{r7}
 800406e:	b085      	sub	sp, #20
 8004070:	af00      	add	r7, sp, #0
 8004072:	60f8      	str	r0, [r7, #12]
 8004074:	60b9      	str	r1, [r7, #8]
 8004076:	4613      	mov	r3, r2
 8004078:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	68ba      	ldr	r2, [r7, #8]
 800407e:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	88fa      	ldrh	r2, [r7, #6]
 8004084:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004086:	68fb      	ldr	r3, [r7, #12]
 8004088:	88fa      	ldrh	r2, [r7, #6]
 800408a:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2222      	movs	r2, #34	@ 0x22
 8004096:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d007      	beq.n	80040b2 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68da      	ldr	r2, [r3, #12]
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040b0:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	695a      	ldr	r2, [r3, #20]
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f042 0201 	orr.w	r2, r2, #1
 80040c0:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	68da      	ldr	r2, [r3, #12]
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0220 	orr.w	r2, r2, #32
 80040d0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80040d2:	2300      	movs	r3, #0
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3714      	adds	r7, #20
 80040d8:	46bd      	mov	sp, r7
 80040da:	bc80      	pop	{r7}
 80040dc:	4770      	bx	lr

080040de <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80040de:	b480      	push	{r7}
 80040e0:	b095      	sub	sp, #84	@ 0x54
 80040e2:	af00      	add	r7, sp, #0
 80040e4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	330c      	adds	r3, #12
 80040ec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80040ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80040f0:	e853 3f00 	ldrex	r3, [r3]
 80040f4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80040f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80040f8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80040fc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	330c      	adds	r3, #12
 8004104:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004106:	643a      	str	r2, [r7, #64]	@ 0x40
 8004108:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800410a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800410c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800410e:	e841 2300 	strex	r3, r2, [r1]
 8004112:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004114:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1e5      	bne.n	80040e6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	3314      	adds	r3, #20
 8004120:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004122:	6a3b      	ldr	r3, [r7, #32]
 8004124:	e853 3f00 	ldrex	r3, [r3]
 8004128:	61fb      	str	r3, [r7, #28]
   return(result);
 800412a:	69fb      	ldr	r3, [r7, #28]
 800412c:	f023 0301 	bic.w	r3, r3, #1
 8004130:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	3314      	adds	r3, #20
 8004138:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800413a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800413c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800413e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004140:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004142:	e841 2300 	strex	r3, r2, [r1]
 8004146:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004148:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800414a:	2b00      	cmp	r3, #0
 800414c:	d1e5      	bne.n	800411a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004152:	2b01      	cmp	r3, #1
 8004154:	d119      	bne.n	800418a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	330c      	adds	r3, #12
 800415c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	e853 3f00 	ldrex	r3, [r3]
 8004164:	60bb      	str	r3, [r7, #8]
   return(result);
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	f023 0310 	bic.w	r3, r3, #16
 800416c:	647b      	str	r3, [r7, #68]	@ 0x44
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	330c      	adds	r3, #12
 8004174:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004176:	61ba      	str	r2, [r7, #24]
 8004178:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800417a:	6979      	ldr	r1, [r7, #20]
 800417c:	69ba      	ldr	r2, [r7, #24]
 800417e:	e841 2300 	strex	r3, r2, [r1]
 8004182:	613b      	str	r3, [r7, #16]
   return(result);
 8004184:	693b      	ldr	r3, [r7, #16]
 8004186:	2b00      	cmp	r3, #0
 8004188:	d1e5      	bne.n	8004156 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2220      	movs	r2, #32
 800418e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	2200      	movs	r2, #0
 8004196:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004198:	bf00      	nop
 800419a:	3754      	adds	r7, #84	@ 0x54
 800419c:	46bd      	mov	sp, r7
 800419e:	bc80      	pop	{r7}
 80041a0:	4770      	bx	lr

080041a2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80041a2:	b580      	push	{r7, lr}
 80041a4:	b084      	sub	sp, #16
 80041a6:	af00      	add	r7, sp, #0
 80041a8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80041ae:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	2200      	movs	r2, #0
 80041b4:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	2200      	movs	r2, #0
 80041ba:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80041bc:	68f8      	ldr	r0, [r7, #12]
 80041be:	f7ff fee8 	bl	8003f92 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80041c2:	bf00      	nop
 80041c4:	3710      	adds	r7, #16
 80041c6:	46bd      	mov	sp, r7
 80041c8:	bd80      	pop	{r7, pc}

080041ca <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80041ca:	b480      	push	{r7}
 80041cc:	b085      	sub	sp, #20
 80041ce:	af00      	add	r7, sp, #0
 80041d0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b21      	cmp	r3, #33	@ 0x21
 80041dc:	d13e      	bne.n	800425c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	689b      	ldr	r3, [r3, #8]
 80041e2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80041e6:	d114      	bne.n	8004212 <UART_Transmit_IT+0x48>
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	691b      	ldr	r3, [r3, #16]
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d110      	bne.n	8004212 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	6a1b      	ldr	r3, [r3, #32]
 80041f4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	881b      	ldrh	r3, [r3, #0]
 80041fa:	461a      	mov	r2, r3
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004204:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6a1b      	ldr	r3, [r3, #32]
 800420a:	1c9a      	adds	r2, r3, #2
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	621a      	str	r2, [r3, #32]
 8004210:	e008      	b.n	8004224 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	1c59      	adds	r1, r3, #1
 8004218:	687a      	ldr	r2, [r7, #4]
 800421a:	6211      	str	r1, [r2, #32]
 800421c:	781a      	ldrb	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004228:	b29b      	uxth	r3, r3
 800422a:	3b01      	subs	r3, #1
 800422c:	b29b      	uxth	r3, r3
 800422e:	687a      	ldr	r2, [r7, #4]
 8004230:	4619      	mov	r1, r3
 8004232:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10f      	bne.n	8004258 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	68da      	ldr	r2, [r3, #12]
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004246:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	68da      	ldr	r2, [r3, #12]
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004256:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004258:	2300      	movs	r3, #0
 800425a:	e000      	b.n	800425e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800425c:	2302      	movs	r3, #2
  }
}
 800425e:	4618      	mov	r0, r3
 8004260:	3714      	adds	r7, #20
 8004262:	46bd      	mov	sp, r7
 8004264:	bc80      	pop	{r7}
 8004266:	4770      	bx	lr

08004268 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004268:	b580      	push	{r7, lr}
 800426a:	b082      	sub	sp, #8
 800426c:	af00      	add	r7, sp, #0
 800426e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	68da      	ldr	r2, [r3, #12]
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800427e:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2220      	movs	r2, #32
 8004284:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004288:	6878      	ldr	r0, [r7, #4]
 800428a:	f7ff fe79 	bl	8003f80 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800428e:	2300      	movs	r3, #0
}
 8004290:	4618      	mov	r0, r3
 8004292:	3708      	adds	r7, #8
 8004294:	46bd      	mov	sp, r7
 8004296:	bd80      	pop	{r7, pc}

08004298 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004298:	b580      	push	{r7, lr}
 800429a:	b08c      	sub	sp, #48	@ 0x30
 800429c:	af00      	add	r7, sp, #0
 800429e:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042a6:	b2db      	uxtb	r3, r3
 80042a8:	2b22      	cmp	r3, #34	@ 0x22
 80042aa:	f040 80ae 	bne.w	800440a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	689b      	ldr	r3, [r3, #8]
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042b6:	d117      	bne.n	80042e8 <UART_Receive_IT+0x50>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	691b      	ldr	r3, [r3, #16]
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d113      	bne.n	80042e8 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80042c0:	2300      	movs	r3, #0
 80042c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	685b      	ldr	r3, [r3, #4]
 80042d0:	b29b      	uxth	r3, r3
 80042d2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80042da:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042e0:	1c9a      	adds	r2, r3, #2
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	629a      	str	r2, [r3, #40]	@ 0x28
 80042e6:	e026      	b.n	8004336 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 80042ee:	2300      	movs	r3, #0
 80042f0:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042fa:	d007      	beq.n	800430c <UART_Receive_IT+0x74>
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	2b00      	cmp	r3, #0
 8004302:	d10a      	bne.n	800431a <UART_Receive_IT+0x82>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	691b      	ldr	r3, [r3, #16]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d106      	bne.n	800431a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	685b      	ldr	r3, [r3, #4]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004316:	701a      	strb	r2, [r3, #0]
 8004318:	e008      	b.n	800432c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	685b      	ldr	r3, [r3, #4]
 8004320:	b2db      	uxtb	r3, r3
 8004322:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004326:	b2da      	uxtb	r2, r3
 8004328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800432a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004330:	1c5a      	adds	r2, r3, #1
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800433a:	b29b      	uxth	r3, r3
 800433c:	3b01      	subs	r3, #1
 800433e:	b29b      	uxth	r3, r3
 8004340:	687a      	ldr	r2, [r7, #4]
 8004342:	4619      	mov	r1, r3
 8004344:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004346:	2b00      	cmp	r3, #0
 8004348:	d15d      	bne.n	8004406 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	f022 0220 	bic.w	r2, r2, #32
 8004358:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	68da      	ldr	r2, [r3, #12]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004368:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	695a      	ldr	r2, [r3, #20]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f022 0201 	bic.w	r2, r2, #1
 8004378:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	2220      	movs	r2, #32
 800437e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2200      	movs	r2, #0
 8004386:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800438c:	2b01      	cmp	r3, #1
 800438e:	d135      	bne.n	80043fc <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	2200      	movs	r2, #0
 8004394:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	330c      	adds	r3, #12
 800439c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	e853 3f00 	ldrex	r3, [r3]
 80043a4:	613b      	str	r3, [r7, #16]
   return(result);
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	f023 0310 	bic.w	r3, r3, #16
 80043ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	330c      	adds	r3, #12
 80043b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b6:	623a      	str	r2, [r7, #32]
 80043b8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80043ba:	69f9      	ldr	r1, [r7, #28]
 80043bc:	6a3a      	ldr	r2, [r7, #32]
 80043be:	e841 2300 	strex	r3, r2, [r1]
 80043c2:	61bb      	str	r3, [r7, #24]
   return(result);
 80043c4:	69bb      	ldr	r3, [r7, #24]
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d1e5      	bne.n	8004396 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	f003 0310 	and.w	r3, r3, #16
 80043d4:	2b10      	cmp	r3, #16
 80043d6:	d10a      	bne.n	80043ee <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80043d8:	2300      	movs	r3, #0
 80043da:	60fb      	str	r3, [r7, #12]
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	60fb      	str	r3, [r7, #12]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	60fb      	str	r3, [r7, #12]
 80043ec:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80043f2:	4619      	mov	r1, r3
 80043f4:	6878      	ldr	r0, [r7, #4]
 80043f6:	f7ff fdd5 	bl	8003fa4 <HAL_UARTEx_RxEventCallback>
 80043fa:	e002      	b.n	8004402 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80043fc:	6878      	ldr	r0, [r7, #4]
 80043fe:	f7fd facf 	bl	80019a0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004402:	2300      	movs	r3, #0
 8004404:	e002      	b.n	800440c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004406:	2300      	movs	r3, #0
 8004408:	e000      	b.n	800440c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800440a:	2302      	movs	r3, #2
  }
}
 800440c:	4618      	mov	r0, r3
 800440e:	3730      	adds	r7, #48	@ 0x30
 8004410:	46bd      	mov	sp, r7
 8004412:	bd80      	pop	{r7, pc}

08004414 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004414:	b580      	push	{r7, lr}
 8004416:	b084      	sub	sp, #16
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	691b      	ldr	r3, [r3, #16]
 8004422:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	68da      	ldr	r2, [r3, #12]
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	430a      	orrs	r2, r1
 8004430:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	689a      	ldr	r2, [r3, #8]
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	691b      	ldr	r3, [r3, #16]
 800443a:	431a      	orrs	r2, r3
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	695b      	ldr	r3, [r3, #20]
 8004440:	4313      	orrs	r3, r2
 8004442:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	68db      	ldr	r3, [r3, #12]
 800444a:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800444e:	f023 030c 	bic.w	r3, r3, #12
 8004452:	687a      	ldr	r2, [r7, #4]
 8004454:	6812      	ldr	r2, [r2, #0]
 8004456:	68b9      	ldr	r1, [r7, #8]
 8004458:	430b      	orrs	r3, r1
 800445a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	695b      	ldr	r3, [r3, #20]
 8004462:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	699a      	ldr	r2, [r3, #24]
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	430a      	orrs	r2, r1
 8004470:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	4a2c      	ldr	r2, [pc, #176]	@ (8004528 <UART_SetConfig+0x114>)
 8004478:	4293      	cmp	r3, r2
 800447a:	d103      	bne.n	8004484 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 800447c:	f7fe fb5e 	bl	8002b3c <HAL_RCC_GetPCLK2Freq>
 8004480:	60f8      	str	r0, [r7, #12]
 8004482:	e002      	b.n	800448a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8004484:	f7fe fb46 	bl	8002b14 <HAL_RCC_GetPCLK1Freq>
 8004488:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800448a:	68fa      	ldr	r2, [r7, #12]
 800448c:	4613      	mov	r3, r2
 800448e:	009b      	lsls	r3, r3, #2
 8004490:	4413      	add	r3, r2
 8004492:	009a      	lsls	r2, r3, #2
 8004494:	441a      	add	r2, r3
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	685b      	ldr	r3, [r3, #4]
 800449a:	009b      	lsls	r3, r3, #2
 800449c:	fbb2 f3f3 	udiv	r3, r2, r3
 80044a0:	4a22      	ldr	r2, [pc, #136]	@ (800452c <UART_SetConfig+0x118>)
 80044a2:	fba2 2303 	umull	r2, r3, r2, r3
 80044a6:	095b      	lsrs	r3, r3, #5
 80044a8:	0119      	lsls	r1, r3, #4
 80044aa:	68fa      	ldr	r2, [r7, #12]
 80044ac:	4613      	mov	r3, r2
 80044ae:	009b      	lsls	r3, r3, #2
 80044b0:	4413      	add	r3, r2
 80044b2:	009a      	lsls	r2, r3, #2
 80044b4:	441a      	add	r2, r3
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	685b      	ldr	r3, [r3, #4]
 80044ba:	009b      	lsls	r3, r3, #2
 80044bc:	fbb2 f2f3 	udiv	r2, r2, r3
 80044c0:	4b1a      	ldr	r3, [pc, #104]	@ (800452c <UART_SetConfig+0x118>)
 80044c2:	fba3 0302 	umull	r0, r3, r3, r2
 80044c6:	095b      	lsrs	r3, r3, #5
 80044c8:	2064      	movs	r0, #100	@ 0x64
 80044ca:	fb00 f303 	mul.w	r3, r0, r3
 80044ce:	1ad3      	subs	r3, r2, r3
 80044d0:	011b      	lsls	r3, r3, #4
 80044d2:	3332      	adds	r3, #50	@ 0x32
 80044d4:	4a15      	ldr	r2, [pc, #84]	@ (800452c <UART_SetConfig+0x118>)
 80044d6:	fba2 2303 	umull	r2, r3, r2, r3
 80044da:	095b      	lsrs	r3, r3, #5
 80044dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80044e0:	4419      	add	r1, r3
 80044e2:	68fa      	ldr	r2, [r7, #12]
 80044e4:	4613      	mov	r3, r2
 80044e6:	009b      	lsls	r3, r3, #2
 80044e8:	4413      	add	r3, r2
 80044ea:	009a      	lsls	r2, r3, #2
 80044ec:	441a      	add	r2, r3
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	685b      	ldr	r3, [r3, #4]
 80044f2:	009b      	lsls	r3, r3, #2
 80044f4:	fbb2 f2f3 	udiv	r2, r2, r3
 80044f8:	4b0c      	ldr	r3, [pc, #48]	@ (800452c <UART_SetConfig+0x118>)
 80044fa:	fba3 0302 	umull	r0, r3, r3, r2
 80044fe:	095b      	lsrs	r3, r3, #5
 8004500:	2064      	movs	r0, #100	@ 0x64
 8004502:	fb00 f303 	mul.w	r3, r0, r3
 8004506:	1ad3      	subs	r3, r2, r3
 8004508:	011b      	lsls	r3, r3, #4
 800450a:	3332      	adds	r3, #50	@ 0x32
 800450c:	4a07      	ldr	r2, [pc, #28]	@ (800452c <UART_SetConfig+0x118>)
 800450e:	fba2 2303 	umull	r2, r3, r2, r3
 8004512:	095b      	lsrs	r3, r3, #5
 8004514:	f003 020f 	and.w	r2, r3, #15
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	440a      	add	r2, r1
 800451e:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004520:	bf00      	nop
 8004522:	3710      	adds	r7, #16
 8004524:	46bd      	mov	sp, r7
 8004526:	bd80      	pop	{r7, pc}
 8004528:	40013800 	.word	0x40013800
 800452c:	51eb851f 	.word	0x51eb851f

08004530 <__NVIC_SetPriority>:
{
 8004530:	b480      	push	{r7}
 8004532:	b083      	sub	sp, #12
 8004534:	af00      	add	r7, sp, #0
 8004536:	4603      	mov	r3, r0
 8004538:	6039      	str	r1, [r7, #0]
 800453a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800453c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004540:	2b00      	cmp	r3, #0
 8004542:	db0a      	blt.n	800455a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	b2da      	uxtb	r2, r3
 8004548:	490c      	ldr	r1, [pc, #48]	@ (800457c <__NVIC_SetPriority+0x4c>)
 800454a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800454e:	0112      	lsls	r2, r2, #4
 8004550:	b2d2      	uxtb	r2, r2
 8004552:	440b      	add	r3, r1
 8004554:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004558:	e00a      	b.n	8004570 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	b2da      	uxtb	r2, r3
 800455e:	4908      	ldr	r1, [pc, #32]	@ (8004580 <__NVIC_SetPriority+0x50>)
 8004560:	79fb      	ldrb	r3, [r7, #7]
 8004562:	f003 030f 	and.w	r3, r3, #15
 8004566:	3b04      	subs	r3, #4
 8004568:	0112      	lsls	r2, r2, #4
 800456a:	b2d2      	uxtb	r2, r2
 800456c:	440b      	add	r3, r1
 800456e:	761a      	strb	r2, [r3, #24]
}
 8004570:	bf00      	nop
 8004572:	370c      	adds	r7, #12
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
 800457a:	bf00      	nop
 800457c:	e000e100 	.word	0xe000e100
 8004580:	e000ed00 	.word	0xe000ed00

08004584 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004584:	b580      	push	{r7, lr}
 8004586:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004588:	4b05      	ldr	r3, [pc, #20]	@ (80045a0 <SysTick_Handler+0x1c>)
 800458a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800458c:	f002 f818 	bl	80065c0 <xTaskGetSchedulerState>
 8004590:	4603      	mov	r3, r0
 8004592:	2b01      	cmp	r3, #1
 8004594:	d001      	beq.n	800459a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004596:	f002 ffd7 	bl	8007548 <xPortSysTickHandler>
  }
}
 800459a:	bf00      	nop
 800459c:	bd80      	pop	{r7, pc}
 800459e:	bf00      	nop
 80045a0:	e000e010 	.word	0xe000e010

080045a4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80045a4:	b580      	push	{r7, lr}
 80045a6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80045a8:	2100      	movs	r1, #0
 80045aa:	f06f 0004 	mvn.w	r0, #4
 80045ae:	f7ff ffbf 	bl	8004530 <__NVIC_SetPriority>
#endif
}
 80045b2:	bf00      	nop
 80045b4:	bd80      	pop	{r7, pc}
	...

080045b8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80045be:	f3ef 8305 	mrs	r3, IPSR
 80045c2:	603b      	str	r3, [r7, #0]
  return(result);
 80045c4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d003      	beq.n	80045d2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80045ca:	f06f 0305 	mvn.w	r3, #5
 80045ce:	607b      	str	r3, [r7, #4]
 80045d0:	e00c      	b.n	80045ec <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80045d2:	4b09      	ldr	r3, [pc, #36]	@ (80045f8 <osKernelInitialize+0x40>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d105      	bne.n	80045e6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80045da:	4b07      	ldr	r3, [pc, #28]	@ (80045f8 <osKernelInitialize+0x40>)
 80045dc:	2201      	movs	r2, #1
 80045de:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80045e0:	2300      	movs	r3, #0
 80045e2:	607b      	str	r3, [r7, #4]
 80045e4:	e002      	b.n	80045ec <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80045e6:	f04f 33ff 	mov.w	r3, #4294967295
 80045ea:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80045ec:	687b      	ldr	r3, [r7, #4]
}
 80045ee:	4618      	mov	r0, r3
 80045f0:	370c      	adds	r7, #12
 80045f2:	46bd      	mov	sp, r7
 80045f4:	bc80      	pop	{r7}
 80045f6:	4770      	bx	lr
 80045f8:	20000268 	.word	0x20000268

080045fc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80045fc:	b580      	push	{r7, lr}
 80045fe:	b082      	sub	sp, #8
 8004600:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004602:	f3ef 8305 	mrs	r3, IPSR
 8004606:	603b      	str	r3, [r7, #0]
  return(result);
 8004608:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800460a:	2b00      	cmp	r3, #0
 800460c:	d003      	beq.n	8004616 <osKernelStart+0x1a>
    stat = osErrorISR;
 800460e:	f06f 0305 	mvn.w	r3, #5
 8004612:	607b      	str	r3, [r7, #4]
 8004614:	e010      	b.n	8004638 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004616:	4b0b      	ldr	r3, [pc, #44]	@ (8004644 <osKernelStart+0x48>)
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	2b01      	cmp	r3, #1
 800461c:	d109      	bne.n	8004632 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800461e:	f7ff ffc1 	bl	80045a4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004622:	4b08      	ldr	r3, [pc, #32]	@ (8004644 <osKernelStart+0x48>)
 8004624:	2202      	movs	r2, #2
 8004626:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004628:	f001 fb70 	bl	8005d0c <vTaskStartScheduler>
      stat = osOK;
 800462c:	2300      	movs	r3, #0
 800462e:	607b      	str	r3, [r7, #4]
 8004630:	e002      	b.n	8004638 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004632:	f04f 33ff 	mov.w	r3, #4294967295
 8004636:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004638:	687b      	ldr	r3, [r7, #4]
}
 800463a:	4618      	mov	r0, r3
 800463c:	3708      	adds	r7, #8
 800463e:	46bd      	mov	sp, r7
 8004640:	bd80      	pop	{r7, pc}
 8004642:	bf00      	nop
 8004644:	20000268 	.word	0x20000268

08004648 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004648:	b580      	push	{r7, lr}
 800464a:	b08e      	sub	sp, #56	@ 0x38
 800464c:	af04      	add	r7, sp, #16
 800464e:	60f8      	str	r0, [r7, #12]
 8004650:	60b9      	str	r1, [r7, #8]
 8004652:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004654:	2300      	movs	r3, #0
 8004656:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004658:	f3ef 8305 	mrs	r3, IPSR
 800465c:	617b      	str	r3, [r7, #20]
  return(result);
 800465e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004660:	2b00      	cmp	r3, #0
 8004662:	d17e      	bne.n	8004762 <osThreadNew+0x11a>
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	2b00      	cmp	r3, #0
 8004668:	d07b      	beq.n	8004762 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800466a:	2380      	movs	r3, #128	@ 0x80
 800466c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800466e:	2318      	movs	r3, #24
 8004670:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004672:	2300      	movs	r3, #0
 8004674:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004676:	f04f 33ff 	mov.w	r3, #4294967295
 800467a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d045      	beq.n	800470e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	2b00      	cmp	r3, #0
 8004688:	d002      	beq.n	8004690 <osThreadNew+0x48>
        name = attr->name;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	699b      	ldr	r3, [r3, #24]
 8004694:	2b00      	cmp	r3, #0
 8004696:	d002      	beq.n	800469e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	2b00      	cmp	r3, #0
 80046a2:	d008      	beq.n	80046b6 <osThreadNew+0x6e>
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	2b38      	cmp	r3, #56	@ 0x38
 80046a8:	d805      	bhi.n	80046b6 <osThreadNew+0x6e>
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	685b      	ldr	r3, [r3, #4]
 80046ae:	f003 0301 	and.w	r3, r3, #1
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	d001      	beq.n	80046ba <osThreadNew+0x72>
        return (NULL);
 80046b6:	2300      	movs	r3, #0
 80046b8:	e054      	b.n	8004764 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d003      	beq.n	80046ca <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	089b      	lsrs	r3, r3, #2
 80046c8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	689b      	ldr	r3, [r3, #8]
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00e      	beq.n	80046f0 <osThreadNew+0xa8>
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68db      	ldr	r3, [r3, #12]
 80046d6:	2b5b      	cmp	r3, #91	@ 0x5b
 80046d8:	d90a      	bls.n	80046f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80046de:	2b00      	cmp	r3, #0
 80046e0:	d006      	beq.n	80046f0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	695b      	ldr	r3, [r3, #20]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <osThreadNew+0xa8>
        mem = 1;
 80046ea:	2301      	movs	r3, #1
 80046ec:	61bb      	str	r3, [r7, #24]
 80046ee:	e010      	b.n	8004712 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	689b      	ldr	r3, [r3, #8]
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d10c      	bne.n	8004712 <osThreadNew+0xca>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	68db      	ldr	r3, [r3, #12]
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d108      	bne.n	8004712 <osThreadNew+0xca>
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	691b      	ldr	r3, [r3, #16]
 8004704:	2b00      	cmp	r3, #0
 8004706:	d104      	bne.n	8004712 <osThreadNew+0xca>
          mem = 0;
 8004708:	2300      	movs	r3, #0
 800470a:	61bb      	str	r3, [r7, #24]
 800470c:	e001      	b.n	8004712 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800470e:	2300      	movs	r3, #0
 8004710:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004712:	69bb      	ldr	r3, [r7, #24]
 8004714:	2b01      	cmp	r3, #1
 8004716:	d110      	bne.n	800473a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800471c:	687a      	ldr	r2, [r7, #4]
 800471e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004720:	9202      	str	r2, [sp, #8]
 8004722:	9301      	str	r3, [sp, #4]
 8004724:	69fb      	ldr	r3, [r7, #28]
 8004726:	9300      	str	r3, [sp, #0]
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	6a3a      	ldr	r2, [r7, #32]
 800472c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800472e:	68f8      	ldr	r0, [r7, #12]
 8004730:	f001 f946 	bl	80059c0 <xTaskCreateStatic>
 8004734:	4603      	mov	r3, r0
 8004736:	613b      	str	r3, [r7, #16]
 8004738:	e013      	b.n	8004762 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800473a:	69bb      	ldr	r3, [r7, #24]
 800473c:	2b00      	cmp	r3, #0
 800473e:	d110      	bne.n	8004762 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004740:	6a3b      	ldr	r3, [r7, #32]
 8004742:	b29a      	uxth	r2, r3
 8004744:	f107 0310 	add.w	r3, r7, #16
 8004748:	9301      	str	r3, [sp, #4]
 800474a:	69fb      	ldr	r3, [r7, #28]
 800474c:	9300      	str	r3, [sp, #0]
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004752:	68f8      	ldr	r0, [r7, #12]
 8004754:	f001 f994 	bl	8005a80 <xTaskCreate>
 8004758:	4603      	mov	r3, r0
 800475a:	2b01      	cmp	r3, #1
 800475c:	d001      	beq.n	8004762 <osThreadNew+0x11a>
            hTask = NULL;
 800475e:	2300      	movs	r3, #0
 8004760:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004762:	693b      	ldr	r3, [r7, #16]
}
 8004764:	4618      	mov	r0, r3
 8004766:	3728      	adds	r7, #40	@ 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800476c:	b480      	push	{r7}
 800476e:	b085      	sub	sp, #20
 8004770:	af00      	add	r7, sp, #0
 8004772:	60f8      	str	r0, [r7, #12]
 8004774:	60b9      	str	r1, [r7, #8]
 8004776:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	4a06      	ldr	r2, [pc, #24]	@ (8004794 <vApplicationGetIdleTaskMemory+0x28>)
 800477c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800477e:	68bb      	ldr	r3, [r7, #8]
 8004780:	4a05      	ldr	r2, [pc, #20]	@ (8004798 <vApplicationGetIdleTaskMemory+0x2c>)
 8004782:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2280      	movs	r2, #128	@ 0x80
 8004788:	601a      	str	r2, [r3, #0]
}
 800478a:	bf00      	nop
 800478c:	3714      	adds	r7, #20
 800478e:	46bd      	mov	sp, r7
 8004790:	bc80      	pop	{r7}
 8004792:	4770      	bx	lr
 8004794:	2000026c 	.word	0x2000026c
 8004798:	200002c8 	.word	0x200002c8

0800479c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	60f8      	str	r0, [r7, #12]
 80047a4:	60b9      	str	r1, [r7, #8]
 80047a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4a07      	ldr	r2, [pc, #28]	@ (80047c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80047ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	4a06      	ldr	r2, [pc, #24]	@ (80047cc <vApplicationGetTimerTaskMemory+0x30>)
 80047b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047ba:	601a      	str	r2, [r3, #0]
}
 80047bc:	bf00      	nop
 80047be:	3714      	adds	r7, #20
 80047c0:	46bd      	mov	sp, r7
 80047c2:	bc80      	pop	{r7}
 80047c4:	4770      	bx	lr
 80047c6:	bf00      	nop
 80047c8:	200004c8 	.word	0x200004c8
 80047cc:	20000524 	.word	0x20000524

080047d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0208 	add.w	r2, r3, #8
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	f04f 32ff 	mov.w	r2, #4294967295
 80047e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	f103 0208 	add.w	r2, r3, #8
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	f103 0208 	add.w	r2, r3, #8
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	2200      	movs	r2, #0
 8004802:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004804:	bf00      	nop
 8004806:	370c      	adds	r7, #12
 8004808:	46bd      	mov	sp, r7
 800480a:	bc80      	pop	{r7}
 800480c:	4770      	bx	lr

0800480e <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800480e:	b480      	push	{r7}
 8004810:	b083      	sub	sp, #12
 8004812:	af00      	add	r7, sp, #0
 8004814:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2200      	movs	r2, #0
 800481a:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	bc80      	pop	{r7}
 8004824:	4770      	bx	lr

08004826 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004826:	b480      	push	{r7}
 8004828:	b085      	sub	sp, #20
 800482a:	af00      	add	r7, sp, #0
 800482c:	6078      	str	r0, [r7, #4]
 800482e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	685b      	ldr	r3, [r3, #4]
 8004834:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004836:	683b      	ldr	r3, [r7, #0]
 8004838:	68fa      	ldr	r2, [r7, #12]
 800483a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800483c:	68fb      	ldr	r3, [r7, #12]
 800483e:	689a      	ldr	r2, [r3, #8]
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004844:	68fb      	ldr	r3, [r7, #12]
 8004846:	689b      	ldr	r3, [r3, #8]
 8004848:	683a      	ldr	r2, [r7, #0]
 800484a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	683a      	ldr	r2, [r7, #0]
 8004850:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	687a      	ldr	r2, [r7, #4]
 8004856:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	1c5a      	adds	r2, r3, #1
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	601a      	str	r2, [r3, #0]
}
 8004862:	bf00      	nop
 8004864:	3714      	adds	r7, #20
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800486c:	b480      	push	{r7}
 800486e:	b085      	sub	sp, #20
 8004870:	af00      	add	r7, sp, #0
 8004872:	6078      	str	r0, [r7, #4]
 8004874:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004876:	683b      	ldr	r3, [r7, #0]
 8004878:	681b      	ldr	r3, [r3, #0]
 800487a:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004882:	d103      	bne.n	800488c <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	691b      	ldr	r3, [r3, #16]
 8004888:	60fb      	str	r3, [r7, #12]
 800488a:	e00c      	b.n	80048a6 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	3308      	adds	r3, #8
 8004890:	60fb      	str	r3, [r7, #12]
 8004892:	e002      	b.n	800489a <vListInsert+0x2e>
 8004894:	68fb      	ldr	r3, [r7, #12]
 8004896:	685b      	ldr	r3, [r3, #4]
 8004898:	60fb      	str	r3, [r7, #12]
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	681b      	ldr	r3, [r3, #0]
 80048a0:	68ba      	ldr	r2, [r7, #8]
 80048a2:	429a      	cmp	r2, r3
 80048a4:	d2f6      	bcs.n	8004894 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	685a      	ldr	r2, [r3, #4]
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	683a      	ldr	r2, [r7, #0]
 80048b4:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80048b6:	683b      	ldr	r3, [r7, #0]
 80048b8:	68fa      	ldr	r2, [r7, #12]
 80048ba:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80048bc:	68fb      	ldr	r3, [r7, #12]
 80048be:	683a      	ldr	r2, [r7, #0]
 80048c0:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	687a      	ldr	r2, [r7, #4]
 80048c6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	1c5a      	adds	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	601a      	str	r2, [r3, #0]
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	bc80      	pop	{r7}
 80048da:	4770      	bx	lr

080048dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80048dc:	b480      	push	{r7}
 80048de:	b085      	sub	sp, #20
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	691b      	ldr	r3, [r3, #16]
 80048e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	687a      	ldr	r2, [r7, #4]
 80048f0:	6892      	ldr	r2, [r2, #8]
 80048f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	689b      	ldr	r3, [r3, #8]
 80048f8:	687a      	ldr	r2, [r7, #4]
 80048fa:	6852      	ldr	r2, [r2, #4]
 80048fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	685b      	ldr	r3, [r3, #4]
 8004902:	687a      	ldr	r2, [r7, #4]
 8004904:	429a      	cmp	r2, r3
 8004906:	d103      	bne.n	8004910 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	689a      	ldr	r2, [r3, #8]
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2200      	movs	r2, #0
 8004914:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	1e5a      	subs	r2, r3, #1
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	681b      	ldr	r3, [r3, #0]
}
 8004924:	4618      	mov	r0, r3
 8004926:	3714      	adds	r7, #20
 8004928:	46bd      	mov	sp, r7
 800492a:	bc80      	pop	{r7}
 800492c:	4770      	bx	lr
	...

08004930 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b084      	sub	sp, #16
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d10b      	bne.n	800495c <xQueueGenericReset+0x2c>
	__asm volatile
 8004944:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004948:	f383 8811 	msr	BASEPRI, r3
 800494c:	f3bf 8f6f 	isb	sy
 8004950:	f3bf 8f4f 	dsb	sy
 8004954:	60bb      	str	r3, [r7, #8]
}
 8004956:	bf00      	nop
 8004958:	bf00      	nop
 800495a:	e7fd      	b.n	8004958 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800495c:	f002 fd76 	bl	800744c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	681a      	ldr	r2, [r3, #0]
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004968:	68f9      	ldr	r1, [r7, #12]
 800496a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800496c:	fb01 f303 	mul.w	r3, r1, r3
 8004970:	441a      	add	r2, r3
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004976:	68fb      	ldr	r3, [r7, #12]
 8004978:	2200      	movs	r2, #0
 800497a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	681a      	ldr	r2, [r3, #0]
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	681a      	ldr	r2, [r3, #0]
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800498c:	3b01      	subs	r3, #1
 800498e:	68f9      	ldr	r1, [r7, #12]
 8004990:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004992:	fb01 f303 	mul.w	r3, r1, r3
 8004996:	441a      	add	r2, r3
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	22ff      	movs	r2, #255	@ 0xff
 80049a0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80049a4:	68fb      	ldr	r3, [r7, #12]
 80049a6:	22ff      	movs	r2, #255	@ 0xff
 80049a8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d114      	bne.n	80049dc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	691b      	ldr	r3, [r3, #16]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d01a      	beq.n	80049f0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	3310      	adds	r3, #16
 80049be:	4618      	mov	r0, r3
 80049c0:	f001 fc30 	bl	8006224 <xTaskRemoveFromEventList>
 80049c4:	4603      	mov	r3, r0
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d012      	beq.n	80049f0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80049ca:	4b0d      	ldr	r3, [pc, #52]	@ (8004a00 <xQueueGenericReset+0xd0>)
 80049cc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80049d0:	601a      	str	r2, [r3, #0]
 80049d2:	f3bf 8f4f 	dsb	sy
 80049d6:	f3bf 8f6f 	isb	sy
 80049da:	e009      	b.n	80049f0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	3310      	adds	r3, #16
 80049e0:	4618      	mov	r0, r3
 80049e2:	f7ff fef5 	bl	80047d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	3324      	adds	r3, #36	@ 0x24
 80049ea:	4618      	mov	r0, r3
 80049ec:	f7ff fef0 	bl	80047d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80049f0:	f002 fd5c 	bl	80074ac <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80049f4:	2301      	movs	r3, #1
}
 80049f6:	4618      	mov	r0, r3
 80049f8:	3710      	adds	r7, #16
 80049fa:	46bd      	mov	sp, r7
 80049fc:	bd80      	pop	{r7, pc}
 80049fe:	bf00      	nop
 8004a00:	e000ed04 	.word	0xe000ed04

08004a04 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004a04:	b580      	push	{r7, lr}
 8004a06:	b08e      	sub	sp, #56	@ 0x38
 8004a08:	af02      	add	r7, sp, #8
 8004a0a:	60f8      	str	r0, [r7, #12]
 8004a0c:	60b9      	str	r1, [r7, #8]
 8004a0e:	607a      	str	r2, [r7, #4]
 8004a10:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d10b      	bne.n	8004a30 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004a18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a1c:	f383 8811 	msr	BASEPRI, r3
 8004a20:	f3bf 8f6f 	isb	sy
 8004a24:	f3bf 8f4f 	dsb	sy
 8004a28:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004a2a:	bf00      	nop
 8004a2c:	bf00      	nop
 8004a2e:	e7fd      	b.n	8004a2c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d10b      	bne.n	8004a4e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004a36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a3a:	f383 8811 	msr	BASEPRI, r3
 8004a3e:	f3bf 8f6f 	isb	sy
 8004a42:	f3bf 8f4f 	dsb	sy
 8004a46:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004a48:	bf00      	nop
 8004a4a:	bf00      	nop
 8004a4c:	e7fd      	b.n	8004a4a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d002      	beq.n	8004a5a <xQueueGenericCreateStatic+0x56>
 8004a54:	68bb      	ldr	r3, [r7, #8]
 8004a56:	2b00      	cmp	r3, #0
 8004a58:	d001      	beq.n	8004a5e <xQueueGenericCreateStatic+0x5a>
 8004a5a:	2301      	movs	r3, #1
 8004a5c:	e000      	b.n	8004a60 <xQueueGenericCreateStatic+0x5c>
 8004a5e:	2300      	movs	r3, #0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d10b      	bne.n	8004a7c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004a64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a68:	f383 8811 	msr	BASEPRI, r3
 8004a6c:	f3bf 8f6f 	isb	sy
 8004a70:	f3bf 8f4f 	dsb	sy
 8004a74:	623b      	str	r3, [r7, #32]
}
 8004a76:	bf00      	nop
 8004a78:	bf00      	nop
 8004a7a:	e7fd      	b.n	8004a78 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d102      	bne.n	8004a88 <xQueueGenericCreateStatic+0x84>
 8004a82:	68bb      	ldr	r3, [r7, #8]
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d101      	bne.n	8004a8c <xQueueGenericCreateStatic+0x88>
 8004a88:	2301      	movs	r3, #1
 8004a8a:	e000      	b.n	8004a8e <xQueueGenericCreateStatic+0x8a>
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d10b      	bne.n	8004aaa <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004a92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a96:	f383 8811 	msr	BASEPRI, r3
 8004a9a:	f3bf 8f6f 	isb	sy
 8004a9e:	f3bf 8f4f 	dsb	sy
 8004aa2:	61fb      	str	r3, [r7, #28]
}
 8004aa4:	bf00      	nop
 8004aa6:	bf00      	nop
 8004aa8:	e7fd      	b.n	8004aa6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004aaa:	2350      	movs	r3, #80	@ 0x50
 8004aac:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	2b50      	cmp	r3, #80	@ 0x50
 8004ab2:	d00b      	beq.n	8004acc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004ab4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ab8:	f383 8811 	msr	BASEPRI, r3
 8004abc:	f3bf 8f6f 	isb	sy
 8004ac0:	f3bf 8f4f 	dsb	sy
 8004ac4:	61bb      	str	r3, [r7, #24]
}
 8004ac6:	bf00      	nop
 8004ac8:	bf00      	nop
 8004aca:	e7fd      	b.n	8004ac8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004acc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004ad2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	d00d      	beq.n	8004af4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ada:	2201      	movs	r2, #1
 8004adc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004ae0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004ae4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ae6:	9300      	str	r3, [sp, #0]
 8004ae8:	4613      	mov	r3, r2
 8004aea:	687a      	ldr	r2, [r7, #4]
 8004aec:	68b9      	ldr	r1, [r7, #8]
 8004aee:	68f8      	ldr	r0, [r7, #12]
 8004af0:	f000 f805 	bl	8004afe <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004af4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004af6:	4618      	mov	r0, r3
 8004af8:	3730      	adds	r7, #48	@ 0x30
 8004afa:	46bd      	mov	sp, r7
 8004afc:	bd80      	pop	{r7, pc}

08004afe <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8004afe:	b580      	push	{r7, lr}
 8004b00:	b084      	sub	sp, #16
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	60f8      	str	r0, [r7, #12]
 8004b06:	60b9      	str	r1, [r7, #8]
 8004b08:	607a      	str	r2, [r7, #4]
 8004b0a:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004b0c:	68bb      	ldr	r3, [r7, #8]
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8004b12:	69bb      	ldr	r3, [r7, #24]
 8004b14:	69ba      	ldr	r2, [r7, #24]
 8004b16:	601a      	str	r2, [r3, #0]
 8004b18:	e002      	b.n	8004b20 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004b1a:	69bb      	ldr	r3, [r7, #24]
 8004b1c:	687a      	ldr	r2, [r7, #4]
 8004b1e:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	68fa      	ldr	r2, [r7, #12]
 8004b24:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	68ba      	ldr	r2, [r7, #8]
 8004b2a:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004b2c:	2101      	movs	r1, #1
 8004b2e:	69b8      	ldr	r0, [r7, #24]
 8004b30:	f7ff fefe 	bl	8004930 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004b34:	69bb      	ldr	r3, [r7, #24]
 8004b36:	78fa      	ldrb	r2, [r7, #3]
 8004b38:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004b3c:	bf00      	nop
 8004b3e:	3710      	adds	r7, #16
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}

08004b44 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004b44:	b580      	push	{r7, lr}
 8004b46:	b08e      	sub	sp, #56	@ 0x38
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	60f8      	str	r0, [r7, #12]
 8004b4c:	60b9      	str	r1, [r7, #8]
 8004b4e:	607a      	str	r2, [r7, #4]
 8004b50:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8004b52:	2300      	movs	r3, #0
 8004b54:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004b56:	68fb      	ldr	r3, [r7, #12]
 8004b58:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8004b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b5c:	2b00      	cmp	r3, #0
 8004b5e:	d10b      	bne.n	8004b78 <xQueueGenericSend+0x34>
	__asm volatile
 8004b60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b64:	f383 8811 	msr	BASEPRI, r3
 8004b68:	f3bf 8f6f 	isb	sy
 8004b6c:	f3bf 8f4f 	dsb	sy
 8004b70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004b72:	bf00      	nop
 8004b74:	bf00      	nop
 8004b76:	e7fd      	b.n	8004b74 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d103      	bne.n	8004b86 <xQueueGenericSend+0x42>
 8004b7e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	d101      	bne.n	8004b8a <xQueueGenericSend+0x46>
 8004b86:	2301      	movs	r3, #1
 8004b88:	e000      	b.n	8004b8c <xQueueGenericSend+0x48>
 8004b8a:	2300      	movs	r3, #0
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d10b      	bne.n	8004ba8 <xQueueGenericSend+0x64>
	__asm volatile
 8004b90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b94:	f383 8811 	msr	BASEPRI, r3
 8004b98:	f3bf 8f6f 	isb	sy
 8004b9c:	f3bf 8f4f 	dsb	sy
 8004ba0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004ba2:	bf00      	nop
 8004ba4:	bf00      	nop
 8004ba6:	e7fd      	b.n	8004ba4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	2b02      	cmp	r3, #2
 8004bac:	d103      	bne.n	8004bb6 <xQueueGenericSend+0x72>
 8004bae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004bb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bb2:	2b01      	cmp	r3, #1
 8004bb4:	d101      	bne.n	8004bba <xQueueGenericSend+0x76>
 8004bb6:	2301      	movs	r3, #1
 8004bb8:	e000      	b.n	8004bbc <xQueueGenericSend+0x78>
 8004bba:	2300      	movs	r3, #0
 8004bbc:	2b00      	cmp	r3, #0
 8004bbe:	d10b      	bne.n	8004bd8 <xQueueGenericSend+0x94>
	__asm volatile
 8004bc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bc4:	f383 8811 	msr	BASEPRI, r3
 8004bc8:	f3bf 8f6f 	isb	sy
 8004bcc:	f3bf 8f4f 	dsb	sy
 8004bd0:	623b      	str	r3, [r7, #32]
}
 8004bd2:	bf00      	nop
 8004bd4:	bf00      	nop
 8004bd6:	e7fd      	b.n	8004bd4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004bd8:	f001 fcf2 	bl	80065c0 <xTaskGetSchedulerState>
 8004bdc:	4603      	mov	r3, r0
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d102      	bne.n	8004be8 <xQueueGenericSend+0xa4>
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d101      	bne.n	8004bec <xQueueGenericSend+0xa8>
 8004be8:	2301      	movs	r3, #1
 8004bea:	e000      	b.n	8004bee <xQueueGenericSend+0xaa>
 8004bec:	2300      	movs	r3, #0
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d10b      	bne.n	8004c0a <xQueueGenericSend+0xc6>
	__asm volatile
 8004bf2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004bf6:	f383 8811 	msr	BASEPRI, r3
 8004bfa:	f3bf 8f6f 	isb	sy
 8004bfe:	f3bf 8f4f 	dsb	sy
 8004c02:	61fb      	str	r3, [r7, #28]
}
 8004c04:	bf00      	nop
 8004c06:	bf00      	nop
 8004c08:	e7fd      	b.n	8004c06 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004c0a:	f002 fc1f 	bl	800744c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004c0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c10:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c14:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c16:	429a      	cmp	r2, r3
 8004c18:	d302      	bcc.n	8004c20 <xQueueGenericSend+0xdc>
 8004c1a:	683b      	ldr	r3, [r7, #0]
 8004c1c:	2b02      	cmp	r3, #2
 8004c1e:	d129      	bne.n	8004c74 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004c20:	683a      	ldr	r2, [r7, #0]
 8004c22:	68b9      	ldr	r1, [r7, #8]
 8004c24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004c26:	f000 fa0f 	bl	8005048 <prvCopyDataToQueue>
 8004c2a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004c2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d010      	beq.n	8004c56 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004c34:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004c36:	3324      	adds	r3, #36	@ 0x24
 8004c38:	4618      	mov	r0, r3
 8004c3a:	f001 faf3 	bl	8006224 <xTaskRemoveFromEventList>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d013      	beq.n	8004c6c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004c44:	4b3f      	ldr	r3, [pc, #252]	@ (8004d44 <xQueueGenericSend+0x200>)
 8004c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c4a:	601a      	str	r2, [r3, #0]
 8004c4c:	f3bf 8f4f 	dsb	sy
 8004c50:	f3bf 8f6f 	isb	sy
 8004c54:	e00a      	b.n	8004c6c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8004c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	d007      	beq.n	8004c6c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8004c5c:	4b39      	ldr	r3, [pc, #228]	@ (8004d44 <xQueueGenericSend+0x200>)
 8004c5e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c62:	601a      	str	r2, [r3, #0]
 8004c64:	f3bf 8f4f 	dsb	sy
 8004c68:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8004c6c:	f002 fc1e 	bl	80074ac <vPortExitCritical>
				return pdPASS;
 8004c70:	2301      	movs	r3, #1
 8004c72:	e063      	b.n	8004d3c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d103      	bne.n	8004c82 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004c7a:	f002 fc17 	bl	80074ac <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	e05c      	b.n	8004d3c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004c82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d106      	bne.n	8004c96 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004c88:	f107 0314 	add.w	r3, r7, #20
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	f001 fb2d 	bl	80062ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004c92:	2301      	movs	r3, #1
 8004c94:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004c96:	f002 fc09 	bl	80074ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004c9a:	f001 f89f 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004c9e:	f002 fbd5 	bl	800744c <vPortEnterCritical>
 8004ca2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ca4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004ca8:	b25b      	sxtb	r3, r3
 8004caa:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cae:	d103      	bne.n	8004cb8 <xQueueGenericSend+0x174>
 8004cb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004cb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cba:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004cbe:	b25b      	sxtb	r3, r3
 8004cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004cc4:	d103      	bne.n	8004cce <xQueueGenericSend+0x18a>
 8004cc6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cc8:	2200      	movs	r2, #0
 8004cca:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004cce:	f002 fbed 	bl	80074ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004cd2:	1d3a      	adds	r2, r7, #4
 8004cd4:	f107 0314 	add.w	r3, r7, #20
 8004cd8:	4611      	mov	r1, r2
 8004cda:	4618      	mov	r0, r3
 8004cdc:	f001 fb1c 	bl	8006318 <xTaskCheckForTimeOut>
 8004ce0:	4603      	mov	r3, r0
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d124      	bne.n	8004d30 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004ce6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004ce8:	f000 faa6 	bl	8005238 <prvIsQueueFull>
 8004cec:	4603      	mov	r3, r0
 8004cee:	2b00      	cmp	r3, #0
 8004cf0:	d018      	beq.n	8004d24 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8004cf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004cf4:	3310      	adds	r3, #16
 8004cf6:	687a      	ldr	r2, [r7, #4]
 8004cf8:	4611      	mov	r1, r2
 8004cfa:	4618      	mov	r0, r3
 8004cfc:	f001 fa40 	bl	8006180 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8004d00:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d02:	f000 fa31 	bl	8005168 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004d06:	f001 f877 	bl	8005df8 <xTaskResumeAll>
 8004d0a:	4603      	mov	r3, r0
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	f47f af7c 	bne.w	8004c0a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8004d12:	4b0c      	ldr	r3, [pc, #48]	@ (8004d44 <xQueueGenericSend+0x200>)
 8004d14:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004d18:	601a      	str	r2, [r3, #0]
 8004d1a:	f3bf 8f4f 	dsb	sy
 8004d1e:	f3bf 8f6f 	isb	sy
 8004d22:	e772      	b.n	8004c0a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004d24:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d26:	f000 fa1f 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004d2a:	f001 f865 	bl	8005df8 <xTaskResumeAll>
 8004d2e:	e76c      	b.n	8004c0a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8004d30:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004d32:	f000 fa19 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004d36:	f001 f85f 	bl	8005df8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004d3a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	3738      	adds	r7, #56	@ 0x38
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bd80      	pop	{r7, pc}
 8004d44:	e000ed04 	.word	0xe000ed04

08004d48 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004d48:	b580      	push	{r7, lr}
 8004d4a:	b090      	sub	sp, #64	@ 0x40
 8004d4c:	af00      	add	r7, sp, #0
 8004d4e:	60f8      	str	r0, [r7, #12]
 8004d50:	60b9      	str	r1, [r7, #8]
 8004d52:	607a      	str	r2, [r7, #4]
 8004d54:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8004d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d10b      	bne.n	8004d78 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8004d60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d64:	f383 8811 	msr	BASEPRI, r3
 8004d68:	f3bf 8f6f 	isb	sy
 8004d6c:	f3bf 8f4f 	dsb	sy
 8004d70:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004d72:	bf00      	nop
 8004d74:	bf00      	nop
 8004d76:	e7fd      	b.n	8004d74 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d103      	bne.n	8004d86 <xQueueGenericSendFromISR+0x3e>
 8004d7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	2b00      	cmp	r3, #0
 8004d84:	d101      	bne.n	8004d8a <xQueueGenericSendFromISR+0x42>
 8004d86:	2301      	movs	r3, #1
 8004d88:	e000      	b.n	8004d8c <xQueueGenericSendFromISR+0x44>
 8004d8a:	2300      	movs	r3, #0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d10b      	bne.n	8004da8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8004d90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004d94:	f383 8811 	msr	BASEPRI, r3
 8004d98:	f3bf 8f6f 	isb	sy
 8004d9c:	f3bf 8f4f 	dsb	sy
 8004da0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004da2:	bf00      	nop
 8004da4:	bf00      	nop
 8004da6:	e7fd      	b.n	8004da4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8004da8:	683b      	ldr	r3, [r7, #0]
 8004daa:	2b02      	cmp	r3, #2
 8004dac:	d103      	bne.n	8004db6 <xQueueGenericSendFromISR+0x6e>
 8004dae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004db0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004db2:	2b01      	cmp	r3, #1
 8004db4:	d101      	bne.n	8004dba <xQueueGenericSendFromISR+0x72>
 8004db6:	2301      	movs	r3, #1
 8004db8:	e000      	b.n	8004dbc <xQueueGenericSendFromISR+0x74>
 8004dba:	2300      	movs	r3, #0
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d10b      	bne.n	8004dd8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004dc0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004dc4:	f383 8811 	msr	BASEPRI, r3
 8004dc8:	f3bf 8f6f 	isb	sy
 8004dcc:	f3bf 8f4f 	dsb	sy
 8004dd0:	623b      	str	r3, [r7, #32]
}
 8004dd2:	bf00      	nop
 8004dd4:	bf00      	nop
 8004dd6:	e7fd      	b.n	8004dd4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004dd8:	f002 fbfa 	bl	80075d0 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004ddc:	f3ef 8211 	mrs	r2, BASEPRI
 8004de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004de4:	f383 8811 	msr	BASEPRI, r3
 8004de8:	f3bf 8f6f 	isb	sy
 8004dec:	f3bf 8f4f 	dsb	sy
 8004df0:	61fa      	str	r2, [r7, #28]
 8004df2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004df4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004df6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004df8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004dfe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e00:	429a      	cmp	r2, r3
 8004e02:	d302      	bcc.n	8004e0a <xQueueGenericSendFromISR+0xc2>
 8004e04:	683b      	ldr	r3, [r7, #0]
 8004e06:	2b02      	cmp	r3, #2
 8004e08:	d12f      	bne.n	8004e6a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004e0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e0c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004e10:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004e14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e18:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004e1a:	683a      	ldr	r2, [r7, #0]
 8004e1c:	68b9      	ldr	r1, [r7, #8]
 8004e1e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004e20:	f000 f912 	bl	8005048 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004e24:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004e28:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e2c:	d112      	bne.n	8004e54 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004e2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d016      	beq.n	8004e64 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004e36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e38:	3324      	adds	r3, #36	@ 0x24
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	f001 f9f2 	bl	8006224 <xTaskRemoveFromEventList>
 8004e40:	4603      	mov	r3, r0
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d00e      	beq.n	8004e64 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00b      	beq.n	8004e64 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	601a      	str	r2, [r3, #0]
 8004e52:	e007      	b.n	8004e64 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004e54:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004e58:	3301      	adds	r3, #1
 8004e5a:	b2db      	uxtb	r3, r3
 8004e5c:	b25a      	sxtb	r2, r3
 8004e5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004e64:	2301      	movs	r3, #1
 8004e66:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004e68:	e001      	b.n	8004e6e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004e72:	697b      	ldr	r3, [r7, #20]
 8004e74:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004e78:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004e7a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3740      	adds	r7, #64	@ 0x40
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b08c      	sub	sp, #48	@ 0x30
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	60f8      	str	r0, [r7, #12]
 8004e8c:	60b9      	str	r1, [r7, #8]
 8004e8e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004e90:	2300      	movs	r3, #0
 8004e92:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004e98:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10b      	bne.n	8004eb6 <xQueueReceive+0x32>
	__asm volatile
 8004e9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ea2:	f383 8811 	msr	BASEPRI, r3
 8004ea6:	f3bf 8f6f 	isb	sy
 8004eaa:	f3bf 8f4f 	dsb	sy
 8004eae:	623b      	str	r3, [r7, #32]
}
 8004eb0:	bf00      	nop
 8004eb2:	bf00      	nop
 8004eb4:	e7fd      	b.n	8004eb2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d103      	bne.n	8004ec4 <xQueueReceive+0x40>
 8004ebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ebe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d101      	bne.n	8004ec8 <xQueueReceive+0x44>
 8004ec4:	2301      	movs	r3, #1
 8004ec6:	e000      	b.n	8004eca <xQueueReceive+0x46>
 8004ec8:	2300      	movs	r3, #0
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d10b      	bne.n	8004ee6 <xQueueReceive+0x62>
	__asm volatile
 8004ece:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed2:	f383 8811 	msr	BASEPRI, r3
 8004ed6:	f3bf 8f6f 	isb	sy
 8004eda:	f3bf 8f4f 	dsb	sy
 8004ede:	61fb      	str	r3, [r7, #28]
}
 8004ee0:	bf00      	nop
 8004ee2:	bf00      	nop
 8004ee4:	e7fd      	b.n	8004ee2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004ee6:	f001 fb6b 	bl	80065c0 <xTaskGetSchedulerState>
 8004eea:	4603      	mov	r3, r0
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d102      	bne.n	8004ef6 <xQueueReceive+0x72>
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d101      	bne.n	8004efa <xQueueReceive+0x76>
 8004ef6:	2301      	movs	r3, #1
 8004ef8:	e000      	b.n	8004efc <xQueueReceive+0x78>
 8004efa:	2300      	movs	r3, #0
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d10b      	bne.n	8004f18 <xQueueReceive+0x94>
	__asm volatile
 8004f00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f04:	f383 8811 	msr	BASEPRI, r3
 8004f08:	f3bf 8f6f 	isb	sy
 8004f0c:	f3bf 8f4f 	dsb	sy
 8004f10:	61bb      	str	r3, [r7, #24]
}
 8004f12:	bf00      	nop
 8004f14:	bf00      	nop
 8004f16:	e7fd      	b.n	8004f14 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004f18:	f002 fa98 	bl	800744c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f1e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f20:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004f22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d01f      	beq.n	8004f68 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004f28:	68b9      	ldr	r1, [r7, #8]
 8004f2a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004f2c:	f000 f8f6 	bl	800511c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004f30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f32:	1e5a      	subs	r2, r3, #1
 8004f34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f36:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004f38:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d00f      	beq.n	8004f60 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f42:	3310      	adds	r3, #16
 8004f44:	4618      	mov	r0, r3
 8004f46:	f001 f96d 	bl	8006224 <xTaskRemoveFromEventList>
 8004f4a:	4603      	mov	r3, r0
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d007      	beq.n	8004f60 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004f50:	4b3c      	ldr	r3, [pc, #240]	@ (8005044 <xQueueReceive+0x1c0>)
 8004f52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004f56:	601a      	str	r2, [r3, #0]
 8004f58:	f3bf 8f4f 	dsb	sy
 8004f5c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004f60:	f002 faa4 	bl	80074ac <vPortExitCritical>
				return pdPASS;
 8004f64:	2301      	movs	r3, #1
 8004f66:	e069      	b.n	800503c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d103      	bne.n	8004f76 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004f6e:	f002 fa9d 	bl	80074ac <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004f72:	2300      	movs	r3, #0
 8004f74:	e062      	b.n	800503c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004f76:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d106      	bne.n	8004f8a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004f7c:	f107 0310 	add.w	r3, r7, #16
 8004f80:	4618      	mov	r0, r3
 8004f82:	f001 f9b3 	bl	80062ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004f86:	2301      	movs	r3, #1
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004f8a:	f002 fa8f 	bl	80074ac <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004f8e:	f000 ff25 	bl	8005ddc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004f92:	f002 fa5b 	bl	800744c <vPortEnterCritical>
 8004f96:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f98:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f9c:	b25b      	sxtb	r3, r3
 8004f9e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fa2:	d103      	bne.n	8004fac <xQueueReceive+0x128>
 8004fa4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa6:	2200      	movs	r2, #0
 8004fa8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004fac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fae:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004fb2:	b25b      	sxtb	r3, r3
 8004fb4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fb8:	d103      	bne.n	8004fc2 <xQueueReceive+0x13e>
 8004fba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fbc:	2200      	movs	r2, #0
 8004fbe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004fc2:	f002 fa73 	bl	80074ac <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004fc6:	1d3a      	adds	r2, r7, #4
 8004fc8:	f107 0310 	add.w	r3, r7, #16
 8004fcc:	4611      	mov	r1, r2
 8004fce:	4618      	mov	r0, r3
 8004fd0:	f001 f9a2 	bl	8006318 <xTaskCheckForTimeOut>
 8004fd4:	4603      	mov	r3, r0
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d123      	bne.n	8005022 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004fda:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004fdc:	f000 f916 	bl	800520c <prvIsQueueEmpty>
 8004fe0:	4603      	mov	r3, r0
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d017      	beq.n	8005016 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004fe6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fe8:	3324      	adds	r3, #36	@ 0x24
 8004fea:	687a      	ldr	r2, [r7, #4]
 8004fec:	4611      	mov	r1, r2
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f001 f8c6 	bl	8006180 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004ff4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004ff6:	f000 f8b7 	bl	8005168 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004ffa:	f000 fefd 	bl	8005df8 <xTaskResumeAll>
 8004ffe:	4603      	mov	r3, r0
 8005000:	2b00      	cmp	r3, #0
 8005002:	d189      	bne.n	8004f18 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005004:	4b0f      	ldr	r3, [pc, #60]	@ (8005044 <xQueueReceive+0x1c0>)
 8005006:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800500a:	601a      	str	r2, [r3, #0]
 800500c:	f3bf 8f4f 	dsb	sy
 8005010:	f3bf 8f6f 	isb	sy
 8005014:	e780      	b.n	8004f18 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005016:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005018:	f000 f8a6 	bl	8005168 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800501c:	f000 feec 	bl	8005df8 <xTaskResumeAll>
 8005020:	e77a      	b.n	8004f18 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005022:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005024:	f000 f8a0 	bl	8005168 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005028:	f000 fee6 	bl	8005df8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800502c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800502e:	f000 f8ed 	bl	800520c <prvIsQueueEmpty>
 8005032:	4603      	mov	r3, r0
 8005034:	2b00      	cmp	r3, #0
 8005036:	f43f af6f 	beq.w	8004f18 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800503a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800503c:	4618      	mov	r0, r3
 800503e:	3730      	adds	r7, #48	@ 0x30
 8005040:	46bd      	mov	sp, r7
 8005042:	bd80      	pop	{r7, pc}
 8005044:	e000ed04 	.word	0xe000ed04

08005048 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005048:	b580      	push	{r7, lr}
 800504a:	b086      	sub	sp, #24
 800504c:	af00      	add	r7, sp, #0
 800504e:	60f8      	str	r0, [r7, #12]
 8005050:	60b9      	str	r1, [r7, #8]
 8005052:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005054:	2300      	movs	r3, #0
 8005056:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800505c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005062:	2b00      	cmp	r3, #0
 8005064:	d10d      	bne.n	8005082 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	2b00      	cmp	r3, #0
 800506c:	d14d      	bne.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	4618      	mov	r0, r3
 8005074:	f001 fac2 	bl	80065fc <xTaskPriorityDisinherit>
 8005078:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800507a:	68fb      	ldr	r3, [r7, #12]
 800507c:	2200      	movs	r2, #0
 800507e:	609a      	str	r2, [r3, #8]
 8005080:	e043      	b.n	800510a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	2b00      	cmp	r3, #0
 8005086:	d119      	bne.n	80050bc <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6858      	ldr	r0, [r3, #4]
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005090:	461a      	mov	r2, r3
 8005092:	68b9      	ldr	r1, [r7, #8]
 8005094:	f003 fb39 	bl	800870a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	685a      	ldr	r2, [r3, #4]
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050a0:	441a      	add	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	685a      	ldr	r2, [r3, #4]
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	429a      	cmp	r2, r3
 80050b0:	d32b      	bcc.n	800510a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	605a      	str	r2, [r3, #4]
 80050ba:	e026      	b.n	800510a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	68d8      	ldr	r0, [r3, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050c4:	461a      	mov	r2, r3
 80050c6:	68b9      	ldr	r1, [r7, #8]
 80050c8:	f003 fb1f 	bl	800870a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	68da      	ldr	r2, [r3, #12]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050d4:	425b      	negs	r3, r3
 80050d6:	441a      	add	r2, r3
 80050d8:	68fb      	ldr	r3, [r7, #12]
 80050da:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	68da      	ldr	r2, [r3, #12]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	429a      	cmp	r2, r3
 80050e6:	d207      	bcs.n	80050f8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	689a      	ldr	r2, [r3, #8]
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050f0:	425b      	negs	r3, r3
 80050f2:	441a      	add	r2, r3
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2b02      	cmp	r3, #2
 80050fc:	d105      	bne.n	800510a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80050fe:	693b      	ldr	r3, [r7, #16]
 8005100:	2b00      	cmp	r3, #0
 8005102:	d002      	beq.n	800510a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	3b01      	subs	r3, #1
 8005108:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800510a:	693b      	ldr	r3, [r7, #16]
 800510c:	1c5a      	adds	r2, r3, #1
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005112:	697b      	ldr	r3, [r7, #20]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3718      	adds	r7, #24
 8005118:	46bd      	mov	sp, r7
 800511a:	bd80      	pop	{r7, pc}

0800511c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800511c:	b580      	push	{r7, lr}
 800511e:	b082      	sub	sp, #8
 8005120:	af00      	add	r7, sp, #0
 8005122:	6078      	str	r0, [r7, #4]
 8005124:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800512a:	2b00      	cmp	r3, #0
 800512c:	d018      	beq.n	8005160 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	68da      	ldr	r2, [r3, #12]
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005136:	441a      	add	r2, r3
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	68da      	ldr	r2, [r3, #12]
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	429a      	cmp	r2, r3
 8005146:	d303      	bcc.n	8005150 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681a      	ldr	r2, [r3, #0]
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	68d9      	ldr	r1, [r3, #12]
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005158:	461a      	mov	r2, r3
 800515a:	6838      	ldr	r0, [r7, #0]
 800515c:	f003 fad5 	bl	800870a <memcpy>
	}
}
 8005160:	bf00      	nop
 8005162:	3708      	adds	r7, #8
 8005164:	46bd      	mov	sp, r7
 8005166:	bd80      	pop	{r7, pc}

08005168 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005168:	b580      	push	{r7, lr}
 800516a:	b084      	sub	sp, #16
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005170:	f002 f96c 	bl	800744c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800517a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800517c:	e011      	b.n	80051a2 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005182:	2b00      	cmp	r3, #0
 8005184:	d012      	beq.n	80051ac <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	3324      	adds	r3, #36	@ 0x24
 800518a:	4618      	mov	r0, r3
 800518c:	f001 f84a 	bl	8006224 <xTaskRemoveFromEventList>
 8005190:	4603      	mov	r3, r0
 8005192:	2b00      	cmp	r3, #0
 8005194:	d001      	beq.n	800519a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005196:	f001 f923 	bl	80063e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800519a:	7bfb      	ldrb	r3, [r7, #15]
 800519c:	3b01      	subs	r3, #1
 800519e:	b2db      	uxtb	r3, r3
 80051a0:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80051a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	dce9      	bgt.n	800517e <prvUnlockQueue+0x16>
 80051aa:	e000      	b.n	80051ae <prvUnlockQueue+0x46>
					break;
 80051ac:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	22ff      	movs	r2, #255	@ 0xff
 80051b2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80051b6:	f002 f979 	bl	80074ac <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80051ba:	f002 f947 	bl	800744c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051c4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051c6:	e011      	b.n	80051ec <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	691b      	ldr	r3, [r3, #16]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d012      	beq.n	80051f6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	3310      	adds	r3, #16
 80051d4:	4618      	mov	r0, r3
 80051d6:	f001 f825 	bl	8006224 <xTaskRemoveFromEventList>
 80051da:	4603      	mov	r3, r0
 80051dc:	2b00      	cmp	r3, #0
 80051de:	d001      	beq.n	80051e4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80051e0:	f001 f8fe 	bl	80063e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80051e4:	7bbb      	ldrb	r3, [r7, #14]
 80051e6:	3b01      	subs	r3, #1
 80051e8:	b2db      	uxtb	r3, r3
 80051ea:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80051ec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80051f0:	2b00      	cmp	r3, #0
 80051f2:	dce9      	bgt.n	80051c8 <prvUnlockQueue+0x60>
 80051f4:	e000      	b.n	80051f8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80051f6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	22ff      	movs	r2, #255	@ 0xff
 80051fc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005200:	f002 f954 	bl	80074ac <vPortExitCritical>
}
 8005204:	bf00      	nop
 8005206:	3710      	adds	r7, #16
 8005208:	46bd      	mov	sp, r7
 800520a:	bd80      	pop	{r7, pc}

0800520c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005214:	f002 f91a 	bl	800744c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800521c:	2b00      	cmp	r3, #0
 800521e:	d102      	bne.n	8005226 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005220:	2301      	movs	r3, #1
 8005222:	60fb      	str	r3, [r7, #12]
 8005224:	e001      	b.n	800522a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005226:	2300      	movs	r3, #0
 8005228:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800522a:	f002 f93f 	bl	80074ac <vPortExitCritical>

	return xReturn;
 800522e:	68fb      	ldr	r3, [r7, #12]
}
 8005230:	4618      	mov	r0, r3
 8005232:	3710      	adds	r7, #16
 8005234:	46bd      	mov	sp, r7
 8005236:	bd80      	pop	{r7, pc}

08005238 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b084      	sub	sp, #16
 800523c:	af00      	add	r7, sp, #0
 800523e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005240:	f002 f904 	bl	800744c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800524c:	429a      	cmp	r2, r3
 800524e:	d102      	bne.n	8005256 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005250:	2301      	movs	r3, #1
 8005252:	60fb      	str	r3, [r7, #12]
 8005254:	e001      	b.n	800525a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005256:	2300      	movs	r3, #0
 8005258:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800525a:	f002 f927 	bl	80074ac <vPortExitCritical>

	return xReturn;
 800525e:	68fb      	ldr	r3, [r7, #12]
}
 8005260:	4618      	mov	r0, r3
 8005262:	3710      	adds	r7, #16
 8005264:	46bd      	mov	sp, r7
 8005266:	bd80      	pop	{r7, pc}

08005268 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005268:	b480      	push	{r7}
 800526a:	b085      	sub	sp, #20
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005272:	2300      	movs	r3, #0
 8005274:	60fb      	str	r3, [r7, #12]
 8005276:	e014      	b.n	80052a2 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005278:	4a0e      	ldr	r2, [pc, #56]	@ (80052b4 <vQueueAddToRegistry+0x4c>)
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d10b      	bne.n	800529c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005284:	490b      	ldr	r1, [pc, #44]	@ (80052b4 <vQueueAddToRegistry+0x4c>)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	683a      	ldr	r2, [r7, #0]
 800528a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800528e:	4a09      	ldr	r2, [pc, #36]	@ (80052b4 <vQueueAddToRegistry+0x4c>)
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	00db      	lsls	r3, r3, #3
 8005294:	4413      	add	r3, r2
 8005296:	687a      	ldr	r2, [r7, #4]
 8005298:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800529a:	e006      	b.n	80052aa <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	3301      	adds	r3, #1
 80052a0:	60fb      	str	r3, [r7, #12]
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	2b07      	cmp	r3, #7
 80052a6:	d9e7      	bls.n	8005278 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80052a8:	bf00      	nop
 80052aa:	bf00      	nop
 80052ac:	3714      	adds	r7, #20
 80052ae:	46bd      	mov	sp, r7
 80052b0:	bc80      	pop	{r7}
 80052b2:	4770      	bx	lr
 80052b4:	20000924 	.word	0x20000924

080052b8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80052b8:	b580      	push	{r7, lr}
 80052ba:	b086      	sub	sp, #24
 80052bc:	af00      	add	r7, sp, #0
 80052be:	60f8      	str	r0, [r7, #12]
 80052c0:	60b9      	str	r1, [r7, #8]
 80052c2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80052c8:	f002 f8c0 	bl	800744c <vPortEnterCritical>
 80052cc:	697b      	ldr	r3, [r7, #20]
 80052ce:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80052d2:	b25b      	sxtb	r3, r3
 80052d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052d8:	d103      	bne.n	80052e2 <vQueueWaitForMessageRestricted+0x2a>
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	2200      	movs	r2, #0
 80052de:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80052e2:	697b      	ldr	r3, [r7, #20]
 80052e4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80052e8:	b25b      	sxtb	r3, r3
 80052ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80052ee:	d103      	bne.n	80052f8 <vQueueWaitForMessageRestricted+0x40>
 80052f0:	697b      	ldr	r3, [r7, #20]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80052f8:	f002 f8d8 	bl	80074ac <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80052fc:	697b      	ldr	r3, [r7, #20]
 80052fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005300:	2b00      	cmp	r3, #0
 8005302:	d106      	bne.n	8005312 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005304:	697b      	ldr	r3, [r7, #20]
 8005306:	3324      	adds	r3, #36	@ 0x24
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	68b9      	ldr	r1, [r7, #8]
 800530c:	4618      	mov	r0, r3
 800530e:	f000 ff5d 	bl	80061cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005312:	6978      	ldr	r0, [r7, #20]
 8005314:	f7ff ff28 	bl	8005168 <prvUnlockQueue>
	}
 8005318:	bf00      	nop
 800531a:	3718      	adds	r7, #24
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8005320:	b580      	push	{r7, lr}
 8005322:	b08c      	sub	sp, #48	@ 0x30
 8005324:	af02      	add	r7, sp, #8
 8005326:	60f8      	str	r0, [r7, #12]
 8005328:	60b9      	str	r1, [r7, #8]
 800532a:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d111      	bne.n	8005356 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8005332:	2301      	movs	r3, #1
 8005334:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8005338:	68fb      	ldr	r3, [r7, #12]
 800533a:	2b04      	cmp	r3, #4
 800533c:	d81d      	bhi.n	800537a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 800533e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005342:	f383 8811 	msr	BASEPRI, r3
 8005346:	f3bf 8f6f 	isb	sy
 800534a:	f3bf 8f4f 	dsb	sy
 800534e:	61fb      	str	r3, [r7, #28]
}
 8005350:	bf00      	nop
 8005352:	bf00      	nop
 8005354:	e7fd      	b.n	8005352 <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8005356:	2300      	movs	r3, #0
 8005358:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d10b      	bne.n	800537a <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8005362:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005366:	f383 8811 	msr	BASEPRI, r3
 800536a:	f3bf 8f6f 	isb	sy
 800536e:	f3bf 8f4f 	dsb	sy
 8005372:	61bb      	str	r3, [r7, #24]
}
 8005374:	bf00      	nop
 8005376:	bf00      	nop
 8005378:	e7fd      	b.n	8005376 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 800537a:	68ba      	ldr	r2, [r7, #8]
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	429a      	cmp	r2, r3
 8005380:	d90b      	bls.n	800539a <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8005382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005386:	f383 8811 	msr	BASEPRI, r3
 800538a:	f3bf 8f6f 	isb	sy
 800538e:	f3bf 8f4f 	dsb	sy
 8005392:	617b      	str	r3, [r7, #20]
}
 8005394:	bf00      	nop
 8005396:	bf00      	nop
 8005398:	e7fd      	b.n	8005396 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 800539a:	68bb      	ldr	r3, [r7, #8]
 800539c:	2b00      	cmp	r3, #0
 800539e:	d101      	bne.n	80053a4 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 80053a0:	2301      	movs	r3, #1
 80053a2:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	3301      	adds	r3, #1
 80053a8:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	3324      	adds	r3, #36	@ 0x24
 80053ae:	4618      	mov	r0, r3
 80053b0:	f002 f94e 	bl	8007650 <pvPortMalloc>
 80053b4:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 80053b6:	6a3b      	ldr	r3, [r7, #32]
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d00a      	beq.n	80053d2 <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 80053bc:	6a3b      	ldr	r3, [r7, #32]
 80053be:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 80053c2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80053c6:	9300      	str	r3, [sp, #0]
 80053c8:	68bb      	ldr	r3, [r7, #8]
 80053ca:	68fa      	ldr	r2, [r7, #12]
 80053cc:	6a38      	ldr	r0, [r7, #32]
 80053ce:	f000 fac3 	bl	8005958 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 80053d2:	6a3b      	ldr	r3, [r7, #32]
	}
 80053d4:	4618      	mov	r0, r3
 80053d6:	3728      	adds	r7, #40	@ 0x28
 80053d8:	46bd      	mov	sp, r7
 80053da:	bd80      	pop	{r7, pc}

080053dc <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 80053e8:	693b      	ldr	r3, [r7, #16]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d10b      	bne.n	8005406 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 80053ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053f2:	f383 8811 	msr	BASEPRI, r3
 80053f6:	f3bf 8f6f 	isb	sy
 80053fa:	f3bf 8f4f 	dsb	sy
 80053fe:	60fb      	str	r3, [r7, #12]
}
 8005400:	bf00      	nop
 8005402:	bf00      	nop
 8005404:	e7fd      	b.n	8005402 <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	689a      	ldr	r2, [r3, #8]
 800540a:	693b      	ldr	r3, [r7, #16]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4413      	add	r3, r2
 8005410:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	685b      	ldr	r3, [r3, #4]
 8005416:	697a      	ldr	r2, [r7, #20]
 8005418:	1ad3      	subs	r3, r2, r3
 800541a:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	3b01      	subs	r3, #1
 8005420:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 8005422:	693b      	ldr	r3, [r7, #16]
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	697a      	ldr	r2, [r7, #20]
 8005428:	429a      	cmp	r2, r3
 800542a:	d304      	bcc.n	8005436 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 800542c:	693b      	ldr	r3, [r7, #16]
 800542e:	689b      	ldr	r3, [r3, #8]
 8005430:	697a      	ldr	r2, [r7, #20]
 8005432:	1ad3      	subs	r3, r2, r3
 8005434:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8005436:	697b      	ldr	r3, [r7, #20]
}
 8005438:	4618      	mov	r0, r3
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	bc80      	pop	{r7}
 8005440:	4770      	bx	lr

08005442 <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005442:	b580      	push	{r7, lr}
 8005444:	b090      	sub	sp, #64	@ 0x40
 8005446:	af02      	add	r7, sp, #8
 8005448:	60f8      	str	r0, [r7, #12]
 800544a:	60b9      	str	r1, [r7, #8]
 800544c:	607a      	str	r2, [r7, #4]
 800544e:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 8005458:	68bb      	ldr	r3, [r7, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d10b      	bne.n	8005476 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 800545e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005462:	f383 8811 	msr	BASEPRI, r3
 8005466:	f3bf 8f6f 	isb	sy
 800546a:	f3bf 8f4f 	dsb	sy
 800546e:	623b      	str	r3, [r7, #32]
}
 8005470:	bf00      	nop
 8005472:	bf00      	nop
 8005474:	e7fd      	b.n	8005472 <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	2b00      	cmp	r3, #0
 800547a:	d10b      	bne.n	8005494 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 800547c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005480:	f383 8811 	msr	BASEPRI, r3
 8005484:	f3bf 8f6f 	isb	sy
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	61fb      	str	r3, [r7, #28]
}
 800548e:	bf00      	nop
 8005490:	bf00      	nop
 8005492:	e7fd      	b.n	8005490 <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	7f1b      	ldrb	r3, [r3, #28]
 8005498:	f003 0301 	and.w	r3, r3, #1
 800549c:	2b00      	cmp	r3, #0
 800549e:	d002      	beq.n	80054a6 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80054a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054a2:	3304      	adds	r3, #4
 80054a4:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80054a6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054a8:	f7ff ff98 	bl	80053dc <xStreamBufferSpacesAvailable>
 80054ac:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80054ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054b4:	687a      	ldr	r2, [r7, #4]
 80054b6:	68b9      	ldr	r1, [r7, #8]
 80054b8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054ba:	f000 f835 	bl	8005528 <prvWriteMessageToBuffer>
 80054be:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 80054c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d02b      	beq.n	800551e <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 80054c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80054c8:	f000 fa27 	bl	800591a <prvBytesInBuffer>
 80054cc:	4602      	mov	r2, r0
 80054ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054d0:	68db      	ldr	r3, [r3, #12]
 80054d2:	429a      	cmp	r2, r3
 80054d4:	d323      	bcc.n	800551e <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 80054d6:	f3ef 8211 	mrs	r2, BASEPRI
 80054da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054de:	f383 8811 	msr	BASEPRI, r3
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	f3bf 8f4f 	dsb	sy
 80054ea:	61ba      	str	r2, [r7, #24]
 80054ec:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80054ee:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 80054f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80054f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054f4:	691b      	ldr	r3, [r3, #16]
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d00b      	beq.n	8005512 <xStreamBufferSendFromISR+0xd0>
 80054fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80054fc:	6918      	ldr	r0, [r3, #16]
 80054fe:	683b      	ldr	r3, [r7, #0]
 8005500:	9300      	str	r3, [sp, #0]
 8005502:	2300      	movs	r3, #0
 8005504:	2200      	movs	r2, #0
 8005506:	2100      	movs	r1, #0
 8005508:	f001 f9fc 	bl	8006904 <xTaskGenericNotifyFromISR>
 800550c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550e:	2200      	movs	r2, #0
 8005510:	611a      	str	r2, [r3, #16]
 8005512:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005514:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	f383 8811 	msr	BASEPRI, r3
}
 800551c:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800551e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 8005520:	4618      	mov	r0, r3
 8005522:	3738      	adds	r7, #56	@ 0x38
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
 8005534:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8005536:	683b      	ldr	r3, [r7, #0]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d102      	bne.n	8005542 <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 800553c:	2300      	movs	r3, #0
 800553e:	617b      	str	r3, [r7, #20]
 8005540:	e01d      	b.n	800557e <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	7f1b      	ldrb	r3, [r3, #28]
 8005546:	f003 0301 	and.w	r3, r3, #1
 800554a:	2b00      	cmp	r3, #0
 800554c:	d108      	bne.n	8005560 <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800554e:	2301      	movs	r3, #1
 8005550:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 8005552:	687a      	ldr	r2, [r7, #4]
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	4293      	cmp	r3, r2
 8005558:	bf28      	it	cs
 800555a:	4613      	movcs	r3, r2
 800555c:	607b      	str	r3, [r7, #4]
 800555e:	e00e      	b.n	800557e <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 8005560:	683a      	ldr	r2, [r7, #0]
 8005562:	6a3b      	ldr	r3, [r7, #32]
 8005564:	429a      	cmp	r2, r3
 8005566:	d308      	bcc.n	800557a <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 8005568:	2301      	movs	r3, #1
 800556a:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 800556c:	1d3b      	adds	r3, r7, #4
 800556e:	2204      	movs	r2, #4
 8005570:	4619      	mov	r1, r3
 8005572:	68f8      	ldr	r0, [r7, #12]
 8005574:	f000 f8df 	bl	8005736 <prvWriteBytesToBuffer>
 8005578:	e001      	b.n	800557e <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 800557a:	2300      	movs	r3, #0
 800557c:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 800557e:	697b      	ldr	r3, [r7, #20]
 8005580:	2b00      	cmp	r3, #0
 8005582:	d007      	beq.n	8005594 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	461a      	mov	r2, r3
 8005588:	68b9      	ldr	r1, [r7, #8]
 800558a:	68f8      	ldr	r0, [r7, #12]
 800558c:	f000 f8d3 	bl	8005736 <prvWriteBytesToBuffer>
 8005590:	6138      	str	r0, [r7, #16]
 8005592:	e001      	b.n	8005598 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 8005594:	2300      	movs	r3, #0
 8005596:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 8005598:	693b      	ldr	r3, [r7, #16]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3718      	adds	r7, #24
 800559e:	46bd      	mov	sp, r7
 80055a0:	bd80      	pop	{r7, pc}

080055a2 <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80055a2:	b580      	push	{r7, lr}
 80055a4:	b08e      	sub	sp, #56	@ 0x38
 80055a6:	af02      	add	r7, sp, #8
 80055a8:	60f8      	str	r0, [r7, #12]
 80055aa:	60b9      	str	r1, [r7, #8]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80055b0:	68fb      	ldr	r3, [r7, #12]
 80055b2:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 80055b4:	2300      	movs	r3, #0
 80055b6:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 80055b8:	68bb      	ldr	r3, [r7, #8]
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <xStreamBufferReceive+0x34>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 80055d6:	6a3b      	ldr	r3, [r7, #32]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	d10b      	bne.n	80055f4 <xStreamBufferReceive+0x52>
	__asm volatile
 80055dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e0:	f383 8811 	msr	BASEPRI, r3
 80055e4:	f3bf 8f6f 	isb	sy
 80055e8:	f3bf 8f4f 	dsb	sy
 80055ec:	61bb      	str	r3, [r7, #24]
}
 80055ee:	bf00      	nop
 80055f0:	bf00      	nop
 80055f2:	e7fd      	b.n	80055f0 <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80055f4:	6a3b      	ldr	r3, [r7, #32]
 80055f6:	7f1b      	ldrb	r3, [r3, #28]
 80055f8:	f003 0301 	and.w	r3, r3, #1
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d002      	beq.n	8005606 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 8005600:	2304      	movs	r3, #4
 8005602:	627b      	str	r3, [r7, #36]	@ 0x24
 8005604:	e001      	b.n	800560a <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8005606:	2300      	movs	r3, #0
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 800560a:	683b      	ldr	r3, [r7, #0]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d035      	beq.n	800567c <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 8005610:	f001 ff1c 	bl	800744c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005614:	6a38      	ldr	r0, [r7, #32]
 8005616:	f000 f980 	bl	800591a <prvBytesInBuffer>
 800561a:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 800561c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800561e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005620:	429a      	cmp	r2, r3
 8005622:	d817      	bhi.n	8005654 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8005624:	2000      	movs	r0, #0
 8005626:	f001 fa4d 	bl	8006ac4 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 800562a:	6a3b      	ldr	r3, [r7, #32]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d00b      	beq.n	800564a <xStreamBufferReceive+0xa8>
	__asm volatile
 8005632:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005636:	f383 8811 	msr	BASEPRI, r3
 800563a:	f3bf 8f6f 	isb	sy
 800563e:	f3bf 8f4f 	dsb	sy
 8005642:	617b      	str	r3, [r7, #20]
}
 8005644:	bf00      	nop
 8005646:	bf00      	nop
 8005648:	e7fd      	b.n	8005646 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 800564a:	f000 ffab 	bl	80065a4 <xTaskGetCurrentTaskHandle>
 800564e:	4602      	mov	r2, r0
 8005650:	6a3b      	ldr	r3, [r7, #32]
 8005652:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8005654:	f001 ff2a 	bl	80074ac <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005658:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800565a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800565c:	429a      	cmp	r2, r3
 800565e:	d811      	bhi.n	8005684 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	2200      	movs	r2, #0
 8005664:	2100      	movs	r1, #0
 8005666:	2000      	movs	r0, #0
 8005668:	f001 f838 	bl	80066dc <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 800566c:	6a3b      	ldr	r3, [r7, #32]
 800566e:	2200      	movs	r2, #0
 8005670:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005672:	6a38      	ldr	r0, [r7, #32]
 8005674:	f000 f951 	bl	800591a <prvBytesInBuffer>
 8005678:	62b8      	str	r0, [r7, #40]	@ 0x28
 800567a:	e003      	b.n	8005684 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 800567c:	6a38      	ldr	r0, [r7, #32]
 800567e:	f000 f94c 	bl	800591a <prvBytesInBuffer>
 8005682:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 8005684:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005686:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005688:	429a      	cmp	r2, r3
 800568a:	d91d      	bls.n	80056c8 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 800568c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568e:	9300      	str	r3, [sp, #0]
 8005690:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	68b9      	ldr	r1, [r7, #8]
 8005696:	6a38      	ldr	r0, [r7, #32]
 8005698:	f000 f81b 	bl	80056d2 <prvReadMessageFromBuffer>
 800569c:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 800569e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d011      	beq.n	80056c8 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80056a4:	f000 fb9a 	bl	8005ddc <vTaskSuspendAll>
 80056a8:	6a3b      	ldr	r3, [r7, #32]
 80056aa:	695b      	ldr	r3, [r3, #20]
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d009      	beq.n	80056c4 <xStreamBufferReceive+0x122>
 80056b0:	6a3b      	ldr	r3, [r7, #32]
 80056b2:	6958      	ldr	r0, [r3, #20]
 80056b4:	2300      	movs	r3, #0
 80056b6:	2200      	movs	r2, #0
 80056b8:	2100      	movs	r1, #0
 80056ba:	f001 f869 	bl	8006790 <xTaskGenericNotify>
 80056be:	6a3b      	ldr	r3, [r7, #32]
 80056c0:	2200      	movs	r2, #0
 80056c2:	615a      	str	r2, [r3, #20]
 80056c4:	f000 fb98 	bl	8005df8 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 80056c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 80056ca:	4618      	mov	r0, r3
 80056cc:	3730      	adds	r7, #48	@ 0x30
 80056ce:	46bd      	mov	sp, r7
 80056d0:	bd80      	pop	{r7, pc}

080056d2 <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 80056d2:	b580      	push	{r7, lr}
 80056d4:	b088      	sub	sp, #32
 80056d6:	af00      	add	r7, sp, #0
 80056d8:	60f8      	str	r0, [r7, #12]
 80056da:	60b9      	str	r1, [r7, #8]
 80056dc:	607a      	str	r2, [r7, #4]
 80056de:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 80056e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d019      	beq.n	800571a <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 80056ec:	f107 0110 	add.w	r1, r7, #16
 80056f0:	683b      	ldr	r3, [r7, #0]
 80056f2:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80056f4:	68f8      	ldr	r0, [r7, #12]
 80056f6:	f000 f893 	bl	8005820 <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 80056fa:	693b      	ldr	r3, [r7, #16]
 80056fc:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 80056fe:	683a      	ldr	r2, [r7, #0]
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	1ad3      	subs	r3, r2, r3
 8005704:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8005706:	69fa      	ldr	r2, [r7, #28]
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	429a      	cmp	r2, r3
 800570c:	d907      	bls.n	800571e <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	69ba      	ldr	r2, [r7, #24]
 8005712:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8005714:	2300      	movs	r3, #0
 8005716:	61fb      	str	r3, [r7, #28]
 8005718:	e001      	b.n	800571e <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	69fa      	ldr	r2, [r7, #28]
 8005722:	68b9      	ldr	r1, [r7, #8]
 8005724:	68f8      	ldr	r0, [r7, #12]
 8005726:	f000 f87b 	bl	8005820 <prvReadBytesFromBuffer>
 800572a:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 800572c:	697b      	ldr	r3, [r7, #20]
}
 800572e:	4618      	mov	r0, r3
 8005730:	3720      	adds	r7, #32
 8005732:	46bd      	mov	sp, r7
 8005734:	bd80      	pop	{r7, pc}

08005736 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8005736:	b580      	push	{r7, lr}
 8005738:	b08a      	sub	sp, #40	@ 0x28
 800573a:	af00      	add	r7, sp, #0
 800573c:	60f8      	str	r0, [r7, #12]
 800573e:	60b9      	str	r1, [r7, #8]
 8005740:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	2b00      	cmp	r3, #0
 8005746:	d10b      	bne.n	8005760 <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8005748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800574c:	f383 8811 	msr	BASEPRI, r3
 8005750:	f3bf 8f6f 	isb	sy
 8005754:	f3bf 8f4f 	dsb	sy
 8005758:	61fb      	str	r3, [r7, #28]
}
 800575a:	bf00      	nop
 800575c:	bf00      	nop
 800575e:	e7fd      	b.n	800575c <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	685b      	ldr	r3, [r3, #4]
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	689a      	ldr	r2, [r3, #8]
 800576a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800576c:	1ad3      	subs	r3, r2, r3
 800576e:	687a      	ldr	r2, [r7, #4]
 8005770:	4293      	cmp	r3, r2
 8005772:	bf28      	it	cs
 8005774:	4613      	movcs	r3, r2
 8005776:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 8005778:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800577a:	6a3b      	ldr	r3, [r7, #32]
 800577c:	441a      	add	r2, r3
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	689b      	ldr	r3, [r3, #8]
 8005782:	429a      	cmp	r2, r3
 8005784:	d90b      	bls.n	800579e <prvWriteBytesToBuffer+0x68>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	61bb      	str	r3, [r7, #24]
}
 8005798:	bf00      	nop
 800579a:	bf00      	nop
 800579c:	e7fd      	b.n	800579a <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	699a      	ldr	r2, [r3, #24]
 80057a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057a4:	4413      	add	r3, r2
 80057a6:	6a3a      	ldr	r2, [r7, #32]
 80057a8:	68b9      	ldr	r1, [r7, #8]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f002 ffad 	bl	800870a <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80057b0:	687a      	ldr	r2, [r7, #4]
 80057b2:	6a3b      	ldr	r3, [r7, #32]
 80057b4:	429a      	cmp	r2, r3
 80057b6:	d91d      	bls.n	80057f4 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 80057b8:	687a      	ldr	r2, [r7, #4]
 80057ba:	6a3b      	ldr	r3, [r7, #32]
 80057bc:	1ad2      	subs	r2, r2, r3
 80057be:	68fb      	ldr	r3, [r7, #12]
 80057c0:	689b      	ldr	r3, [r3, #8]
 80057c2:	429a      	cmp	r2, r3
 80057c4:	d90b      	bls.n	80057de <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 80057c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ca:	f383 8811 	msr	BASEPRI, r3
 80057ce:	f3bf 8f6f 	isb	sy
 80057d2:	f3bf 8f4f 	dsb	sy
 80057d6:	617b      	str	r3, [r7, #20]
}
 80057d8:	bf00      	nop
 80057da:	bf00      	nop
 80057dc:	e7fd      	b.n	80057da <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6998      	ldr	r0, [r3, #24]
 80057e2:	68ba      	ldr	r2, [r7, #8]
 80057e4:	6a3b      	ldr	r3, [r7, #32]
 80057e6:	18d1      	adds	r1, r2, r3
 80057e8:	687a      	ldr	r2, [r7, #4]
 80057ea:	6a3b      	ldr	r3, [r7, #32]
 80057ec:	1ad3      	subs	r3, r2, r3
 80057ee:	461a      	mov	r2, r3
 80057f0:	f002 ff8b 	bl	800870a <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 80057f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	4413      	add	r3, r2
 80057fa:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	689b      	ldr	r3, [r3, #8]
 8005800:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005802:	429a      	cmp	r2, r3
 8005804:	d304      	bcc.n	8005810 <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	689b      	ldr	r3, [r3, #8]
 800580a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800580c:	1ad3      	subs	r3, r2, r3
 800580e:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005814:	605a      	str	r2, [r3, #4]

	return xCount;
 8005816:	687b      	ldr	r3, [r7, #4]
}
 8005818:	4618      	mov	r0, r3
 800581a:	3728      	adds	r7, #40	@ 0x28
 800581c:	46bd      	mov	sp, r7
 800581e:	bd80      	pop	{r7, pc}

08005820 <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 8005820:	b580      	push	{r7, lr}
 8005822:	b08a      	sub	sp, #40	@ 0x28
 8005824:	af00      	add	r7, sp, #0
 8005826:	60f8      	str	r0, [r7, #12]
 8005828:	60b9      	str	r1, [r7, #8]
 800582a:	607a      	str	r2, [r7, #4]
 800582c:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	4293      	cmp	r3, r2
 8005834:	bf28      	it	cs
 8005836:	4613      	movcs	r3, r2
 8005838:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 800583a:	6a3b      	ldr	r3, [r7, #32]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d067      	beq.n	8005910 <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	689a      	ldr	r2, [r3, #8]
 800584a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	4293      	cmp	r3, r2
 8005852:	bf28      	it	cs
 8005854:	4613      	movcs	r3, r2
 8005856:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 8005858:	69fa      	ldr	r2, [r7, #28]
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	429a      	cmp	r2, r3
 800585e:	d90b      	bls.n	8005878 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 8005860:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005864:	f383 8811 	msr	BASEPRI, r3
 8005868:	f3bf 8f6f 	isb	sy
 800586c:	f3bf 8f4f 	dsb	sy
 8005870:	61bb      	str	r3, [r7, #24]
}
 8005872:	bf00      	nop
 8005874:	bf00      	nop
 8005876:	e7fd      	b.n	8005874 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 8005878:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800587a:	69fb      	ldr	r3, [r7, #28]
 800587c:	441a      	add	r2, r3
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	429a      	cmp	r2, r3
 8005884:	d90b      	bls.n	800589e <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 8005886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800588a:	f383 8811 	msr	BASEPRI, r3
 800588e:	f3bf 8f6f 	isb	sy
 8005892:	f3bf 8f4f 	dsb	sy
 8005896:	617b      	str	r3, [r7, #20]
}
 8005898:	bf00      	nop
 800589a:	bf00      	nop
 800589c:	e7fd      	b.n	800589a <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	699a      	ldr	r2, [r3, #24]
 80058a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058a4:	4413      	add	r3, r2
 80058a6:	69fa      	ldr	r2, [r7, #28]
 80058a8:	4619      	mov	r1, r3
 80058aa:	68b8      	ldr	r0, [r7, #8]
 80058ac:	f002 ff2d 	bl	800870a <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80058b0:	6a3a      	ldr	r2, [r7, #32]
 80058b2:	69fb      	ldr	r3, [r7, #28]
 80058b4:	429a      	cmp	r2, r3
 80058b6:	d91a      	bls.n	80058ee <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 80058b8:	6a3a      	ldr	r2, [r7, #32]
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	429a      	cmp	r2, r3
 80058be:	d90b      	bls.n	80058d8 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 80058c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c4:	f383 8811 	msr	BASEPRI, r3
 80058c8:	f3bf 8f6f 	isb	sy
 80058cc:	f3bf 8f4f 	dsb	sy
 80058d0:	613b      	str	r3, [r7, #16]
}
 80058d2:	bf00      	nop
 80058d4:	bf00      	nop
 80058d6:	e7fd      	b.n	80058d4 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80058d8:	68ba      	ldr	r2, [r7, #8]
 80058da:	69fb      	ldr	r3, [r7, #28]
 80058dc:	18d0      	adds	r0, r2, r3
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	6999      	ldr	r1, [r3, #24]
 80058e2:	6a3a      	ldr	r2, [r7, #32]
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	1ad3      	subs	r3, r2, r3
 80058e8:	461a      	mov	r2, r3
 80058ea:	f002 ff0e 	bl	800870a <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 80058ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058f0:	6a3b      	ldr	r3, [r7, #32]
 80058f2:	4413      	add	r3, r2
 80058f4:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	689b      	ldr	r3, [r3, #8]
 80058fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80058fc:	429a      	cmp	r2, r3
 80058fe:	d304      	bcc.n	800590a <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 8005900:	68fb      	ldr	r3, [r7, #12]
 8005902:	689b      	ldr	r3, [r3, #8]
 8005904:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005906:	1ad3      	subs	r3, r2, r3
 8005908:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800590e:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8005910:	6a3b      	ldr	r3, [r7, #32]
}
 8005912:	4618      	mov	r0, r3
 8005914:	3728      	adds	r7, #40	@ 0x28
 8005916:	46bd      	mov	sp, r7
 8005918:	bd80      	pop	{r7, pc}

0800591a <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 800591a:	b480      	push	{r7}
 800591c:	b085      	sub	sp, #20
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	689a      	ldr	r2, [r3, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
 800592a:	4413      	add	r3, r2
 800592c:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	68fa      	ldr	r2, [r7, #12]
 8005934:	1ad3      	subs	r3, r2, r3
 8005936:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	689b      	ldr	r3, [r3, #8]
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	429a      	cmp	r2, r3
 8005940:	d304      	bcc.n	800594c <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	689b      	ldr	r3, [r3, #8]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	1ad3      	subs	r3, r2, r3
 800594a:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800594c:	68fb      	ldr	r3, [r7, #12]
}
 800594e:	4618      	mov	r0, r3
 8005950:	3714      	adds	r7, #20
 8005952:	46bd      	mov	sp, r7
 8005954:	bc80      	pop	{r7}
 8005956:	4770      	bx	lr

08005958 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 8005966:	2355      	movs	r3, #85	@ 0x55
 8005968:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 800596a:	687a      	ldr	r2, [r7, #4]
 800596c:	6979      	ldr	r1, [r7, #20]
 800596e:	68b8      	ldr	r0, [r7, #8]
 8005970:	f002 fe1b 	bl	80085aa <memset>
 8005974:	4602      	mov	r2, r0
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	4293      	cmp	r3, r2
 800597a:	d00b      	beq.n	8005994 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 800597c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005980:	f383 8811 	msr	BASEPRI, r3
 8005984:	f3bf 8f6f 	isb	sy
 8005988:	f3bf 8f4f 	dsb	sy
 800598c:	613b      	str	r3, [r7, #16]
}
 800598e:	bf00      	nop
 8005990:	bf00      	nop
 8005992:	e7fd      	b.n	8005990 <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 8005994:	2224      	movs	r2, #36	@ 0x24
 8005996:	2100      	movs	r1, #0
 8005998:	68f8      	ldr	r0, [r7, #12]
 800599a:	f002 fe06 	bl	80085aa <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	687a      	ldr	r2, [r7, #4]
 80059a8:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	f897 2020 	ldrb.w	r2, [r7, #32]
 80059b6:	771a      	strb	r2, [r3, #28]
}
 80059b8:	bf00      	nop
 80059ba:	3718      	adds	r7, #24
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80059c0:	b580      	push	{r7, lr}
 80059c2:	b08e      	sub	sp, #56	@ 0x38
 80059c4:	af04      	add	r7, sp, #16
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	60b9      	str	r1, [r7, #8]
 80059ca:	607a      	str	r2, [r7, #4]
 80059cc:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80059ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xTaskCreateStatic+0x2c>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80059ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d10b      	bne.n	8005a0a <xTaskCreateStatic+0x4a>
	__asm volatile
 80059f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f6:	f383 8811 	msr	BASEPRI, r3
 80059fa:	f3bf 8f6f 	isb	sy
 80059fe:	f3bf 8f4f 	dsb	sy
 8005a02:	61fb      	str	r3, [r7, #28]
}
 8005a04:	bf00      	nop
 8005a06:	bf00      	nop
 8005a08:	e7fd      	b.n	8005a06 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005a0a:	235c      	movs	r3, #92	@ 0x5c
 8005a0c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	2b5c      	cmp	r3, #92	@ 0x5c
 8005a12:	d00b      	beq.n	8005a2c <xTaskCreateStatic+0x6c>
	__asm volatile
 8005a14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a18:	f383 8811 	msr	BASEPRI, r3
 8005a1c:	f3bf 8f6f 	isb	sy
 8005a20:	f3bf 8f4f 	dsb	sy
 8005a24:	61bb      	str	r3, [r7, #24]
}
 8005a26:	bf00      	nop
 8005a28:	bf00      	nop
 8005a2a:	e7fd      	b.n	8005a28 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005a2c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a30:	2b00      	cmp	r3, #0
 8005a32:	d01e      	beq.n	8005a72 <xTaskCreateStatic+0xb2>
 8005a34:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d01b      	beq.n	8005a72 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a3a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005a3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a40:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005a42:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005a44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a46:	2202      	movs	r2, #2
 8005a48:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	9303      	str	r3, [sp, #12]
 8005a50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a52:	9302      	str	r3, [sp, #8]
 8005a54:	f107 0314 	add.w	r3, r7, #20
 8005a58:	9301      	str	r3, [sp, #4]
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	9300      	str	r3, [sp, #0]
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	68b9      	ldr	r1, [r7, #8]
 8005a64:	68f8      	ldr	r0, [r7, #12]
 8005a66:	f000 f850 	bl	8005b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a6a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a6c:	f000 f8de 	bl	8005c2c <prvAddNewTaskToReadyList>
 8005a70:	e001      	b.n	8005a76 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a76:	697b      	ldr	r3, [r7, #20]
	}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3728      	adds	r7, #40	@ 0x28
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd80      	pop	{r7, pc}

08005a80 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b08c      	sub	sp, #48	@ 0x30
 8005a84:	af04      	add	r7, sp, #16
 8005a86:	60f8      	str	r0, [r7, #12]
 8005a88:	60b9      	str	r1, [r7, #8]
 8005a8a:	603b      	str	r3, [r7, #0]
 8005a8c:	4613      	mov	r3, r2
 8005a8e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a90:	88fb      	ldrh	r3, [r7, #6]
 8005a92:	009b      	lsls	r3, r3, #2
 8005a94:	4618      	mov	r0, r3
 8005a96:	f001 fddb 	bl	8007650 <pvPortMalloc>
 8005a9a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	d00e      	beq.n	8005ac0 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005aa2:	205c      	movs	r0, #92	@ 0x5c
 8005aa4:	f001 fdd4 	bl	8007650 <pvPortMalloc>
 8005aa8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005aaa:	69fb      	ldr	r3, [r7, #28]
 8005aac:	2b00      	cmp	r3, #0
 8005aae:	d003      	beq.n	8005ab8 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005ab0:	69fb      	ldr	r3, [r7, #28]
 8005ab2:	697a      	ldr	r2, [r7, #20]
 8005ab4:	631a      	str	r2, [r3, #48]	@ 0x30
 8005ab6:	e005      	b.n	8005ac4 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005ab8:	6978      	ldr	r0, [r7, #20]
 8005aba:	f001 fe97 	bl	80077ec <vPortFree>
 8005abe:	e001      	b.n	8005ac4 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005ac0:	2300      	movs	r3, #0
 8005ac2:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005ac4:	69fb      	ldr	r3, [r7, #28]
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d017      	beq.n	8005afa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005aca:	69fb      	ldr	r3, [r7, #28]
 8005acc:	2200      	movs	r2, #0
 8005ace:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005ad2:	88fa      	ldrh	r2, [r7, #6]
 8005ad4:	2300      	movs	r3, #0
 8005ad6:	9303      	str	r3, [sp, #12]
 8005ad8:	69fb      	ldr	r3, [r7, #28]
 8005ada:	9302      	str	r3, [sp, #8]
 8005adc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ade:	9301      	str	r3, [sp, #4]
 8005ae0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ae2:	9300      	str	r3, [sp, #0]
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	68b9      	ldr	r1, [r7, #8]
 8005ae8:	68f8      	ldr	r0, [r7, #12]
 8005aea:	f000 f80e 	bl	8005b0a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005aee:	69f8      	ldr	r0, [r7, #28]
 8005af0:	f000 f89c 	bl	8005c2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005af4:	2301      	movs	r3, #1
 8005af6:	61bb      	str	r3, [r7, #24]
 8005af8:	e002      	b.n	8005b00 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005afa:	f04f 33ff 	mov.w	r3, #4294967295
 8005afe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005b00:	69bb      	ldr	r3, [r7, #24]
	}
 8005b02:	4618      	mov	r0, r3
 8005b04:	3720      	adds	r7, #32
 8005b06:	46bd      	mov	sp, r7
 8005b08:	bd80      	pop	{r7, pc}

08005b0a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005b0a:	b580      	push	{r7, lr}
 8005b0c:	b088      	sub	sp, #32
 8005b0e:	af00      	add	r7, sp, #0
 8005b10:	60f8      	str	r0, [r7, #12]
 8005b12:	60b9      	str	r1, [r7, #8]
 8005b14:	607a      	str	r2, [r7, #4]
 8005b16:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	009b      	lsls	r3, r3, #2
 8005b20:	461a      	mov	r2, r3
 8005b22:	21a5      	movs	r1, #165	@ 0xa5
 8005b24:	f002 fd41 	bl	80085aa <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005b28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b2a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005b32:	3b01      	subs	r3, #1
 8005b34:	009b      	lsls	r3, r3, #2
 8005b36:	4413      	add	r3, r2
 8005b38:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005b3a:	69bb      	ldr	r3, [r7, #24]
 8005b3c:	f023 0307 	bic.w	r3, r3, #7
 8005b40:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005b42:	69bb      	ldr	r3, [r7, #24]
 8005b44:	f003 0307 	and.w	r3, r3, #7
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d00b      	beq.n	8005b64 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b50:	f383 8811 	msr	BASEPRI, r3
 8005b54:	f3bf 8f6f 	isb	sy
 8005b58:	f3bf 8f4f 	dsb	sy
 8005b5c:	617b      	str	r3, [r7, #20]
}
 8005b5e:	bf00      	nop
 8005b60:	bf00      	nop
 8005b62:	e7fd      	b.n	8005b60 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005b64:	68bb      	ldr	r3, [r7, #8]
 8005b66:	2b00      	cmp	r3, #0
 8005b68:	d01f      	beq.n	8005baa <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	61fb      	str	r3, [r7, #28]
 8005b6e:	e012      	b.n	8005b96 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b70:	68ba      	ldr	r2, [r7, #8]
 8005b72:	69fb      	ldr	r3, [r7, #28]
 8005b74:	4413      	add	r3, r2
 8005b76:	7819      	ldrb	r1, [r3, #0]
 8005b78:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b7a:	69fb      	ldr	r3, [r7, #28]
 8005b7c:	4413      	add	r3, r2
 8005b7e:	3334      	adds	r3, #52	@ 0x34
 8005b80:	460a      	mov	r2, r1
 8005b82:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b84:	68ba      	ldr	r2, [r7, #8]
 8005b86:	69fb      	ldr	r3, [r7, #28]
 8005b88:	4413      	add	r3, r2
 8005b8a:	781b      	ldrb	r3, [r3, #0]
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	d006      	beq.n	8005b9e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b90:	69fb      	ldr	r3, [r7, #28]
 8005b92:	3301      	adds	r3, #1
 8005b94:	61fb      	str	r3, [r7, #28]
 8005b96:	69fb      	ldr	r3, [r7, #28]
 8005b98:	2b0f      	cmp	r3, #15
 8005b9a:	d9e9      	bls.n	8005b70 <prvInitialiseNewTask+0x66>
 8005b9c:	e000      	b.n	8005ba0 <prvInitialiseNewTask+0x96>
			{
				break;
 8005b9e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005ba0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba2:	2200      	movs	r2, #0
 8005ba4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005ba8:	e003      	b.n	8005bb2 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005baa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bac:	2200      	movs	r2, #0
 8005bae:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005bb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bb4:	2b37      	cmp	r3, #55	@ 0x37
 8005bb6:	d901      	bls.n	8005bbc <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005bb8:	2337      	movs	r3, #55	@ 0x37
 8005bba:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005bc2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bc4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005bc6:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005bc8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bca:	2200      	movs	r2, #0
 8005bcc:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	3304      	adds	r3, #4
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f7fe fe1b 	bl	800480e <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005bd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bda:	3318      	adds	r3, #24
 8005bdc:	4618      	mov	r0, r3
 8005bde:	f7fe fe16 	bl	800480e <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005be2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005be6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005be8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005bea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005bee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005bf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bf6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005bf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfa:	2200      	movs	r2, #0
 8005bfc:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005bfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c00:	2200      	movs	r2, #0
 8005c02:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005c06:	683a      	ldr	r2, [r7, #0]
 8005c08:	68f9      	ldr	r1, [r7, #12]
 8005c0a:	69b8      	ldr	r0, [r7, #24]
 8005c0c:	f001 fb2c 	bl	8007268 <pxPortInitialiseStack>
 8005c10:	4602      	mov	r2, r0
 8005c12:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c14:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005c16:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d002      	beq.n	8005c22 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005c1c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c1e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005c20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005c22:	bf00      	nop
 8005c24:	3720      	adds	r7, #32
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
	...

08005c2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b082      	sub	sp, #8
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005c34:	f001 fc0a 	bl	800744c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c38:	4b2d      	ldr	r3, [pc, #180]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	3301      	adds	r3, #1
 8005c3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c42:	4b2c      	ldr	r3, [pc, #176]	@ (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d109      	bne.n	8005c5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c50:	4b27      	ldr	r3, [pc, #156]	@ (8005cf0 <prvAddNewTaskToReadyList+0xc4>)
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	2b01      	cmp	r3, #1
 8005c56:	d110      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c58:	f000 fbe6 	bl	8006428 <prvInitialiseTaskLists>
 8005c5c:	e00d      	b.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c5e:	4b26      	ldr	r3, [pc, #152]	@ (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d109      	bne.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c66:	4b23      	ldr	r3, [pc, #140]	@ (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c70:	429a      	cmp	r2, r3
 8005c72:	d802      	bhi.n	8005c7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c74:	4a1f      	ldr	r2, [pc, #124]	@ (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c7a:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	4a1e      	ldr	r2, [pc, #120]	@ (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005c82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <prvAddNewTaskToReadyList+0xd0>)
 8005c86:	681a      	ldr	r2, [r3, #0]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c90:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <prvAddNewTaskToReadyList+0xd4>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	429a      	cmp	r2, r3
 8005c96:	d903      	bls.n	8005ca0 <prvAddNewTaskToReadyList+0x74>
 8005c98:	687b      	ldr	r3, [r7, #4]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	4a18      	ldr	r2, [pc, #96]	@ (8005d00 <prvAddNewTaskToReadyList+0xd4>)
 8005c9e:	6013      	str	r3, [r2, #0]
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ca4:	4613      	mov	r3, r2
 8005ca6:	009b      	lsls	r3, r3, #2
 8005ca8:	4413      	add	r3, r2
 8005caa:	009b      	lsls	r3, r3, #2
 8005cac:	4a15      	ldr	r2, [pc, #84]	@ (8005d04 <prvAddNewTaskToReadyList+0xd8>)
 8005cae:	441a      	add	r2, r3
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	4619      	mov	r1, r3
 8005cb6:	4610      	mov	r0, r2
 8005cb8:	f7fe fdb5 	bl	8004826 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005cbc:	f001 fbf6 	bl	80074ac <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005cc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005cf8 <prvAddNewTaskToReadyList+0xcc>)
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d00e      	beq.n	8005ce6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005cf4 <prvAddNewTaskToReadyList+0xc8>)
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005cd2:	429a      	cmp	r2, r3
 8005cd4:	d207      	bcs.n	8005ce6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005cd6:	4b0c      	ldr	r3, [pc, #48]	@ (8005d08 <prvAddNewTaskToReadyList+0xdc>)
 8005cd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005cdc:	601a      	str	r2, [r3, #0]
 8005cde:	f3bf 8f4f 	dsb	sy
 8005ce2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005ce6:	bf00      	nop
 8005ce8:	3708      	adds	r7, #8
 8005cea:	46bd      	mov	sp, r7
 8005cec:	bd80      	pop	{r7, pc}
 8005cee:	bf00      	nop
 8005cf0:	20000e38 	.word	0x20000e38
 8005cf4:	20000964 	.word	0x20000964
 8005cf8:	20000e44 	.word	0x20000e44
 8005cfc:	20000e54 	.word	0x20000e54
 8005d00:	20000e40 	.word	0x20000e40
 8005d04:	20000968 	.word	0x20000968
 8005d08:	e000ed04 	.word	0xe000ed04

08005d0c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d0c:	b580      	push	{r7, lr}
 8005d0e:	b08a      	sub	sp, #40	@ 0x28
 8005d10:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d12:	2300      	movs	r3, #0
 8005d14:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d16:	2300      	movs	r3, #0
 8005d18:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d1a:	463a      	mov	r2, r7
 8005d1c:	1d39      	adds	r1, r7, #4
 8005d1e:	f107 0308 	add.w	r3, r7, #8
 8005d22:	4618      	mov	r0, r3
 8005d24:	f7fe fd22 	bl	800476c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d28:	6839      	ldr	r1, [r7, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	68ba      	ldr	r2, [r7, #8]
 8005d2e:	9202      	str	r2, [sp, #8]
 8005d30:	9301      	str	r3, [sp, #4]
 8005d32:	2300      	movs	r3, #0
 8005d34:	9300      	str	r3, [sp, #0]
 8005d36:	2300      	movs	r3, #0
 8005d38:	460a      	mov	r2, r1
 8005d3a:	4922      	ldr	r1, [pc, #136]	@ (8005dc4 <vTaskStartScheduler+0xb8>)
 8005d3c:	4822      	ldr	r0, [pc, #136]	@ (8005dc8 <vTaskStartScheduler+0xbc>)
 8005d3e:	f7ff fe3f 	bl	80059c0 <xTaskCreateStatic>
 8005d42:	4603      	mov	r3, r0
 8005d44:	4a21      	ldr	r2, [pc, #132]	@ (8005dcc <vTaskStartScheduler+0xc0>)
 8005d46:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d48:	4b20      	ldr	r3, [pc, #128]	@ (8005dcc <vTaskStartScheduler+0xc0>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d002      	beq.n	8005d56 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d50:	2301      	movs	r3, #1
 8005d52:	617b      	str	r3, [r7, #20]
 8005d54:	e001      	b.n	8005d5a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d56:	2300      	movs	r3, #0
 8005d58:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d5a:	697b      	ldr	r3, [r7, #20]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d102      	bne.n	8005d66 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d60:	f000 ff2a 	bl	8006bb8 <xTimerCreateTimerTask>
 8005d64:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d66:	697b      	ldr	r3, [r7, #20]
 8005d68:	2b01      	cmp	r3, #1
 8005d6a:	d116      	bne.n	8005d9a <vTaskStartScheduler+0x8e>
	__asm volatile
 8005d6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d70:	f383 8811 	msr	BASEPRI, r3
 8005d74:	f3bf 8f6f 	isb	sy
 8005d78:	f3bf 8f4f 	dsb	sy
 8005d7c:	613b      	str	r3, [r7, #16]
}
 8005d7e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005d80:	4b13      	ldr	r3, [pc, #76]	@ (8005dd0 <vTaskStartScheduler+0xc4>)
 8005d82:	f04f 32ff 	mov.w	r2, #4294967295
 8005d86:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005d88:	4b12      	ldr	r3, [pc, #72]	@ (8005dd4 <vTaskStartScheduler+0xc8>)
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005d8e:	4b12      	ldr	r3, [pc, #72]	@ (8005dd8 <vTaskStartScheduler+0xcc>)
 8005d90:	2200      	movs	r2, #0
 8005d92:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005d94:	f001 fae8 	bl	8007368 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005d98:	e00f      	b.n	8005dba <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005da0:	d10b      	bne.n	8005dba <vTaskStartScheduler+0xae>
	__asm volatile
 8005da2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da6:	f383 8811 	msr	BASEPRI, r3
 8005daa:	f3bf 8f6f 	isb	sy
 8005dae:	f3bf 8f4f 	dsb	sy
 8005db2:	60fb      	str	r3, [r7, #12]
}
 8005db4:	bf00      	nop
 8005db6:	bf00      	nop
 8005db8:	e7fd      	b.n	8005db6 <vTaskStartScheduler+0xaa>
}
 8005dba:	bf00      	nop
 8005dbc:	3718      	adds	r7, #24
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}
 8005dc2:	bf00      	nop
 8005dc4:	0800b220 	.word	0x0800b220
 8005dc8:	080063f9 	.word	0x080063f9
 8005dcc:	20000e5c 	.word	0x20000e5c
 8005dd0:	20000e58 	.word	0x20000e58
 8005dd4:	20000e44 	.word	0x20000e44
 8005dd8:	20000e3c 	.word	0x20000e3c

08005ddc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005ddc:	b480      	push	{r7}
 8005dde:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005de0:	4b04      	ldr	r3, [pc, #16]	@ (8005df4 <vTaskSuspendAll+0x18>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	3301      	adds	r3, #1
 8005de6:	4a03      	ldr	r2, [pc, #12]	@ (8005df4 <vTaskSuspendAll+0x18>)
 8005de8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005dea:	bf00      	nop
 8005dec:	46bd      	mov	sp, r7
 8005dee:	bc80      	pop	{r7}
 8005df0:	4770      	bx	lr
 8005df2:	bf00      	nop
 8005df4:	20000e60 	.word	0x20000e60

08005df8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b084      	sub	sp, #16
 8005dfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005dfe:	2300      	movs	r3, #0
 8005e00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e06:	4b42      	ldr	r3, [pc, #264]	@ (8005f10 <xTaskResumeAll+0x118>)
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d10b      	bne.n	8005e26 <xTaskResumeAll+0x2e>
	__asm volatile
 8005e0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e12:	f383 8811 	msr	BASEPRI, r3
 8005e16:	f3bf 8f6f 	isb	sy
 8005e1a:	f3bf 8f4f 	dsb	sy
 8005e1e:	603b      	str	r3, [r7, #0]
}
 8005e20:	bf00      	nop
 8005e22:	bf00      	nop
 8005e24:	e7fd      	b.n	8005e22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e26:	f001 fb11 	bl	800744c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e2a:	4b39      	ldr	r3, [pc, #228]	@ (8005f10 <xTaskResumeAll+0x118>)
 8005e2c:	681b      	ldr	r3, [r3, #0]
 8005e2e:	3b01      	subs	r3, #1
 8005e30:	4a37      	ldr	r2, [pc, #220]	@ (8005f10 <xTaskResumeAll+0x118>)
 8005e32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e34:	4b36      	ldr	r3, [pc, #216]	@ (8005f10 <xTaskResumeAll+0x118>)
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d162      	bne.n	8005f02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e3c:	4b35      	ldr	r3, [pc, #212]	@ (8005f14 <xTaskResumeAll+0x11c>)
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2b00      	cmp	r3, #0
 8005e42:	d05e      	beq.n	8005f02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e44:	e02f      	b.n	8005ea6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e46:	4b34      	ldr	r3, [pc, #208]	@ (8005f18 <xTaskResumeAll+0x120>)
 8005e48:	68db      	ldr	r3, [r3, #12]
 8005e4a:	68db      	ldr	r3, [r3, #12]
 8005e4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	3318      	adds	r3, #24
 8005e52:	4618      	mov	r0, r3
 8005e54:	f7fe fd42 	bl	80048dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	3304      	adds	r3, #4
 8005e5c:	4618      	mov	r0, r3
 8005e5e:	f7fe fd3d 	bl	80048dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e66:	4b2d      	ldr	r3, [pc, #180]	@ (8005f1c <xTaskResumeAll+0x124>)
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	429a      	cmp	r2, r3
 8005e6c:	d903      	bls.n	8005e76 <xTaskResumeAll+0x7e>
 8005e6e:	68fb      	ldr	r3, [r7, #12]
 8005e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e72:	4a2a      	ldr	r2, [pc, #168]	@ (8005f1c <xTaskResumeAll+0x124>)
 8005e74:	6013      	str	r3, [r2, #0]
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e7a:	4613      	mov	r3, r2
 8005e7c:	009b      	lsls	r3, r3, #2
 8005e7e:	4413      	add	r3, r2
 8005e80:	009b      	lsls	r3, r3, #2
 8005e82:	4a27      	ldr	r2, [pc, #156]	@ (8005f20 <xTaskResumeAll+0x128>)
 8005e84:	441a      	add	r2, r3
 8005e86:	68fb      	ldr	r3, [r7, #12]
 8005e88:	3304      	adds	r3, #4
 8005e8a:	4619      	mov	r1, r3
 8005e8c:	4610      	mov	r0, r2
 8005e8e:	f7fe fcca 	bl	8004826 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005e96:	4b23      	ldr	r3, [pc, #140]	@ (8005f24 <xTaskResumeAll+0x12c>)
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005e9c:	429a      	cmp	r2, r3
 8005e9e:	d302      	bcc.n	8005ea6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ea0:	4b21      	ldr	r3, [pc, #132]	@ (8005f28 <xTaskResumeAll+0x130>)
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005ea6:	4b1c      	ldr	r3, [pc, #112]	@ (8005f18 <xTaskResumeAll+0x120>)
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	2b00      	cmp	r3, #0
 8005eac:	d1cb      	bne.n	8005e46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d001      	beq.n	8005eb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005eb4:	f000 fb56 	bl	8006564 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005eb8:	4b1c      	ldr	r3, [pc, #112]	@ (8005f2c <xTaskResumeAll+0x134>)
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d010      	beq.n	8005ee6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005ec4:	f000 f844 	bl	8005f50 <xTaskIncrementTick>
 8005ec8:	4603      	mov	r3, r0
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d002      	beq.n	8005ed4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005ece:	4b16      	ldr	r3, [pc, #88]	@ (8005f28 <xTaskResumeAll+0x130>)
 8005ed0:	2201      	movs	r2, #1
 8005ed2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	3b01      	subs	r3, #1
 8005ed8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d1f1      	bne.n	8005ec4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005ee0:	4b12      	ldr	r3, [pc, #72]	@ (8005f2c <xTaskResumeAll+0x134>)
 8005ee2:	2200      	movs	r2, #0
 8005ee4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005ee6:	4b10      	ldr	r3, [pc, #64]	@ (8005f28 <xTaskResumeAll+0x130>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d009      	beq.n	8005f02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005eee:	2301      	movs	r3, #1
 8005ef0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005ef2:	4b0f      	ldr	r3, [pc, #60]	@ (8005f30 <xTaskResumeAll+0x138>)
 8005ef4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ef8:	601a      	str	r2, [r3, #0]
 8005efa:	f3bf 8f4f 	dsb	sy
 8005efe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f02:	f001 fad3 	bl	80074ac <vPortExitCritical>

	return xAlreadyYielded;
 8005f06:	68bb      	ldr	r3, [r7, #8]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}
 8005f10:	20000e60 	.word	0x20000e60
 8005f14:	20000e38 	.word	0x20000e38
 8005f18:	20000df8 	.word	0x20000df8
 8005f1c:	20000e40 	.word	0x20000e40
 8005f20:	20000968 	.word	0x20000968
 8005f24:	20000964 	.word	0x20000964
 8005f28:	20000e4c 	.word	0x20000e4c
 8005f2c:	20000e48 	.word	0x20000e48
 8005f30:	e000ed04 	.word	0xe000ed04

08005f34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f3a:	4b04      	ldr	r3, [pc, #16]	@ (8005f4c <xTaskGetTickCount+0x18>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f40:	687b      	ldr	r3, [r7, #4]
}
 8005f42:	4618      	mov	r0, r3
 8005f44:	370c      	adds	r7, #12
 8005f46:	46bd      	mov	sp, r7
 8005f48:	bc80      	pop	{r7}
 8005f4a:	4770      	bx	lr
 8005f4c:	20000e3c 	.word	0x20000e3c

08005f50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f56:	2300      	movs	r3, #0
 8005f58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005f5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006098 <xTaskIncrementTick+0x148>)
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b00      	cmp	r3, #0
 8005f60:	f040 8090 	bne.w	8006084 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005f64:	4b4d      	ldr	r3, [pc, #308]	@ (800609c <xTaskIncrementTick+0x14c>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	3301      	adds	r3, #1
 8005f6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005f6c:	4a4b      	ldr	r2, [pc, #300]	@ (800609c <xTaskIncrementTick+0x14c>)
 8005f6e:	693b      	ldr	r3, [r7, #16]
 8005f70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d121      	bne.n	8005fbc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005f78:	4b49      	ldr	r3, [pc, #292]	@ (80060a0 <xTaskIncrementTick+0x150>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	2b00      	cmp	r3, #0
 8005f80:	d00b      	beq.n	8005f9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8005f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f86:	f383 8811 	msr	BASEPRI, r3
 8005f8a:	f3bf 8f6f 	isb	sy
 8005f8e:	f3bf 8f4f 	dsb	sy
 8005f92:	603b      	str	r3, [r7, #0]
}
 8005f94:	bf00      	nop
 8005f96:	bf00      	nop
 8005f98:	e7fd      	b.n	8005f96 <xTaskIncrementTick+0x46>
 8005f9a:	4b41      	ldr	r3, [pc, #260]	@ (80060a0 <xTaskIncrementTick+0x150>)
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	60fb      	str	r3, [r7, #12]
 8005fa0:	4b40      	ldr	r3, [pc, #256]	@ (80060a4 <xTaskIncrementTick+0x154>)
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a3e      	ldr	r2, [pc, #248]	@ (80060a0 <xTaskIncrementTick+0x150>)
 8005fa6:	6013      	str	r3, [r2, #0]
 8005fa8:	4a3e      	ldr	r2, [pc, #248]	@ (80060a4 <xTaskIncrementTick+0x154>)
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6013      	str	r3, [r2, #0]
 8005fae:	4b3e      	ldr	r3, [pc, #248]	@ (80060a8 <xTaskIncrementTick+0x158>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	3301      	adds	r3, #1
 8005fb4:	4a3c      	ldr	r2, [pc, #240]	@ (80060a8 <xTaskIncrementTick+0x158>)
 8005fb6:	6013      	str	r3, [r2, #0]
 8005fb8:	f000 fad4 	bl	8006564 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005fbc:	4b3b      	ldr	r3, [pc, #236]	@ (80060ac <xTaskIncrementTick+0x15c>)
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	693a      	ldr	r2, [r7, #16]
 8005fc2:	429a      	cmp	r2, r3
 8005fc4:	d349      	bcc.n	800605a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005fc6:	4b36      	ldr	r3, [pc, #216]	@ (80060a0 <xTaskIncrementTick+0x150>)
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d104      	bne.n	8005fda <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005fd0:	4b36      	ldr	r3, [pc, #216]	@ (80060ac <xTaskIncrementTick+0x15c>)
 8005fd2:	f04f 32ff 	mov.w	r2, #4294967295
 8005fd6:	601a      	str	r2, [r3, #0]
					break;
 8005fd8:	e03f      	b.n	800605a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005fda:	4b31      	ldr	r3, [pc, #196]	@ (80060a0 <xTaskIncrementTick+0x150>)
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005fea:	693a      	ldr	r2, [r7, #16]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	429a      	cmp	r2, r3
 8005ff0:	d203      	bcs.n	8005ffa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005ff2:	4a2e      	ldr	r2, [pc, #184]	@ (80060ac <xTaskIncrementTick+0x15c>)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005ff8:	e02f      	b.n	800605a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005ffa:	68bb      	ldr	r3, [r7, #8]
 8005ffc:	3304      	adds	r3, #4
 8005ffe:	4618      	mov	r0, r3
 8006000:	f7fe fc6c 	bl	80048dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006008:	2b00      	cmp	r3, #0
 800600a:	d004      	beq.n	8006016 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800600c:	68bb      	ldr	r3, [r7, #8]
 800600e:	3318      	adds	r3, #24
 8006010:	4618      	mov	r0, r3
 8006012:	f7fe fc63 	bl	80048dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006016:	68bb      	ldr	r3, [r7, #8]
 8006018:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800601a:	4b25      	ldr	r3, [pc, #148]	@ (80060b0 <xTaskIncrementTick+0x160>)
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	429a      	cmp	r2, r3
 8006020:	d903      	bls.n	800602a <xTaskIncrementTick+0xda>
 8006022:	68bb      	ldr	r3, [r7, #8]
 8006024:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006026:	4a22      	ldr	r2, [pc, #136]	@ (80060b0 <xTaskIncrementTick+0x160>)
 8006028:	6013      	str	r3, [r2, #0]
 800602a:	68bb      	ldr	r3, [r7, #8]
 800602c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800602e:	4613      	mov	r3, r2
 8006030:	009b      	lsls	r3, r3, #2
 8006032:	4413      	add	r3, r2
 8006034:	009b      	lsls	r3, r3, #2
 8006036:	4a1f      	ldr	r2, [pc, #124]	@ (80060b4 <xTaskIncrementTick+0x164>)
 8006038:	441a      	add	r2, r3
 800603a:	68bb      	ldr	r3, [r7, #8]
 800603c:	3304      	adds	r3, #4
 800603e:	4619      	mov	r1, r3
 8006040:	4610      	mov	r0, r2
 8006042:	f7fe fbf0 	bl	8004826 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006046:	68bb      	ldr	r3, [r7, #8]
 8006048:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800604a:	4b1b      	ldr	r3, [pc, #108]	@ (80060b8 <xTaskIncrementTick+0x168>)
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006050:	429a      	cmp	r2, r3
 8006052:	d3b8      	bcc.n	8005fc6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006054:	2301      	movs	r3, #1
 8006056:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006058:	e7b5      	b.n	8005fc6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800605a:	4b17      	ldr	r3, [pc, #92]	@ (80060b8 <xTaskIncrementTick+0x168>)
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006060:	4914      	ldr	r1, [pc, #80]	@ (80060b4 <xTaskIncrementTick+0x164>)
 8006062:	4613      	mov	r3, r2
 8006064:	009b      	lsls	r3, r3, #2
 8006066:	4413      	add	r3, r2
 8006068:	009b      	lsls	r3, r3, #2
 800606a:	440b      	add	r3, r1
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	2b01      	cmp	r3, #1
 8006070:	d901      	bls.n	8006076 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006072:	2301      	movs	r3, #1
 8006074:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006076:	4b11      	ldr	r3, [pc, #68]	@ (80060bc <xTaskIncrementTick+0x16c>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d007      	beq.n	800608e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800607e:	2301      	movs	r3, #1
 8006080:	617b      	str	r3, [r7, #20]
 8006082:	e004      	b.n	800608e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006084:	4b0e      	ldr	r3, [pc, #56]	@ (80060c0 <xTaskIncrementTick+0x170>)
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	4a0d      	ldr	r2, [pc, #52]	@ (80060c0 <xTaskIncrementTick+0x170>)
 800608c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800608e:	697b      	ldr	r3, [r7, #20]
}
 8006090:	4618      	mov	r0, r3
 8006092:	3718      	adds	r7, #24
 8006094:	46bd      	mov	sp, r7
 8006096:	bd80      	pop	{r7, pc}
 8006098:	20000e60 	.word	0x20000e60
 800609c:	20000e3c 	.word	0x20000e3c
 80060a0:	20000df0 	.word	0x20000df0
 80060a4:	20000df4 	.word	0x20000df4
 80060a8:	20000e50 	.word	0x20000e50
 80060ac:	20000e58 	.word	0x20000e58
 80060b0:	20000e40 	.word	0x20000e40
 80060b4:	20000968 	.word	0x20000968
 80060b8:	20000964 	.word	0x20000964
 80060bc:	20000e4c 	.word	0x20000e4c
 80060c0:	20000e48 	.word	0x20000e48

080060c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80060c4:	b480      	push	{r7}
 80060c6:	b085      	sub	sp, #20
 80060c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80060ca:	4b28      	ldr	r3, [pc, #160]	@ (800616c <vTaskSwitchContext+0xa8>)
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d003      	beq.n	80060da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80060d2:	4b27      	ldr	r3, [pc, #156]	@ (8006170 <vTaskSwitchContext+0xac>)
 80060d4:	2201      	movs	r2, #1
 80060d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80060d8:	e042      	b.n	8006160 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80060da:	4b25      	ldr	r3, [pc, #148]	@ (8006170 <vTaskSwitchContext+0xac>)
 80060dc:	2200      	movs	r2, #0
 80060de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80060e0:	4b24      	ldr	r3, [pc, #144]	@ (8006174 <vTaskSwitchContext+0xb0>)
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	60fb      	str	r3, [r7, #12]
 80060e6:	e011      	b.n	800610c <vTaskSwitchContext+0x48>
 80060e8:	68fb      	ldr	r3, [r7, #12]
 80060ea:	2b00      	cmp	r3, #0
 80060ec:	d10b      	bne.n	8006106 <vTaskSwitchContext+0x42>
	__asm volatile
 80060ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060f2:	f383 8811 	msr	BASEPRI, r3
 80060f6:	f3bf 8f6f 	isb	sy
 80060fa:	f3bf 8f4f 	dsb	sy
 80060fe:	607b      	str	r3, [r7, #4]
}
 8006100:	bf00      	nop
 8006102:	bf00      	nop
 8006104:	e7fd      	b.n	8006102 <vTaskSwitchContext+0x3e>
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	3b01      	subs	r3, #1
 800610a:	60fb      	str	r3, [r7, #12]
 800610c:	491a      	ldr	r1, [pc, #104]	@ (8006178 <vTaskSwitchContext+0xb4>)
 800610e:	68fa      	ldr	r2, [r7, #12]
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	440b      	add	r3, r1
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d0e3      	beq.n	80060e8 <vTaskSwitchContext+0x24>
 8006120:	68fa      	ldr	r2, [r7, #12]
 8006122:	4613      	mov	r3, r2
 8006124:	009b      	lsls	r3, r3, #2
 8006126:	4413      	add	r3, r2
 8006128:	009b      	lsls	r3, r3, #2
 800612a:	4a13      	ldr	r2, [pc, #76]	@ (8006178 <vTaskSwitchContext+0xb4>)
 800612c:	4413      	add	r3, r2
 800612e:	60bb      	str	r3, [r7, #8]
 8006130:	68bb      	ldr	r3, [r7, #8]
 8006132:	685b      	ldr	r3, [r3, #4]
 8006134:	685a      	ldr	r2, [r3, #4]
 8006136:	68bb      	ldr	r3, [r7, #8]
 8006138:	605a      	str	r2, [r3, #4]
 800613a:	68bb      	ldr	r3, [r7, #8]
 800613c:	685a      	ldr	r2, [r3, #4]
 800613e:	68bb      	ldr	r3, [r7, #8]
 8006140:	3308      	adds	r3, #8
 8006142:	429a      	cmp	r2, r3
 8006144:	d104      	bne.n	8006150 <vTaskSwitchContext+0x8c>
 8006146:	68bb      	ldr	r3, [r7, #8]
 8006148:	685b      	ldr	r3, [r3, #4]
 800614a:	685a      	ldr	r2, [r3, #4]
 800614c:	68bb      	ldr	r3, [r7, #8]
 800614e:	605a      	str	r2, [r3, #4]
 8006150:	68bb      	ldr	r3, [r7, #8]
 8006152:	685b      	ldr	r3, [r3, #4]
 8006154:	68db      	ldr	r3, [r3, #12]
 8006156:	4a09      	ldr	r2, [pc, #36]	@ (800617c <vTaskSwitchContext+0xb8>)
 8006158:	6013      	str	r3, [r2, #0]
 800615a:	4a06      	ldr	r2, [pc, #24]	@ (8006174 <vTaskSwitchContext+0xb0>)
 800615c:	68fb      	ldr	r3, [r7, #12]
 800615e:	6013      	str	r3, [r2, #0]
}
 8006160:	bf00      	nop
 8006162:	3714      	adds	r7, #20
 8006164:	46bd      	mov	sp, r7
 8006166:	bc80      	pop	{r7}
 8006168:	4770      	bx	lr
 800616a:	bf00      	nop
 800616c:	20000e60 	.word	0x20000e60
 8006170:	20000e4c 	.word	0x20000e4c
 8006174:	20000e40 	.word	0x20000e40
 8006178:	20000968 	.word	0x20000968
 800617c:	20000964 	.word	0x20000964

08006180 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006180:	b580      	push	{r7, lr}
 8006182:	b084      	sub	sp, #16
 8006184:	af00      	add	r7, sp, #0
 8006186:	6078      	str	r0, [r7, #4]
 8006188:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d10b      	bne.n	80061a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061a8:	4b07      	ldr	r3, [pc, #28]	@ (80061c8 <vTaskPlaceOnEventList+0x48>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3318      	adds	r3, #24
 80061ae:	4619      	mov	r1, r3
 80061b0:	6878      	ldr	r0, [r7, #4]
 80061b2:	f7fe fb5b 	bl	800486c <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80061b6:	2101      	movs	r1, #1
 80061b8:	6838      	ldr	r0, [r7, #0]
 80061ba:	f000 fca9 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
}
 80061be:	bf00      	nop
 80061c0:	3710      	adds	r7, #16
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20000964 	.word	0x20000964

080061cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80061cc:	b580      	push	{r7, lr}
 80061ce:	b086      	sub	sp, #24
 80061d0:	af00      	add	r7, sp, #0
 80061d2:	60f8      	str	r0, [r7, #12]
 80061d4:	60b9      	str	r1, [r7, #8]
 80061d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d10b      	bne.n	80061f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80061de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061e2:	f383 8811 	msr	BASEPRI, r3
 80061e6:	f3bf 8f6f 	isb	sy
 80061ea:	f3bf 8f4f 	dsb	sy
 80061ee:	617b      	str	r3, [r7, #20]
}
 80061f0:	bf00      	nop
 80061f2:	bf00      	nop
 80061f4:	e7fd      	b.n	80061f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80061f6:	4b0a      	ldr	r3, [pc, #40]	@ (8006220 <vTaskPlaceOnEventListRestricted+0x54>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	3318      	adds	r3, #24
 80061fc:	4619      	mov	r1, r3
 80061fe:	68f8      	ldr	r0, [r7, #12]
 8006200:	f7fe fb11 	bl	8004826 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d002      	beq.n	8006210 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800620a:	f04f 33ff 	mov.w	r3, #4294967295
 800620e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006210:	6879      	ldr	r1, [r7, #4]
 8006212:	68b8      	ldr	r0, [r7, #8]
 8006214:	f000 fc7c 	bl	8006b10 <prvAddCurrentTaskToDelayedList>
	}
 8006218:	bf00      	nop
 800621a:	3718      	adds	r7, #24
 800621c:	46bd      	mov	sp, r7
 800621e:	bd80      	pop	{r7, pc}
 8006220:	20000964 	.word	0x20000964

08006224 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	68db      	ldr	r3, [r3, #12]
 8006230:	68db      	ldr	r3, [r3, #12]
 8006232:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006234:	693b      	ldr	r3, [r7, #16]
 8006236:	2b00      	cmp	r3, #0
 8006238:	d10b      	bne.n	8006252 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800623a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623e:	f383 8811 	msr	BASEPRI, r3
 8006242:	f3bf 8f6f 	isb	sy
 8006246:	f3bf 8f4f 	dsb	sy
 800624a:	60fb      	str	r3, [r7, #12]
}
 800624c:	bf00      	nop
 800624e:	bf00      	nop
 8006250:	e7fd      	b.n	800624e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006252:	693b      	ldr	r3, [r7, #16]
 8006254:	3318      	adds	r3, #24
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe fb40 	bl	80048dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800625c:	4b1d      	ldr	r3, [pc, #116]	@ (80062d4 <xTaskRemoveFromEventList+0xb0>)
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d11d      	bne.n	80062a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006264:	693b      	ldr	r3, [r7, #16]
 8006266:	3304      	adds	r3, #4
 8006268:	4618      	mov	r0, r3
 800626a:	f7fe fb37 	bl	80048dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800626e:	693b      	ldr	r3, [r7, #16]
 8006270:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006272:	4b19      	ldr	r3, [pc, #100]	@ (80062d8 <xTaskRemoveFromEventList+0xb4>)
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	429a      	cmp	r2, r3
 8006278:	d903      	bls.n	8006282 <xTaskRemoveFromEventList+0x5e>
 800627a:	693b      	ldr	r3, [r7, #16]
 800627c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800627e:	4a16      	ldr	r2, [pc, #88]	@ (80062d8 <xTaskRemoveFromEventList+0xb4>)
 8006280:	6013      	str	r3, [r2, #0]
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006286:	4613      	mov	r3, r2
 8006288:	009b      	lsls	r3, r3, #2
 800628a:	4413      	add	r3, r2
 800628c:	009b      	lsls	r3, r3, #2
 800628e:	4a13      	ldr	r2, [pc, #76]	@ (80062dc <xTaskRemoveFromEventList+0xb8>)
 8006290:	441a      	add	r2, r3
 8006292:	693b      	ldr	r3, [r7, #16]
 8006294:	3304      	adds	r3, #4
 8006296:	4619      	mov	r1, r3
 8006298:	4610      	mov	r0, r2
 800629a:	f7fe fac4 	bl	8004826 <vListInsertEnd>
 800629e:	e005      	b.n	80062ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	3318      	adds	r3, #24
 80062a4:	4619      	mov	r1, r3
 80062a6:	480e      	ldr	r0, [pc, #56]	@ (80062e0 <xTaskRemoveFromEventList+0xbc>)
 80062a8:	f7fe fabd 	bl	8004826 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80062ac:	693b      	ldr	r3, [r7, #16]
 80062ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062b0:	4b0c      	ldr	r3, [pc, #48]	@ (80062e4 <xTaskRemoveFromEventList+0xc0>)
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062b6:	429a      	cmp	r2, r3
 80062b8:	d905      	bls.n	80062c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80062ba:	2301      	movs	r3, #1
 80062bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80062be:	4b0a      	ldr	r3, [pc, #40]	@ (80062e8 <xTaskRemoveFromEventList+0xc4>)
 80062c0:	2201      	movs	r2, #1
 80062c2:	601a      	str	r2, [r3, #0]
 80062c4:	e001      	b.n	80062ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80062c6:	2300      	movs	r3, #0
 80062c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80062ca:	697b      	ldr	r3, [r7, #20]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}
 80062d4:	20000e60 	.word	0x20000e60
 80062d8:	20000e40 	.word	0x20000e40
 80062dc:	20000968 	.word	0x20000968
 80062e0:	20000df8 	.word	0x20000df8
 80062e4:	20000964 	.word	0x20000964
 80062e8:	20000e4c 	.word	0x20000e4c

080062ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80062ec:	b480      	push	{r7}
 80062ee:	b083      	sub	sp, #12
 80062f0:	af00      	add	r7, sp, #0
 80062f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80062f4:	4b06      	ldr	r3, [pc, #24]	@ (8006310 <vTaskInternalSetTimeOutState+0x24>)
 80062f6:	681a      	ldr	r2, [r3, #0]
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80062fc:	4b05      	ldr	r3, [pc, #20]	@ (8006314 <vTaskInternalSetTimeOutState+0x28>)
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	605a      	str	r2, [r3, #4]
}
 8006304:	bf00      	nop
 8006306:	370c      	adds	r7, #12
 8006308:	46bd      	mov	sp, r7
 800630a:	bc80      	pop	{r7}
 800630c:	4770      	bx	lr
 800630e:	bf00      	nop
 8006310:	20000e50 	.word	0x20000e50
 8006314:	20000e3c 	.word	0x20000e3c

08006318 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b088      	sub	sp, #32
 800631c:	af00      	add	r7, sp, #0
 800631e:	6078      	str	r0, [r7, #4]
 8006320:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	2b00      	cmp	r3, #0
 8006326:	d10b      	bne.n	8006340 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006328:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800632c:	f383 8811 	msr	BASEPRI, r3
 8006330:	f3bf 8f6f 	isb	sy
 8006334:	f3bf 8f4f 	dsb	sy
 8006338:	613b      	str	r3, [r7, #16]
}
 800633a:	bf00      	nop
 800633c:	bf00      	nop
 800633e:	e7fd      	b.n	800633c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d10b      	bne.n	800635e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006346:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800634a:	f383 8811 	msr	BASEPRI, r3
 800634e:	f3bf 8f6f 	isb	sy
 8006352:	f3bf 8f4f 	dsb	sy
 8006356:	60fb      	str	r3, [r7, #12]
}
 8006358:	bf00      	nop
 800635a:	bf00      	nop
 800635c:	e7fd      	b.n	800635a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800635e:	f001 f875 	bl	800744c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006362:	4b1d      	ldr	r3, [pc, #116]	@ (80063d8 <xTaskCheckForTimeOut+0xc0>)
 8006364:	681b      	ldr	r3, [r3, #0]
 8006366:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	685b      	ldr	r3, [r3, #4]
 800636c:	69ba      	ldr	r2, [r7, #24]
 800636e:	1ad3      	subs	r3, r2, r3
 8006370:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	f1b3 3fff 	cmp.w	r3, #4294967295
 800637a:	d102      	bne.n	8006382 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800637c:	2300      	movs	r3, #0
 800637e:	61fb      	str	r3, [r7, #28]
 8006380:	e023      	b.n	80063ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681a      	ldr	r2, [r3, #0]
 8006386:	4b15      	ldr	r3, [pc, #84]	@ (80063dc <xTaskCheckForTimeOut+0xc4>)
 8006388:	681b      	ldr	r3, [r3, #0]
 800638a:	429a      	cmp	r2, r3
 800638c:	d007      	beq.n	800639e <xTaskCheckForTimeOut+0x86>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	685b      	ldr	r3, [r3, #4]
 8006392:	69ba      	ldr	r2, [r7, #24]
 8006394:	429a      	cmp	r2, r3
 8006396:	d302      	bcc.n	800639e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006398:	2301      	movs	r3, #1
 800639a:	61fb      	str	r3, [r7, #28]
 800639c:	e015      	b.n	80063ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	681b      	ldr	r3, [r3, #0]
 80063a2:	697a      	ldr	r2, [r7, #20]
 80063a4:	429a      	cmp	r2, r3
 80063a6:	d20b      	bcs.n	80063c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80063a8:	683b      	ldr	r3, [r7, #0]
 80063aa:	681a      	ldr	r2, [r3, #0]
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	1ad2      	subs	r2, r2, r3
 80063b0:	683b      	ldr	r3, [r7, #0]
 80063b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f7ff ff99 	bl	80062ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80063ba:	2300      	movs	r3, #0
 80063bc:	61fb      	str	r3, [r7, #28]
 80063be:	e004      	b.n	80063ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80063c0:	683b      	ldr	r3, [r7, #0]
 80063c2:	2200      	movs	r2, #0
 80063c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80063c6:	2301      	movs	r3, #1
 80063c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80063ca:	f001 f86f 	bl	80074ac <vPortExitCritical>

	return xReturn;
 80063ce:	69fb      	ldr	r3, [r7, #28]
}
 80063d0:	4618      	mov	r0, r3
 80063d2:	3720      	adds	r7, #32
 80063d4:	46bd      	mov	sp, r7
 80063d6:	bd80      	pop	{r7, pc}
 80063d8:	20000e3c 	.word	0x20000e3c
 80063dc:	20000e50 	.word	0x20000e50

080063e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80063e0:	b480      	push	{r7}
 80063e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80063e4:	4b03      	ldr	r3, [pc, #12]	@ (80063f4 <vTaskMissedYield+0x14>)
 80063e6:	2201      	movs	r2, #1
 80063e8:	601a      	str	r2, [r3, #0]
}
 80063ea:	bf00      	nop
 80063ec:	46bd      	mov	sp, r7
 80063ee:	bc80      	pop	{r7}
 80063f0:	4770      	bx	lr
 80063f2:	bf00      	nop
 80063f4:	20000e4c 	.word	0x20000e4c

080063f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80063f8:	b580      	push	{r7, lr}
 80063fa:	b082      	sub	sp, #8
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006400:	f000 f852 	bl	80064a8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006404:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <prvIdleTask+0x28>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	2b01      	cmp	r3, #1
 800640a:	d9f9      	bls.n	8006400 <prvIdleTask+0x8>
			{
				taskYIELD();
 800640c:	4b05      	ldr	r3, [pc, #20]	@ (8006424 <prvIdleTask+0x2c>)
 800640e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006412:	601a      	str	r2, [r3, #0]
 8006414:	f3bf 8f4f 	dsb	sy
 8006418:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800641c:	e7f0      	b.n	8006400 <prvIdleTask+0x8>
 800641e:	bf00      	nop
 8006420:	20000968 	.word	0x20000968
 8006424:	e000ed04 	.word	0xe000ed04

08006428 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b082      	sub	sp, #8
 800642c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800642e:	2300      	movs	r3, #0
 8006430:	607b      	str	r3, [r7, #4]
 8006432:	e00c      	b.n	800644e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006434:	687a      	ldr	r2, [r7, #4]
 8006436:	4613      	mov	r3, r2
 8006438:	009b      	lsls	r3, r3, #2
 800643a:	4413      	add	r3, r2
 800643c:	009b      	lsls	r3, r3, #2
 800643e:	4a12      	ldr	r2, [pc, #72]	@ (8006488 <prvInitialiseTaskLists+0x60>)
 8006440:	4413      	add	r3, r2
 8006442:	4618      	mov	r0, r3
 8006444:	f7fe f9c4 	bl	80047d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	3301      	adds	r3, #1
 800644c:	607b      	str	r3, [r7, #4]
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	2b37      	cmp	r3, #55	@ 0x37
 8006452:	d9ef      	bls.n	8006434 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006454:	480d      	ldr	r0, [pc, #52]	@ (800648c <prvInitialiseTaskLists+0x64>)
 8006456:	f7fe f9bb 	bl	80047d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800645a:	480d      	ldr	r0, [pc, #52]	@ (8006490 <prvInitialiseTaskLists+0x68>)
 800645c:	f7fe f9b8 	bl	80047d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006460:	480c      	ldr	r0, [pc, #48]	@ (8006494 <prvInitialiseTaskLists+0x6c>)
 8006462:	f7fe f9b5 	bl	80047d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006466:	480c      	ldr	r0, [pc, #48]	@ (8006498 <prvInitialiseTaskLists+0x70>)
 8006468:	f7fe f9b2 	bl	80047d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800646c:	480b      	ldr	r0, [pc, #44]	@ (800649c <prvInitialiseTaskLists+0x74>)
 800646e:	f7fe f9af 	bl	80047d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006472:	4b0b      	ldr	r3, [pc, #44]	@ (80064a0 <prvInitialiseTaskLists+0x78>)
 8006474:	4a05      	ldr	r2, [pc, #20]	@ (800648c <prvInitialiseTaskLists+0x64>)
 8006476:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006478:	4b0a      	ldr	r3, [pc, #40]	@ (80064a4 <prvInitialiseTaskLists+0x7c>)
 800647a:	4a05      	ldr	r2, [pc, #20]	@ (8006490 <prvInitialiseTaskLists+0x68>)
 800647c:	601a      	str	r2, [r3, #0]
}
 800647e:	bf00      	nop
 8006480:	3708      	adds	r7, #8
 8006482:	46bd      	mov	sp, r7
 8006484:	bd80      	pop	{r7, pc}
 8006486:	bf00      	nop
 8006488:	20000968 	.word	0x20000968
 800648c:	20000dc8 	.word	0x20000dc8
 8006490:	20000ddc 	.word	0x20000ddc
 8006494:	20000df8 	.word	0x20000df8
 8006498:	20000e0c 	.word	0x20000e0c
 800649c:	20000e24 	.word	0x20000e24
 80064a0:	20000df0 	.word	0x20000df0
 80064a4:	20000df4 	.word	0x20000df4

080064a8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b082      	sub	sp, #8
 80064ac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064ae:	e019      	b.n	80064e4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80064b0:	f000 ffcc 	bl	800744c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80064b4:	4b10      	ldr	r3, [pc, #64]	@ (80064f8 <prvCheckTasksWaitingTermination+0x50>)
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	68db      	ldr	r3, [r3, #12]
 80064ba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	3304      	adds	r3, #4
 80064c0:	4618      	mov	r0, r3
 80064c2:	f7fe fa0b 	bl	80048dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80064c6:	4b0d      	ldr	r3, [pc, #52]	@ (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	3b01      	subs	r3, #1
 80064cc:	4a0b      	ldr	r2, [pc, #44]	@ (80064fc <prvCheckTasksWaitingTermination+0x54>)
 80064ce:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80064d0:	4b0b      	ldr	r3, [pc, #44]	@ (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	3b01      	subs	r3, #1
 80064d6:	4a0a      	ldr	r2, [pc, #40]	@ (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064d8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80064da:	f000 ffe7 	bl	80074ac <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80064de:	6878      	ldr	r0, [r7, #4]
 80064e0:	f000 f810 	bl	8006504 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80064e4:	4b06      	ldr	r3, [pc, #24]	@ (8006500 <prvCheckTasksWaitingTermination+0x58>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	d1e1      	bne.n	80064b0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80064ec:	bf00      	nop
 80064ee:	bf00      	nop
 80064f0:	3708      	adds	r7, #8
 80064f2:	46bd      	mov	sp, r7
 80064f4:	bd80      	pop	{r7, pc}
 80064f6:	bf00      	nop
 80064f8:	20000e0c 	.word	0x20000e0c
 80064fc:	20000e38 	.word	0x20000e38
 8006500:	20000e20 	.word	0x20000e20

08006504 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006512:	2b00      	cmp	r3, #0
 8006514:	d108      	bne.n	8006528 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800651a:	4618      	mov	r0, r3
 800651c:	f001 f966 	bl	80077ec <vPortFree>
				vPortFree( pxTCB );
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f001 f963 	bl	80077ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006526:	e019      	b.n	800655c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800652e:	2b01      	cmp	r3, #1
 8006530:	d103      	bne.n	800653a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	f001 f95a 	bl	80077ec <vPortFree>
	}
 8006538:	e010      	b.n	800655c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8006540:	2b02      	cmp	r3, #2
 8006542:	d00b      	beq.n	800655c <prvDeleteTCB+0x58>
	__asm volatile
 8006544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006548:	f383 8811 	msr	BASEPRI, r3
 800654c:	f3bf 8f6f 	isb	sy
 8006550:	f3bf 8f4f 	dsb	sy
 8006554:	60fb      	str	r3, [r7, #12]
}
 8006556:	bf00      	nop
 8006558:	bf00      	nop
 800655a:	e7fd      	b.n	8006558 <prvDeleteTCB+0x54>
	}
 800655c:	bf00      	nop
 800655e:	3710      	adds	r7, #16
 8006560:	46bd      	mov	sp, r7
 8006562:	bd80      	pop	{r7, pc}

08006564 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006564:	b480      	push	{r7}
 8006566:	b083      	sub	sp, #12
 8006568:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <prvResetNextTaskUnblockTime+0x38>)
 800656c:	681b      	ldr	r3, [r3, #0]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d104      	bne.n	800657e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006574:	4b0a      	ldr	r3, [pc, #40]	@ (80065a0 <prvResetNextTaskUnblockTime+0x3c>)
 8006576:	f04f 32ff 	mov.w	r2, #4294967295
 800657a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800657c:	e008      	b.n	8006590 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800657e:	4b07      	ldr	r3, [pc, #28]	@ (800659c <prvResetNextTaskUnblockTime+0x38>)
 8006580:	681b      	ldr	r3, [r3, #0]
 8006582:	68db      	ldr	r3, [r3, #12]
 8006584:	68db      	ldr	r3, [r3, #12]
 8006586:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006588:	687b      	ldr	r3, [r7, #4]
 800658a:	685b      	ldr	r3, [r3, #4]
 800658c:	4a04      	ldr	r2, [pc, #16]	@ (80065a0 <prvResetNextTaskUnblockTime+0x3c>)
 800658e:	6013      	str	r3, [r2, #0]
}
 8006590:	bf00      	nop
 8006592:	370c      	adds	r7, #12
 8006594:	46bd      	mov	sp, r7
 8006596:	bc80      	pop	{r7}
 8006598:	4770      	bx	lr
 800659a:	bf00      	nop
 800659c:	20000df0 	.word	0x20000df0
 80065a0:	20000e58 	.word	0x20000e58

080065a4 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80065a4:	b480      	push	{r7}
 80065a6:	b083      	sub	sp, #12
 80065a8:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80065aa:	4b04      	ldr	r3, [pc, #16]	@ (80065bc <xTaskGetCurrentTaskHandle+0x18>)
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	607b      	str	r3, [r7, #4]

		return xReturn;
 80065b0:	687b      	ldr	r3, [r7, #4]
	}
 80065b2:	4618      	mov	r0, r3
 80065b4:	370c      	adds	r7, #12
 80065b6:	46bd      	mov	sp, r7
 80065b8:	bc80      	pop	{r7}
 80065ba:	4770      	bx	lr
 80065bc:	20000964 	.word	0x20000964

080065c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80065c0:	b480      	push	{r7}
 80065c2:	b083      	sub	sp, #12
 80065c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80065c6:	4b0b      	ldr	r3, [pc, #44]	@ (80065f4 <xTaskGetSchedulerState+0x34>)
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	2b00      	cmp	r3, #0
 80065cc:	d102      	bne.n	80065d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80065ce:	2301      	movs	r3, #1
 80065d0:	607b      	str	r3, [r7, #4]
 80065d2:	e008      	b.n	80065e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065d4:	4b08      	ldr	r3, [pc, #32]	@ (80065f8 <xTaskGetSchedulerState+0x38>)
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d102      	bne.n	80065e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80065dc:	2302      	movs	r3, #2
 80065de:	607b      	str	r3, [r7, #4]
 80065e0:	e001      	b.n	80065e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80065e2:	2300      	movs	r3, #0
 80065e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80065e6:	687b      	ldr	r3, [r7, #4]
	}
 80065e8:	4618      	mov	r0, r3
 80065ea:	370c      	adds	r7, #12
 80065ec:	46bd      	mov	sp, r7
 80065ee:	bc80      	pop	{r7}
 80065f0:	4770      	bx	lr
 80065f2:	bf00      	nop
 80065f4:	20000e44 	.word	0x20000e44
 80065f8:	20000e60 	.word	0x20000e60

080065fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b086      	sub	sp, #24
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006608:	2300      	movs	r3, #0
 800660a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d058      	beq.n	80066c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006612:	4b2f      	ldr	r3, [pc, #188]	@ (80066d0 <xTaskPriorityDisinherit+0xd4>)
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	693a      	ldr	r2, [r7, #16]
 8006618:	429a      	cmp	r2, r3
 800661a:	d00b      	beq.n	8006634 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800661c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006620:	f383 8811 	msr	BASEPRI, r3
 8006624:	f3bf 8f6f 	isb	sy
 8006628:	f3bf 8f4f 	dsb	sy
 800662c:	60fb      	str	r3, [r7, #12]
}
 800662e:	bf00      	nop
 8006630:	bf00      	nop
 8006632:	e7fd      	b.n	8006630 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006634:	693b      	ldr	r3, [r7, #16]
 8006636:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006638:	2b00      	cmp	r3, #0
 800663a:	d10b      	bne.n	8006654 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800663c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006640:	f383 8811 	msr	BASEPRI, r3
 8006644:	f3bf 8f6f 	isb	sy
 8006648:	f3bf 8f4f 	dsb	sy
 800664c:	60bb      	str	r3, [r7, #8]
}
 800664e:	bf00      	nop
 8006650:	bf00      	nop
 8006652:	e7fd      	b.n	8006650 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006658:	1e5a      	subs	r2, r3, #1
 800665a:	693b      	ldr	r3, [r7, #16]
 800665c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800665e:	693b      	ldr	r3, [r7, #16]
 8006660:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006666:	429a      	cmp	r2, r3
 8006668:	d02c      	beq.n	80066c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800666e:	2b00      	cmp	r3, #0
 8006670:	d128      	bne.n	80066c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	3304      	adds	r3, #4
 8006676:	4618      	mov	r0, r3
 8006678:	f7fe f930 	bl	80048dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006684:	693b      	ldr	r3, [r7, #16]
 8006686:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006688:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006690:	693b      	ldr	r3, [r7, #16]
 8006692:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006694:	4b0f      	ldr	r3, [pc, #60]	@ (80066d4 <xTaskPriorityDisinherit+0xd8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	429a      	cmp	r2, r3
 800669a:	d903      	bls.n	80066a4 <xTaskPriorityDisinherit+0xa8>
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066a0:	4a0c      	ldr	r2, [pc, #48]	@ (80066d4 <xTaskPriorityDisinherit+0xd8>)
 80066a2:	6013      	str	r3, [r2, #0]
 80066a4:	693b      	ldr	r3, [r7, #16]
 80066a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066a8:	4613      	mov	r3, r2
 80066aa:	009b      	lsls	r3, r3, #2
 80066ac:	4413      	add	r3, r2
 80066ae:	009b      	lsls	r3, r3, #2
 80066b0:	4a09      	ldr	r2, [pc, #36]	@ (80066d8 <xTaskPriorityDisinherit+0xdc>)
 80066b2:	441a      	add	r2, r3
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	3304      	adds	r3, #4
 80066b8:	4619      	mov	r1, r3
 80066ba:	4610      	mov	r0, r2
 80066bc:	f7fe f8b3 	bl	8004826 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80066c0:	2301      	movs	r3, #1
 80066c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80066c4:	697b      	ldr	r3, [r7, #20]
	}
 80066c6:	4618      	mov	r0, r3
 80066c8:	3718      	adds	r7, #24
 80066ca:	46bd      	mov	sp, r7
 80066cc:	bd80      	pop	{r7, pc}
 80066ce:	bf00      	nop
 80066d0:	20000964 	.word	0x20000964
 80066d4:	20000e40 	.word	0x20000e40
 80066d8:	20000968 	.word	0x20000968

080066dc <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b086      	sub	sp, #24
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	60f8      	str	r0, [r7, #12]
 80066e4:	60b9      	str	r1, [r7, #8]
 80066e6:	607a      	str	r2, [r7, #4]
 80066e8:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 80066ea:	f000 feaf 	bl	800744c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 80066ee:	4b26      	ldr	r3, [pc, #152]	@ (8006788 <xTaskNotifyWait+0xac>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b02      	cmp	r3, #2
 80066fa:	d01a      	beq.n	8006732 <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 80066fc:	4b22      	ldr	r3, [pc, #136]	@ (8006788 <xTaskNotifyWait+0xac>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006702:	68fa      	ldr	r2, [r7, #12]
 8006704:	43d2      	mvns	r2, r2
 8006706:	400a      	ands	r2, r1
 8006708:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 800670a:	4b1f      	ldr	r3, [pc, #124]	@ (8006788 <xTaskNotifyWait+0xac>)
 800670c:	681b      	ldr	r3, [r3, #0]
 800670e:	2201      	movs	r2, #1
 8006710:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006714:	683b      	ldr	r3, [r7, #0]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d00b      	beq.n	8006732 <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800671a:	2101      	movs	r1, #1
 800671c:	6838      	ldr	r0, [r7, #0]
 800671e:	f000 f9f7 	bl	8006b10 <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 8006722:	4b1a      	ldr	r3, [pc, #104]	@ (800678c <xTaskNotifyWait+0xb0>)
 8006724:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006728:	601a      	str	r2, [r3, #0]
 800672a:	f3bf 8f4f 	dsb	sy
 800672e:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006732:	f000 febb 	bl	80074ac <vPortExitCritical>

		taskENTER_CRITICAL();
 8006736:	f000 fe89 	bl	800744c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d004      	beq.n	800674a <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 8006740:	4b11      	ldr	r3, [pc, #68]	@ (8006788 <xTaskNotifyWait+0xac>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800674a:	4b0f      	ldr	r3, [pc, #60]	@ (8006788 <xTaskNotifyWait+0xac>)
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006752:	b2db      	uxtb	r3, r3
 8006754:	2b02      	cmp	r3, #2
 8006756:	d002      	beq.n	800675e <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 8006758:	2300      	movs	r3, #0
 800675a:	617b      	str	r3, [r7, #20]
 800675c:	e008      	b.n	8006770 <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 800675e:	4b0a      	ldr	r3, [pc, #40]	@ (8006788 <xTaskNotifyWait+0xac>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8006764:	68ba      	ldr	r2, [r7, #8]
 8006766:	43d2      	mvns	r2, r2
 8006768:	400a      	ands	r2, r1
 800676a:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 800676c:	2301      	movs	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006770:	4b05      	ldr	r3, [pc, #20]	@ (8006788 <xTaskNotifyWait+0xac>)
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	2200      	movs	r2, #0
 8006776:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 800677a:	f000 fe97 	bl	80074ac <vPortExitCritical>

		return xReturn;
 800677e:	697b      	ldr	r3, [r7, #20]
	}
 8006780:	4618      	mov	r0, r3
 8006782:	3718      	adds	r7, #24
 8006784:	46bd      	mov	sp, r7
 8006786:	bd80      	pop	{r7, pc}
 8006788:	20000964 	.word	0x20000964
 800678c:	e000ed04 	.word	0xe000ed04

08006790 <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 8006790:	b580      	push	{r7, lr}
 8006792:	b08a      	sub	sp, #40	@ 0x28
 8006794:	af00      	add	r7, sp, #0
 8006796:	60f8      	str	r0, [r7, #12]
 8006798:	60b9      	str	r1, [r7, #8]
 800679a:	603b      	str	r3, [r7, #0]
 800679c:	4613      	mov	r3, r2
 800679e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80067a0:	2301      	movs	r3, #1
 80067a2:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d10b      	bne.n	80067c2 <xTaskGenericNotify+0x32>
	__asm volatile
 80067aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067ae:	f383 8811 	msr	BASEPRI, r3
 80067b2:	f3bf 8f6f 	isb	sy
 80067b6:	f3bf 8f4f 	dsb	sy
 80067ba:	61bb      	str	r3, [r7, #24]
}
 80067bc:	bf00      	nop
 80067be:	bf00      	nop
 80067c0:	e7fd      	b.n	80067be <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 80067c6:	f000 fe41 	bl	800744c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 80067ca:	683b      	ldr	r3, [r7, #0]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80067d0:	6a3b      	ldr	r3, [r7, #32]
 80067d2:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80067d8:	6a3b      	ldr	r3, [r7, #32]
 80067da:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80067de:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80067e0:	6a3b      	ldr	r3, [r7, #32]
 80067e2:	2202      	movs	r2, #2
 80067e4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80067e8:	79fb      	ldrb	r3, [r7, #7]
 80067ea:	2b04      	cmp	r3, #4
 80067ec:	d827      	bhi.n	800683e <xTaskGenericNotify+0xae>
 80067ee:	a201      	add	r2, pc, #4	@ (adr r2, 80067f4 <xTaskGenericNotify+0x64>)
 80067f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f4:	08006861 	.word	0x08006861
 80067f8:	08006809 	.word	0x08006809
 80067fc:	08006817 	.word	0x08006817
 8006800:	08006823 	.word	0x08006823
 8006804:	0800682b 	.word	0x0800682b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006808:	6a3b      	ldr	r3, [r7, #32]
 800680a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800680c:	68bb      	ldr	r3, [r7, #8]
 800680e:	431a      	orrs	r2, r3
 8006810:	6a3b      	ldr	r3, [r7, #32]
 8006812:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006814:	e027      	b.n	8006866 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006816:	6a3b      	ldr	r3, [r7, #32]
 8006818:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800681a:	1c5a      	adds	r2, r3, #1
 800681c:	6a3b      	ldr	r3, [r7, #32]
 800681e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006820:	e021      	b.n	8006866 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006822:	6a3b      	ldr	r3, [r7, #32]
 8006824:	68ba      	ldr	r2, [r7, #8]
 8006826:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006828:	e01d      	b.n	8006866 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800682a:	7ffb      	ldrb	r3, [r7, #31]
 800682c:	2b02      	cmp	r3, #2
 800682e:	d003      	beq.n	8006838 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006830:	6a3b      	ldr	r3, [r7, #32]
 8006832:	68ba      	ldr	r2, [r7, #8]
 8006834:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006836:	e016      	b.n	8006866 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006838:	2300      	movs	r3, #0
 800683a:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 800683c:	e013      	b.n	8006866 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800683e:	6a3b      	ldr	r3, [r7, #32]
 8006840:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006842:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006846:	d00d      	beq.n	8006864 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006848:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800684c:	f383 8811 	msr	BASEPRI, r3
 8006850:	f3bf 8f6f 	isb	sy
 8006854:	f3bf 8f4f 	dsb	sy
 8006858:	617b      	str	r3, [r7, #20]
}
 800685a:	bf00      	nop
 800685c:	bf00      	nop
 800685e:	e7fd      	b.n	800685c <xTaskGenericNotify+0xcc>
					break;
 8006860:	bf00      	nop
 8006862:	e000      	b.n	8006866 <xTaskGenericNotify+0xd6>

					break;
 8006864:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006866:	7ffb      	ldrb	r3, [r7, #31]
 8006868:	2b01      	cmp	r3, #1
 800686a:	d13b      	bne.n	80068e4 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800686c:	6a3b      	ldr	r3, [r7, #32]
 800686e:	3304      	adds	r3, #4
 8006870:	4618      	mov	r0, r3
 8006872:	f7fe f833 	bl	80048dc <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 8006876:	6a3b      	ldr	r3, [r7, #32]
 8006878:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800687a:	4b1e      	ldr	r3, [pc, #120]	@ (80068f4 <xTaskGenericNotify+0x164>)
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	429a      	cmp	r2, r3
 8006880:	d903      	bls.n	800688a <xTaskGenericNotify+0xfa>
 8006882:	6a3b      	ldr	r3, [r7, #32]
 8006884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006886:	4a1b      	ldr	r2, [pc, #108]	@ (80068f4 <xTaskGenericNotify+0x164>)
 8006888:	6013      	str	r3, [r2, #0]
 800688a:	6a3b      	ldr	r3, [r7, #32]
 800688c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800688e:	4613      	mov	r3, r2
 8006890:	009b      	lsls	r3, r3, #2
 8006892:	4413      	add	r3, r2
 8006894:	009b      	lsls	r3, r3, #2
 8006896:	4a18      	ldr	r2, [pc, #96]	@ (80068f8 <xTaskGenericNotify+0x168>)
 8006898:	441a      	add	r2, r3
 800689a:	6a3b      	ldr	r3, [r7, #32]
 800689c:	3304      	adds	r3, #4
 800689e:	4619      	mov	r1, r3
 80068a0:	4610      	mov	r0, r2
 80068a2:	f7fd ffc0 	bl	8004826 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80068a6:	6a3b      	ldr	r3, [r7, #32]
 80068a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <xTaskGenericNotify+0x136>
	__asm volatile
 80068ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b2:	f383 8811 	msr	BASEPRI, r3
 80068b6:	f3bf 8f6f 	isb	sy
 80068ba:	f3bf 8f4f 	dsb	sy
 80068be:	613b      	str	r3, [r7, #16]
}
 80068c0:	bf00      	nop
 80068c2:	bf00      	nop
 80068c4:	e7fd      	b.n	80068c2 <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80068c6:	6a3b      	ldr	r3, [r7, #32]
 80068c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ca:	4b0c      	ldr	r3, [pc, #48]	@ (80068fc <xTaskGenericNotify+0x16c>)
 80068cc:	681b      	ldr	r3, [r3, #0]
 80068ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068d0:	429a      	cmp	r2, r3
 80068d2:	d907      	bls.n	80068e4 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 80068d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006900 <xTaskGenericNotify+0x170>)
 80068d6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80068da:	601a      	str	r2, [r3, #0]
 80068dc:	f3bf 8f4f 	dsb	sy
 80068e0:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80068e4:	f000 fde2 	bl	80074ac <vPortExitCritical>

		return xReturn;
 80068e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 80068ea:	4618      	mov	r0, r3
 80068ec:	3728      	adds	r7, #40	@ 0x28
 80068ee:	46bd      	mov	sp, r7
 80068f0:	bd80      	pop	{r7, pc}
 80068f2:	bf00      	nop
 80068f4:	20000e40 	.word	0x20000e40
 80068f8:	20000968 	.word	0x20000968
 80068fc:	20000964 	.word	0x20000964
 8006900:	e000ed04 	.word	0xe000ed04

08006904 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006904:	b580      	push	{r7, lr}
 8006906:	b08e      	sub	sp, #56	@ 0x38
 8006908:	af00      	add	r7, sp, #0
 800690a:	60f8      	str	r0, [r7, #12]
 800690c:	60b9      	str	r1, [r7, #8]
 800690e:	603b      	str	r3, [r7, #0]
 8006910:	4613      	mov	r3, r2
 8006912:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006914:	2301      	movs	r3, #1
 8006916:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006918:	68fb      	ldr	r3, [r7, #12]
 800691a:	2b00      	cmp	r3, #0
 800691c:	d10b      	bne.n	8006936 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800691e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006922:	f383 8811 	msr	BASEPRI, r3
 8006926:	f3bf 8f6f 	isb	sy
 800692a:	f3bf 8f4f 	dsb	sy
 800692e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006930:	bf00      	nop
 8006932:	bf00      	nop
 8006934:	e7fd      	b.n	8006932 <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006936:	f000 fe4b 	bl	80075d0 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 800693a:	68fb      	ldr	r3, [r7, #12]
 800693c:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800693e:	f3ef 8211 	mrs	r2, BASEPRI
 8006942:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006946:	f383 8811 	msr	BASEPRI, r3
 800694a:	f3bf 8f6f 	isb	sy
 800694e:	f3bf 8f4f 	dsb	sy
 8006952:	623a      	str	r2, [r7, #32]
 8006954:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 8006956:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006958:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 800695a:	683b      	ldr	r3, [r7, #0]
 800695c:	2b00      	cmp	r3, #0
 800695e:	d003      	beq.n	8006968 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 8006960:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006962:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006968:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800696a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800696e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 8006972:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006974:	2202      	movs	r2, #2
 8006976:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 800697a:	79fb      	ldrb	r3, [r7, #7]
 800697c:	2b04      	cmp	r3, #4
 800697e:	d829      	bhi.n	80069d4 <xTaskGenericNotifyFromISR+0xd0>
 8006980:	a201      	add	r2, pc, #4	@ (adr r2, 8006988 <xTaskGenericNotifyFromISR+0x84>)
 8006982:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006986:	bf00      	nop
 8006988:	080069f7 	.word	0x080069f7
 800698c:	0800699d 	.word	0x0800699d
 8006990:	080069ab 	.word	0x080069ab
 8006994:	080069b7 	.word	0x080069b7
 8006998:	080069bf 	.word	0x080069bf
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 800699c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800699e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	431a      	orrs	r2, r3
 80069a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069a6:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80069a8:	e028      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80069aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069ae:	1c5a      	adds	r2, r3, #1
 80069b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80069b4:	e022      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 80069b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069b8:	68ba      	ldr	r2, [r7, #8]
 80069ba:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80069bc:	e01e      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 80069be:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80069c2:	2b02      	cmp	r3, #2
 80069c4:	d003      	beq.n	80069ce <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 80069c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069c8:	68ba      	ldr	r2, [r7, #8]
 80069ca:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 80069cc:	e016      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 80069ce:	2300      	movs	r3, #0
 80069d0:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 80069d2:	e013      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 80069d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80069d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80069d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069dc:	d00d      	beq.n	80069fa <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 80069de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069e2:	f383 8811 	msr	BASEPRI, r3
 80069e6:	f3bf 8f6f 	isb	sy
 80069ea:	f3bf 8f4f 	dsb	sy
 80069ee:	61bb      	str	r3, [r7, #24]
}
 80069f0:	bf00      	nop
 80069f2:	bf00      	nop
 80069f4:	e7fd      	b.n	80069f2 <xTaskGenericNotifyFromISR+0xee>
					break;
 80069f6:	bf00      	nop
 80069f8:	e000      	b.n	80069fc <xTaskGenericNotifyFromISR+0xf8>
					break;
 80069fa:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80069fc:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a00:	2b01      	cmp	r3, #1
 8006a02:	d147      	bne.n	8006a94 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006a04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d00b      	beq.n	8006a24 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8006a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a10:	f383 8811 	msr	BASEPRI, r3
 8006a14:	f3bf 8f6f 	isb	sy
 8006a18:	f3bf 8f4f 	dsb	sy
 8006a1c:	617b      	str	r3, [r7, #20]
}
 8006a1e:	bf00      	nop
 8006a20:	bf00      	nop
 8006a22:	e7fd      	b.n	8006a20 <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a24:	4b21      	ldr	r3, [pc, #132]	@ (8006aac <xTaskGenericNotifyFromISR+0x1a8>)
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	2b00      	cmp	r3, #0
 8006a2a:	d11d      	bne.n	8006a68 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006a2c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a2e:	3304      	adds	r3, #4
 8006a30:	4618      	mov	r0, r3
 8006a32:	f7fd ff53 	bl	80048dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006a36:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a38:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8006ab0 <xTaskGenericNotifyFromISR+0x1ac>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	429a      	cmp	r2, r3
 8006a40:	d903      	bls.n	8006a4a <xTaskGenericNotifyFromISR+0x146>
 8006a42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a46:	4a1a      	ldr	r2, [pc, #104]	@ (8006ab0 <xTaskGenericNotifyFromISR+0x1ac>)
 8006a48:	6013      	str	r3, [r2, #0]
 8006a4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a4e:	4613      	mov	r3, r2
 8006a50:	009b      	lsls	r3, r3, #2
 8006a52:	4413      	add	r3, r2
 8006a54:	009b      	lsls	r3, r3, #2
 8006a56:	4a17      	ldr	r2, [pc, #92]	@ (8006ab4 <xTaskGenericNotifyFromISR+0x1b0>)
 8006a58:	441a      	add	r2, r3
 8006a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a5c:	3304      	adds	r3, #4
 8006a5e:	4619      	mov	r1, r3
 8006a60:	4610      	mov	r0, r2
 8006a62:	f7fd fee0 	bl	8004826 <vListInsertEnd>
 8006a66:	e005      	b.n	8006a74 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 8006a68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a6a:	3318      	adds	r3, #24
 8006a6c:	4619      	mov	r1, r3
 8006a6e:	4812      	ldr	r0, [pc, #72]	@ (8006ab8 <xTaskGenericNotifyFromISR+0x1b4>)
 8006a70:	f7fd fed9 	bl	8004826 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006a76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a78:	4b10      	ldr	r3, [pc, #64]	@ (8006abc <xTaskGenericNotifyFromISR+0x1b8>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a7e:	429a      	cmp	r2, r3
 8006a80:	d908      	bls.n	8006a94 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 8006a82:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	d002      	beq.n	8006a8e <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 8006a88:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 8006a8e:	4b0c      	ldr	r3, [pc, #48]	@ (8006ac0 <xTaskGenericNotifyFromISR+0x1bc>)
 8006a90:	2201      	movs	r2, #1
 8006a92:	601a      	str	r2, [r3, #0]
 8006a94:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006a96:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006a98:	693b      	ldr	r3, [r7, #16]
 8006a9a:	f383 8811 	msr	BASEPRI, r3
}
 8006a9e:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 8006aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	3738      	adds	r7, #56	@ 0x38
 8006aa6:	46bd      	mov	sp, r7
 8006aa8:	bd80      	pop	{r7, pc}
 8006aaa:	bf00      	nop
 8006aac:	20000e60 	.word	0x20000e60
 8006ab0:	20000e40 	.word	0x20000e40
 8006ab4:	20000968 	.word	0x20000968
 8006ab8:	20000df8 	.word	0x20000df8
 8006abc:	20000964 	.word	0x20000964
 8006ac0:	20000e4c 	.word	0x20000e4c

08006ac4 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8006ac4:	b580      	push	{r7, lr}
 8006ac6:	b084      	sub	sp, #16
 8006ac8:	af00      	add	r7, sp, #0
 8006aca:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d102      	bne.n	8006ad8 <xTaskNotifyStateClear+0x14>
 8006ad2:	4b0e      	ldr	r3, [pc, #56]	@ (8006b0c <xTaskNotifyStateClear+0x48>)
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	e000      	b.n	8006ada <xTaskNotifyStateClear+0x16>
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8006adc:	f000 fcb6 	bl	800744c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006ae6:	b2db      	uxtb	r3, r3
 8006ae8:	2b02      	cmp	r3, #2
 8006aea:	d106      	bne.n	8006afa <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006aec:	68bb      	ldr	r3, [r7, #8]
 8006aee:	2200      	movs	r2, #0
 8006af0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				xReturn = pdPASS;
 8006af4:	2301      	movs	r3, #1
 8006af6:	60fb      	str	r3, [r7, #12]
 8006af8:	e001      	b.n	8006afe <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8006afa:	2300      	movs	r3, #0
 8006afc:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 8006afe:	f000 fcd5 	bl	80074ac <vPortExitCritical>

		return xReturn;
 8006b02:	68fb      	ldr	r3, [r7, #12]
	}
 8006b04:	4618      	mov	r0, r3
 8006b06:	3710      	adds	r7, #16
 8006b08:	46bd      	mov	sp, r7
 8006b0a:	bd80      	pop	{r7, pc}
 8006b0c:	20000964 	.word	0x20000964

08006b10 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006b1a:	4b21      	ldr	r3, [pc, #132]	@ (8006ba0 <prvAddCurrentTaskToDelayedList+0x90>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006b20:	4b20      	ldr	r3, [pc, #128]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b22:	681b      	ldr	r3, [r3, #0]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4618      	mov	r0, r3
 8006b28:	f7fd fed8 	bl	80048dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006b32:	d10a      	bne.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
 8006b34:	683b      	ldr	r3, [r7, #0]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d007      	beq.n	8006b4a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b3a:	4b1a      	ldr	r3, [pc, #104]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	3304      	adds	r3, #4
 8006b40:	4619      	mov	r1, r3
 8006b42:	4819      	ldr	r0, [pc, #100]	@ (8006ba8 <prvAddCurrentTaskToDelayedList+0x98>)
 8006b44:	f7fd fe6f 	bl	8004826 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006b48:	e026      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006b4a:	68fa      	ldr	r2, [r7, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	4413      	add	r3, r2
 8006b50:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006b52:	4b14      	ldr	r3, [pc, #80]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68ba      	ldr	r2, [r7, #8]
 8006b58:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006b5a:	68ba      	ldr	r2, [r7, #8]
 8006b5c:	68fb      	ldr	r3, [r7, #12]
 8006b5e:	429a      	cmp	r2, r3
 8006b60:	d209      	bcs.n	8006b76 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b62:	4b12      	ldr	r3, [pc, #72]	@ (8006bac <prvAddCurrentTaskToDelayedList+0x9c>)
 8006b64:	681a      	ldr	r2, [r3, #0]
 8006b66:	4b0f      	ldr	r3, [pc, #60]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	4610      	mov	r0, r2
 8006b70:	f7fd fe7c 	bl	800486c <vListInsert>
}
 8006b74:	e010      	b.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006b76:	4b0e      	ldr	r3, [pc, #56]	@ (8006bb0 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006b78:	681a      	ldr	r2, [r3, #0]
 8006b7a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ba4 <prvAddCurrentTaskToDelayedList+0x94>)
 8006b7c:	681b      	ldr	r3, [r3, #0]
 8006b7e:	3304      	adds	r3, #4
 8006b80:	4619      	mov	r1, r3
 8006b82:	4610      	mov	r0, r2
 8006b84:	f7fd fe72 	bl	800486c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006b88:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b8a:	681b      	ldr	r3, [r3, #0]
 8006b8c:	68ba      	ldr	r2, [r7, #8]
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d202      	bcs.n	8006b98 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006b92:	4a08      	ldr	r2, [pc, #32]	@ (8006bb4 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6013      	str	r3, [r2, #0]
}
 8006b98:	bf00      	nop
 8006b9a:	3710      	adds	r7, #16
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	20000e3c 	.word	0x20000e3c
 8006ba4:	20000964 	.word	0x20000964
 8006ba8:	20000e24 	.word	0x20000e24
 8006bac:	20000df4 	.word	0x20000df4
 8006bb0:	20000df0 	.word	0x20000df0
 8006bb4:	20000e58 	.word	0x20000e58

08006bb8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b08a      	sub	sp, #40	@ 0x28
 8006bbc:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006bbe:	2300      	movs	r3, #0
 8006bc0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006bc2:	f000 fb11 	bl	80071e8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006bc6:	4b1d      	ldr	r3, [pc, #116]	@ (8006c3c <xTimerCreateTimerTask+0x84>)
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d021      	beq.n	8006c12 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006bce:	2300      	movs	r3, #0
 8006bd0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006bd6:	1d3a      	adds	r2, r7, #4
 8006bd8:	f107 0108 	add.w	r1, r7, #8
 8006bdc:	f107 030c 	add.w	r3, r7, #12
 8006be0:	4618      	mov	r0, r3
 8006be2:	f7fd fddb 	bl	800479c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006be6:	6879      	ldr	r1, [r7, #4]
 8006be8:	68bb      	ldr	r3, [r7, #8]
 8006bea:	68fa      	ldr	r2, [r7, #12]
 8006bec:	9202      	str	r2, [sp, #8]
 8006bee:	9301      	str	r3, [sp, #4]
 8006bf0:	2302      	movs	r3, #2
 8006bf2:	9300      	str	r3, [sp, #0]
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	460a      	mov	r2, r1
 8006bf8:	4911      	ldr	r1, [pc, #68]	@ (8006c40 <xTimerCreateTimerTask+0x88>)
 8006bfa:	4812      	ldr	r0, [pc, #72]	@ (8006c44 <xTimerCreateTimerTask+0x8c>)
 8006bfc:	f7fe fee0 	bl	80059c0 <xTaskCreateStatic>
 8006c00:	4603      	mov	r3, r0
 8006c02:	4a11      	ldr	r2, [pc, #68]	@ (8006c48 <xTimerCreateTimerTask+0x90>)
 8006c04:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006c06:	4b10      	ldr	r3, [pc, #64]	@ (8006c48 <xTimerCreateTimerTask+0x90>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d001      	beq.n	8006c12 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006c0e:	2301      	movs	r3, #1
 8006c10:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006c12:	697b      	ldr	r3, [r7, #20]
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d10b      	bne.n	8006c30 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006c18:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c1c:	f383 8811 	msr	BASEPRI, r3
 8006c20:	f3bf 8f6f 	isb	sy
 8006c24:	f3bf 8f4f 	dsb	sy
 8006c28:	613b      	str	r3, [r7, #16]
}
 8006c2a:	bf00      	nop
 8006c2c:	bf00      	nop
 8006c2e:	e7fd      	b.n	8006c2c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006c30:	697b      	ldr	r3, [r7, #20]
}
 8006c32:	4618      	mov	r0, r3
 8006c34:	3718      	adds	r7, #24
 8006c36:	46bd      	mov	sp, r7
 8006c38:	bd80      	pop	{r7, pc}
 8006c3a:	bf00      	nop
 8006c3c:	20000e94 	.word	0x20000e94
 8006c40:	0800b228 	.word	0x0800b228
 8006c44:	08006d85 	.word	0x08006d85
 8006c48:	20000e98 	.word	0x20000e98

08006c4c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006c4c:	b580      	push	{r7, lr}
 8006c4e:	b08a      	sub	sp, #40	@ 0x28
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	60f8      	str	r0, [r7, #12]
 8006c54:	60b9      	str	r1, [r7, #8]
 8006c56:	607a      	str	r2, [r7, #4]
 8006c58:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006c5e:	68fb      	ldr	r3, [r7, #12]
 8006c60:	2b00      	cmp	r3, #0
 8006c62:	d10b      	bne.n	8006c7c <xTimerGenericCommand+0x30>
	__asm volatile
 8006c64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c68:	f383 8811 	msr	BASEPRI, r3
 8006c6c:	f3bf 8f6f 	isb	sy
 8006c70:	f3bf 8f4f 	dsb	sy
 8006c74:	623b      	str	r3, [r7, #32]
}
 8006c76:	bf00      	nop
 8006c78:	bf00      	nop
 8006c7a:	e7fd      	b.n	8006c78 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006c7c:	4b19      	ldr	r3, [pc, #100]	@ (8006ce4 <xTimerGenericCommand+0x98>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	2b00      	cmp	r3, #0
 8006c82:	d02a      	beq.n	8006cda <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006c90:	68bb      	ldr	r3, [r7, #8]
 8006c92:	2b05      	cmp	r3, #5
 8006c94:	dc18      	bgt.n	8006cc8 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006c96:	f7ff fc93 	bl	80065c0 <xTaskGetSchedulerState>
 8006c9a:	4603      	mov	r3, r0
 8006c9c:	2b02      	cmp	r3, #2
 8006c9e:	d109      	bne.n	8006cb4 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006ca0:	4b10      	ldr	r3, [pc, #64]	@ (8006ce4 <xTimerGenericCommand+0x98>)
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	f107 0110 	add.w	r1, r7, #16
 8006ca8:	2300      	movs	r3, #0
 8006caa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006cac:	f7fd ff4a 	bl	8004b44 <xQueueGenericSend>
 8006cb0:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cb2:	e012      	b.n	8006cda <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006cb4:	4b0b      	ldr	r3, [pc, #44]	@ (8006ce4 <xTimerGenericCommand+0x98>)
 8006cb6:	6818      	ldr	r0, [r3, #0]
 8006cb8:	f107 0110 	add.w	r1, r7, #16
 8006cbc:	2300      	movs	r3, #0
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	f7fd ff40 	bl	8004b44 <xQueueGenericSend>
 8006cc4:	6278      	str	r0, [r7, #36]	@ 0x24
 8006cc6:	e008      	b.n	8006cda <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006cc8:	4b06      	ldr	r3, [pc, #24]	@ (8006ce4 <xTimerGenericCommand+0x98>)
 8006cca:	6818      	ldr	r0, [r3, #0]
 8006ccc:	f107 0110 	add.w	r1, r7, #16
 8006cd0:	2300      	movs	r3, #0
 8006cd2:	683a      	ldr	r2, [r7, #0]
 8006cd4:	f7fe f838 	bl	8004d48 <xQueueGenericSendFromISR>
 8006cd8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006cdc:	4618      	mov	r0, r3
 8006cde:	3728      	adds	r7, #40	@ 0x28
 8006ce0:	46bd      	mov	sp, r7
 8006ce2:	bd80      	pop	{r7, pc}
 8006ce4:	20000e94 	.word	0x20000e94

08006ce8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006ce8:	b580      	push	{r7, lr}
 8006cea:	b088      	sub	sp, #32
 8006cec:	af02      	add	r7, sp, #8
 8006cee:	6078      	str	r0, [r7, #4]
 8006cf0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cf2:	4b23      	ldr	r3, [pc, #140]	@ (8006d80 <prvProcessExpiredTimer+0x98>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	68db      	ldr	r3, [r3, #12]
 8006cf8:	68db      	ldr	r3, [r3, #12]
 8006cfa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006cfc:	697b      	ldr	r3, [r7, #20]
 8006cfe:	3304      	adds	r3, #4
 8006d00:	4618      	mov	r0, r3
 8006d02:	f7fd fdeb 	bl	80048dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d06:	697b      	ldr	r3, [r7, #20]
 8006d08:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d0c:	f003 0304 	and.w	r3, r3, #4
 8006d10:	2b00      	cmp	r3, #0
 8006d12:	d023      	beq.n	8006d5c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006d14:	697b      	ldr	r3, [r7, #20]
 8006d16:	699a      	ldr	r2, [r3, #24]
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	18d1      	adds	r1, r2, r3
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	683a      	ldr	r2, [r7, #0]
 8006d20:	6978      	ldr	r0, [r7, #20]
 8006d22:	f000 f8d3 	bl	8006ecc <prvInsertTimerInActiveList>
 8006d26:	4603      	mov	r3, r0
 8006d28:	2b00      	cmp	r3, #0
 8006d2a:	d020      	beq.n	8006d6e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	9300      	str	r3, [sp, #0]
 8006d30:	2300      	movs	r3, #0
 8006d32:	687a      	ldr	r2, [r7, #4]
 8006d34:	2100      	movs	r1, #0
 8006d36:	6978      	ldr	r0, [r7, #20]
 8006d38:	f7ff ff88 	bl	8006c4c <xTimerGenericCommand>
 8006d3c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006d3e:	693b      	ldr	r3, [r7, #16]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d114      	bne.n	8006d6e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006d44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d48:	f383 8811 	msr	BASEPRI, r3
 8006d4c:	f3bf 8f6f 	isb	sy
 8006d50:	f3bf 8f4f 	dsb	sy
 8006d54:	60fb      	str	r3, [r7, #12]
}
 8006d56:	bf00      	nop
 8006d58:	bf00      	nop
 8006d5a:	e7fd      	b.n	8006d58 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d5c:	697b      	ldr	r3, [r7, #20]
 8006d5e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d62:	f023 0301 	bic.w	r3, r3, #1
 8006d66:	b2da      	uxtb	r2, r3
 8006d68:	697b      	ldr	r3, [r7, #20]
 8006d6a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d6e:	697b      	ldr	r3, [r7, #20]
 8006d70:	6a1b      	ldr	r3, [r3, #32]
 8006d72:	6978      	ldr	r0, [r7, #20]
 8006d74:	4798      	blx	r3
}
 8006d76:	bf00      	nop
 8006d78:	3718      	adds	r7, #24
 8006d7a:	46bd      	mov	sp, r7
 8006d7c:	bd80      	pop	{r7, pc}
 8006d7e:	bf00      	nop
 8006d80:	20000e8c 	.word	0x20000e8c

08006d84 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006d84:	b580      	push	{r7, lr}
 8006d86:	b084      	sub	sp, #16
 8006d88:	af00      	add	r7, sp, #0
 8006d8a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006d8c:	f107 0308 	add.w	r3, r7, #8
 8006d90:	4618      	mov	r0, r3
 8006d92:	f000 f859 	bl	8006e48 <prvGetNextExpireTime>
 8006d96:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006d98:	68bb      	ldr	r3, [r7, #8]
 8006d9a:	4619      	mov	r1, r3
 8006d9c:	68f8      	ldr	r0, [r7, #12]
 8006d9e:	f000 f805 	bl	8006dac <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006da2:	f000 f8d5 	bl	8006f50 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006da6:	bf00      	nop
 8006da8:	e7f0      	b.n	8006d8c <prvTimerTask+0x8>
	...

08006dac <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006dac:	b580      	push	{r7, lr}
 8006dae:	b084      	sub	sp, #16
 8006db0:	af00      	add	r7, sp, #0
 8006db2:	6078      	str	r0, [r7, #4]
 8006db4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006db6:	f7ff f811 	bl	8005ddc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006dba:	f107 0308 	add.w	r3, r7, #8
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f000 f864 	bl	8006e8c <prvSampleTimeNow>
 8006dc4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006dc6:	68bb      	ldr	r3, [r7, #8]
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d130      	bne.n	8006e2e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006dcc:	683b      	ldr	r3, [r7, #0]
 8006dce:	2b00      	cmp	r3, #0
 8006dd0:	d10a      	bne.n	8006de8 <prvProcessTimerOrBlockTask+0x3c>
 8006dd2:	687a      	ldr	r2, [r7, #4]
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	429a      	cmp	r2, r3
 8006dd8:	d806      	bhi.n	8006de8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006dda:	f7ff f80d 	bl	8005df8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006dde:	68f9      	ldr	r1, [r7, #12]
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f7ff ff81 	bl	8006ce8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006de6:	e024      	b.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006de8:	683b      	ldr	r3, [r7, #0]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d008      	beq.n	8006e00 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006dee:	4b13      	ldr	r3, [pc, #76]	@ (8006e3c <prvProcessTimerOrBlockTask+0x90>)
 8006df0:	681b      	ldr	r3, [r3, #0]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d101      	bne.n	8006dfc <prvProcessTimerOrBlockTask+0x50>
 8006df8:	2301      	movs	r3, #1
 8006dfa:	e000      	b.n	8006dfe <prvProcessTimerOrBlockTask+0x52>
 8006dfc:	2300      	movs	r3, #0
 8006dfe:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006e00:	4b0f      	ldr	r3, [pc, #60]	@ (8006e40 <prvProcessTimerOrBlockTask+0x94>)
 8006e02:	6818      	ldr	r0, [r3, #0]
 8006e04:	687a      	ldr	r2, [r7, #4]
 8006e06:	68fb      	ldr	r3, [r7, #12]
 8006e08:	1ad3      	subs	r3, r2, r3
 8006e0a:	683a      	ldr	r2, [r7, #0]
 8006e0c:	4619      	mov	r1, r3
 8006e0e:	f7fe fa53 	bl	80052b8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006e12:	f7fe fff1 	bl	8005df8 <xTaskResumeAll>
 8006e16:	4603      	mov	r3, r0
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d10a      	bne.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006e1c:	4b09      	ldr	r3, [pc, #36]	@ (8006e44 <prvProcessTimerOrBlockTask+0x98>)
 8006e1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006e22:	601a      	str	r2, [r3, #0]
 8006e24:	f3bf 8f4f 	dsb	sy
 8006e28:	f3bf 8f6f 	isb	sy
}
 8006e2c:	e001      	b.n	8006e32 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006e2e:	f7fe ffe3 	bl	8005df8 <xTaskResumeAll>
}
 8006e32:	bf00      	nop
 8006e34:	3710      	adds	r7, #16
 8006e36:	46bd      	mov	sp, r7
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	20000e90 	.word	0x20000e90
 8006e40:	20000e94 	.word	0x20000e94
 8006e44:	e000ed04 	.word	0xe000ed04

08006e48 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006e48:	b480      	push	{r7}
 8006e4a:	b085      	sub	sp, #20
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006e50:	4b0d      	ldr	r3, [pc, #52]	@ (8006e88 <prvGetNextExpireTime+0x40>)
 8006e52:	681b      	ldr	r3, [r3, #0]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d101      	bne.n	8006e5e <prvGetNextExpireTime+0x16>
 8006e5a:	2201      	movs	r2, #1
 8006e5c:	e000      	b.n	8006e60 <prvGetNextExpireTime+0x18>
 8006e5e:	2200      	movs	r2, #0
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	2b00      	cmp	r3, #0
 8006e6a:	d105      	bne.n	8006e78 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006e6c:	4b06      	ldr	r3, [pc, #24]	@ (8006e88 <prvGetNextExpireTime+0x40>)
 8006e6e:	681b      	ldr	r3, [r3, #0]
 8006e70:	68db      	ldr	r3, [r3, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	60fb      	str	r3, [r7, #12]
 8006e76:	e001      	b.n	8006e7c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006e78:	2300      	movs	r3, #0
 8006e7a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006e7c:	68fb      	ldr	r3, [r7, #12]
}
 8006e7e:	4618      	mov	r0, r3
 8006e80:	3714      	adds	r7, #20
 8006e82:	46bd      	mov	sp, r7
 8006e84:	bc80      	pop	{r7}
 8006e86:	4770      	bx	lr
 8006e88:	20000e8c 	.word	0x20000e8c

08006e8c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006e8c:	b580      	push	{r7, lr}
 8006e8e:	b084      	sub	sp, #16
 8006e90:	af00      	add	r7, sp, #0
 8006e92:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006e94:	f7ff f84e 	bl	8005f34 <xTaskGetTickCount>
 8006e98:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006e9a:	4b0b      	ldr	r3, [pc, #44]	@ (8006ec8 <prvSampleTimeNow+0x3c>)
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	68fa      	ldr	r2, [r7, #12]
 8006ea0:	429a      	cmp	r2, r3
 8006ea2:	d205      	bcs.n	8006eb0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006ea4:	f000 f93a 	bl	800711c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2201      	movs	r2, #1
 8006eac:	601a      	str	r2, [r3, #0]
 8006eae:	e002      	b.n	8006eb6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	2200      	movs	r2, #0
 8006eb4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006eb6:	4a04      	ldr	r2, [pc, #16]	@ (8006ec8 <prvSampleTimeNow+0x3c>)
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
}
 8006ebe:	4618      	mov	r0, r3
 8006ec0:	3710      	adds	r7, #16
 8006ec2:	46bd      	mov	sp, r7
 8006ec4:	bd80      	pop	{r7, pc}
 8006ec6:	bf00      	nop
 8006ec8:	20000e9c 	.word	0x20000e9c

08006ecc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b086      	sub	sp, #24
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	60f8      	str	r0, [r7, #12]
 8006ed4:	60b9      	str	r1, [r7, #8]
 8006ed6:	607a      	str	r2, [r7, #4]
 8006ed8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006eda:	2300      	movs	r3, #0
 8006edc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	68ba      	ldr	r2, [r7, #8]
 8006ee2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	68fa      	ldr	r2, [r7, #12]
 8006ee8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006eea:	68ba      	ldr	r2, [r7, #8]
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	429a      	cmp	r2, r3
 8006ef0:	d812      	bhi.n	8006f18 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ef2:	687a      	ldr	r2, [r7, #4]
 8006ef4:	683b      	ldr	r3, [r7, #0]
 8006ef6:	1ad2      	subs	r2, r2, r3
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	699b      	ldr	r3, [r3, #24]
 8006efc:	429a      	cmp	r2, r3
 8006efe:	d302      	bcc.n	8006f06 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006f00:	2301      	movs	r3, #1
 8006f02:	617b      	str	r3, [r7, #20]
 8006f04:	e01b      	b.n	8006f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006f06:	4b10      	ldr	r3, [pc, #64]	@ (8006f48 <prvInsertTimerInActiveList+0x7c>)
 8006f08:	681a      	ldr	r2, [r3, #0]
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	3304      	adds	r3, #4
 8006f0e:	4619      	mov	r1, r3
 8006f10:	4610      	mov	r0, r2
 8006f12:	f7fd fcab 	bl	800486c <vListInsert>
 8006f16:	e012      	b.n	8006f3e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006f18:	687a      	ldr	r2, [r7, #4]
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	429a      	cmp	r2, r3
 8006f1e:	d206      	bcs.n	8006f2e <prvInsertTimerInActiveList+0x62>
 8006f20:	68ba      	ldr	r2, [r7, #8]
 8006f22:	683b      	ldr	r3, [r7, #0]
 8006f24:	429a      	cmp	r2, r3
 8006f26:	d302      	bcc.n	8006f2e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006f28:	2301      	movs	r3, #1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	e007      	b.n	8006f3e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006f2e:	4b07      	ldr	r3, [pc, #28]	@ (8006f4c <prvInsertTimerInActiveList+0x80>)
 8006f30:	681a      	ldr	r2, [r3, #0]
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	3304      	adds	r3, #4
 8006f36:	4619      	mov	r1, r3
 8006f38:	4610      	mov	r0, r2
 8006f3a:	f7fd fc97 	bl	800486c <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006f3e:	697b      	ldr	r3, [r7, #20]
}
 8006f40:	4618      	mov	r0, r3
 8006f42:	3718      	adds	r7, #24
 8006f44:	46bd      	mov	sp, r7
 8006f46:	bd80      	pop	{r7, pc}
 8006f48:	20000e90 	.word	0x20000e90
 8006f4c:	20000e8c 	.word	0x20000e8c

08006f50 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006f50:	b580      	push	{r7, lr}
 8006f52:	b08e      	sub	sp, #56	@ 0x38
 8006f54:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f56:	e0ce      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	da19      	bge.n	8006f92 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006f5e:	1d3b      	adds	r3, r7, #4
 8006f60:	3304      	adds	r3, #4
 8006f62:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006f64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d10b      	bne.n	8006f82 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006f6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f6e:	f383 8811 	msr	BASEPRI, r3
 8006f72:	f3bf 8f6f 	isb	sy
 8006f76:	f3bf 8f4f 	dsb	sy
 8006f7a:	61fb      	str	r3, [r7, #28]
}
 8006f7c:	bf00      	nop
 8006f7e:	bf00      	nop
 8006f80:	e7fd      	b.n	8006f7e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006f82:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006f84:	681b      	ldr	r3, [r3, #0]
 8006f86:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f88:	6850      	ldr	r0, [r2, #4]
 8006f8a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006f8c:	6892      	ldr	r2, [r2, #8]
 8006f8e:	4611      	mov	r1, r2
 8006f90:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	2b00      	cmp	r3, #0
 8006f96:	f2c0 80ae 	blt.w	80070f6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006f9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa0:	695b      	ldr	r3, [r3, #20]
 8006fa2:	2b00      	cmp	r3, #0
 8006fa4:	d004      	beq.n	8006fb0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4618      	mov	r0, r3
 8006fac:	f7fd fc96 	bl	80048dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006fb0:	463b      	mov	r3, r7
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	f7ff ff6a 	bl	8006e8c <prvSampleTimeNow>
 8006fb8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006fba:	687b      	ldr	r3, [r7, #4]
 8006fbc:	2b09      	cmp	r3, #9
 8006fbe:	f200 8097 	bhi.w	80070f0 <prvProcessReceivedCommands+0x1a0>
 8006fc2:	a201      	add	r2, pc, #4	@ (adr r2, 8006fc8 <prvProcessReceivedCommands+0x78>)
 8006fc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fc8:	08006ff1 	.word	0x08006ff1
 8006fcc:	08006ff1 	.word	0x08006ff1
 8006fd0:	08006ff1 	.word	0x08006ff1
 8006fd4:	08007067 	.word	0x08007067
 8006fd8:	0800707b 	.word	0x0800707b
 8006fdc:	080070c7 	.word	0x080070c7
 8006fe0:	08006ff1 	.word	0x08006ff1
 8006fe4:	08006ff1 	.word	0x08006ff1
 8006fe8:	08007067 	.word	0x08007067
 8006fec:	0800707b 	.word	0x0800707b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006ff0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ff2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ff6:	f043 0301 	orr.w	r3, r3, #1
 8006ffa:	b2da      	uxtb	r2, r3
 8006ffc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ffe:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007002:	68ba      	ldr	r2, [r7, #8]
 8007004:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007006:	699b      	ldr	r3, [r3, #24]
 8007008:	18d1      	adds	r1, r2, r3
 800700a:	68bb      	ldr	r3, [r7, #8]
 800700c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007010:	f7ff ff5c 	bl	8006ecc <prvInsertTimerInActiveList>
 8007014:	4603      	mov	r3, r0
 8007016:	2b00      	cmp	r3, #0
 8007018:	d06c      	beq.n	80070f4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800701a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800701c:	6a1b      	ldr	r3, [r3, #32]
 800701e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007020:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007022:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007024:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007028:	f003 0304 	and.w	r3, r3, #4
 800702c:	2b00      	cmp	r3, #0
 800702e:	d061      	beq.n	80070f4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007030:	68ba      	ldr	r2, [r7, #8]
 8007032:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007034:	699b      	ldr	r3, [r3, #24]
 8007036:	441a      	add	r2, r3
 8007038:	2300      	movs	r3, #0
 800703a:	9300      	str	r3, [sp, #0]
 800703c:	2300      	movs	r3, #0
 800703e:	2100      	movs	r1, #0
 8007040:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007042:	f7ff fe03 	bl	8006c4c <xTimerGenericCommand>
 8007046:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007048:	6a3b      	ldr	r3, [r7, #32]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d152      	bne.n	80070f4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800704e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007052:	f383 8811 	msr	BASEPRI, r3
 8007056:	f3bf 8f6f 	isb	sy
 800705a:	f3bf 8f4f 	dsb	sy
 800705e:	61bb      	str	r3, [r7, #24]
}
 8007060:	bf00      	nop
 8007062:	bf00      	nop
 8007064:	e7fd      	b.n	8007062 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007066:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007068:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800706c:	f023 0301 	bic.w	r3, r3, #1
 8007070:	b2da      	uxtb	r2, r3
 8007072:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007074:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007078:	e03d      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800707a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800707c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007080:	f043 0301 	orr.w	r3, r3, #1
 8007084:	b2da      	uxtb	r2, r3
 8007086:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007088:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800708c:	68ba      	ldr	r2, [r7, #8]
 800708e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007090:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007092:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007094:	699b      	ldr	r3, [r3, #24]
 8007096:	2b00      	cmp	r3, #0
 8007098:	d10b      	bne.n	80070b2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800709a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800709e:	f383 8811 	msr	BASEPRI, r3
 80070a2:	f3bf 8f6f 	isb	sy
 80070a6:	f3bf 8f4f 	dsb	sy
 80070aa:	617b      	str	r3, [r7, #20]
}
 80070ac:	bf00      	nop
 80070ae:	bf00      	nop
 80070b0:	e7fd      	b.n	80070ae <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80070b2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070b4:	699a      	ldr	r2, [r3, #24]
 80070b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070b8:	18d1      	adds	r1, r2, r3
 80070ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070bc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070be:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070c0:	f7ff ff04 	bl	8006ecc <prvInsertTimerInActiveList>
					break;
 80070c4:	e017      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80070c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070c8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070cc:	f003 0302 	and.w	r3, r3, #2
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d103      	bne.n	80070dc <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80070d4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80070d6:	f000 fb89 	bl	80077ec <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80070da:	e00c      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80070dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070de:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070e2:	f023 0301 	bic.w	r3, r3, #1
 80070e6:	b2da      	uxtb	r2, r3
 80070e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80070ea:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80070ee:	e002      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80070f0:	bf00      	nop
 80070f2:	e000      	b.n	80070f6 <prvProcessReceivedCommands+0x1a6>
					break;
 80070f4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80070f6:	4b08      	ldr	r3, [pc, #32]	@ (8007118 <prvProcessReceivedCommands+0x1c8>)
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	1d39      	adds	r1, r7, #4
 80070fc:	2200      	movs	r2, #0
 80070fe:	4618      	mov	r0, r3
 8007100:	f7fd fec0 	bl	8004e84 <xQueueReceive>
 8007104:	4603      	mov	r3, r0
 8007106:	2b00      	cmp	r3, #0
 8007108:	f47f af26 	bne.w	8006f58 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800710c:	bf00      	nop
 800710e:	bf00      	nop
 8007110:	3730      	adds	r7, #48	@ 0x30
 8007112:	46bd      	mov	sp, r7
 8007114:	bd80      	pop	{r7, pc}
 8007116:	bf00      	nop
 8007118:	20000e94 	.word	0x20000e94

0800711c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b088      	sub	sp, #32
 8007120:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007122:	e049      	b.n	80071b8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007124:	4b2e      	ldr	r3, [pc, #184]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	68db      	ldr	r3, [r3, #12]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800712e:	4b2c      	ldr	r3, [pc, #176]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	68db      	ldr	r3, [r3, #12]
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007138:	68fb      	ldr	r3, [r7, #12]
 800713a:	3304      	adds	r3, #4
 800713c:	4618      	mov	r0, r3
 800713e:	f7fd fbcd 	bl	80048dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007142:	68fb      	ldr	r3, [r7, #12]
 8007144:	6a1b      	ldr	r3, [r3, #32]
 8007146:	68f8      	ldr	r0, [r7, #12]
 8007148:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800714a:	68fb      	ldr	r3, [r7, #12]
 800714c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007150:	f003 0304 	and.w	r3, r3, #4
 8007154:	2b00      	cmp	r3, #0
 8007156:	d02f      	beq.n	80071b8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	699b      	ldr	r3, [r3, #24]
 800715c:	693a      	ldr	r2, [r7, #16]
 800715e:	4413      	add	r3, r2
 8007160:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007162:	68ba      	ldr	r2, [r7, #8]
 8007164:	693b      	ldr	r3, [r7, #16]
 8007166:	429a      	cmp	r2, r3
 8007168:	d90e      	bls.n	8007188 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	68ba      	ldr	r2, [r7, #8]
 800716e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007176:	4b1a      	ldr	r3, [pc, #104]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 8007178:	681a      	ldr	r2, [r3, #0]
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	3304      	adds	r3, #4
 800717e:	4619      	mov	r1, r3
 8007180:	4610      	mov	r0, r2
 8007182:	f7fd fb73 	bl	800486c <vListInsert>
 8007186:	e017      	b.n	80071b8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007188:	2300      	movs	r3, #0
 800718a:	9300      	str	r3, [sp, #0]
 800718c:	2300      	movs	r3, #0
 800718e:	693a      	ldr	r2, [r7, #16]
 8007190:	2100      	movs	r1, #0
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff fd5a 	bl	8006c4c <xTimerGenericCommand>
 8007198:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	2b00      	cmp	r3, #0
 800719e:	d10b      	bne.n	80071b8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80071a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a4:	f383 8811 	msr	BASEPRI, r3
 80071a8:	f3bf 8f6f 	isb	sy
 80071ac:	f3bf 8f4f 	dsb	sy
 80071b0:	603b      	str	r3, [r7, #0]
}
 80071b2:	bf00      	nop
 80071b4:	bf00      	nop
 80071b6:	e7fd      	b.n	80071b4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80071b8:	4b09      	ldr	r3, [pc, #36]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	2b00      	cmp	r3, #0
 80071c0:	d1b0      	bne.n	8007124 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80071c2:	4b07      	ldr	r3, [pc, #28]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 80071c4:	681b      	ldr	r3, [r3, #0]
 80071c6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80071c8:	4b06      	ldr	r3, [pc, #24]	@ (80071e4 <prvSwitchTimerLists+0xc8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	4a04      	ldr	r2, [pc, #16]	@ (80071e0 <prvSwitchTimerLists+0xc4>)
 80071ce:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80071d0:	4a04      	ldr	r2, [pc, #16]	@ (80071e4 <prvSwitchTimerLists+0xc8>)
 80071d2:	697b      	ldr	r3, [r7, #20]
 80071d4:	6013      	str	r3, [r2, #0]
}
 80071d6:	bf00      	nop
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000e8c 	.word	0x20000e8c
 80071e4:	20000e90 	.word	0x20000e90

080071e8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80071e8:	b580      	push	{r7, lr}
 80071ea:	b082      	sub	sp, #8
 80071ec:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80071ee:	f000 f92d 	bl	800744c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80071f2:	4b15      	ldr	r3, [pc, #84]	@ (8007248 <prvCheckForValidListAndQueue+0x60>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d120      	bne.n	800723c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80071fa:	4814      	ldr	r0, [pc, #80]	@ (800724c <prvCheckForValidListAndQueue+0x64>)
 80071fc:	f7fd fae8 	bl	80047d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007200:	4813      	ldr	r0, [pc, #76]	@ (8007250 <prvCheckForValidListAndQueue+0x68>)
 8007202:	f7fd fae5 	bl	80047d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007206:	4b13      	ldr	r3, [pc, #76]	@ (8007254 <prvCheckForValidListAndQueue+0x6c>)
 8007208:	4a10      	ldr	r2, [pc, #64]	@ (800724c <prvCheckForValidListAndQueue+0x64>)
 800720a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800720c:	4b12      	ldr	r3, [pc, #72]	@ (8007258 <prvCheckForValidListAndQueue+0x70>)
 800720e:	4a10      	ldr	r2, [pc, #64]	@ (8007250 <prvCheckForValidListAndQueue+0x68>)
 8007210:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007212:	2300      	movs	r3, #0
 8007214:	9300      	str	r3, [sp, #0]
 8007216:	4b11      	ldr	r3, [pc, #68]	@ (800725c <prvCheckForValidListAndQueue+0x74>)
 8007218:	4a11      	ldr	r2, [pc, #68]	@ (8007260 <prvCheckForValidListAndQueue+0x78>)
 800721a:	2110      	movs	r1, #16
 800721c:	200a      	movs	r0, #10
 800721e:	f7fd fbf1 	bl	8004a04 <xQueueGenericCreateStatic>
 8007222:	4603      	mov	r3, r0
 8007224:	4a08      	ldr	r2, [pc, #32]	@ (8007248 <prvCheckForValidListAndQueue+0x60>)
 8007226:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007228:	4b07      	ldr	r3, [pc, #28]	@ (8007248 <prvCheckForValidListAndQueue+0x60>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	2b00      	cmp	r3, #0
 800722e:	d005      	beq.n	800723c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007230:	4b05      	ldr	r3, [pc, #20]	@ (8007248 <prvCheckForValidListAndQueue+0x60>)
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	490b      	ldr	r1, [pc, #44]	@ (8007264 <prvCheckForValidListAndQueue+0x7c>)
 8007236:	4618      	mov	r0, r3
 8007238:	f7fe f816 	bl	8005268 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800723c:	f000 f936 	bl	80074ac <vPortExitCritical>
}
 8007240:	bf00      	nop
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
 8007246:	bf00      	nop
 8007248:	20000e94 	.word	0x20000e94
 800724c:	20000e64 	.word	0x20000e64
 8007250:	20000e78 	.word	0x20000e78
 8007254:	20000e8c 	.word	0x20000e8c
 8007258:	20000e90 	.word	0x20000e90
 800725c:	20000f40 	.word	0x20000f40
 8007260:	20000ea0 	.word	0x20000ea0
 8007264:	0800b230 	.word	0x0800b230

08007268 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007268:	b480      	push	{r7}
 800726a:	b085      	sub	sp, #20
 800726c:	af00      	add	r7, sp, #0
 800726e:	60f8      	str	r0, [r7, #12]
 8007270:	60b9      	str	r1, [r7, #8]
 8007272:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8007274:	68fb      	ldr	r3, [r7, #12]
 8007276:	3b04      	subs	r3, #4
 8007278:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800727a:	68fb      	ldr	r3, [r7, #12]
 800727c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007280:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007282:	68fb      	ldr	r3, [r7, #12]
 8007284:	3b04      	subs	r3, #4
 8007286:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007288:	68bb      	ldr	r3, [r7, #8]
 800728a:	f023 0201 	bic.w	r2, r3, #1
 800728e:	68fb      	ldr	r3, [r7, #12]
 8007290:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	3b04      	subs	r3, #4
 8007296:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007298:	4a08      	ldr	r2, [pc, #32]	@ (80072bc <pxPortInitialiseStack+0x54>)
 800729a:	68fb      	ldr	r3, [r7, #12]
 800729c:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800729e:	68fb      	ldr	r3, [r7, #12]
 80072a0:	3b14      	subs	r3, #20
 80072a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80072a4:	687a      	ldr	r2, [r7, #4]
 80072a6:	68fb      	ldr	r3, [r7, #12]
 80072a8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3b20      	subs	r3, #32
 80072ae:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80072b0:	68fb      	ldr	r3, [r7, #12]
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3714      	adds	r7, #20
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bc80      	pop	{r7}
 80072ba:	4770      	bx	lr
 80072bc:	080072c1 	.word	0x080072c1

080072c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80072c0:	b480      	push	{r7}
 80072c2:	b085      	sub	sp, #20
 80072c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80072ca:	4b12      	ldr	r3, [pc, #72]	@ (8007314 <prvTaskExitError+0x54>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80072d2:	d00b      	beq.n	80072ec <prvTaskExitError+0x2c>
	__asm volatile
 80072d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d8:	f383 8811 	msr	BASEPRI, r3
 80072dc:	f3bf 8f6f 	isb	sy
 80072e0:	f3bf 8f4f 	dsb	sy
 80072e4:	60fb      	str	r3, [r7, #12]
}
 80072e6:	bf00      	nop
 80072e8:	bf00      	nop
 80072ea:	e7fd      	b.n	80072e8 <prvTaskExitError+0x28>
	__asm volatile
 80072ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072f0:	f383 8811 	msr	BASEPRI, r3
 80072f4:	f3bf 8f6f 	isb	sy
 80072f8:	f3bf 8f4f 	dsb	sy
 80072fc:	60bb      	str	r3, [r7, #8]
}
 80072fe:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007300:	bf00      	nop
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	2b00      	cmp	r3, #0
 8007306:	d0fc      	beq.n	8007302 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	3714      	adds	r7, #20
 800730e:	46bd      	mov	sp, r7
 8007310:	bc80      	pop	{r7}
 8007312:	4770      	bx	lr
 8007314:	2000000c 	.word	0x2000000c
	...

08007320 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007320:	4b07      	ldr	r3, [pc, #28]	@ (8007340 <pxCurrentTCBConst2>)
 8007322:	6819      	ldr	r1, [r3, #0]
 8007324:	6808      	ldr	r0, [r1, #0]
 8007326:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 800732a:	f380 8809 	msr	PSP, r0
 800732e:	f3bf 8f6f 	isb	sy
 8007332:	f04f 0000 	mov.w	r0, #0
 8007336:	f380 8811 	msr	BASEPRI, r0
 800733a:	f04e 0e0d 	orr.w	lr, lr, #13
 800733e:	4770      	bx	lr

08007340 <pxCurrentTCBConst2>:
 8007340:	20000964 	.word	0x20000964
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007344:	bf00      	nop
 8007346:	bf00      	nop

08007348 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8007348:	4806      	ldr	r0, [pc, #24]	@ (8007364 <prvPortStartFirstTask+0x1c>)
 800734a:	6800      	ldr	r0, [r0, #0]
 800734c:	6800      	ldr	r0, [r0, #0]
 800734e:	f380 8808 	msr	MSP, r0
 8007352:	b662      	cpsie	i
 8007354:	b661      	cpsie	f
 8007356:	f3bf 8f4f 	dsb	sy
 800735a:	f3bf 8f6f 	isb	sy
 800735e:	df00      	svc	0
 8007360:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007362:	bf00      	nop
 8007364:	e000ed08 	.word	0xe000ed08

08007368 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b084      	sub	sp, #16
 800736c:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800736e:	4b32      	ldr	r3, [pc, #200]	@ (8007438 <xPortStartScheduler+0xd0>)
 8007370:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	781b      	ldrb	r3, [r3, #0]
 8007376:	b2db      	uxtb	r3, r3
 8007378:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	22ff      	movs	r2, #255	@ 0xff
 800737e:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007380:	68fb      	ldr	r3, [r7, #12]
 8007382:	781b      	ldrb	r3, [r3, #0]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007388:	78fb      	ldrb	r3, [r7, #3]
 800738a:	b2db      	uxtb	r3, r3
 800738c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007390:	b2da      	uxtb	r2, r3
 8007392:	4b2a      	ldr	r3, [pc, #168]	@ (800743c <xPortStartScheduler+0xd4>)
 8007394:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007396:	4b2a      	ldr	r3, [pc, #168]	@ (8007440 <xPortStartScheduler+0xd8>)
 8007398:	2207      	movs	r2, #7
 800739a:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800739c:	e009      	b.n	80073b2 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 800739e:	4b28      	ldr	r3, [pc, #160]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	3b01      	subs	r3, #1
 80073a4:	4a26      	ldr	r2, [pc, #152]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073a6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80073a8:	78fb      	ldrb	r3, [r7, #3]
 80073aa:	b2db      	uxtb	r3, r3
 80073ac:	005b      	lsls	r3, r3, #1
 80073ae:	b2db      	uxtb	r3, r3
 80073b0:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80073b2:	78fb      	ldrb	r3, [r7, #3]
 80073b4:	b2db      	uxtb	r3, r3
 80073b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80073ba:	2b80      	cmp	r3, #128	@ 0x80
 80073bc:	d0ef      	beq.n	800739e <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80073be:	4b20      	ldr	r3, [pc, #128]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	f1c3 0307 	rsb	r3, r3, #7
 80073c6:	2b04      	cmp	r3, #4
 80073c8:	d00b      	beq.n	80073e2 <xPortStartScheduler+0x7a>
	__asm volatile
 80073ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073ce:	f383 8811 	msr	BASEPRI, r3
 80073d2:	f3bf 8f6f 	isb	sy
 80073d6:	f3bf 8f4f 	dsb	sy
 80073da:	60bb      	str	r3, [r7, #8]
}
 80073dc:	bf00      	nop
 80073de:	bf00      	nop
 80073e0:	e7fd      	b.n	80073de <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80073e2:	4b17      	ldr	r3, [pc, #92]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	021b      	lsls	r3, r3, #8
 80073e8:	4a15      	ldr	r2, [pc, #84]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073ea:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80073ec:	4b14      	ldr	r3, [pc, #80]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073f4:	4a12      	ldr	r2, [pc, #72]	@ (8007440 <xPortStartScheduler+0xd8>)
 80073f6:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	b2da      	uxtb	r2, r3
 80073fc:	68fb      	ldr	r3, [r7, #12]
 80073fe:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007400:	4b10      	ldr	r3, [pc, #64]	@ (8007444 <xPortStartScheduler+0xdc>)
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	4a0f      	ldr	r2, [pc, #60]	@ (8007444 <xPortStartScheduler+0xdc>)
 8007406:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800740a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800740c:	4b0d      	ldr	r3, [pc, #52]	@ (8007444 <xPortStartScheduler+0xdc>)
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	4a0c      	ldr	r2, [pc, #48]	@ (8007444 <xPortStartScheduler+0xdc>)
 8007412:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007416:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007418:	f000 f8b8 	bl	800758c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800741c:	4b0a      	ldr	r3, [pc, #40]	@ (8007448 <xPortStartScheduler+0xe0>)
 800741e:	2200      	movs	r2, #0
 8007420:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007422:	f7ff ff91 	bl	8007348 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007426:	f7fe fe4d 	bl	80060c4 <vTaskSwitchContext>
	prvTaskExitError();
 800742a:	f7ff ff49 	bl	80072c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800742e:	2300      	movs	r3, #0
}
 8007430:	4618      	mov	r0, r3
 8007432:	3710      	adds	r7, #16
 8007434:	46bd      	mov	sp, r7
 8007436:	bd80      	pop	{r7, pc}
 8007438:	e000e400 	.word	0xe000e400
 800743c:	20000f90 	.word	0x20000f90
 8007440:	20000f94 	.word	0x20000f94
 8007444:	e000ed20 	.word	0xe000ed20
 8007448:	2000000c 	.word	0x2000000c

0800744c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800744c:	b480      	push	{r7}
 800744e:	b083      	sub	sp, #12
 8007450:	af00      	add	r7, sp, #0
	__asm volatile
 8007452:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007456:	f383 8811 	msr	BASEPRI, r3
 800745a:	f3bf 8f6f 	isb	sy
 800745e:	f3bf 8f4f 	dsb	sy
 8007462:	607b      	str	r3, [r7, #4]
}
 8007464:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007466:	4b0f      	ldr	r3, [pc, #60]	@ (80074a4 <vPortEnterCritical+0x58>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	3301      	adds	r3, #1
 800746c:	4a0d      	ldr	r2, [pc, #52]	@ (80074a4 <vPortEnterCritical+0x58>)
 800746e:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007470:	4b0c      	ldr	r3, [pc, #48]	@ (80074a4 <vPortEnterCritical+0x58>)
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	2b01      	cmp	r3, #1
 8007476:	d110      	bne.n	800749a <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007478:	4b0b      	ldr	r3, [pc, #44]	@ (80074a8 <vPortEnterCritical+0x5c>)
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	b2db      	uxtb	r3, r3
 800747e:	2b00      	cmp	r3, #0
 8007480:	d00b      	beq.n	800749a <vPortEnterCritical+0x4e>
	__asm volatile
 8007482:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007486:	f383 8811 	msr	BASEPRI, r3
 800748a:	f3bf 8f6f 	isb	sy
 800748e:	f3bf 8f4f 	dsb	sy
 8007492:	603b      	str	r3, [r7, #0]
}
 8007494:	bf00      	nop
 8007496:	bf00      	nop
 8007498:	e7fd      	b.n	8007496 <vPortEnterCritical+0x4a>
	}
}
 800749a:	bf00      	nop
 800749c:	370c      	adds	r7, #12
 800749e:	46bd      	mov	sp, r7
 80074a0:	bc80      	pop	{r7}
 80074a2:	4770      	bx	lr
 80074a4:	2000000c 	.word	0x2000000c
 80074a8:	e000ed04 	.word	0xe000ed04

080074ac <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80074ac:	b480      	push	{r7}
 80074ae:	b083      	sub	sp, #12
 80074b0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80074b2:	4b12      	ldr	r3, [pc, #72]	@ (80074fc <vPortExitCritical+0x50>)
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d10b      	bne.n	80074d2 <vPortExitCritical+0x26>
	__asm volatile
 80074ba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074be:	f383 8811 	msr	BASEPRI, r3
 80074c2:	f3bf 8f6f 	isb	sy
 80074c6:	f3bf 8f4f 	dsb	sy
 80074ca:	607b      	str	r3, [r7, #4]
}
 80074cc:	bf00      	nop
 80074ce:	bf00      	nop
 80074d0:	e7fd      	b.n	80074ce <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074d2:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <vPortExitCritical+0x50>)
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	3b01      	subs	r3, #1
 80074d8:	4a08      	ldr	r2, [pc, #32]	@ (80074fc <vPortExitCritical+0x50>)
 80074da:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074dc:	4b07      	ldr	r3, [pc, #28]	@ (80074fc <vPortExitCritical+0x50>)
 80074de:	681b      	ldr	r3, [r3, #0]
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d105      	bne.n	80074f0 <vPortExitCritical+0x44>
 80074e4:	2300      	movs	r3, #0
 80074e6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074e8:	683b      	ldr	r3, [r7, #0]
 80074ea:	f383 8811 	msr	BASEPRI, r3
}
 80074ee:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074f0:	bf00      	nop
 80074f2:	370c      	adds	r7, #12
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bc80      	pop	{r7}
 80074f8:	4770      	bx	lr
 80074fa:	bf00      	nop
 80074fc:	2000000c 	.word	0x2000000c

08007500 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007500:	f3ef 8009 	mrs	r0, PSP
 8007504:	f3bf 8f6f 	isb	sy
 8007508:	4b0d      	ldr	r3, [pc, #52]	@ (8007540 <pxCurrentTCBConst>)
 800750a:	681a      	ldr	r2, [r3, #0]
 800750c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007510:	6010      	str	r0, [r2, #0]
 8007512:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007516:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800751a:	f380 8811 	msr	BASEPRI, r0
 800751e:	f7fe fdd1 	bl	80060c4 <vTaskSwitchContext>
 8007522:	f04f 0000 	mov.w	r0, #0
 8007526:	f380 8811 	msr	BASEPRI, r0
 800752a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800752e:	6819      	ldr	r1, [r3, #0]
 8007530:	6808      	ldr	r0, [r1, #0]
 8007532:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007536:	f380 8809 	msr	PSP, r0
 800753a:	f3bf 8f6f 	isb	sy
 800753e:	4770      	bx	lr

08007540 <pxCurrentTCBConst>:
 8007540:	20000964 	.word	0x20000964
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007544:	bf00      	nop
 8007546:	bf00      	nop

08007548 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007548:	b580      	push	{r7, lr}
 800754a:	b082      	sub	sp, #8
 800754c:	af00      	add	r7, sp, #0
	__asm volatile
 800754e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007552:	f383 8811 	msr	BASEPRI, r3
 8007556:	f3bf 8f6f 	isb	sy
 800755a:	f3bf 8f4f 	dsb	sy
 800755e:	607b      	str	r3, [r7, #4]
}
 8007560:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007562:	f7fe fcf5 	bl	8005f50 <xTaskIncrementTick>
 8007566:	4603      	mov	r3, r0
 8007568:	2b00      	cmp	r3, #0
 800756a:	d003      	beq.n	8007574 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800756c:	4b06      	ldr	r3, [pc, #24]	@ (8007588 <xPortSysTickHandler+0x40>)
 800756e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007572:	601a      	str	r2, [r3, #0]
 8007574:	2300      	movs	r3, #0
 8007576:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	f383 8811 	msr	BASEPRI, r3
}
 800757e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007580:	bf00      	nop
 8007582:	3708      	adds	r7, #8
 8007584:	46bd      	mov	sp, r7
 8007586:	bd80      	pop	{r7, pc}
 8007588:	e000ed04 	.word	0xe000ed04

0800758c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800758c:	b480      	push	{r7}
 800758e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007590:	4b0a      	ldr	r3, [pc, #40]	@ (80075bc <vPortSetupTimerInterrupt+0x30>)
 8007592:	2200      	movs	r2, #0
 8007594:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007596:	4b0a      	ldr	r3, [pc, #40]	@ (80075c0 <vPortSetupTimerInterrupt+0x34>)
 8007598:	2200      	movs	r2, #0
 800759a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800759c:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <vPortSetupTimerInterrupt+0x38>)
 800759e:	681b      	ldr	r3, [r3, #0]
 80075a0:	4a09      	ldr	r2, [pc, #36]	@ (80075c8 <vPortSetupTimerInterrupt+0x3c>)
 80075a2:	fba2 2303 	umull	r2, r3, r2, r3
 80075a6:	099b      	lsrs	r3, r3, #6
 80075a8:	4a08      	ldr	r2, [pc, #32]	@ (80075cc <vPortSetupTimerInterrupt+0x40>)
 80075aa:	3b01      	subs	r3, #1
 80075ac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80075ae:	4b03      	ldr	r3, [pc, #12]	@ (80075bc <vPortSetupTimerInterrupt+0x30>)
 80075b0:	2207      	movs	r2, #7
 80075b2:	601a      	str	r2, [r3, #0]
}
 80075b4:	bf00      	nop
 80075b6:	46bd      	mov	sp, r7
 80075b8:	bc80      	pop	{r7}
 80075ba:	4770      	bx	lr
 80075bc:	e000e010 	.word	0xe000e010
 80075c0:	e000e018 	.word	0xe000e018
 80075c4:	20000000 	.word	0x20000000
 80075c8:	10624dd3 	.word	0x10624dd3
 80075cc:	e000e014 	.word	0xe000e014

080075d0 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075d0:	b480      	push	{r7}
 80075d2:	b085      	sub	sp, #20
 80075d4:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075d6:	f3ef 8305 	mrs	r3, IPSR
 80075da:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	2b0f      	cmp	r3, #15
 80075e0:	d915      	bls.n	800760e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075e2:	4a17      	ldr	r2, [pc, #92]	@ (8007640 <vPortValidateInterruptPriority+0x70>)
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	4413      	add	r3, r2
 80075e8:	781b      	ldrb	r3, [r3, #0]
 80075ea:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075ec:	4b15      	ldr	r3, [pc, #84]	@ (8007644 <vPortValidateInterruptPriority+0x74>)
 80075ee:	781b      	ldrb	r3, [r3, #0]
 80075f0:	7afa      	ldrb	r2, [r7, #11]
 80075f2:	429a      	cmp	r2, r3
 80075f4:	d20b      	bcs.n	800760e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075fa:	f383 8811 	msr	BASEPRI, r3
 80075fe:	f3bf 8f6f 	isb	sy
 8007602:	f3bf 8f4f 	dsb	sy
 8007606:	607b      	str	r3, [r7, #4]
}
 8007608:	bf00      	nop
 800760a:	bf00      	nop
 800760c:	e7fd      	b.n	800760a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800760e:	4b0e      	ldr	r3, [pc, #56]	@ (8007648 <vPortValidateInterruptPriority+0x78>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007616:	4b0d      	ldr	r3, [pc, #52]	@ (800764c <vPortValidateInterruptPriority+0x7c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d90b      	bls.n	8007636 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800761e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007622:	f383 8811 	msr	BASEPRI, r3
 8007626:	f3bf 8f6f 	isb	sy
 800762a:	f3bf 8f4f 	dsb	sy
 800762e:	603b      	str	r3, [r7, #0]
}
 8007630:	bf00      	nop
 8007632:	bf00      	nop
 8007634:	e7fd      	b.n	8007632 <vPortValidateInterruptPriority+0x62>
	}
 8007636:	bf00      	nop
 8007638:	3714      	adds	r7, #20
 800763a:	46bd      	mov	sp, r7
 800763c:	bc80      	pop	{r7}
 800763e:	4770      	bx	lr
 8007640:	e000e3f0 	.word	0xe000e3f0
 8007644:	20000f90 	.word	0x20000f90
 8007648:	e000ed0c 	.word	0xe000ed0c
 800764c:	20000f94 	.word	0x20000f94

08007650 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08a      	sub	sp, #40	@ 0x28
 8007654:	af00      	add	r7, sp, #0
 8007656:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007658:	2300      	movs	r3, #0
 800765a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800765c:	f7fe fbbe 	bl	8005ddc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007660:	4b5c      	ldr	r3, [pc, #368]	@ (80077d4 <pvPortMalloc+0x184>)
 8007662:	681b      	ldr	r3, [r3, #0]
 8007664:	2b00      	cmp	r3, #0
 8007666:	d101      	bne.n	800766c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007668:	f000 f924 	bl	80078b4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800766c:	4b5a      	ldr	r3, [pc, #360]	@ (80077d8 <pvPortMalloc+0x188>)
 800766e:	681a      	ldr	r2, [r3, #0]
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	4013      	ands	r3, r2
 8007674:	2b00      	cmp	r3, #0
 8007676:	f040 8095 	bne.w	80077a4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	2b00      	cmp	r3, #0
 800767e:	d01e      	beq.n	80076be <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007680:	2208      	movs	r2, #8
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	4413      	add	r3, r2
 8007686:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f003 0307 	and.w	r3, r3, #7
 800768e:	2b00      	cmp	r3, #0
 8007690:	d015      	beq.n	80076be <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	f023 0307 	bic.w	r3, r3, #7
 8007698:	3308      	adds	r3, #8
 800769a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f003 0307 	and.w	r3, r3, #7
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d00b      	beq.n	80076be <pvPortMalloc+0x6e>
	__asm volatile
 80076a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076aa:	f383 8811 	msr	BASEPRI, r3
 80076ae:	f3bf 8f6f 	isb	sy
 80076b2:	f3bf 8f4f 	dsb	sy
 80076b6:	617b      	str	r3, [r7, #20]
}
 80076b8:	bf00      	nop
 80076ba:	bf00      	nop
 80076bc:	e7fd      	b.n	80076ba <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076be:	687b      	ldr	r3, [r7, #4]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d06f      	beq.n	80077a4 <pvPortMalloc+0x154>
 80076c4:	4b45      	ldr	r3, [pc, #276]	@ (80077dc <pvPortMalloc+0x18c>)
 80076c6:	681b      	ldr	r3, [r3, #0]
 80076c8:	687a      	ldr	r2, [r7, #4]
 80076ca:	429a      	cmp	r2, r3
 80076cc:	d86a      	bhi.n	80077a4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076ce:	4b44      	ldr	r3, [pc, #272]	@ (80077e0 <pvPortMalloc+0x190>)
 80076d0:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076d2:	4b43      	ldr	r3, [pc, #268]	@ (80077e0 <pvPortMalloc+0x190>)
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076d8:	e004      	b.n	80076e4 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076dc:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	687a      	ldr	r2, [r7, #4]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d903      	bls.n	80076f6 <pvPortMalloc+0xa6>
 80076ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d1f1      	bne.n	80076da <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80076f6:	4b37      	ldr	r3, [pc, #220]	@ (80077d4 <pvPortMalloc+0x184>)
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076fc:	429a      	cmp	r2, r3
 80076fe:	d051      	beq.n	80077a4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007700:	6a3b      	ldr	r3, [r7, #32]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	2208      	movs	r2, #8
 8007706:	4413      	add	r3, r2
 8007708:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800770a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800770c:	681a      	ldr	r2, [r3, #0]
 800770e:	6a3b      	ldr	r3, [r7, #32]
 8007710:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007714:	685a      	ldr	r2, [r3, #4]
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	1ad2      	subs	r2, r2, r3
 800771a:	2308      	movs	r3, #8
 800771c:	005b      	lsls	r3, r3, #1
 800771e:	429a      	cmp	r2, r3
 8007720:	d920      	bls.n	8007764 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007722:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	4413      	add	r3, r2
 8007728:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800772a:	69bb      	ldr	r3, [r7, #24]
 800772c:	f003 0307 	and.w	r3, r3, #7
 8007730:	2b00      	cmp	r3, #0
 8007732:	d00b      	beq.n	800774c <pvPortMalloc+0xfc>
	__asm volatile
 8007734:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007738:	f383 8811 	msr	BASEPRI, r3
 800773c:	f3bf 8f6f 	isb	sy
 8007740:	f3bf 8f4f 	dsb	sy
 8007744:	613b      	str	r3, [r7, #16]
}
 8007746:	bf00      	nop
 8007748:	bf00      	nop
 800774a:	e7fd      	b.n	8007748 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800774c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800774e:	685a      	ldr	r2, [r3, #4]
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	1ad2      	subs	r2, r2, r3
 8007754:	69bb      	ldr	r3, [r7, #24]
 8007756:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	687a      	ldr	r2, [r7, #4]
 800775c:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800775e:	69b8      	ldr	r0, [r7, #24]
 8007760:	f000 f90a 	bl	8007978 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007764:	4b1d      	ldr	r3, [pc, #116]	@ (80077dc <pvPortMalloc+0x18c>)
 8007766:	681a      	ldr	r2, [r3, #0]
 8007768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800776a:	685b      	ldr	r3, [r3, #4]
 800776c:	1ad3      	subs	r3, r2, r3
 800776e:	4a1b      	ldr	r2, [pc, #108]	@ (80077dc <pvPortMalloc+0x18c>)
 8007770:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007772:	4b1a      	ldr	r3, [pc, #104]	@ (80077dc <pvPortMalloc+0x18c>)
 8007774:	681a      	ldr	r2, [r3, #0]
 8007776:	4b1b      	ldr	r3, [pc, #108]	@ (80077e4 <pvPortMalloc+0x194>)
 8007778:	681b      	ldr	r3, [r3, #0]
 800777a:	429a      	cmp	r2, r3
 800777c:	d203      	bcs.n	8007786 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800777e:	4b17      	ldr	r3, [pc, #92]	@ (80077dc <pvPortMalloc+0x18c>)
 8007780:	681b      	ldr	r3, [r3, #0]
 8007782:	4a18      	ldr	r2, [pc, #96]	@ (80077e4 <pvPortMalloc+0x194>)
 8007784:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	685a      	ldr	r2, [r3, #4]
 800778a:	4b13      	ldr	r3, [pc, #76]	@ (80077d8 <pvPortMalloc+0x188>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	431a      	orrs	r2, r3
 8007790:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007792:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007794:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007796:	2200      	movs	r2, #0
 8007798:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800779a:	4b13      	ldr	r3, [pc, #76]	@ (80077e8 <pvPortMalloc+0x198>)
 800779c:	681b      	ldr	r3, [r3, #0]
 800779e:	3301      	adds	r3, #1
 80077a0:	4a11      	ldr	r2, [pc, #68]	@ (80077e8 <pvPortMalloc+0x198>)
 80077a2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077a4:	f7fe fb28 	bl	8005df8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077a8:	69fb      	ldr	r3, [r7, #28]
 80077aa:	f003 0307 	and.w	r3, r3, #7
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d00b      	beq.n	80077ca <pvPortMalloc+0x17a>
	__asm volatile
 80077b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077b6:	f383 8811 	msr	BASEPRI, r3
 80077ba:	f3bf 8f6f 	isb	sy
 80077be:	f3bf 8f4f 	dsb	sy
 80077c2:	60fb      	str	r3, [r7, #12]
}
 80077c4:	bf00      	nop
 80077c6:	bf00      	nop
 80077c8:	e7fd      	b.n	80077c6 <pvPortMalloc+0x176>
	return pvReturn;
 80077ca:	69fb      	ldr	r3, [r7, #28]
}
 80077cc:	4618      	mov	r0, r3
 80077ce:	3728      	adds	r7, #40	@ 0x28
 80077d0:	46bd      	mov	sp, r7
 80077d2:	bd80      	pop	{r7, pc}
 80077d4:	20001ba0 	.word	0x20001ba0
 80077d8:	20001bb4 	.word	0x20001bb4
 80077dc:	20001ba4 	.word	0x20001ba4
 80077e0:	20001b98 	.word	0x20001b98
 80077e4:	20001ba8 	.word	0x20001ba8
 80077e8:	20001bac 	.word	0x20001bac

080077ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b086      	sub	sp, #24
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d04f      	beq.n	800789e <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80077fe:	2308      	movs	r3, #8
 8007800:	425b      	negs	r3, r3
 8007802:	697a      	ldr	r2, [r7, #20]
 8007804:	4413      	add	r3, r2
 8007806:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007808:	697b      	ldr	r3, [r7, #20]
 800780a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800780c:	693b      	ldr	r3, [r7, #16]
 800780e:	685a      	ldr	r2, [r3, #4]
 8007810:	4b25      	ldr	r3, [pc, #148]	@ (80078a8 <vPortFree+0xbc>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4013      	ands	r3, r2
 8007816:	2b00      	cmp	r3, #0
 8007818:	d10b      	bne.n	8007832 <vPortFree+0x46>
	__asm volatile
 800781a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800781e:	f383 8811 	msr	BASEPRI, r3
 8007822:	f3bf 8f6f 	isb	sy
 8007826:	f3bf 8f4f 	dsb	sy
 800782a:	60fb      	str	r3, [r7, #12]
}
 800782c:	bf00      	nop
 800782e:	bf00      	nop
 8007830:	e7fd      	b.n	800782e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007832:	693b      	ldr	r3, [r7, #16]
 8007834:	681b      	ldr	r3, [r3, #0]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d00b      	beq.n	8007852 <vPortFree+0x66>
	__asm volatile
 800783a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800783e:	f383 8811 	msr	BASEPRI, r3
 8007842:	f3bf 8f6f 	isb	sy
 8007846:	f3bf 8f4f 	dsb	sy
 800784a:	60bb      	str	r3, [r7, #8]
}
 800784c:	bf00      	nop
 800784e:	bf00      	nop
 8007850:	e7fd      	b.n	800784e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007852:	693b      	ldr	r3, [r7, #16]
 8007854:	685a      	ldr	r2, [r3, #4]
 8007856:	4b14      	ldr	r3, [pc, #80]	@ (80078a8 <vPortFree+0xbc>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	4013      	ands	r3, r2
 800785c:	2b00      	cmp	r3, #0
 800785e:	d01e      	beq.n	800789e <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007860:	693b      	ldr	r3, [r7, #16]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	2b00      	cmp	r3, #0
 8007866:	d11a      	bne.n	800789e <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007868:	693b      	ldr	r3, [r7, #16]
 800786a:	685a      	ldr	r2, [r3, #4]
 800786c:	4b0e      	ldr	r3, [pc, #56]	@ (80078a8 <vPortFree+0xbc>)
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	43db      	mvns	r3, r3
 8007872:	401a      	ands	r2, r3
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007878:	f7fe fab0 	bl	8005ddc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800787c:	693b      	ldr	r3, [r7, #16]
 800787e:	685a      	ldr	r2, [r3, #4]
 8007880:	4b0a      	ldr	r3, [pc, #40]	@ (80078ac <vPortFree+0xc0>)
 8007882:	681b      	ldr	r3, [r3, #0]
 8007884:	4413      	add	r3, r2
 8007886:	4a09      	ldr	r2, [pc, #36]	@ (80078ac <vPortFree+0xc0>)
 8007888:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800788a:	6938      	ldr	r0, [r7, #16]
 800788c:	f000 f874 	bl	8007978 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007890:	4b07      	ldr	r3, [pc, #28]	@ (80078b0 <vPortFree+0xc4>)
 8007892:	681b      	ldr	r3, [r3, #0]
 8007894:	3301      	adds	r3, #1
 8007896:	4a06      	ldr	r2, [pc, #24]	@ (80078b0 <vPortFree+0xc4>)
 8007898:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800789a:	f7fe faad 	bl	8005df8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800789e:	bf00      	nop
 80078a0:	3718      	adds	r7, #24
 80078a2:	46bd      	mov	sp, r7
 80078a4:	bd80      	pop	{r7, pc}
 80078a6:	bf00      	nop
 80078a8:	20001bb4 	.word	0x20001bb4
 80078ac:	20001ba4 	.word	0x20001ba4
 80078b0:	20001bb0 	.word	0x20001bb0

080078b4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078b4:	b480      	push	{r7}
 80078b6:	b085      	sub	sp, #20
 80078b8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078ba:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80078be:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078c0:	4b27      	ldr	r3, [pc, #156]	@ (8007960 <prvHeapInit+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	f003 0307 	and.w	r3, r3, #7
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	d00c      	beq.n	80078e8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	3307      	adds	r3, #7
 80078d2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078d4:	68fb      	ldr	r3, [r7, #12]
 80078d6:	f023 0307 	bic.w	r3, r3, #7
 80078da:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078dc:	68ba      	ldr	r2, [r7, #8]
 80078de:	68fb      	ldr	r3, [r7, #12]
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	4a1f      	ldr	r2, [pc, #124]	@ (8007960 <prvHeapInit+0xac>)
 80078e4:	4413      	add	r3, r2
 80078e6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078ec:	4a1d      	ldr	r2, [pc, #116]	@ (8007964 <prvHeapInit+0xb0>)
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078f2:	4b1c      	ldr	r3, [pc, #112]	@ (8007964 <prvHeapInit+0xb0>)
 80078f4:	2200      	movs	r2, #0
 80078f6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	68ba      	ldr	r2, [r7, #8]
 80078fc:	4413      	add	r3, r2
 80078fe:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007900:	2208      	movs	r2, #8
 8007902:	68fb      	ldr	r3, [r7, #12]
 8007904:	1a9b      	subs	r3, r3, r2
 8007906:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	f023 0307 	bic.w	r3, r3, #7
 800790e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007910:	68fb      	ldr	r3, [r7, #12]
 8007912:	4a15      	ldr	r2, [pc, #84]	@ (8007968 <prvHeapInit+0xb4>)
 8007914:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007916:	4b14      	ldr	r3, [pc, #80]	@ (8007968 <prvHeapInit+0xb4>)
 8007918:	681b      	ldr	r3, [r3, #0]
 800791a:	2200      	movs	r2, #0
 800791c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800791e:	4b12      	ldr	r3, [pc, #72]	@ (8007968 <prvHeapInit+0xb4>)
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	2200      	movs	r2, #0
 8007924:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800792a:	683b      	ldr	r3, [r7, #0]
 800792c:	68fa      	ldr	r2, [r7, #12]
 800792e:	1ad2      	subs	r2, r2, r3
 8007930:	683b      	ldr	r3, [r7, #0]
 8007932:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007934:	4b0c      	ldr	r3, [pc, #48]	@ (8007968 <prvHeapInit+0xb4>)
 8007936:	681a      	ldr	r2, [r3, #0]
 8007938:	683b      	ldr	r3, [r7, #0]
 800793a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	685b      	ldr	r3, [r3, #4]
 8007940:	4a0a      	ldr	r2, [pc, #40]	@ (800796c <prvHeapInit+0xb8>)
 8007942:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	4a09      	ldr	r2, [pc, #36]	@ (8007970 <prvHeapInit+0xbc>)
 800794a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800794c:	4b09      	ldr	r3, [pc, #36]	@ (8007974 <prvHeapInit+0xc0>)
 800794e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007952:	601a      	str	r2, [r3, #0]
}
 8007954:	bf00      	nop
 8007956:	3714      	adds	r7, #20
 8007958:	46bd      	mov	sp, r7
 800795a:	bc80      	pop	{r7}
 800795c:	4770      	bx	lr
 800795e:	bf00      	nop
 8007960:	20000f98 	.word	0x20000f98
 8007964:	20001b98 	.word	0x20001b98
 8007968:	20001ba0 	.word	0x20001ba0
 800796c:	20001ba8 	.word	0x20001ba8
 8007970:	20001ba4 	.word	0x20001ba4
 8007974:	20001bb4 	.word	0x20001bb4

08007978 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007978:	b480      	push	{r7}
 800797a:	b085      	sub	sp, #20
 800797c:	af00      	add	r7, sp, #0
 800797e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007980:	4b27      	ldr	r3, [pc, #156]	@ (8007a20 <prvInsertBlockIntoFreeList+0xa8>)
 8007982:	60fb      	str	r3, [r7, #12]
 8007984:	e002      	b.n	800798c <prvInsertBlockIntoFreeList+0x14>
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	60fb      	str	r3, [r7, #12]
 800798c:	68fb      	ldr	r3, [r7, #12]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	687a      	ldr	r2, [r7, #4]
 8007992:	429a      	cmp	r2, r3
 8007994:	d8f7      	bhi.n	8007986 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	685b      	ldr	r3, [r3, #4]
 800799e:	68ba      	ldr	r2, [r7, #8]
 80079a0:	4413      	add	r3, r2
 80079a2:	687a      	ldr	r2, [r7, #4]
 80079a4:	429a      	cmp	r2, r3
 80079a6:	d108      	bne.n	80079ba <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	685a      	ldr	r2, [r3, #4]
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	441a      	add	r2, r3
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	685b      	ldr	r3, [r3, #4]
 80079c2:	68ba      	ldr	r2, [r7, #8]
 80079c4:	441a      	add	r2, r3
 80079c6:	68fb      	ldr	r3, [r7, #12]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	429a      	cmp	r2, r3
 80079cc:	d118      	bne.n	8007a00 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681a      	ldr	r2, [r3, #0]
 80079d2:	4b14      	ldr	r3, [pc, #80]	@ (8007a24 <prvInsertBlockIntoFreeList+0xac>)
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d00d      	beq.n	80079f6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	685a      	ldr	r2, [r3, #4]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	685b      	ldr	r3, [r3, #4]
 80079e4:	441a      	add	r2, r3
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	681a      	ldr	r2, [r3, #0]
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	601a      	str	r2, [r3, #0]
 80079f4:	e008      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80079f6:	4b0b      	ldr	r3, [pc, #44]	@ (8007a24 <prvInsertBlockIntoFreeList+0xac>)
 80079f8:	681a      	ldr	r2, [r3, #0]
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	601a      	str	r2, [r3, #0]
 80079fe:	e003      	b.n	8007a08 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	681a      	ldr	r2, [r3, #0]
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	429a      	cmp	r2, r3
 8007a0e:	d002      	beq.n	8007a16 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	687a      	ldr	r2, [r7, #4]
 8007a14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a16:	bf00      	nop
 8007a18:	3714      	adds	r7, #20
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bc80      	pop	{r7}
 8007a1e:	4770      	bx	lr
 8007a20:	20001b98 	.word	0x20001b98
 8007a24:	20001ba0 	.word	0x20001ba0

08007a28 <__cvt>:
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007a2e:	461d      	mov	r5, r3
 8007a30:	bfbb      	ittet	lt
 8007a32:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007a36:	461d      	movlt	r5, r3
 8007a38:	2300      	movge	r3, #0
 8007a3a:	232d      	movlt	r3, #45	@ 0x2d
 8007a3c:	b088      	sub	sp, #32
 8007a3e:	4614      	mov	r4, r2
 8007a40:	bfb8      	it	lt
 8007a42:	4614      	movlt	r4, r2
 8007a44:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007a46:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007a48:	7013      	strb	r3, [r2, #0]
 8007a4a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a4c:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 8007a50:	f023 0820 	bic.w	r8, r3, #32
 8007a54:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007a58:	d005      	beq.n	8007a66 <__cvt+0x3e>
 8007a5a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8007a5e:	d100      	bne.n	8007a62 <__cvt+0x3a>
 8007a60:	3601      	adds	r6, #1
 8007a62:	2302      	movs	r3, #2
 8007a64:	e000      	b.n	8007a68 <__cvt+0x40>
 8007a66:	2303      	movs	r3, #3
 8007a68:	aa07      	add	r2, sp, #28
 8007a6a:	9204      	str	r2, [sp, #16]
 8007a6c:	aa06      	add	r2, sp, #24
 8007a6e:	e9cd a202 	strd	sl, r2, [sp, #8]
 8007a72:	e9cd 3600 	strd	r3, r6, [sp]
 8007a76:	4622      	mov	r2, r4
 8007a78:	462b      	mov	r3, r5
 8007a7a:	f000 fedd 	bl	8008838 <_dtoa_r>
 8007a7e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8007a82:	4607      	mov	r7, r0
 8007a84:	d119      	bne.n	8007aba <__cvt+0x92>
 8007a86:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007a88:	07db      	lsls	r3, r3, #31
 8007a8a:	d50e      	bpl.n	8007aaa <__cvt+0x82>
 8007a8c:	eb00 0906 	add.w	r9, r0, r6
 8007a90:	2200      	movs	r2, #0
 8007a92:	2300      	movs	r3, #0
 8007a94:	4620      	mov	r0, r4
 8007a96:	4629      	mov	r1, r5
 8007a98:	f7f8 ff90 	bl	80009bc <__aeabi_dcmpeq>
 8007a9c:	b108      	cbz	r0, 8007aa2 <__cvt+0x7a>
 8007a9e:	f8cd 901c 	str.w	r9, [sp, #28]
 8007aa2:	2230      	movs	r2, #48	@ 0x30
 8007aa4:	9b07      	ldr	r3, [sp, #28]
 8007aa6:	454b      	cmp	r3, r9
 8007aa8:	d31e      	bcc.n	8007ae8 <__cvt+0xc0>
 8007aaa:	4638      	mov	r0, r7
 8007aac:	9b07      	ldr	r3, [sp, #28]
 8007aae:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8007ab0:	1bdb      	subs	r3, r3, r7
 8007ab2:	6013      	str	r3, [r2, #0]
 8007ab4:	b008      	add	sp, #32
 8007ab6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007aba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007abe:	eb00 0906 	add.w	r9, r0, r6
 8007ac2:	d1e5      	bne.n	8007a90 <__cvt+0x68>
 8007ac4:	7803      	ldrb	r3, [r0, #0]
 8007ac6:	2b30      	cmp	r3, #48	@ 0x30
 8007ac8:	d10a      	bne.n	8007ae0 <__cvt+0xb8>
 8007aca:	2200      	movs	r2, #0
 8007acc:	2300      	movs	r3, #0
 8007ace:	4620      	mov	r0, r4
 8007ad0:	4629      	mov	r1, r5
 8007ad2:	f7f8 ff73 	bl	80009bc <__aeabi_dcmpeq>
 8007ad6:	b918      	cbnz	r0, 8007ae0 <__cvt+0xb8>
 8007ad8:	f1c6 0601 	rsb	r6, r6, #1
 8007adc:	f8ca 6000 	str.w	r6, [sl]
 8007ae0:	f8da 3000 	ldr.w	r3, [sl]
 8007ae4:	4499      	add	r9, r3
 8007ae6:	e7d3      	b.n	8007a90 <__cvt+0x68>
 8007ae8:	1c59      	adds	r1, r3, #1
 8007aea:	9107      	str	r1, [sp, #28]
 8007aec:	701a      	strb	r2, [r3, #0]
 8007aee:	e7d9      	b.n	8007aa4 <__cvt+0x7c>

08007af0 <__exponent>:
 8007af0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007af2:	2900      	cmp	r1, #0
 8007af4:	bfb6      	itet	lt
 8007af6:	232d      	movlt	r3, #45	@ 0x2d
 8007af8:	232b      	movge	r3, #43	@ 0x2b
 8007afa:	4249      	neglt	r1, r1
 8007afc:	2909      	cmp	r1, #9
 8007afe:	7002      	strb	r2, [r0, #0]
 8007b00:	7043      	strb	r3, [r0, #1]
 8007b02:	dd29      	ble.n	8007b58 <__exponent+0x68>
 8007b04:	f10d 0307 	add.w	r3, sp, #7
 8007b08:	461d      	mov	r5, r3
 8007b0a:	270a      	movs	r7, #10
 8007b0c:	fbb1 f6f7 	udiv	r6, r1, r7
 8007b10:	461a      	mov	r2, r3
 8007b12:	fb07 1416 	mls	r4, r7, r6, r1
 8007b16:	3430      	adds	r4, #48	@ 0x30
 8007b18:	f802 4c01 	strb.w	r4, [r2, #-1]
 8007b1c:	460c      	mov	r4, r1
 8007b1e:	2c63      	cmp	r4, #99	@ 0x63
 8007b20:	4631      	mov	r1, r6
 8007b22:	f103 33ff 	add.w	r3, r3, #4294967295
 8007b26:	dcf1      	bgt.n	8007b0c <__exponent+0x1c>
 8007b28:	3130      	adds	r1, #48	@ 0x30
 8007b2a:	1e94      	subs	r4, r2, #2
 8007b2c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007b30:	4623      	mov	r3, r4
 8007b32:	1c41      	adds	r1, r0, #1
 8007b34:	42ab      	cmp	r3, r5
 8007b36:	d30a      	bcc.n	8007b4e <__exponent+0x5e>
 8007b38:	f10d 0309 	add.w	r3, sp, #9
 8007b3c:	1a9b      	subs	r3, r3, r2
 8007b3e:	42ac      	cmp	r4, r5
 8007b40:	bf88      	it	hi
 8007b42:	2300      	movhi	r3, #0
 8007b44:	3302      	adds	r3, #2
 8007b46:	4403      	add	r3, r0
 8007b48:	1a18      	subs	r0, r3, r0
 8007b4a:	b003      	add	sp, #12
 8007b4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007b4e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007b52:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007b56:	e7ed      	b.n	8007b34 <__exponent+0x44>
 8007b58:	2330      	movs	r3, #48	@ 0x30
 8007b5a:	3130      	adds	r1, #48	@ 0x30
 8007b5c:	7083      	strb	r3, [r0, #2]
 8007b5e:	70c1      	strb	r1, [r0, #3]
 8007b60:	1d03      	adds	r3, r0, #4
 8007b62:	e7f1      	b.n	8007b48 <__exponent+0x58>

08007b64 <_printf_float>:
 8007b64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b68:	b091      	sub	sp, #68	@ 0x44
 8007b6a:	460c      	mov	r4, r1
 8007b6c:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 8007b70:	4616      	mov	r6, r2
 8007b72:	461f      	mov	r7, r3
 8007b74:	4605      	mov	r5, r0
 8007b76:	f000 fd43 	bl	8008600 <_localeconv_r>
 8007b7a:	6803      	ldr	r3, [r0, #0]
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	9308      	str	r3, [sp, #32]
 8007b80:	f7f8 faf0 	bl	8000164 <strlen>
 8007b84:	2300      	movs	r3, #0
 8007b86:	930e      	str	r3, [sp, #56]	@ 0x38
 8007b88:	f8d8 3000 	ldr.w	r3, [r8]
 8007b8c:	9009      	str	r0, [sp, #36]	@ 0x24
 8007b8e:	3307      	adds	r3, #7
 8007b90:	f023 0307 	bic.w	r3, r3, #7
 8007b94:	f103 0208 	add.w	r2, r3, #8
 8007b98:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007b9c:	f8d4 b000 	ldr.w	fp, [r4]
 8007ba0:	f8c8 2000 	str.w	r2, [r8]
 8007ba4:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007ba8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007bac:	930b      	str	r3, [sp, #44]	@ 0x2c
 8007bae:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 8007bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8007bb6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bba:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8007bbe:	4b9c      	ldr	r3, [pc, #624]	@ (8007e30 <_printf_float+0x2cc>)
 8007bc0:	f7f8 ff2e 	bl	8000a20 <__aeabi_dcmpun>
 8007bc4:	bb70      	cbnz	r0, 8007c24 <_printf_float+0xc0>
 8007bc6:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bca:	f04f 32ff 	mov.w	r2, #4294967295
 8007bce:	4b98      	ldr	r3, [pc, #608]	@ (8007e30 <_printf_float+0x2cc>)
 8007bd0:	f7f8 ff08 	bl	80009e4 <__aeabi_dcmple>
 8007bd4:	bb30      	cbnz	r0, 8007c24 <_printf_float+0xc0>
 8007bd6:	2200      	movs	r2, #0
 8007bd8:	2300      	movs	r3, #0
 8007bda:	4640      	mov	r0, r8
 8007bdc:	4649      	mov	r1, r9
 8007bde:	f7f8 fef7 	bl	80009d0 <__aeabi_dcmplt>
 8007be2:	b110      	cbz	r0, 8007bea <_printf_float+0x86>
 8007be4:	232d      	movs	r3, #45	@ 0x2d
 8007be6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007bea:	4a92      	ldr	r2, [pc, #584]	@ (8007e34 <_printf_float+0x2d0>)
 8007bec:	4b92      	ldr	r3, [pc, #584]	@ (8007e38 <_printf_float+0x2d4>)
 8007bee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8007bf2:	bf94      	ite	ls
 8007bf4:	4690      	movls	r8, r2
 8007bf6:	4698      	movhi	r8, r3
 8007bf8:	2303      	movs	r3, #3
 8007bfa:	f04f 0900 	mov.w	r9, #0
 8007bfe:	6123      	str	r3, [r4, #16]
 8007c00:	f02b 0304 	bic.w	r3, fp, #4
 8007c04:	6023      	str	r3, [r4, #0]
 8007c06:	4633      	mov	r3, r6
 8007c08:	4621      	mov	r1, r4
 8007c0a:	4628      	mov	r0, r5
 8007c0c:	9700      	str	r7, [sp, #0]
 8007c0e:	aa0f      	add	r2, sp, #60	@ 0x3c
 8007c10:	f000 f9d4 	bl	8007fbc <_printf_common>
 8007c14:	3001      	adds	r0, #1
 8007c16:	f040 8090 	bne.w	8007d3a <_printf_float+0x1d6>
 8007c1a:	f04f 30ff 	mov.w	r0, #4294967295
 8007c1e:	b011      	add	sp, #68	@ 0x44
 8007c20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007c24:	4642      	mov	r2, r8
 8007c26:	464b      	mov	r3, r9
 8007c28:	4640      	mov	r0, r8
 8007c2a:	4649      	mov	r1, r9
 8007c2c:	f7f8 fef8 	bl	8000a20 <__aeabi_dcmpun>
 8007c30:	b148      	cbz	r0, 8007c46 <_printf_float+0xe2>
 8007c32:	464b      	mov	r3, r9
 8007c34:	2b00      	cmp	r3, #0
 8007c36:	bfb8      	it	lt
 8007c38:	232d      	movlt	r3, #45	@ 0x2d
 8007c3a:	4a80      	ldr	r2, [pc, #512]	@ (8007e3c <_printf_float+0x2d8>)
 8007c3c:	bfb8      	it	lt
 8007c3e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8007c42:	4b7f      	ldr	r3, [pc, #508]	@ (8007e40 <_printf_float+0x2dc>)
 8007c44:	e7d3      	b.n	8007bee <_printf_float+0x8a>
 8007c46:	6863      	ldr	r3, [r4, #4]
 8007c48:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007c4c:	1c5a      	adds	r2, r3, #1
 8007c4e:	d13f      	bne.n	8007cd0 <_printf_float+0x16c>
 8007c50:	2306      	movs	r3, #6
 8007c52:	6063      	str	r3, [r4, #4]
 8007c54:	2200      	movs	r2, #0
 8007c56:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007c5a:	6023      	str	r3, [r4, #0]
 8007c5c:	9206      	str	r2, [sp, #24]
 8007c5e:	aa0e      	add	r2, sp, #56	@ 0x38
 8007c60:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007c64:	aa0d      	add	r2, sp, #52	@ 0x34
 8007c66:	9203      	str	r2, [sp, #12]
 8007c68:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007c6c:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8007c70:	6863      	ldr	r3, [r4, #4]
 8007c72:	4642      	mov	r2, r8
 8007c74:	9300      	str	r3, [sp, #0]
 8007c76:	4628      	mov	r0, r5
 8007c78:	464b      	mov	r3, r9
 8007c7a:	910a      	str	r1, [sp, #40]	@ 0x28
 8007c7c:	f7ff fed4 	bl	8007a28 <__cvt>
 8007c80:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007c82:	4680      	mov	r8, r0
 8007c84:	2947      	cmp	r1, #71	@ 0x47
 8007c86:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007c88:	d128      	bne.n	8007cdc <_printf_float+0x178>
 8007c8a:	1cc8      	adds	r0, r1, #3
 8007c8c:	db02      	blt.n	8007c94 <_printf_float+0x130>
 8007c8e:	6863      	ldr	r3, [r4, #4]
 8007c90:	4299      	cmp	r1, r3
 8007c92:	dd40      	ble.n	8007d16 <_printf_float+0x1b2>
 8007c94:	f1aa 0a02 	sub.w	sl, sl, #2
 8007c98:	fa5f fa8a 	uxtb.w	sl, sl
 8007c9c:	4652      	mov	r2, sl
 8007c9e:	3901      	subs	r1, #1
 8007ca0:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007ca4:	910d      	str	r1, [sp, #52]	@ 0x34
 8007ca6:	f7ff ff23 	bl	8007af0 <__exponent>
 8007caa:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007cac:	4681      	mov	r9, r0
 8007cae:	1813      	adds	r3, r2, r0
 8007cb0:	2a01      	cmp	r2, #1
 8007cb2:	6123      	str	r3, [r4, #16]
 8007cb4:	dc02      	bgt.n	8007cbc <_printf_float+0x158>
 8007cb6:	6822      	ldr	r2, [r4, #0]
 8007cb8:	07d2      	lsls	r2, r2, #31
 8007cba:	d501      	bpl.n	8007cc0 <_printf_float+0x15c>
 8007cbc:	3301      	adds	r3, #1
 8007cbe:	6123      	str	r3, [r4, #16]
 8007cc0:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d09e      	beq.n	8007c06 <_printf_float+0xa2>
 8007cc8:	232d      	movs	r3, #45	@ 0x2d
 8007cca:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007cce:	e79a      	b.n	8007c06 <_printf_float+0xa2>
 8007cd0:	2947      	cmp	r1, #71	@ 0x47
 8007cd2:	d1bf      	bne.n	8007c54 <_printf_float+0xf0>
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d1bd      	bne.n	8007c54 <_printf_float+0xf0>
 8007cd8:	2301      	movs	r3, #1
 8007cda:	e7ba      	b.n	8007c52 <_printf_float+0xee>
 8007cdc:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007ce0:	d9dc      	bls.n	8007c9c <_printf_float+0x138>
 8007ce2:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8007ce6:	d118      	bne.n	8007d1a <_printf_float+0x1b6>
 8007ce8:	2900      	cmp	r1, #0
 8007cea:	6863      	ldr	r3, [r4, #4]
 8007cec:	dd0b      	ble.n	8007d06 <_printf_float+0x1a2>
 8007cee:	6121      	str	r1, [r4, #16]
 8007cf0:	b913      	cbnz	r3, 8007cf8 <_printf_float+0x194>
 8007cf2:	6822      	ldr	r2, [r4, #0]
 8007cf4:	07d0      	lsls	r0, r2, #31
 8007cf6:	d502      	bpl.n	8007cfe <_printf_float+0x19a>
 8007cf8:	3301      	adds	r3, #1
 8007cfa:	440b      	add	r3, r1
 8007cfc:	6123      	str	r3, [r4, #16]
 8007cfe:	f04f 0900 	mov.w	r9, #0
 8007d02:	65a1      	str	r1, [r4, #88]	@ 0x58
 8007d04:	e7dc      	b.n	8007cc0 <_printf_float+0x15c>
 8007d06:	b913      	cbnz	r3, 8007d0e <_printf_float+0x1aa>
 8007d08:	6822      	ldr	r2, [r4, #0]
 8007d0a:	07d2      	lsls	r2, r2, #31
 8007d0c:	d501      	bpl.n	8007d12 <_printf_float+0x1ae>
 8007d0e:	3302      	adds	r3, #2
 8007d10:	e7f4      	b.n	8007cfc <_printf_float+0x198>
 8007d12:	2301      	movs	r3, #1
 8007d14:	e7f2      	b.n	8007cfc <_printf_float+0x198>
 8007d16:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007d1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d1c:	4299      	cmp	r1, r3
 8007d1e:	db05      	blt.n	8007d2c <_printf_float+0x1c8>
 8007d20:	6823      	ldr	r3, [r4, #0]
 8007d22:	6121      	str	r1, [r4, #16]
 8007d24:	07d8      	lsls	r0, r3, #31
 8007d26:	d5ea      	bpl.n	8007cfe <_printf_float+0x19a>
 8007d28:	1c4b      	adds	r3, r1, #1
 8007d2a:	e7e7      	b.n	8007cfc <_printf_float+0x198>
 8007d2c:	2900      	cmp	r1, #0
 8007d2e:	bfcc      	ite	gt
 8007d30:	2201      	movgt	r2, #1
 8007d32:	f1c1 0202 	rsble	r2, r1, #2
 8007d36:	4413      	add	r3, r2
 8007d38:	e7e0      	b.n	8007cfc <_printf_float+0x198>
 8007d3a:	6823      	ldr	r3, [r4, #0]
 8007d3c:	055a      	lsls	r2, r3, #21
 8007d3e:	d407      	bmi.n	8007d50 <_printf_float+0x1ec>
 8007d40:	6923      	ldr	r3, [r4, #16]
 8007d42:	4642      	mov	r2, r8
 8007d44:	4631      	mov	r1, r6
 8007d46:	4628      	mov	r0, r5
 8007d48:	47b8      	blx	r7
 8007d4a:	3001      	adds	r0, #1
 8007d4c:	d12b      	bne.n	8007da6 <_printf_float+0x242>
 8007d4e:	e764      	b.n	8007c1a <_printf_float+0xb6>
 8007d50:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007d54:	f240 80dc 	bls.w	8007f10 <_printf_float+0x3ac>
 8007d58:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007d5c:	2200      	movs	r2, #0
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f7f8 fe2c 	bl	80009bc <__aeabi_dcmpeq>
 8007d64:	2800      	cmp	r0, #0
 8007d66:	d033      	beq.n	8007dd0 <_printf_float+0x26c>
 8007d68:	2301      	movs	r3, #1
 8007d6a:	4631      	mov	r1, r6
 8007d6c:	4628      	mov	r0, r5
 8007d6e:	4a35      	ldr	r2, [pc, #212]	@ (8007e44 <_printf_float+0x2e0>)
 8007d70:	47b8      	blx	r7
 8007d72:	3001      	adds	r0, #1
 8007d74:	f43f af51 	beq.w	8007c1a <_printf_float+0xb6>
 8007d78:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007d7c:	4543      	cmp	r3, r8
 8007d7e:	db02      	blt.n	8007d86 <_printf_float+0x222>
 8007d80:	6823      	ldr	r3, [r4, #0]
 8007d82:	07d8      	lsls	r0, r3, #31
 8007d84:	d50f      	bpl.n	8007da6 <_printf_float+0x242>
 8007d86:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007d8a:	4631      	mov	r1, r6
 8007d8c:	4628      	mov	r0, r5
 8007d8e:	47b8      	blx	r7
 8007d90:	3001      	adds	r0, #1
 8007d92:	f43f af42 	beq.w	8007c1a <_printf_float+0xb6>
 8007d96:	f04f 0900 	mov.w	r9, #0
 8007d9a:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d9e:	f104 0a1a 	add.w	sl, r4, #26
 8007da2:	45c8      	cmp	r8, r9
 8007da4:	dc09      	bgt.n	8007dba <_printf_float+0x256>
 8007da6:	6823      	ldr	r3, [r4, #0]
 8007da8:	079b      	lsls	r3, r3, #30
 8007daa:	f100 8102 	bmi.w	8007fb2 <_printf_float+0x44e>
 8007dae:	68e0      	ldr	r0, [r4, #12]
 8007db0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007db2:	4298      	cmp	r0, r3
 8007db4:	bfb8      	it	lt
 8007db6:	4618      	movlt	r0, r3
 8007db8:	e731      	b.n	8007c1e <_printf_float+0xba>
 8007dba:	2301      	movs	r3, #1
 8007dbc:	4652      	mov	r2, sl
 8007dbe:	4631      	mov	r1, r6
 8007dc0:	4628      	mov	r0, r5
 8007dc2:	47b8      	blx	r7
 8007dc4:	3001      	adds	r0, #1
 8007dc6:	f43f af28 	beq.w	8007c1a <_printf_float+0xb6>
 8007dca:	f109 0901 	add.w	r9, r9, #1
 8007dce:	e7e8      	b.n	8007da2 <_printf_float+0x23e>
 8007dd0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007dd2:	2b00      	cmp	r3, #0
 8007dd4:	dc38      	bgt.n	8007e48 <_printf_float+0x2e4>
 8007dd6:	2301      	movs	r3, #1
 8007dd8:	4631      	mov	r1, r6
 8007dda:	4628      	mov	r0, r5
 8007ddc:	4a19      	ldr	r2, [pc, #100]	@ (8007e44 <_printf_float+0x2e0>)
 8007dde:	47b8      	blx	r7
 8007de0:	3001      	adds	r0, #1
 8007de2:	f43f af1a 	beq.w	8007c1a <_printf_float+0xb6>
 8007de6:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007dea:	ea59 0303 	orrs.w	r3, r9, r3
 8007dee:	d102      	bne.n	8007df6 <_printf_float+0x292>
 8007df0:	6823      	ldr	r3, [r4, #0]
 8007df2:	07d9      	lsls	r1, r3, #31
 8007df4:	d5d7      	bpl.n	8007da6 <_printf_float+0x242>
 8007df6:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007dfa:	4631      	mov	r1, r6
 8007dfc:	4628      	mov	r0, r5
 8007dfe:	47b8      	blx	r7
 8007e00:	3001      	adds	r0, #1
 8007e02:	f43f af0a 	beq.w	8007c1a <_printf_float+0xb6>
 8007e06:	f04f 0a00 	mov.w	sl, #0
 8007e0a:	f104 0b1a 	add.w	fp, r4, #26
 8007e0e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e10:	425b      	negs	r3, r3
 8007e12:	4553      	cmp	r3, sl
 8007e14:	dc01      	bgt.n	8007e1a <_printf_float+0x2b6>
 8007e16:	464b      	mov	r3, r9
 8007e18:	e793      	b.n	8007d42 <_printf_float+0x1de>
 8007e1a:	2301      	movs	r3, #1
 8007e1c:	465a      	mov	r2, fp
 8007e1e:	4631      	mov	r1, r6
 8007e20:	4628      	mov	r0, r5
 8007e22:	47b8      	blx	r7
 8007e24:	3001      	adds	r0, #1
 8007e26:	f43f aef8 	beq.w	8007c1a <_printf_float+0xb6>
 8007e2a:	f10a 0a01 	add.w	sl, sl, #1
 8007e2e:	e7ee      	b.n	8007e0e <_printf_float+0x2aa>
 8007e30:	7fefffff 	.word	0x7fefffff
 8007e34:	0800b282 	.word	0x0800b282
 8007e38:	0800b286 	.word	0x0800b286
 8007e3c:	0800b28a 	.word	0x0800b28a
 8007e40:	0800b28e 	.word	0x0800b28e
 8007e44:	0800b4bf 	.word	0x0800b4bf
 8007e48:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e4a:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007e4e:	4553      	cmp	r3, sl
 8007e50:	bfa8      	it	ge
 8007e52:	4653      	movge	r3, sl
 8007e54:	2b00      	cmp	r3, #0
 8007e56:	4699      	mov	r9, r3
 8007e58:	dc36      	bgt.n	8007ec8 <_printf_float+0x364>
 8007e5a:	f04f 0b00 	mov.w	fp, #0
 8007e5e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e62:	f104 021a 	add.w	r2, r4, #26
 8007e66:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007e68:	930a      	str	r3, [sp, #40]	@ 0x28
 8007e6a:	eba3 0309 	sub.w	r3, r3, r9
 8007e6e:	455b      	cmp	r3, fp
 8007e70:	dc31      	bgt.n	8007ed6 <_printf_float+0x372>
 8007e72:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e74:	459a      	cmp	sl, r3
 8007e76:	dc3a      	bgt.n	8007eee <_printf_float+0x38a>
 8007e78:	6823      	ldr	r3, [r4, #0]
 8007e7a:	07da      	lsls	r2, r3, #31
 8007e7c:	d437      	bmi.n	8007eee <_printf_float+0x38a>
 8007e7e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007e80:	ebaa 0903 	sub.w	r9, sl, r3
 8007e84:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007e86:	ebaa 0303 	sub.w	r3, sl, r3
 8007e8a:	4599      	cmp	r9, r3
 8007e8c:	bfa8      	it	ge
 8007e8e:	4699      	movge	r9, r3
 8007e90:	f1b9 0f00 	cmp.w	r9, #0
 8007e94:	dc33      	bgt.n	8007efe <_printf_float+0x39a>
 8007e96:	f04f 0800 	mov.w	r8, #0
 8007e9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e9e:	f104 0b1a 	add.w	fp, r4, #26
 8007ea2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007ea4:	ebaa 0303 	sub.w	r3, sl, r3
 8007ea8:	eba3 0309 	sub.w	r3, r3, r9
 8007eac:	4543      	cmp	r3, r8
 8007eae:	f77f af7a 	ble.w	8007da6 <_printf_float+0x242>
 8007eb2:	2301      	movs	r3, #1
 8007eb4:	465a      	mov	r2, fp
 8007eb6:	4631      	mov	r1, r6
 8007eb8:	4628      	mov	r0, r5
 8007eba:	47b8      	blx	r7
 8007ebc:	3001      	adds	r0, #1
 8007ebe:	f43f aeac 	beq.w	8007c1a <_printf_float+0xb6>
 8007ec2:	f108 0801 	add.w	r8, r8, #1
 8007ec6:	e7ec      	b.n	8007ea2 <_printf_float+0x33e>
 8007ec8:	4642      	mov	r2, r8
 8007eca:	4631      	mov	r1, r6
 8007ecc:	4628      	mov	r0, r5
 8007ece:	47b8      	blx	r7
 8007ed0:	3001      	adds	r0, #1
 8007ed2:	d1c2      	bne.n	8007e5a <_printf_float+0x2f6>
 8007ed4:	e6a1      	b.n	8007c1a <_printf_float+0xb6>
 8007ed6:	2301      	movs	r3, #1
 8007ed8:	4631      	mov	r1, r6
 8007eda:	4628      	mov	r0, r5
 8007edc:	920a      	str	r2, [sp, #40]	@ 0x28
 8007ede:	47b8      	blx	r7
 8007ee0:	3001      	adds	r0, #1
 8007ee2:	f43f ae9a 	beq.w	8007c1a <_printf_float+0xb6>
 8007ee6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ee8:	f10b 0b01 	add.w	fp, fp, #1
 8007eec:	e7bb      	b.n	8007e66 <_printf_float+0x302>
 8007eee:	4631      	mov	r1, r6
 8007ef0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ef4:	4628      	mov	r0, r5
 8007ef6:	47b8      	blx	r7
 8007ef8:	3001      	adds	r0, #1
 8007efa:	d1c0      	bne.n	8007e7e <_printf_float+0x31a>
 8007efc:	e68d      	b.n	8007c1a <_printf_float+0xb6>
 8007efe:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007f00:	464b      	mov	r3, r9
 8007f02:	4631      	mov	r1, r6
 8007f04:	4628      	mov	r0, r5
 8007f06:	4442      	add	r2, r8
 8007f08:	47b8      	blx	r7
 8007f0a:	3001      	adds	r0, #1
 8007f0c:	d1c3      	bne.n	8007e96 <_printf_float+0x332>
 8007f0e:	e684      	b.n	8007c1a <_printf_float+0xb6>
 8007f10:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007f14:	f1ba 0f01 	cmp.w	sl, #1
 8007f18:	dc01      	bgt.n	8007f1e <_printf_float+0x3ba>
 8007f1a:	07db      	lsls	r3, r3, #31
 8007f1c:	d536      	bpl.n	8007f8c <_printf_float+0x428>
 8007f1e:	2301      	movs	r3, #1
 8007f20:	4642      	mov	r2, r8
 8007f22:	4631      	mov	r1, r6
 8007f24:	4628      	mov	r0, r5
 8007f26:	47b8      	blx	r7
 8007f28:	3001      	adds	r0, #1
 8007f2a:	f43f ae76 	beq.w	8007c1a <_printf_float+0xb6>
 8007f2e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae6e 	beq.w	8007c1a <_printf_float+0xb6>
 8007f3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007f42:	2200      	movs	r2, #0
 8007f44:	2300      	movs	r3, #0
 8007f46:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f4a:	f7f8 fd37 	bl	80009bc <__aeabi_dcmpeq>
 8007f4e:	b9c0      	cbnz	r0, 8007f82 <_printf_float+0x41e>
 8007f50:	4653      	mov	r3, sl
 8007f52:	f108 0201 	add.w	r2, r8, #1
 8007f56:	4631      	mov	r1, r6
 8007f58:	4628      	mov	r0, r5
 8007f5a:	47b8      	blx	r7
 8007f5c:	3001      	adds	r0, #1
 8007f5e:	d10c      	bne.n	8007f7a <_printf_float+0x416>
 8007f60:	e65b      	b.n	8007c1a <_printf_float+0xb6>
 8007f62:	2301      	movs	r3, #1
 8007f64:	465a      	mov	r2, fp
 8007f66:	4631      	mov	r1, r6
 8007f68:	4628      	mov	r0, r5
 8007f6a:	47b8      	blx	r7
 8007f6c:	3001      	adds	r0, #1
 8007f6e:	f43f ae54 	beq.w	8007c1a <_printf_float+0xb6>
 8007f72:	f108 0801 	add.w	r8, r8, #1
 8007f76:	45d0      	cmp	r8, sl
 8007f78:	dbf3      	blt.n	8007f62 <_printf_float+0x3fe>
 8007f7a:	464b      	mov	r3, r9
 8007f7c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007f80:	e6e0      	b.n	8007d44 <_printf_float+0x1e0>
 8007f82:	f04f 0800 	mov.w	r8, #0
 8007f86:	f104 0b1a 	add.w	fp, r4, #26
 8007f8a:	e7f4      	b.n	8007f76 <_printf_float+0x412>
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	4642      	mov	r2, r8
 8007f90:	e7e1      	b.n	8007f56 <_printf_float+0x3f2>
 8007f92:	2301      	movs	r3, #1
 8007f94:	464a      	mov	r2, r9
 8007f96:	4631      	mov	r1, r6
 8007f98:	4628      	mov	r0, r5
 8007f9a:	47b8      	blx	r7
 8007f9c:	3001      	adds	r0, #1
 8007f9e:	f43f ae3c 	beq.w	8007c1a <_printf_float+0xb6>
 8007fa2:	f108 0801 	add.w	r8, r8, #1
 8007fa6:	68e3      	ldr	r3, [r4, #12]
 8007fa8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007faa:	1a5b      	subs	r3, r3, r1
 8007fac:	4543      	cmp	r3, r8
 8007fae:	dcf0      	bgt.n	8007f92 <_printf_float+0x42e>
 8007fb0:	e6fd      	b.n	8007dae <_printf_float+0x24a>
 8007fb2:	f04f 0800 	mov.w	r8, #0
 8007fb6:	f104 0919 	add.w	r9, r4, #25
 8007fba:	e7f4      	b.n	8007fa6 <_printf_float+0x442>

08007fbc <_printf_common>:
 8007fbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007fc0:	4616      	mov	r6, r2
 8007fc2:	4698      	mov	r8, r3
 8007fc4:	688a      	ldr	r2, [r1, #8]
 8007fc6:	690b      	ldr	r3, [r1, #16]
 8007fc8:	4607      	mov	r7, r0
 8007fca:	4293      	cmp	r3, r2
 8007fcc:	bfb8      	it	lt
 8007fce:	4613      	movlt	r3, r2
 8007fd0:	6033      	str	r3, [r6, #0]
 8007fd2:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007fd6:	460c      	mov	r4, r1
 8007fd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007fdc:	b10a      	cbz	r2, 8007fe2 <_printf_common+0x26>
 8007fde:	3301      	adds	r3, #1
 8007fe0:	6033      	str	r3, [r6, #0]
 8007fe2:	6823      	ldr	r3, [r4, #0]
 8007fe4:	0699      	lsls	r1, r3, #26
 8007fe6:	bf42      	ittt	mi
 8007fe8:	6833      	ldrmi	r3, [r6, #0]
 8007fea:	3302      	addmi	r3, #2
 8007fec:	6033      	strmi	r3, [r6, #0]
 8007fee:	6825      	ldr	r5, [r4, #0]
 8007ff0:	f015 0506 	ands.w	r5, r5, #6
 8007ff4:	d106      	bne.n	8008004 <_printf_common+0x48>
 8007ff6:	f104 0a19 	add.w	sl, r4, #25
 8007ffa:	68e3      	ldr	r3, [r4, #12]
 8007ffc:	6832      	ldr	r2, [r6, #0]
 8007ffe:	1a9b      	subs	r3, r3, r2
 8008000:	42ab      	cmp	r3, r5
 8008002:	dc2b      	bgt.n	800805c <_printf_common+0xa0>
 8008004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008008:	6822      	ldr	r2, [r4, #0]
 800800a:	3b00      	subs	r3, #0
 800800c:	bf18      	it	ne
 800800e:	2301      	movne	r3, #1
 8008010:	0692      	lsls	r2, r2, #26
 8008012:	d430      	bmi.n	8008076 <_printf_common+0xba>
 8008014:	4641      	mov	r1, r8
 8008016:	4638      	mov	r0, r7
 8008018:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800801c:	47c8      	blx	r9
 800801e:	3001      	adds	r0, #1
 8008020:	d023      	beq.n	800806a <_printf_common+0xae>
 8008022:	6823      	ldr	r3, [r4, #0]
 8008024:	6922      	ldr	r2, [r4, #16]
 8008026:	f003 0306 	and.w	r3, r3, #6
 800802a:	2b04      	cmp	r3, #4
 800802c:	bf14      	ite	ne
 800802e:	2500      	movne	r5, #0
 8008030:	6833      	ldreq	r3, [r6, #0]
 8008032:	f04f 0600 	mov.w	r6, #0
 8008036:	bf08      	it	eq
 8008038:	68e5      	ldreq	r5, [r4, #12]
 800803a:	f104 041a 	add.w	r4, r4, #26
 800803e:	bf08      	it	eq
 8008040:	1aed      	subeq	r5, r5, r3
 8008042:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8008046:	bf08      	it	eq
 8008048:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800804c:	4293      	cmp	r3, r2
 800804e:	bfc4      	itt	gt
 8008050:	1a9b      	subgt	r3, r3, r2
 8008052:	18ed      	addgt	r5, r5, r3
 8008054:	42b5      	cmp	r5, r6
 8008056:	d11a      	bne.n	800808e <_printf_common+0xd2>
 8008058:	2000      	movs	r0, #0
 800805a:	e008      	b.n	800806e <_printf_common+0xb2>
 800805c:	2301      	movs	r3, #1
 800805e:	4652      	mov	r2, sl
 8008060:	4641      	mov	r1, r8
 8008062:	4638      	mov	r0, r7
 8008064:	47c8      	blx	r9
 8008066:	3001      	adds	r0, #1
 8008068:	d103      	bne.n	8008072 <_printf_common+0xb6>
 800806a:	f04f 30ff 	mov.w	r0, #4294967295
 800806e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008072:	3501      	adds	r5, #1
 8008074:	e7c1      	b.n	8007ffa <_printf_common+0x3e>
 8008076:	2030      	movs	r0, #48	@ 0x30
 8008078:	18e1      	adds	r1, r4, r3
 800807a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800807e:	1c5a      	adds	r2, r3, #1
 8008080:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008084:	4422      	add	r2, r4
 8008086:	3302      	adds	r3, #2
 8008088:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800808c:	e7c2      	b.n	8008014 <_printf_common+0x58>
 800808e:	2301      	movs	r3, #1
 8008090:	4622      	mov	r2, r4
 8008092:	4641      	mov	r1, r8
 8008094:	4638      	mov	r0, r7
 8008096:	47c8      	blx	r9
 8008098:	3001      	adds	r0, #1
 800809a:	d0e6      	beq.n	800806a <_printf_common+0xae>
 800809c:	3601      	adds	r6, #1
 800809e:	e7d9      	b.n	8008054 <_printf_common+0x98>

080080a0 <_printf_i>:
 80080a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80080a4:	7e0f      	ldrb	r7, [r1, #24]
 80080a6:	4691      	mov	r9, r2
 80080a8:	2f78      	cmp	r7, #120	@ 0x78
 80080aa:	4680      	mov	r8, r0
 80080ac:	460c      	mov	r4, r1
 80080ae:	469a      	mov	sl, r3
 80080b0:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80080b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80080b6:	d807      	bhi.n	80080c8 <_printf_i+0x28>
 80080b8:	2f62      	cmp	r7, #98	@ 0x62
 80080ba:	d80a      	bhi.n	80080d2 <_printf_i+0x32>
 80080bc:	2f00      	cmp	r7, #0
 80080be:	f000 80d3 	beq.w	8008268 <_printf_i+0x1c8>
 80080c2:	2f58      	cmp	r7, #88	@ 0x58
 80080c4:	f000 80ba 	beq.w	800823c <_printf_i+0x19c>
 80080c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80080cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80080d0:	e03a      	b.n	8008148 <_printf_i+0xa8>
 80080d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80080d6:	2b15      	cmp	r3, #21
 80080d8:	d8f6      	bhi.n	80080c8 <_printf_i+0x28>
 80080da:	a101      	add	r1, pc, #4	@ (adr r1, 80080e0 <_printf_i+0x40>)
 80080dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80080e0:	08008139 	.word	0x08008139
 80080e4:	0800814d 	.word	0x0800814d
 80080e8:	080080c9 	.word	0x080080c9
 80080ec:	080080c9 	.word	0x080080c9
 80080f0:	080080c9 	.word	0x080080c9
 80080f4:	080080c9 	.word	0x080080c9
 80080f8:	0800814d 	.word	0x0800814d
 80080fc:	080080c9 	.word	0x080080c9
 8008100:	080080c9 	.word	0x080080c9
 8008104:	080080c9 	.word	0x080080c9
 8008108:	080080c9 	.word	0x080080c9
 800810c:	0800824f 	.word	0x0800824f
 8008110:	08008177 	.word	0x08008177
 8008114:	08008209 	.word	0x08008209
 8008118:	080080c9 	.word	0x080080c9
 800811c:	080080c9 	.word	0x080080c9
 8008120:	08008271 	.word	0x08008271
 8008124:	080080c9 	.word	0x080080c9
 8008128:	08008177 	.word	0x08008177
 800812c:	080080c9 	.word	0x080080c9
 8008130:	080080c9 	.word	0x080080c9
 8008134:	08008211 	.word	0x08008211
 8008138:	6833      	ldr	r3, [r6, #0]
 800813a:	1d1a      	adds	r2, r3, #4
 800813c:	681b      	ldr	r3, [r3, #0]
 800813e:	6032      	str	r2, [r6, #0]
 8008140:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008144:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008148:	2301      	movs	r3, #1
 800814a:	e09e      	b.n	800828a <_printf_i+0x1ea>
 800814c:	6833      	ldr	r3, [r6, #0]
 800814e:	6820      	ldr	r0, [r4, #0]
 8008150:	1d19      	adds	r1, r3, #4
 8008152:	6031      	str	r1, [r6, #0]
 8008154:	0606      	lsls	r6, r0, #24
 8008156:	d501      	bpl.n	800815c <_printf_i+0xbc>
 8008158:	681d      	ldr	r5, [r3, #0]
 800815a:	e003      	b.n	8008164 <_printf_i+0xc4>
 800815c:	0645      	lsls	r5, r0, #25
 800815e:	d5fb      	bpl.n	8008158 <_printf_i+0xb8>
 8008160:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008164:	2d00      	cmp	r5, #0
 8008166:	da03      	bge.n	8008170 <_printf_i+0xd0>
 8008168:	232d      	movs	r3, #45	@ 0x2d
 800816a:	426d      	negs	r5, r5
 800816c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008170:	230a      	movs	r3, #10
 8008172:	4859      	ldr	r0, [pc, #356]	@ (80082d8 <_printf_i+0x238>)
 8008174:	e011      	b.n	800819a <_printf_i+0xfa>
 8008176:	6821      	ldr	r1, [r4, #0]
 8008178:	6833      	ldr	r3, [r6, #0]
 800817a:	0608      	lsls	r0, r1, #24
 800817c:	f853 5b04 	ldr.w	r5, [r3], #4
 8008180:	d402      	bmi.n	8008188 <_printf_i+0xe8>
 8008182:	0649      	lsls	r1, r1, #25
 8008184:	bf48      	it	mi
 8008186:	b2ad      	uxthmi	r5, r5
 8008188:	2f6f      	cmp	r7, #111	@ 0x6f
 800818a:	6033      	str	r3, [r6, #0]
 800818c:	bf14      	ite	ne
 800818e:	230a      	movne	r3, #10
 8008190:	2308      	moveq	r3, #8
 8008192:	4851      	ldr	r0, [pc, #324]	@ (80082d8 <_printf_i+0x238>)
 8008194:	2100      	movs	r1, #0
 8008196:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800819a:	6866      	ldr	r6, [r4, #4]
 800819c:	2e00      	cmp	r6, #0
 800819e:	bfa8      	it	ge
 80081a0:	6821      	ldrge	r1, [r4, #0]
 80081a2:	60a6      	str	r6, [r4, #8]
 80081a4:	bfa4      	itt	ge
 80081a6:	f021 0104 	bicge.w	r1, r1, #4
 80081aa:	6021      	strge	r1, [r4, #0]
 80081ac:	b90d      	cbnz	r5, 80081b2 <_printf_i+0x112>
 80081ae:	2e00      	cmp	r6, #0
 80081b0:	d04b      	beq.n	800824a <_printf_i+0x1aa>
 80081b2:	4616      	mov	r6, r2
 80081b4:	fbb5 f1f3 	udiv	r1, r5, r3
 80081b8:	fb03 5711 	mls	r7, r3, r1, r5
 80081bc:	5dc7      	ldrb	r7, [r0, r7]
 80081be:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80081c2:	462f      	mov	r7, r5
 80081c4:	42bb      	cmp	r3, r7
 80081c6:	460d      	mov	r5, r1
 80081c8:	d9f4      	bls.n	80081b4 <_printf_i+0x114>
 80081ca:	2b08      	cmp	r3, #8
 80081cc:	d10b      	bne.n	80081e6 <_printf_i+0x146>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	07df      	lsls	r7, r3, #31
 80081d2:	d508      	bpl.n	80081e6 <_printf_i+0x146>
 80081d4:	6923      	ldr	r3, [r4, #16]
 80081d6:	6861      	ldr	r1, [r4, #4]
 80081d8:	4299      	cmp	r1, r3
 80081da:	bfde      	ittt	le
 80081dc:	2330      	movle	r3, #48	@ 0x30
 80081de:	f806 3c01 	strble.w	r3, [r6, #-1]
 80081e2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80081e6:	1b92      	subs	r2, r2, r6
 80081e8:	6122      	str	r2, [r4, #16]
 80081ea:	464b      	mov	r3, r9
 80081ec:	4621      	mov	r1, r4
 80081ee:	4640      	mov	r0, r8
 80081f0:	f8cd a000 	str.w	sl, [sp]
 80081f4:	aa03      	add	r2, sp, #12
 80081f6:	f7ff fee1 	bl	8007fbc <_printf_common>
 80081fa:	3001      	adds	r0, #1
 80081fc:	d14a      	bne.n	8008294 <_printf_i+0x1f4>
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008202:	b004      	add	sp, #16
 8008204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008208:	6823      	ldr	r3, [r4, #0]
 800820a:	f043 0320 	orr.w	r3, r3, #32
 800820e:	6023      	str	r3, [r4, #0]
 8008210:	2778      	movs	r7, #120	@ 0x78
 8008212:	4832      	ldr	r0, [pc, #200]	@ (80082dc <_printf_i+0x23c>)
 8008214:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008218:	6823      	ldr	r3, [r4, #0]
 800821a:	6831      	ldr	r1, [r6, #0]
 800821c:	061f      	lsls	r7, r3, #24
 800821e:	f851 5b04 	ldr.w	r5, [r1], #4
 8008222:	d402      	bmi.n	800822a <_printf_i+0x18a>
 8008224:	065f      	lsls	r7, r3, #25
 8008226:	bf48      	it	mi
 8008228:	b2ad      	uxthmi	r5, r5
 800822a:	6031      	str	r1, [r6, #0]
 800822c:	07d9      	lsls	r1, r3, #31
 800822e:	bf44      	itt	mi
 8008230:	f043 0320 	orrmi.w	r3, r3, #32
 8008234:	6023      	strmi	r3, [r4, #0]
 8008236:	b11d      	cbz	r5, 8008240 <_printf_i+0x1a0>
 8008238:	2310      	movs	r3, #16
 800823a:	e7ab      	b.n	8008194 <_printf_i+0xf4>
 800823c:	4826      	ldr	r0, [pc, #152]	@ (80082d8 <_printf_i+0x238>)
 800823e:	e7e9      	b.n	8008214 <_printf_i+0x174>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	f023 0320 	bic.w	r3, r3, #32
 8008246:	6023      	str	r3, [r4, #0]
 8008248:	e7f6      	b.n	8008238 <_printf_i+0x198>
 800824a:	4616      	mov	r6, r2
 800824c:	e7bd      	b.n	80081ca <_printf_i+0x12a>
 800824e:	6833      	ldr	r3, [r6, #0]
 8008250:	6825      	ldr	r5, [r4, #0]
 8008252:	1d18      	adds	r0, r3, #4
 8008254:	6961      	ldr	r1, [r4, #20]
 8008256:	6030      	str	r0, [r6, #0]
 8008258:	062e      	lsls	r6, r5, #24
 800825a:	681b      	ldr	r3, [r3, #0]
 800825c:	d501      	bpl.n	8008262 <_printf_i+0x1c2>
 800825e:	6019      	str	r1, [r3, #0]
 8008260:	e002      	b.n	8008268 <_printf_i+0x1c8>
 8008262:	0668      	lsls	r0, r5, #25
 8008264:	d5fb      	bpl.n	800825e <_printf_i+0x1be>
 8008266:	8019      	strh	r1, [r3, #0]
 8008268:	2300      	movs	r3, #0
 800826a:	4616      	mov	r6, r2
 800826c:	6123      	str	r3, [r4, #16]
 800826e:	e7bc      	b.n	80081ea <_printf_i+0x14a>
 8008270:	6833      	ldr	r3, [r6, #0]
 8008272:	2100      	movs	r1, #0
 8008274:	1d1a      	adds	r2, r3, #4
 8008276:	6032      	str	r2, [r6, #0]
 8008278:	681e      	ldr	r6, [r3, #0]
 800827a:	6862      	ldr	r2, [r4, #4]
 800827c:	4630      	mov	r0, r6
 800827e:	f000 fa36 	bl	80086ee <memchr>
 8008282:	b108      	cbz	r0, 8008288 <_printf_i+0x1e8>
 8008284:	1b80      	subs	r0, r0, r6
 8008286:	6060      	str	r0, [r4, #4]
 8008288:	6863      	ldr	r3, [r4, #4]
 800828a:	6123      	str	r3, [r4, #16]
 800828c:	2300      	movs	r3, #0
 800828e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008292:	e7aa      	b.n	80081ea <_printf_i+0x14a>
 8008294:	4632      	mov	r2, r6
 8008296:	4649      	mov	r1, r9
 8008298:	4640      	mov	r0, r8
 800829a:	6923      	ldr	r3, [r4, #16]
 800829c:	47d0      	blx	sl
 800829e:	3001      	adds	r0, #1
 80082a0:	d0ad      	beq.n	80081fe <_printf_i+0x15e>
 80082a2:	6823      	ldr	r3, [r4, #0]
 80082a4:	079b      	lsls	r3, r3, #30
 80082a6:	d413      	bmi.n	80082d0 <_printf_i+0x230>
 80082a8:	68e0      	ldr	r0, [r4, #12]
 80082aa:	9b03      	ldr	r3, [sp, #12]
 80082ac:	4298      	cmp	r0, r3
 80082ae:	bfb8      	it	lt
 80082b0:	4618      	movlt	r0, r3
 80082b2:	e7a6      	b.n	8008202 <_printf_i+0x162>
 80082b4:	2301      	movs	r3, #1
 80082b6:	4632      	mov	r2, r6
 80082b8:	4649      	mov	r1, r9
 80082ba:	4640      	mov	r0, r8
 80082bc:	47d0      	blx	sl
 80082be:	3001      	adds	r0, #1
 80082c0:	d09d      	beq.n	80081fe <_printf_i+0x15e>
 80082c2:	3501      	adds	r5, #1
 80082c4:	68e3      	ldr	r3, [r4, #12]
 80082c6:	9903      	ldr	r1, [sp, #12]
 80082c8:	1a5b      	subs	r3, r3, r1
 80082ca:	42ab      	cmp	r3, r5
 80082cc:	dcf2      	bgt.n	80082b4 <_printf_i+0x214>
 80082ce:	e7eb      	b.n	80082a8 <_printf_i+0x208>
 80082d0:	2500      	movs	r5, #0
 80082d2:	f104 0619 	add.w	r6, r4, #25
 80082d6:	e7f5      	b.n	80082c4 <_printf_i+0x224>
 80082d8:	0800b292 	.word	0x0800b292
 80082dc:	0800b2a3 	.word	0x0800b2a3

080082e0 <std>:
 80082e0:	2300      	movs	r3, #0
 80082e2:	b510      	push	{r4, lr}
 80082e4:	4604      	mov	r4, r0
 80082e6:	e9c0 3300 	strd	r3, r3, [r0]
 80082ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80082ee:	6083      	str	r3, [r0, #8]
 80082f0:	8181      	strh	r1, [r0, #12]
 80082f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80082f4:	81c2      	strh	r2, [r0, #14]
 80082f6:	6183      	str	r3, [r0, #24]
 80082f8:	4619      	mov	r1, r3
 80082fa:	2208      	movs	r2, #8
 80082fc:	305c      	adds	r0, #92	@ 0x5c
 80082fe:	f000 f954 	bl	80085aa <memset>
 8008302:	4b0d      	ldr	r3, [pc, #52]	@ (8008338 <std+0x58>)
 8008304:	6224      	str	r4, [r4, #32]
 8008306:	6263      	str	r3, [r4, #36]	@ 0x24
 8008308:	4b0c      	ldr	r3, [pc, #48]	@ (800833c <std+0x5c>)
 800830a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800830c:	4b0c      	ldr	r3, [pc, #48]	@ (8008340 <std+0x60>)
 800830e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008310:	4b0c      	ldr	r3, [pc, #48]	@ (8008344 <std+0x64>)
 8008312:	6323      	str	r3, [r4, #48]	@ 0x30
 8008314:	4b0c      	ldr	r3, [pc, #48]	@ (8008348 <std+0x68>)
 8008316:	429c      	cmp	r4, r3
 8008318:	d006      	beq.n	8008328 <std+0x48>
 800831a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800831e:	4294      	cmp	r4, r2
 8008320:	d002      	beq.n	8008328 <std+0x48>
 8008322:	33d0      	adds	r3, #208	@ 0xd0
 8008324:	429c      	cmp	r4, r3
 8008326:	d105      	bne.n	8008334 <std+0x54>
 8008328:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800832c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008330:	f000 b9da 	b.w	80086e8 <__retarget_lock_init_recursive>
 8008334:	bd10      	pop	{r4, pc}
 8008336:	bf00      	nop
 8008338:	08008521 	.word	0x08008521
 800833c:	08008547 	.word	0x08008547
 8008340:	0800857f 	.word	0x0800857f
 8008344:	080085a3 	.word	0x080085a3
 8008348:	20001bb8 	.word	0x20001bb8

0800834c <stdio_exit_handler>:
 800834c:	4a02      	ldr	r2, [pc, #8]	@ (8008358 <stdio_exit_handler+0xc>)
 800834e:	4903      	ldr	r1, [pc, #12]	@ (800835c <stdio_exit_handler+0x10>)
 8008350:	4803      	ldr	r0, [pc, #12]	@ (8008360 <stdio_exit_handler+0x14>)
 8008352:	f000 b869 	b.w	8008428 <_fwalk_sglue>
 8008356:	bf00      	nop
 8008358:	20000010 	.word	0x20000010
 800835c:	0800a6a1 	.word	0x0800a6a1
 8008360:	20000020 	.word	0x20000020

08008364 <cleanup_stdio>:
 8008364:	6841      	ldr	r1, [r0, #4]
 8008366:	4b0c      	ldr	r3, [pc, #48]	@ (8008398 <cleanup_stdio+0x34>)
 8008368:	b510      	push	{r4, lr}
 800836a:	4299      	cmp	r1, r3
 800836c:	4604      	mov	r4, r0
 800836e:	d001      	beq.n	8008374 <cleanup_stdio+0x10>
 8008370:	f002 f996 	bl	800a6a0 <_fflush_r>
 8008374:	68a1      	ldr	r1, [r4, #8]
 8008376:	4b09      	ldr	r3, [pc, #36]	@ (800839c <cleanup_stdio+0x38>)
 8008378:	4299      	cmp	r1, r3
 800837a:	d002      	beq.n	8008382 <cleanup_stdio+0x1e>
 800837c:	4620      	mov	r0, r4
 800837e:	f002 f98f 	bl	800a6a0 <_fflush_r>
 8008382:	68e1      	ldr	r1, [r4, #12]
 8008384:	4b06      	ldr	r3, [pc, #24]	@ (80083a0 <cleanup_stdio+0x3c>)
 8008386:	4299      	cmp	r1, r3
 8008388:	d004      	beq.n	8008394 <cleanup_stdio+0x30>
 800838a:	4620      	mov	r0, r4
 800838c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008390:	f002 b986 	b.w	800a6a0 <_fflush_r>
 8008394:	bd10      	pop	{r4, pc}
 8008396:	bf00      	nop
 8008398:	20001bb8 	.word	0x20001bb8
 800839c:	20001c20 	.word	0x20001c20
 80083a0:	20001c88 	.word	0x20001c88

080083a4 <global_stdio_init.part.0>:
 80083a4:	b510      	push	{r4, lr}
 80083a6:	4b0b      	ldr	r3, [pc, #44]	@ (80083d4 <global_stdio_init.part.0+0x30>)
 80083a8:	4c0b      	ldr	r4, [pc, #44]	@ (80083d8 <global_stdio_init.part.0+0x34>)
 80083aa:	4a0c      	ldr	r2, [pc, #48]	@ (80083dc <global_stdio_init.part.0+0x38>)
 80083ac:	4620      	mov	r0, r4
 80083ae:	601a      	str	r2, [r3, #0]
 80083b0:	2104      	movs	r1, #4
 80083b2:	2200      	movs	r2, #0
 80083b4:	f7ff ff94 	bl	80082e0 <std>
 80083b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80083bc:	2201      	movs	r2, #1
 80083be:	2109      	movs	r1, #9
 80083c0:	f7ff ff8e 	bl	80082e0 <std>
 80083c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80083c8:	2202      	movs	r2, #2
 80083ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80083ce:	2112      	movs	r1, #18
 80083d0:	f7ff bf86 	b.w	80082e0 <std>
 80083d4:	20001cf0 	.word	0x20001cf0
 80083d8:	20001bb8 	.word	0x20001bb8
 80083dc:	0800834d 	.word	0x0800834d

080083e0 <__sfp_lock_acquire>:
 80083e0:	4801      	ldr	r0, [pc, #4]	@ (80083e8 <__sfp_lock_acquire+0x8>)
 80083e2:	f000 b982 	b.w	80086ea <__retarget_lock_acquire_recursive>
 80083e6:	bf00      	nop
 80083e8:	20001cf9 	.word	0x20001cf9

080083ec <__sfp_lock_release>:
 80083ec:	4801      	ldr	r0, [pc, #4]	@ (80083f4 <__sfp_lock_release+0x8>)
 80083ee:	f000 b97d 	b.w	80086ec <__retarget_lock_release_recursive>
 80083f2:	bf00      	nop
 80083f4:	20001cf9 	.word	0x20001cf9

080083f8 <__sinit>:
 80083f8:	b510      	push	{r4, lr}
 80083fa:	4604      	mov	r4, r0
 80083fc:	f7ff fff0 	bl	80083e0 <__sfp_lock_acquire>
 8008400:	6a23      	ldr	r3, [r4, #32]
 8008402:	b11b      	cbz	r3, 800840c <__sinit+0x14>
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f7ff bff0 	b.w	80083ec <__sfp_lock_release>
 800840c:	4b04      	ldr	r3, [pc, #16]	@ (8008420 <__sinit+0x28>)
 800840e:	6223      	str	r3, [r4, #32]
 8008410:	4b04      	ldr	r3, [pc, #16]	@ (8008424 <__sinit+0x2c>)
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	2b00      	cmp	r3, #0
 8008416:	d1f5      	bne.n	8008404 <__sinit+0xc>
 8008418:	f7ff ffc4 	bl	80083a4 <global_stdio_init.part.0>
 800841c:	e7f2      	b.n	8008404 <__sinit+0xc>
 800841e:	bf00      	nop
 8008420:	08008365 	.word	0x08008365
 8008424:	20001cf0 	.word	0x20001cf0

08008428 <_fwalk_sglue>:
 8008428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800842c:	4607      	mov	r7, r0
 800842e:	4688      	mov	r8, r1
 8008430:	4614      	mov	r4, r2
 8008432:	2600      	movs	r6, #0
 8008434:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008438:	f1b9 0901 	subs.w	r9, r9, #1
 800843c:	d505      	bpl.n	800844a <_fwalk_sglue+0x22>
 800843e:	6824      	ldr	r4, [r4, #0]
 8008440:	2c00      	cmp	r4, #0
 8008442:	d1f7      	bne.n	8008434 <_fwalk_sglue+0xc>
 8008444:	4630      	mov	r0, r6
 8008446:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800844a:	89ab      	ldrh	r3, [r5, #12]
 800844c:	2b01      	cmp	r3, #1
 800844e:	d907      	bls.n	8008460 <_fwalk_sglue+0x38>
 8008450:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008454:	3301      	adds	r3, #1
 8008456:	d003      	beq.n	8008460 <_fwalk_sglue+0x38>
 8008458:	4629      	mov	r1, r5
 800845a:	4638      	mov	r0, r7
 800845c:	47c0      	blx	r8
 800845e:	4306      	orrs	r6, r0
 8008460:	3568      	adds	r5, #104	@ 0x68
 8008462:	e7e9      	b.n	8008438 <_fwalk_sglue+0x10>

08008464 <sniprintf>:
 8008464:	b40c      	push	{r2, r3}
 8008466:	b530      	push	{r4, r5, lr}
 8008468:	4b17      	ldr	r3, [pc, #92]	@ (80084c8 <sniprintf+0x64>)
 800846a:	1e0c      	subs	r4, r1, #0
 800846c:	681d      	ldr	r5, [r3, #0]
 800846e:	b09d      	sub	sp, #116	@ 0x74
 8008470:	da08      	bge.n	8008484 <sniprintf+0x20>
 8008472:	238b      	movs	r3, #139	@ 0x8b
 8008474:	f04f 30ff 	mov.w	r0, #4294967295
 8008478:	602b      	str	r3, [r5, #0]
 800847a:	b01d      	add	sp, #116	@ 0x74
 800847c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008480:	b002      	add	sp, #8
 8008482:	4770      	bx	lr
 8008484:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008488:	f8ad 3014 	strh.w	r3, [sp, #20]
 800848c:	bf0c      	ite	eq
 800848e:	4623      	moveq	r3, r4
 8008490:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008494:	9304      	str	r3, [sp, #16]
 8008496:	9307      	str	r3, [sp, #28]
 8008498:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800849c:	9002      	str	r0, [sp, #8]
 800849e:	9006      	str	r0, [sp, #24]
 80084a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80084a4:	4628      	mov	r0, r5
 80084a6:	ab21      	add	r3, sp, #132	@ 0x84
 80084a8:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80084aa:	a902      	add	r1, sp, #8
 80084ac:	9301      	str	r3, [sp, #4]
 80084ae:	f001 fc65 	bl	8009d7c <_svfiprintf_r>
 80084b2:	1c43      	adds	r3, r0, #1
 80084b4:	bfbc      	itt	lt
 80084b6:	238b      	movlt	r3, #139	@ 0x8b
 80084b8:	602b      	strlt	r3, [r5, #0]
 80084ba:	2c00      	cmp	r4, #0
 80084bc:	d0dd      	beq.n	800847a <sniprintf+0x16>
 80084be:	2200      	movs	r2, #0
 80084c0:	9b02      	ldr	r3, [sp, #8]
 80084c2:	701a      	strb	r2, [r3, #0]
 80084c4:	e7d9      	b.n	800847a <sniprintf+0x16>
 80084c6:	bf00      	nop
 80084c8:	2000001c 	.word	0x2000001c

080084cc <siscanf>:
 80084cc:	b40e      	push	{r1, r2, r3}
 80084ce:	f44f 7201 	mov.w	r2, #516	@ 0x204
 80084d2:	b530      	push	{r4, r5, lr}
 80084d4:	b09c      	sub	sp, #112	@ 0x70
 80084d6:	ac1f      	add	r4, sp, #124	@ 0x7c
 80084d8:	f854 5b04 	ldr.w	r5, [r4], #4
 80084dc:	f8ad 2014 	strh.w	r2, [sp, #20]
 80084e0:	9002      	str	r0, [sp, #8]
 80084e2:	9006      	str	r0, [sp, #24]
 80084e4:	f7f7 fe3e 	bl	8000164 <strlen>
 80084e8:	4b0b      	ldr	r3, [pc, #44]	@ (8008518 <siscanf+0x4c>)
 80084ea:	9003      	str	r0, [sp, #12]
 80084ec:	930b      	str	r3, [sp, #44]	@ 0x2c
 80084ee:	2300      	movs	r3, #0
 80084f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80084f2:	9314      	str	r3, [sp, #80]	@ 0x50
 80084f4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80084f8:	9007      	str	r0, [sp, #28]
 80084fa:	4808      	ldr	r0, [pc, #32]	@ (800851c <siscanf+0x50>)
 80084fc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008500:	462a      	mov	r2, r5
 8008502:	4623      	mov	r3, r4
 8008504:	a902      	add	r1, sp, #8
 8008506:	6800      	ldr	r0, [r0, #0]
 8008508:	9401      	str	r4, [sp, #4]
 800850a:	f001 fd8b 	bl	800a024 <__ssvfiscanf_r>
 800850e:	b01c      	add	sp, #112	@ 0x70
 8008510:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008514:	b003      	add	sp, #12
 8008516:	4770      	bx	lr
 8008518:	08008543 	.word	0x08008543
 800851c:	2000001c 	.word	0x2000001c

08008520 <__sread>:
 8008520:	b510      	push	{r4, lr}
 8008522:	460c      	mov	r4, r1
 8008524:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008528:	f000 f890 	bl	800864c <_read_r>
 800852c:	2800      	cmp	r0, #0
 800852e:	bfab      	itete	ge
 8008530:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008532:	89a3      	ldrhlt	r3, [r4, #12]
 8008534:	181b      	addge	r3, r3, r0
 8008536:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800853a:	bfac      	ite	ge
 800853c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800853e:	81a3      	strhlt	r3, [r4, #12]
 8008540:	bd10      	pop	{r4, pc}

08008542 <__seofread>:
 8008542:	2000      	movs	r0, #0
 8008544:	4770      	bx	lr

08008546 <__swrite>:
 8008546:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800854a:	461f      	mov	r7, r3
 800854c:	898b      	ldrh	r3, [r1, #12]
 800854e:	4605      	mov	r5, r0
 8008550:	05db      	lsls	r3, r3, #23
 8008552:	460c      	mov	r4, r1
 8008554:	4616      	mov	r6, r2
 8008556:	d505      	bpl.n	8008564 <__swrite+0x1e>
 8008558:	2302      	movs	r3, #2
 800855a:	2200      	movs	r2, #0
 800855c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008560:	f000 f862 	bl	8008628 <_lseek_r>
 8008564:	89a3      	ldrh	r3, [r4, #12]
 8008566:	4632      	mov	r2, r6
 8008568:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800856c:	81a3      	strh	r3, [r4, #12]
 800856e:	4628      	mov	r0, r5
 8008570:	463b      	mov	r3, r7
 8008572:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008576:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800857a:	f000 b879 	b.w	8008670 <_write_r>

0800857e <__sseek>:
 800857e:	b510      	push	{r4, lr}
 8008580:	460c      	mov	r4, r1
 8008582:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008586:	f000 f84f 	bl	8008628 <_lseek_r>
 800858a:	1c43      	adds	r3, r0, #1
 800858c:	89a3      	ldrh	r3, [r4, #12]
 800858e:	bf15      	itete	ne
 8008590:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008592:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008596:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800859a:	81a3      	strheq	r3, [r4, #12]
 800859c:	bf18      	it	ne
 800859e:	81a3      	strhne	r3, [r4, #12]
 80085a0:	bd10      	pop	{r4, pc}

080085a2 <__sclose>:
 80085a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085a6:	f000 b82f 	b.w	8008608 <_close_r>

080085aa <memset>:
 80085aa:	4603      	mov	r3, r0
 80085ac:	4402      	add	r2, r0
 80085ae:	4293      	cmp	r3, r2
 80085b0:	d100      	bne.n	80085b4 <memset+0xa>
 80085b2:	4770      	bx	lr
 80085b4:	f803 1b01 	strb.w	r1, [r3], #1
 80085b8:	e7f9      	b.n	80085ae <memset+0x4>

080085ba <strcspn>:
 80085ba:	4603      	mov	r3, r0
 80085bc:	b570      	push	{r4, r5, r6, lr}
 80085be:	461e      	mov	r6, r3
 80085c0:	f813 4b01 	ldrb.w	r4, [r3], #1
 80085c4:	b144      	cbz	r4, 80085d8 <strcspn+0x1e>
 80085c6:	1e4a      	subs	r2, r1, #1
 80085c8:	e001      	b.n	80085ce <strcspn+0x14>
 80085ca:	42a5      	cmp	r5, r4
 80085cc:	d004      	beq.n	80085d8 <strcspn+0x1e>
 80085ce:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 80085d2:	2d00      	cmp	r5, #0
 80085d4:	d1f9      	bne.n	80085ca <strcspn+0x10>
 80085d6:	e7f2      	b.n	80085be <strcspn+0x4>
 80085d8:	1a30      	subs	r0, r6, r0
 80085da:	bd70      	pop	{r4, r5, r6, pc}

080085dc <strncmp>:
 80085dc:	b510      	push	{r4, lr}
 80085de:	b16a      	cbz	r2, 80085fc <strncmp+0x20>
 80085e0:	3901      	subs	r1, #1
 80085e2:	1884      	adds	r4, r0, r2
 80085e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80085e8:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80085ec:	429a      	cmp	r2, r3
 80085ee:	d103      	bne.n	80085f8 <strncmp+0x1c>
 80085f0:	42a0      	cmp	r0, r4
 80085f2:	d001      	beq.n	80085f8 <strncmp+0x1c>
 80085f4:	2a00      	cmp	r2, #0
 80085f6:	d1f5      	bne.n	80085e4 <strncmp+0x8>
 80085f8:	1ad0      	subs	r0, r2, r3
 80085fa:	bd10      	pop	{r4, pc}
 80085fc:	4610      	mov	r0, r2
 80085fe:	e7fc      	b.n	80085fa <strncmp+0x1e>

08008600 <_localeconv_r>:
 8008600:	4800      	ldr	r0, [pc, #0]	@ (8008604 <_localeconv_r+0x4>)
 8008602:	4770      	bx	lr
 8008604:	2000015c 	.word	0x2000015c

08008608 <_close_r>:
 8008608:	b538      	push	{r3, r4, r5, lr}
 800860a:	2300      	movs	r3, #0
 800860c:	4d05      	ldr	r5, [pc, #20]	@ (8008624 <_close_r+0x1c>)
 800860e:	4604      	mov	r4, r0
 8008610:	4608      	mov	r0, r1
 8008612:	602b      	str	r3, [r5, #0]
 8008614:	f7f9 fa51 	bl	8001aba <_close>
 8008618:	1c43      	adds	r3, r0, #1
 800861a:	d102      	bne.n	8008622 <_close_r+0x1a>
 800861c:	682b      	ldr	r3, [r5, #0]
 800861e:	b103      	cbz	r3, 8008622 <_close_r+0x1a>
 8008620:	6023      	str	r3, [r4, #0]
 8008622:	bd38      	pop	{r3, r4, r5, pc}
 8008624:	20001cf4 	.word	0x20001cf4

08008628 <_lseek_r>:
 8008628:	b538      	push	{r3, r4, r5, lr}
 800862a:	4604      	mov	r4, r0
 800862c:	4608      	mov	r0, r1
 800862e:	4611      	mov	r1, r2
 8008630:	2200      	movs	r2, #0
 8008632:	4d05      	ldr	r5, [pc, #20]	@ (8008648 <_lseek_r+0x20>)
 8008634:	602a      	str	r2, [r5, #0]
 8008636:	461a      	mov	r2, r3
 8008638:	f7f9 fa63 	bl	8001b02 <_lseek>
 800863c:	1c43      	adds	r3, r0, #1
 800863e:	d102      	bne.n	8008646 <_lseek_r+0x1e>
 8008640:	682b      	ldr	r3, [r5, #0]
 8008642:	b103      	cbz	r3, 8008646 <_lseek_r+0x1e>
 8008644:	6023      	str	r3, [r4, #0]
 8008646:	bd38      	pop	{r3, r4, r5, pc}
 8008648:	20001cf4 	.word	0x20001cf4

0800864c <_read_r>:
 800864c:	b538      	push	{r3, r4, r5, lr}
 800864e:	4604      	mov	r4, r0
 8008650:	4608      	mov	r0, r1
 8008652:	4611      	mov	r1, r2
 8008654:	2200      	movs	r2, #0
 8008656:	4d05      	ldr	r5, [pc, #20]	@ (800866c <_read_r+0x20>)
 8008658:	602a      	str	r2, [r5, #0]
 800865a:	461a      	mov	r2, r3
 800865c:	f7f9 f9f4 	bl	8001a48 <_read>
 8008660:	1c43      	adds	r3, r0, #1
 8008662:	d102      	bne.n	800866a <_read_r+0x1e>
 8008664:	682b      	ldr	r3, [r5, #0]
 8008666:	b103      	cbz	r3, 800866a <_read_r+0x1e>
 8008668:	6023      	str	r3, [r4, #0]
 800866a:	bd38      	pop	{r3, r4, r5, pc}
 800866c:	20001cf4 	.word	0x20001cf4

08008670 <_write_r>:
 8008670:	b538      	push	{r3, r4, r5, lr}
 8008672:	4604      	mov	r4, r0
 8008674:	4608      	mov	r0, r1
 8008676:	4611      	mov	r1, r2
 8008678:	2200      	movs	r2, #0
 800867a:	4d05      	ldr	r5, [pc, #20]	@ (8008690 <_write_r+0x20>)
 800867c:	602a      	str	r2, [r5, #0]
 800867e:	461a      	mov	r2, r3
 8008680:	f7f9 f9ff 	bl	8001a82 <_write>
 8008684:	1c43      	adds	r3, r0, #1
 8008686:	d102      	bne.n	800868e <_write_r+0x1e>
 8008688:	682b      	ldr	r3, [r5, #0]
 800868a:	b103      	cbz	r3, 800868e <_write_r+0x1e>
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	bd38      	pop	{r3, r4, r5, pc}
 8008690:	20001cf4 	.word	0x20001cf4

08008694 <__errno>:
 8008694:	4b01      	ldr	r3, [pc, #4]	@ (800869c <__errno+0x8>)
 8008696:	6818      	ldr	r0, [r3, #0]
 8008698:	4770      	bx	lr
 800869a:	bf00      	nop
 800869c:	2000001c 	.word	0x2000001c

080086a0 <__libc_init_array>:
 80086a0:	b570      	push	{r4, r5, r6, lr}
 80086a2:	2600      	movs	r6, #0
 80086a4:	4d0c      	ldr	r5, [pc, #48]	@ (80086d8 <__libc_init_array+0x38>)
 80086a6:	4c0d      	ldr	r4, [pc, #52]	@ (80086dc <__libc_init_array+0x3c>)
 80086a8:	1b64      	subs	r4, r4, r5
 80086aa:	10a4      	asrs	r4, r4, #2
 80086ac:	42a6      	cmp	r6, r4
 80086ae:	d109      	bne.n	80086c4 <__libc_init_array+0x24>
 80086b0:	f002 fce2 	bl	800b078 <_init>
 80086b4:	2600      	movs	r6, #0
 80086b6:	4d0a      	ldr	r5, [pc, #40]	@ (80086e0 <__libc_init_array+0x40>)
 80086b8:	4c0a      	ldr	r4, [pc, #40]	@ (80086e4 <__libc_init_array+0x44>)
 80086ba:	1b64      	subs	r4, r4, r5
 80086bc:	10a4      	asrs	r4, r4, #2
 80086be:	42a6      	cmp	r6, r4
 80086c0:	d105      	bne.n	80086ce <__libc_init_array+0x2e>
 80086c2:	bd70      	pop	{r4, r5, r6, pc}
 80086c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80086c8:	4798      	blx	r3
 80086ca:	3601      	adds	r6, #1
 80086cc:	e7ee      	b.n	80086ac <__libc_init_array+0xc>
 80086ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80086d2:	4798      	blx	r3
 80086d4:	3601      	adds	r6, #1
 80086d6:	e7f2      	b.n	80086be <__libc_init_array+0x1e>
 80086d8:	0800b614 	.word	0x0800b614
 80086dc:	0800b614 	.word	0x0800b614
 80086e0:	0800b614 	.word	0x0800b614
 80086e4:	0800b61c 	.word	0x0800b61c

080086e8 <__retarget_lock_init_recursive>:
 80086e8:	4770      	bx	lr

080086ea <__retarget_lock_acquire_recursive>:
 80086ea:	4770      	bx	lr

080086ec <__retarget_lock_release_recursive>:
 80086ec:	4770      	bx	lr

080086ee <memchr>:
 80086ee:	4603      	mov	r3, r0
 80086f0:	b510      	push	{r4, lr}
 80086f2:	b2c9      	uxtb	r1, r1
 80086f4:	4402      	add	r2, r0
 80086f6:	4293      	cmp	r3, r2
 80086f8:	4618      	mov	r0, r3
 80086fa:	d101      	bne.n	8008700 <memchr+0x12>
 80086fc:	2000      	movs	r0, #0
 80086fe:	e003      	b.n	8008708 <memchr+0x1a>
 8008700:	7804      	ldrb	r4, [r0, #0]
 8008702:	3301      	adds	r3, #1
 8008704:	428c      	cmp	r4, r1
 8008706:	d1f6      	bne.n	80086f6 <memchr+0x8>
 8008708:	bd10      	pop	{r4, pc}

0800870a <memcpy>:
 800870a:	440a      	add	r2, r1
 800870c:	4291      	cmp	r1, r2
 800870e:	f100 33ff 	add.w	r3, r0, #4294967295
 8008712:	d100      	bne.n	8008716 <memcpy+0xc>
 8008714:	4770      	bx	lr
 8008716:	b510      	push	{r4, lr}
 8008718:	f811 4b01 	ldrb.w	r4, [r1], #1
 800871c:	4291      	cmp	r1, r2
 800871e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008722:	d1f9      	bne.n	8008718 <memcpy+0xe>
 8008724:	bd10      	pop	{r4, pc}

08008726 <quorem>:
 8008726:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872a:	6903      	ldr	r3, [r0, #16]
 800872c:	690c      	ldr	r4, [r1, #16]
 800872e:	4607      	mov	r7, r0
 8008730:	42a3      	cmp	r3, r4
 8008732:	db7e      	blt.n	8008832 <quorem+0x10c>
 8008734:	3c01      	subs	r4, #1
 8008736:	00a3      	lsls	r3, r4, #2
 8008738:	f100 0514 	add.w	r5, r0, #20
 800873c:	f101 0814 	add.w	r8, r1, #20
 8008740:	9300      	str	r3, [sp, #0]
 8008742:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008746:	9301      	str	r3, [sp, #4]
 8008748:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800874c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008750:	3301      	adds	r3, #1
 8008752:	429a      	cmp	r2, r3
 8008754:	fbb2 f6f3 	udiv	r6, r2, r3
 8008758:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800875c:	d32e      	bcc.n	80087bc <quorem+0x96>
 800875e:	f04f 0a00 	mov.w	sl, #0
 8008762:	46c4      	mov	ip, r8
 8008764:	46ae      	mov	lr, r5
 8008766:	46d3      	mov	fp, sl
 8008768:	f85c 3b04 	ldr.w	r3, [ip], #4
 800876c:	b298      	uxth	r0, r3
 800876e:	fb06 a000 	mla	r0, r6, r0, sl
 8008772:	0c1b      	lsrs	r3, r3, #16
 8008774:	0c02      	lsrs	r2, r0, #16
 8008776:	fb06 2303 	mla	r3, r6, r3, r2
 800877a:	f8de 2000 	ldr.w	r2, [lr]
 800877e:	b280      	uxth	r0, r0
 8008780:	b292      	uxth	r2, r2
 8008782:	1a12      	subs	r2, r2, r0
 8008784:	445a      	add	r2, fp
 8008786:	f8de 0000 	ldr.w	r0, [lr]
 800878a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800878e:	b29b      	uxth	r3, r3
 8008790:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008794:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008798:	b292      	uxth	r2, r2
 800879a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800879e:	45e1      	cmp	r9, ip
 80087a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80087a4:	f84e 2b04 	str.w	r2, [lr], #4
 80087a8:	d2de      	bcs.n	8008768 <quorem+0x42>
 80087aa:	9b00      	ldr	r3, [sp, #0]
 80087ac:	58eb      	ldr	r3, [r5, r3]
 80087ae:	b92b      	cbnz	r3, 80087bc <quorem+0x96>
 80087b0:	9b01      	ldr	r3, [sp, #4]
 80087b2:	3b04      	subs	r3, #4
 80087b4:	429d      	cmp	r5, r3
 80087b6:	461a      	mov	r2, r3
 80087b8:	d32f      	bcc.n	800881a <quorem+0xf4>
 80087ba:	613c      	str	r4, [r7, #16]
 80087bc:	4638      	mov	r0, r7
 80087be:	f001 f979 	bl	8009ab4 <__mcmp>
 80087c2:	2800      	cmp	r0, #0
 80087c4:	db25      	blt.n	8008812 <quorem+0xec>
 80087c6:	4629      	mov	r1, r5
 80087c8:	2000      	movs	r0, #0
 80087ca:	f858 2b04 	ldr.w	r2, [r8], #4
 80087ce:	f8d1 c000 	ldr.w	ip, [r1]
 80087d2:	fa1f fe82 	uxth.w	lr, r2
 80087d6:	fa1f f38c 	uxth.w	r3, ip
 80087da:	eba3 030e 	sub.w	r3, r3, lr
 80087de:	4403      	add	r3, r0
 80087e0:	0c12      	lsrs	r2, r2, #16
 80087e2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80087e6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80087ea:	b29b      	uxth	r3, r3
 80087ec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80087f0:	45c1      	cmp	r9, r8
 80087f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80087f6:	f841 3b04 	str.w	r3, [r1], #4
 80087fa:	d2e6      	bcs.n	80087ca <quorem+0xa4>
 80087fc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008800:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008804:	b922      	cbnz	r2, 8008810 <quorem+0xea>
 8008806:	3b04      	subs	r3, #4
 8008808:	429d      	cmp	r5, r3
 800880a:	461a      	mov	r2, r3
 800880c:	d30b      	bcc.n	8008826 <quorem+0x100>
 800880e:	613c      	str	r4, [r7, #16]
 8008810:	3601      	adds	r6, #1
 8008812:	4630      	mov	r0, r6
 8008814:	b003      	add	sp, #12
 8008816:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800881a:	6812      	ldr	r2, [r2, #0]
 800881c:	3b04      	subs	r3, #4
 800881e:	2a00      	cmp	r2, #0
 8008820:	d1cb      	bne.n	80087ba <quorem+0x94>
 8008822:	3c01      	subs	r4, #1
 8008824:	e7c6      	b.n	80087b4 <quorem+0x8e>
 8008826:	6812      	ldr	r2, [r2, #0]
 8008828:	3b04      	subs	r3, #4
 800882a:	2a00      	cmp	r2, #0
 800882c:	d1ef      	bne.n	800880e <quorem+0xe8>
 800882e:	3c01      	subs	r4, #1
 8008830:	e7ea      	b.n	8008808 <quorem+0xe2>
 8008832:	2000      	movs	r0, #0
 8008834:	e7ee      	b.n	8008814 <quorem+0xee>
	...

08008838 <_dtoa_r>:
 8008838:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800883c:	4614      	mov	r4, r2
 800883e:	461d      	mov	r5, r3
 8008840:	69c7      	ldr	r7, [r0, #28]
 8008842:	b097      	sub	sp, #92	@ 0x5c
 8008844:	4683      	mov	fp, r0
 8008846:	e9cd 4502 	strd	r4, r5, [sp, #8]
 800884a:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 800884c:	b97f      	cbnz	r7, 800886e <_dtoa_r+0x36>
 800884e:	2010      	movs	r0, #16
 8008850:	f000 fe02 	bl	8009458 <malloc>
 8008854:	4602      	mov	r2, r0
 8008856:	f8cb 001c 	str.w	r0, [fp, #28]
 800885a:	b920      	cbnz	r0, 8008866 <_dtoa_r+0x2e>
 800885c:	21ef      	movs	r1, #239	@ 0xef
 800885e:	4ba8      	ldr	r3, [pc, #672]	@ (8008b00 <_dtoa_r+0x2c8>)
 8008860:	48a8      	ldr	r0, [pc, #672]	@ (8008b04 <_dtoa_r+0x2cc>)
 8008862:	f001 ffe1 	bl	800a828 <__assert_func>
 8008866:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800886a:	6007      	str	r7, [r0, #0]
 800886c:	60c7      	str	r7, [r0, #12]
 800886e:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008872:	6819      	ldr	r1, [r3, #0]
 8008874:	b159      	cbz	r1, 800888e <_dtoa_r+0x56>
 8008876:	685a      	ldr	r2, [r3, #4]
 8008878:	2301      	movs	r3, #1
 800887a:	4093      	lsls	r3, r2
 800887c:	604a      	str	r2, [r1, #4]
 800887e:	608b      	str	r3, [r1, #8]
 8008880:	4658      	mov	r0, fp
 8008882:	f000 fedf 	bl	8009644 <_Bfree>
 8008886:	2200      	movs	r2, #0
 8008888:	f8db 301c 	ldr.w	r3, [fp, #28]
 800888c:	601a      	str	r2, [r3, #0]
 800888e:	1e2b      	subs	r3, r5, #0
 8008890:	bfaf      	iteee	ge
 8008892:	2300      	movge	r3, #0
 8008894:	2201      	movlt	r2, #1
 8008896:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800889a:	9303      	strlt	r3, [sp, #12]
 800889c:	bfa8      	it	ge
 800889e:	6033      	strge	r3, [r6, #0]
 80088a0:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80088a4:	4b98      	ldr	r3, [pc, #608]	@ (8008b08 <_dtoa_r+0x2d0>)
 80088a6:	bfb8      	it	lt
 80088a8:	6032      	strlt	r2, [r6, #0]
 80088aa:	ea33 0308 	bics.w	r3, r3, r8
 80088ae:	d112      	bne.n	80088d6 <_dtoa_r+0x9e>
 80088b0:	f242 730f 	movw	r3, #9999	@ 0x270f
 80088b4:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80088b6:	6013      	str	r3, [r2, #0]
 80088b8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80088bc:	4323      	orrs	r3, r4
 80088be:	f000 8550 	beq.w	8009362 <_dtoa_r+0xb2a>
 80088c2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088c4:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008b0c <_dtoa_r+0x2d4>
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	f000 8552 	beq.w	8009372 <_dtoa_r+0xb3a>
 80088ce:	f10a 0303 	add.w	r3, sl, #3
 80088d2:	f000 bd4c 	b.w	800936e <_dtoa_r+0xb36>
 80088d6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80088da:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80088de:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088e2:	2200      	movs	r2, #0
 80088e4:	2300      	movs	r3, #0
 80088e6:	f7f8 f869 	bl	80009bc <__aeabi_dcmpeq>
 80088ea:	4607      	mov	r7, r0
 80088ec:	b158      	cbz	r0, 8008906 <_dtoa_r+0xce>
 80088ee:	2301      	movs	r3, #1
 80088f0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80088f2:	6013      	str	r3, [r2, #0]
 80088f4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80088f6:	b113      	cbz	r3, 80088fe <_dtoa_r+0xc6>
 80088f8:	4b85      	ldr	r3, [pc, #532]	@ (8008b10 <_dtoa_r+0x2d8>)
 80088fa:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80088fc:	6013      	str	r3, [r2, #0]
 80088fe:	f8df a214 	ldr.w	sl, [pc, #532]	@ 8008b14 <_dtoa_r+0x2dc>
 8008902:	f000 bd36 	b.w	8009372 <_dtoa_r+0xb3a>
 8008906:	ab14      	add	r3, sp, #80	@ 0x50
 8008908:	9301      	str	r3, [sp, #4]
 800890a:	ab15      	add	r3, sp, #84	@ 0x54
 800890c:	9300      	str	r3, [sp, #0]
 800890e:	4658      	mov	r0, fp
 8008910:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8008914:	f001 f97e 	bl	8009c14 <__d2b>
 8008918:	f3c8 560a 	ubfx	r6, r8, #20, #11
 800891c:	4681      	mov	r9, r0
 800891e:	2e00      	cmp	r6, #0
 8008920:	d077      	beq.n	8008a12 <_dtoa_r+0x1da>
 8008922:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008926:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008928:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800892c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008930:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8008934:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008938:	9712      	str	r7, [sp, #72]	@ 0x48
 800893a:	4619      	mov	r1, r3
 800893c:	2200      	movs	r2, #0
 800893e:	4b76      	ldr	r3, [pc, #472]	@ (8008b18 <_dtoa_r+0x2e0>)
 8008940:	f7f7 fc1c 	bl	800017c <__aeabi_dsub>
 8008944:	a368      	add	r3, pc, #416	@ (adr r3, 8008ae8 <_dtoa_r+0x2b0>)
 8008946:	e9d3 2300 	ldrd	r2, r3, [r3]
 800894a:	f7f7 fdcf 	bl	80004ec <__aeabi_dmul>
 800894e:	a368      	add	r3, pc, #416	@ (adr r3, 8008af0 <_dtoa_r+0x2b8>)
 8008950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008954:	f7f7 fc14 	bl	8000180 <__adddf3>
 8008958:	4604      	mov	r4, r0
 800895a:	4630      	mov	r0, r6
 800895c:	460d      	mov	r5, r1
 800895e:	f7f7 fd5b 	bl	8000418 <__aeabi_i2d>
 8008962:	a365      	add	r3, pc, #404	@ (adr r3, 8008af8 <_dtoa_r+0x2c0>)
 8008964:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008968:	f7f7 fdc0 	bl	80004ec <__aeabi_dmul>
 800896c:	4602      	mov	r2, r0
 800896e:	460b      	mov	r3, r1
 8008970:	4620      	mov	r0, r4
 8008972:	4629      	mov	r1, r5
 8008974:	f7f7 fc04 	bl	8000180 <__adddf3>
 8008978:	4604      	mov	r4, r0
 800897a:	460d      	mov	r5, r1
 800897c:	f7f8 f866 	bl	8000a4c <__aeabi_d2iz>
 8008980:	2200      	movs	r2, #0
 8008982:	4607      	mov	r7, r0
 8008984:	2300      	movs	r3, #0
 8008986:	4620      	mov	r0, r4
 8008988:	4629      	mov	r1, r5
 800898a:	f7f8 f821 	bl	80009d0 <__aeabi_dcmplt>
 800898e:	b140      	cbz	r0, 80089a2 <_dtoa_r+0x16a>
 8008990:	4638      	mov	r0, r7
 8008992:	f7f7 fd41 	bl	8000418 <__aeabi_i2d>
 8008996:	4622      	mov	r2, r4
 8008998:	462b      	mov	r3, r5
 800899a:	f7f8 f80f 	bl	80009bc <__aeabi_dcmpeq>
 800899e:	b900      	cbnz	r0, 80089a2 <_dtoa_r+0x16a>
 80089a0:	3f01      	subs	r7, #1
 80089a2:	2f16      	cmp	r7, #22
 80089a4:	d853      	bhi.n	8008a4e <_dtoa_r+0x216>
 80089a6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80089aa:	4b5c      	ldr	r3, [pc, #368]	@ (8008b1c <_dtoa_r+0x2e4>)
 80089ac:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80089b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80089b4:	f7f8 f80c 	bl	80009d0 <__aeabi_dcmplt>
 80089b8:	2800      	cmp	r0, #0
 80089ba:	d04a      	beq.n	8008a52 <_dtoa_r+0x21a>
 80089bc:	2300      	movs	r3, #0
 80089be:	3f01      	subs	r7, #1
 80089c0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80089c2:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80089c4:	1b9b      	subs	r3, r3, r6
 80089c6:	1e5a      	subs	r2, r3, #1
 80089c8:	bf46      	itte	mi
 80089ca:	f1c3 0801 	rsbmi	r8, r3, #1
 80089ce:	2300      	movmi	r3, #0
 80089d0:	f04f 0800 	movpl.w	r8, #0
 80089d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80089d6:	bf48      	it	mi
 80089d8:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80089da:	2f00      	cmp	r7, #0
 80089dc:	db3b      	blt.n	8008a56 <_dtoa_r+0x21e>
 80089de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089e0:	970e      	str	r7, [sp, #56]	@ 0x38
 80089e2:	443b      	add	r3, r7
 80089e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80089e6:	2300      	movs	r3, #0
 80089e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80089ea:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089ec:	2b09      	cmp	r3, #9
 80089ee:	d866      	bhi.n	8008abe <_dtoa_r+0x286>
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	bfc4      	itt	gt
 80089f4:	3b04      	subgt	r3, #4
 80089f6:	9320      	strgt	r3, [sp, #128]	@ 0x80
 80089f8:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80089fa:	bfc8      	it	gt
 80089fc:	2400      	movgt	r4, #0
 80089fe:	f1a3 0302 	sub.w	r3, r3, #2
 8008a02:	bfd8      	it	le
 8008a04:	2401      	movle	r4, #1
 8008a06:	2b03      	cmp	r3, #3
 8008a08:	d864      	bhi.n	8008ad4 <_dtoa_r+0x29c>
 8008a0a:	e8df f003 	tbb	[pc, r3]
 8008a0e:	382b      	.short	0x382b
 8008a10:	5636      	.short	0x5636
 8008a12:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008a16:	441e      	add	r6, r3
 8008a18:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008a1c:	2b20      	cmp	r3, #32
 8008a1e:	bfc1      	itttt	gt
 8008a20:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8008a24:	fa08 f803 	lslgt.w	r8, r8, r3
 8008a28:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008a2c:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008a30:	bfd6      	itet	le
 8008a32:	f1c3 0320 	rsble	r3, r3, #32
 8008a36:	ea48 0003 	orrgt.w	r0, r8, r3
 8008a3a:	fa04 f003 	lslle.w	r0, r4, r3
 8008a3e:	f7f7 fcdb 	bl	80003f8 <__aeabi_ui2d>
 8008a42:	2201      	movs	r2, #1
 8008a44:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008a48:	3e01      	subs	r6, #1
 8008a4a:	9212      	str	r2, [sp, #72]	@ 0x48
 8008a4c:	e775      	b.n	800893a <_dtoa_r+0x102>
 8008a4e:	2301      	movs	r3, #1
 8008a50:	e7b6      	b.n	80089c0 <_dtoa_r+0x188>
 8008a52:	900f      	str	r0, [sp, #60]	@ 0x3c
 8008a54:	e7b5      	b.n	80089c2 <_dtoa_r+0x18a>
 8008a56:	427b      	negs	r3, r7
 8008a58:	930a      	str	r3, [sp, #40]	@ 0x28
 8008a5a:	2300      	movs	r3, #0
 8008a5c:	eba8 0807 	sub.w	r8, r8, r7
 8008a60:	930e      	str	r3, [sp, #56]	@ 0x38
 8008a62:	e7c2      	b.n	80089ea <_dtoa_r+0x1b2>
 8008a64:	2300      	movs	r3, #0
 8008a66:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a68:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	dc35      	bgt.n	8008ada <_dtoa_r+0x2a2>
 8008a6e:	2301      	movs	r3, #1
 8008a70:	461a      	mov	r2, r3
 8008a72:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008a76:	9221      	str	r2, [sp, #132]	@ 0x84
 8008a78:	e00b      	b.n	8008a92 <_dtoa_r+0x25a>
 8008a7a:	2301      	movs	r3, #1
 8008a7c:	e7f3      	b.n	8008a66 <_dtoa_r+0x22e>
 8008a7e:	2300      	movs	r3, #0
 8008a80:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008a82:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008a84:	18fb      	adds	r3, r7, r3
 8008a86:	9308      	str	r3, [sp, #32]
 8008a88:	3301      	adds	r3, #1
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	9307      	str	r3, [sp, #28]
 8008a8e:	bfb8      	it	lt
 8008a90:	2301      	movlt	r3, #1
 8008a92:	2100      	movs	r1, #0
 8008a94:	2204      	movs	r2, #4
 8008a96:	f8db 001c 	ldr.w	r0, [fp, #28]
 8008a9a:	f102 0514 	add.w	r5, r2, #20
 8008a9e:	429d      	cmp	r5, r3
 8008aa0:	d91f      	bls.n	8008ae2 <_dtoa_r+0x2aa>
 8008aa2:	6041      	str	r1, [r0, #4]
 8008aa4:	4658      	mov	r0, fp
 8008aa6:	f000 fd8d 	bl	80095c4 <_Balloc>
 8008aaa:	4682      	mov	sl, r0
 8008aac:	2800      	cmp	r0, #0
 8008aae:	d139      	bne.n	8008b24 <_dtoa_r+0x2ec>
 8008ab0:	4602      	mov	r2, r0
 8008ab2:	f240 11af 	movw	r1, #431	@ 0x1af
 8008ab6:	4b1a      	ldr	r3, [pc, #104]	@ (8008b20 <_dtoa_r+0x2e8>)
 8008ab8:	e6d2      	b.n	8008860 <_dtoa_r+0x28>
 8008aba:	2301      	movs	r3, #1
 8008abc:	e7e0      	b.n	8008a80 <_dtoa_r+0x248>
 8008abe:	2401      	movs	r4, #1
 8008ac0:	2300      	movs	r3, #0
 8008ac2:	940b      	str	r4, [sp, #44]	@ 0x2c
 8008ac4:	9320      	str	r3, [sp, #128]	@ 0x80
 8008ac6:	f04f 33ff 	mov.w	r3, #4294967295
 8008aca:	2200      	movs	r2, #0
 8008acc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008ad0:	2312      	movs	r3, #18
 8008ad2:	e7d0      	b.n	8008a76 <_dtoa_r+0x23e>
 8008ad4:	2301      	movs	r3, #1
 8008ad6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008ad8:	e7f5      	b.n	8008ac6 <_dtoa_r+0x28e>
 8008ada:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008adc:	e9cd 3307 	strd	r3, r3, [sp, #28]
 8008ae0:	e7d7      	b.n	8008a92 <_dtoa_r+0x25a>
 8008ae2:	3101      	adds	r1, #1
 8008ae4:	0052      	lsls	r2, r2, #1
 8008ae6:	e7d8      	b.n	8008a9a <_dtoa_r+0x262>
 8008ae8:	636f4361 	.word	0x636f4361
 8008aec:	3fd287a7 	.word	0x3fd287a7
 8008af0:	8b60c8b3 	.word	0x8b60c8b3
 8008af4:	3fc68a28 	.word	0x3fc68a28
 8008af8:	509f79fb 	.word	0x509f79fb
 8008afc:	3fd34413 	.word	0x3fd34413
 8008b00:	0800b2c1 	.word	0x0800b2c1
 8008b04:	0800b2d8 	.word	0x0800b2d8
 8008b08:	7ff00000 	.word	0x7ff00000
 8008b0c:	0800b2bd 	.word	0x0800b2bd
 8008b10:	0800b4c0 	.word	0x0800b4c0
 8008b14:	0800b4bf 	.word	0x0800b4bf
 8008b18:	3ff80000 	.word	0x3ff80000
 8008b1c:	0800b3d0 	.word	0x0800b3d0
 8008b20:	0800b330 	.word	0x0800b330
 8008b24:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008b28:	6018      	str	r0, [r3, #0]
 8008b2a:	9b07      	ldr	r3, [sp, #28]
 8008b2c:	2b0e      	cmp	r3, #14
 8008b2e:	f200 80a4 	bhi.w	8008c7a <_dtoa_r+0x442>
 8008b32:	2c00      	cmp	r4, #0
 8008b34:	f000 80a1 	beq.w	8008c7a <_dtoa_r+0x442>
 8008b38:	2f00      	cmp	r7, #0
 8008b3a:	dd33      	ble.n	8008ba4 <_dtoa_r+0x36c>
 8008b3c:	4b86      	ldr	r3, [pc, #536]	@ (8008d58 <_dtoa_r+0x520>)
 8008b3e:	f007 020f 	and.w	r2, r7, #15
 8008b42:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008b46:	05f8      	lsls	r0, r7, #23
 8008b48:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008b4c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008b50:	ea4f 1427 	mov.w	r4, r7, asr #4
 8008b54:	d516      	bpl.n	8008b84 <_dtoa_r+0x34c>
 8008b56:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008b5a:	4b80      	ldr	r3, [pc, #512]	@ (8008d5c <_dtoa_r+0x524>)
 8008b5c:	2603      	movs	r6, #3
 8008b5e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8008b62:	f7f7 fded 	bl	8000740 <__aeabi_ddiv>
 8008b66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b6a:	f004 040f 	and.w	r4, r4, #15
 8008b6e:	4d7b      	ldr	r5, [pc, #492]	@ (8008d5c <_dtoa_r+0x524>)
 8008b70:	b954      	cbnz	r4, 8008b88 <_dtoa_r+0x350>
 8008b72:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008b76:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b7a:	f7f7 fde1 	bl	8000740 <__aeabi_ddiv>
 8008b7e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b82:	e028      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008b84:	2602      	movs	r6, #2
 8008b86:	e7f2      	b.n	8008b6e <_dtoa_r+0x336>
 8008b88:	07e1      	lsls	r1, r4, #31
 8008b8a:	d508      	bpl.n	8008b9e <_dtoa_r+0x366>
 8008b8c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008b90:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008b94:	f7f7 fcaa 	bl	80004ec <__aeabi_dmul>
 8008b98:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008b9c:	3601      	adds	r6, #1
 8008b9e:	1064      	asrs	r4, r4, #1
 8008ba0:	3508      	adds	r5, #8
 8008ba2:	e7e5      	b.n	8008b70 <_dtoa_r+0x338>
 8008ba4:	f000 80d2 	beq.w	8008d4c <_dtoa_r+0x514>
 8008ba8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008bac:	427c      	negs	r4, r7
 8008bae:	4b6a      	ldr	r3, [pc, #424]	@ (8008d58 <_dtoa_r+0x520>)
 8008bb0:	f004 020f 	and.w	r2, r4, #15
 8008bb4:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bbc:	f7f7 fc96 	bl	80004ec <__aeabi_dmul>
 8008bc0:	2602      	movs	r6, #2
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008bc8:	4d64      	ldr	r5, [pc, #400]	@ (8008d5c <_dtoa_r+0x524>)
 8008bca:	1124      	asrs	r4, r4, #4
 8008bcc:	2c00      	cmp	r4, #0
 8008bce:	f040 80b2 	bne.w	8008d36 <_dtoa_r+0x4fe>
 8008bd2:	2b00      	cmp	r3, #0
 8008bd4:	d1d3      	bne.n	8008b7e <_dtoa_r+0x346>
 8008bd6:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008bda:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	f000 80b7 	beq.w	8008d50 <_dtoa_r+0x518>
 8008be2:	2200      	movs	r2, #0
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	4b5d      	ldr	r3, [pc, #372]	@ (8008d60 <_dtoa_r+0x528>)
 8008bea:	f7f7 fef1 	bl	80009d0 <__aeabi_dcmplt>
 8008bee:	2800      	cmp	r0, #0
 8008bf0:	f000 80ae 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bf4:	9b07      	ldr	r3, [sp, #28]
 8008bf6:	2b00      	cmp	r3, #0
 8008bf8:	f000 80aa 	beq.w	8008d50 <_dtoa_r+0x518>
 8008bfc:	9b08      	ldr	r3, [sp, #32]
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	dd37      	ble.n	8008c72 <_dtoa_r+0x43a>
 8008c02:	1e7b      	subs	r3, r7, #1
 8008c04:	4620      	mov	r0, r4
 8008c06:	9304      	str	r3, [sp, #16]
 8008c08:	2200      	movs	r2, #0
 8008c0a:	4629      	mov	r1, r5
 8008c0c:	4b55      	ldr	r3, [pc, #340]	@ (8008d64 <_dtoa_r+0x52c>)
 8008c0e:	f7f7 fc6d 	bl	80004ec <__aeabi_dmul>
 8008c12:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008c16:	9c08      	ldr	r4, [sp, #32]
 8008c18:	3601      	adds	r6, #1
 8008c1a:	4630      	mov	r0, r6
 8008c1c:	f7f7 fbfc 	bl	8000418 <__aeabi_i2d>
 8008c20:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008c24:	f7f7 fc62 	bl	80004ec <__aeabi_dmul>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	4b4f      	ldr	r3, [pc, #316]	@ (8008d68 <_dtoa_r+0x530>)
 8008c2c:	f7f7 faa8 	bl	8000180 <__adddf3>
 8008c30:	4605      	mov	r5, r0
 8008c32:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8008c36:	2c00      	cmp	r4, #0
 8008c38:	f040 809a 	bne.w	8008d70 <_dtoa_r+0x538>
 8008c3c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c40:	2200      	movs	r2, #0
 8008c42:	4b4a      	ldr	r3, [pc, #296]	@ (8008d6c <_dtoa_r+0x534>)
 8008c44:	f7f7 fa9a 	bl	800017c <__aeabi_dsub>
 8008c48:	4602      	mov	r2, r0
 8008c4a:	460b      	mov	r3, r1
 8008c4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008c50:	462a      	mov	r2, r5
 8008c52:	4633      	mov	r3, r6
 8008c54:	f7f7 feda 	bl	8000a0c <__aeabi_dcmpgt>
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	f040 828e 	bne.w	800917a <_dtoa_r+0x942>
 8008c5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008c62:	462a      	mov	r2, r5
 8008c64:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008c68:	f7f7 feb2 	bl	80009d0 <__aeabi_dcmplt>
 8008c6c:	2800      	cmp	r0, #0
 8008c6e:	f040 8127 	bne.w	8008ec0 <_dtoa_r+0x688>
 8008c72:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8008c76:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008c7a:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	f2c0 8163 	blt.w	8008f48 <_dtoa_r+0x710>
 8008c82:	2f0e      	cmp	r7, #14
 8008c84:	f300 8160 	bgt.w	8008f48 <_dtoa_r+0x710>
 8008c88:	4b33      	ldr	r3, [pc, #204]	@ (8008d58 <_dtoa_r+0x520>)
 8008c8a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008c8e:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008c92:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008c96:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008c98:	2b00      	cmp	r3, #0
 8008c9a:	da03      	bge.n	8008ca4 <_dtoa_r+0x46c>
 8008c9c:	9b07      	ldr	r3, [sp, #28]
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	f340 8100 	ble.w	8008ea4 <_dtoa_r+0x66c>
 8008ca4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8008ca8:	4656      	mov	r6, sl
 8008caa:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cae:	4620      	mov	r0, r4
 8008cb0:	4629      	mov	r1, r5
 8008cb2:	f7f7 fd45 	bl	8000740 <__aeabi_ddiv>
 8008cb6:	f7f7 fec9 	bl	8000a4c <__aeabi_d2iz>
 8008cba:	4680      	mov	r8, r0
 8008cbc:	f7f7 fbac 	bl	8000418 <__aeabi_i2d>
 8008cc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cc4:	f7f7 fc12 	bl	80004ec <__aeabi_dmul>
 8008cc8:	4602      	mov	r2, r0
 8008cca:	460b      	mov	r3, r1
 8008ccc:	4620      	mov	r0, r4
 8008cce:	4629      	mov	r1, r5
 8008cd0:	f7f7 fa54 	bl	800017c <__aeabi_dsub>
 8008cd4:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8008cd8:	9d07      	ldr	r5, [sp, #28]
 8008cda:	f806 4b01 	strb.w	r4, [r6], #1
 8008cde:	eba6 040a 	sub.w	r4, r6, sl
 8008ce2:	42a5      	cmp	r5, r4
 8008ce4:	4602      	mov	r2, r0
 8008ce6:	460b      	mov	r3, r1
 8008ce8:	f040 8116 	bne.w	8008f18 <_dtoa_r+0x6e0>
 8008cec:	f7f7 fa48 	bl	8000180 <__adddf3>
 8008cf0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008cf4:	4604      	mov	r4, r0
 8008cf6:	460d      	mov	r5, r1
 8008cf8:	f7f7 fe88 	bl	8000a0c <__aeabi_dcmpgt>
 8008cfc:	2800      	cmp	r0, #0
 8008cfe:	f040 80f8 	bne.w	8008ef2 <_dtoa_r+0x6ba>
 8008d02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008d06:	4620      	mov	r0, r4
 8008d08:	4629      	mov	r1, r5
 8008d0a:	f7f7 fe57 	bl	80009bc <__aeabi_dcmpeq>
 8008d0e:	b118      	cbz	r0, 8008d18 <_dtoa_r+0x4e0>
 8008d10:	f018 0f01 	tst.w	r8, #1
 8008d14:	f040 80ed 	bne.w	8008ef2 <_dtoa_r+0x6ba>
 8008d18:	4649      	mov	r1, r9
 8008d1a:	4658      	mov	r0, fp
 8008d1c:	f000 fc92 	bl	8009644 <_Bfree>
 8008d20:	2300      	movs	r3, #0
 8008d22:	7033      	strb	r3, [r6, #0]
 8008d24:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008d26:	3701      	adds	r7, #1
 8008d28:	601f      	str	r7, [r3, #0]
 8008d2a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	f000 8320 	beq.w	8009372 <_dtoa_r+0xb3a>
 8008d32:	601e      	str	r6, [r3, #0]
 8008d34:	e31d      	b.n	8009372 <_dtoa_r+0xb3a>
 8008d36:	07e2      	lsls	r2, r4, #31
 8008d38:	d505      	bpl.n	8008d46 <_dtoa_r+0x50e>
 8008d3a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008d3e:	f7f7 fbd5 	bl	80004ec <__aeabi_dmul>
 8008d42:	2301      	movs	r3, #1
 8008d44:	3601      	adds	r6, #1
 8008d46:	1064      	asrs	r4, r4, #1
 8008d48:	3508      	adds	r5, #8
 8008d4a:	e73f      	b.n	8008bcc <_dtoa_r+0x394>
 8008d4c:	2602      	movs	r6, #2
 8008d4e:	e742      	b.n	8008bd6 <_dtoa_r+0x39e>
 8008d50:	9c07      	ldr	r4, [sp, #28]
 8008d52:	9704      	str	r7, [sp, #16]
 8008d54:	e761      	b.n	8008c1a <_dtoa_r+0x3e2>
 8008d56:	bf00      	nop
 8008d58:	0800b3d0 	.word	0x0800b3d0
 8008d5c:	0800b3a8 	.word	0x0800b3a8
 8008d60:	3ff00000 	.word	0x3ff00000
 8008d64:	40240000 	.word	0x40240000
 8008d68:	401c0000 	.word	0x401c0000
 8008d6c:	40140000 	.word	0x40140000
 8008d70:	4b70      	ldr	r3, [pc, #448]	@ (8008f34 <_dtoa_r+0x6fc>)
 8008d72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008d74:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008d78:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008d7c:	4454      	add	r4, sl
 8008d7e:	2900      	cmp	r1, #0
 8008d80:	d045      	beq.n	8008e0e <_dtoa_r+0x5d6>
 8008d82:	2000      	movs	r0, #0
 8008d84:	496c      	ldr	r1, [pc, #432]	@ (8008f38 <_dtoa_r+0x700>)
 8008d86:	f7f7 fcdb 	bl	8000740 <__aeabi_ddiv>
 8008d8a:	4633      	mov	r3, r6
 8008d8c:	462a      	mov	r2, r5
 8008d8e:	f7f7 f9f5 	bl	800017c <__aeabi_dsub>
 8008d92:	4656      	mov	r6, sl
 8008d94:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008d98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008d9c:	f7f7 fe56 	bl	8000a4c <__aeabi_d2iz>
 8008da0:	4605      	mov	r5, r0
 8008da2:	f7f7 fb39 	bl	8000418 <__aeabi_i2d>
 8008da6:	4602      	mov	r2, r0
 8008da8:	460b      	mov	r3, r1
 8008daa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008dae:	f7f7 f9e5 	bl	800017c <__aeabi_dsub>
 8008db2:	4602      	mov	r2, r0
 8008db4:	460b      	mov	r3, r1
 8008db6:	3530      	adds	r5, #48	@ 0x30
 8008db8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008dbc:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008dc0:	f806 5b01 	strb.w	r5, [r6], #1
 8008dc4:	f7f7 fe04 	bl	80009d0 <__aeabi_dcmplt>
 8008dc8:	2800      	cmp	r0, #0
 8008dca:	d163      	bne.n	8008e94 <_dtoa_r+0x65c>
 8008dcc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008dd0:	2000      	movs	r0, #0
 8008dd2:	495a      	ldr	r1, [pc, #360]	@ (8008f3c <_dtoa_r+0x704>)
 8008dd4:	f7f7 f9d2 	bl	800017c <__aeabi_dsub>
 8008dd8:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ddc:	f7f7 fdf8 	bl	80009d0 <__aeabi_dcmplt>
 8008de0:	2800      	cmp	r0, #0
 8008de2:	f040 8087 	bne.w	8008ef4 <_dtoa_r+0x6bc>
 8008de6:	42a6      	cmp	r6, r4
 8008de8:	f43f af43 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008dec:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008df0:	2200      	movs	r2, #0
 8008df2:	4b53      	ldr	r3, [pc, #332]	@ (8008f40 <_dtoa_r+0x708>)
 8008df4:	f7f7 fb7a 	bl	80004ec <__aeabi_dmul>
 8008df8:	2200      	movs	r2, #0
 8008dfa:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e02:	4b4f      	ldr	r3, [pc, #316]	@ (8008f40 <_dtoa_r+0x708>)
 8008e04:	f7f7 fb72 	bl	80004ec <__aeabi_dmul>
 8008e08:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008e0c:	e7c4      	b.n	8008d98 <_dtoa_r+0x560>
 8008e0e:	4631      	mov	r1, r6
 8008e10:	4628      	mov	r0, r5
 8008e12:	f7f7 fb6b 	bl	80004ec <__aeabi_dmul>
 8008e16:	4656      	mov	r6, sl
 8008e18:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008e1c:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008e1e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e22:	f7f7 fe13 	bl	8000a4c <__aeabi_d2iz>
 8008e26:	4605      	mov	r5, r0
 8008e28:	f7f7 faf6 	bl	8000418 <__aeabi_i2d>
 8008e2c:	4602      	mov	r2, r0
 8008e2e:	460b      	mov	r3, r1
 8008e30:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e34:	f7f7 f9a2 	bl	800017c <__aeabi_dsub>
 8008e38:	4602      	mov	r2, r0
 8008e3a:	460b      	mov	r3, r1
 8008e3c:	3530      	adds	r5, #48	@ 0x30
 8008e3e:	f806 5b01 	strb.w	r5, [r6], #1
 8008e42:	42a6      	cmp	r6, r4
 8008e44:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008e48:	f04f 0200 	mov.w	r2, #0
 8008e4c:	d124      	bne.n	8008e98 <_dtoa_r+0x660>
 8008e4e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008e52:	4b39      	ldr	r3, [pc, #228]	@ (8008f38 <_dtoa_r+0x700>)
 8008e54:	f7f7 f994 	bl	8000180 <__adddf3>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	460b      	mov	r3, r1
 8008e5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e60:	f7f7 fdd4 	bl	8000a0c <__aeabi_dcmpgt>
 8008e64:	2800      	cmp	r0, #0
 8008e66:	d145      	bne.n	8008ef4 <_dtoa_r+0x6bc>
 8008e68:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008e6c:	2000      	movs	r0, #0
 8008e6e:	4932      	ldr	r1, [pc, #200]	@ (8008f38 <_dtoa_r+0x700>)
 8008e70:	f7f7 f984 	bl	800017c <__aeabi_dsub>
 8008e74:	4602      	mov	r2, r0
 8008e76:	460b      	mov	r3, r1
 8008e78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008e7c:	f7f7 fda8 	bl	80009d0 <__aeabi_dcmplt>
 8008e80:	2800      	cmp	r0, #0
 8008e82:	f43f aef6 	beq.w	8008c72 <_dtoa_r+0x43a>
 8008e86:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008e88:	1e73      	subs	r3, r6, #1
 8008e8a:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008e8c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008e90:	2b30      	cmp	r3, #48	@ 0x30
 8008e92:	d0f8      	beq.n	8008e86 <_dtoa_r+0x64e>
 8008e94:	9f04      	ldr	r7, [sp, #16]
 8008e96:	e73f      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008e98:	4b29      	ldr	r3, [pc, #164]	@ (8008f40 <_dtoa_r+0x708>)
 8008e9a:	f7f7 fb27 	bl	80004ec <__aeabi_dmul>
 8008e9e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008ea2:	e7bc      	b.n	8008e1e <_dtoa_r+0x5e6>
 8008ea4:	d10c      	bne.n	8008ec0 <_dtoa_r+0x688>
 8008ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	4b25      	ldr	r3, [pc, #148]	@ (8008f44 <_dtoa_r+0x70c>)
 8008eae:	f7f7 fb1d 	bl	80004ec <__aeabi_dmul>
 8008eb2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008eb6:	f7f7 fd9f 	bl	80009f8 <__aeabi_dcmpge>
 8008eba:	2800      	cmp	r0, #0
 8008ebc:	f000 815b 	beq.w	8009176 <_dtoa_r+0x93e>
 8008ec0:	2400      	movs	r4, #0
 8008ec2:	4625      	mov	r5, r4
 8008ec4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008ec6:	4656      	mov	r6, sl
 8008ec8:	43db      	mvns	r3, r3
 8008eca:	9304      	str	r3, [sp, #16]
 8008ecc:	2700      	movs	r7, #0
 8008ece:	4621      	mov	r1, r4
 8008ed0:	4658      	mov	r0, fp
 8008ed2:	f000 fbb7 	bl	8009644 <_Bfree>
 8008ed6:	2d00      	cmp	r5, #0
 8008ed8:	d0dc      	beq.n	8008e94 <_dtoa_r+0x65c>
 8008eda:	b12f      	cbz	r7, 8008ee8 <_dtoa_r+0x6b0>
 8008edc:	42af      	cmp	r7, r5
 8008ede:	d003      	beq.n	8008ee8 <_dtoa_r+0x6b0>
 8008ee0:	4639      	mov	r1, r7
 8008ee2:	4658      	mov	r0, fp
 8008ee4:	f000 fbae 	bl	8009644 <_Bfree>
 8008ee8:	4629      	mov	r1, r5
 8008eea:	4658      	mov	r0, fp
 8008eec:	f000 fbaa 	bl	8009644 <_Bfree>
 8008ef0:	e7d0      	b.n	8008e94 <_dtoa_r+0x65c>
 8008ef2:	9704      	str	r7, [sp, #16]
 8008ef4:	4633      	mov	r3, r6
 8008ef6:	461e      	mov	r6, r3
 8008ef8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008efc:	2a39      	cmp	r2, #57	@ 0x39
 8008efe:	d107      	bne.n	8008f10 <_dtoa_r+0x6d8>
 8008f00:	459a      	cmp	sl, r3
 8008f02:	d1f8      	bne.n	8008ef6 <_dtoa_r+0x6be>
 8008f04:	9a04      	ldr	r2, [sp, #16]
 8008f06:	3201      	adds	r2, #1
 8008f08:	9204      	str	r2, [sp, #16]
 8008f0a:	2230      	movs	r2, #48	@ 0x30
 8008f0c:	f88a 2000 	strb.w	r2, [sl]
 8008f10:	781a      	ldrb	r2, [r3, #0]
 8008f12:	3201      	adds	r2, #1
 8008f14:	701a      	strb	r2, [r3, #0]
 8008f16:	e7bd      	b.n	8008e94 <_dtoa_r+0x65c>
 8008f18:	2200      	movs	r2, #0
 8008f1a:	4b09      	ldr	r3, [pc, #36]	@ (8008f40 <_dtoa_r+0x708>)
 8008f1c:	f7f7 fae6 	bl	80004ec <__aeabi_dmul>
 8008f20:	2200      	movs	r2, #0
 8008f22:	2300      	movs	r3, #0
 8008f24:	4604      	mov	r4, r0
 8008f26:	460d      	mov	r5, r1
 8008f28:	f7f7 fd48 	bl	80009bc <__aeabi_dcmpeq>
 8008f2c:	2800      	cmp	r0, #0
 8008f2e:	f43f aebc 	beq.w	8008caa <_dtoa_r+0x472>
 8008f32:	e6f1      	b.n	8008d18 <_dtoa_r+0x4e0>
 8008f34:	0800b3d0 	.word	0x0800b3d0
 8008f38:	3fe00000 	.word	0x3fe00000
 8008f3c:	3ff00000 	.word	0x3ff00000
 8008f40:	40240000 	.word	0x40240000
 8008f44:	40140000 	.word	0x40140000
 8008f48:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008f4a:	2a00      	cmp	r2, #0
 8008f4c:	f000 80db 	beq.w	8009106 <_dtoa_r+0x8ce>
 8008f50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008f52:	2a01      	cmp	r2, #1
 8008f54:	f300 80bf 	bgt.w	80090d6 <_dtoa_r+0x89e>
 8008f58:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008f5a:	2a00      	cmp	r2, #0
 8008f5c:	f000 80b7 	beq.w	80090ce <_dtoa_r+0x896>
 8008f60:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008f64:	4646      	mov	r6, r8
 8008f66:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008f68:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f6a:	2101      	movs	r1, #1
 8008f6c:	441a      	add	r2, r3
 8008f6e:	4658      	mov	r0, fp
 8008f70:	4498      	add	r8, r3
 8008f72:	9209      	str	r2, [sp, #36]	@ 0x24
 8008f74:	f000 fc1a 	bl	80097ac <__i2b>
 8008f78:	4605      	mov	r5, r0
 8008f7a:	b15e      	cbz	r6, 8008f94 <_dtoa_r+0x75c>
 8008f7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	dd08      	ble.n	8008f94 <_dtoa_r+0x75c>
 8008f82:	42b3      	cmp	r3, r6
 8008f84:	bfa8      	it	ge
 8008f86:	4633      	movge	r3, r6
 8008f88:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008f8a:	eba8 0803 	sub.w	r8, r8, r3
 8008f8e:	1af6      	subs	r6, r6, r3
 8008f90:	1ad3      	subs	r3, r2, r3
 8008f92:	9309      	str	r3, [sp, #36]	@ 0x24
 8008f94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f96:	b1f3      	cbz	r3, 8008fd6 <_dtoa_r+0x79e>
 8008f98:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008f9a:	2b00      	cmp	r3, #0
 8008f9c:	f000 80b7 	beq.w	800910e <_dtoa_r+0x8d6>
 8008fa0:	b18c      	cbz	r4, 8008fc6 <_dtoa_r+0x78e>
 8008fa2:	4629      	mov	r1, r5
 8008fa4:	4622      	mov	r2, r4
 8008fa6:	4658      	mov	r0, fp
 8008fa8:	f000 fcbe 	bl	8009928 <__pow5mult>
 8008fac:	464a      	mov	r2, r9
 8008fae:	4601      	mov	r1, r0
 8008fb0:	4605      	mov	r5, r0
 8008fb2:	4658      	mov	r0, fp
 8008fb4:	f000 fc10 	bl	80097d8 <__multiply>
 8008fb8:	4649      	mov	r1, r9
 8008fba:	9004      	str	r0, [sp, #16]
 8008fbc:	4658      	mov	r0, fp
 8008fbe:	f000 fb41 	bl	8009644 <_Bfree>
 8008fc2:	9b04      	ldr	r3, [sp, #16]
 8008fc4:	4699      	mov	r9, r3
 8008fc6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008fc8:	1b1a      	subs	r2, r3, r4
 8008fca:	d004      	beq.n	8008fd6 <_dtoa_r+0x79e>
 8008fcc:	4649      	mov	r1, r9
 8008fce:	4658      	mov	r0, fp
 8008fd0:	f000 fcaa 	bl	8009928 <__pow5mult>
 8008fd4:	4681      	mov	r9, r0
 8008fd6:	2101      	movs	r1, #1
 8008fd8:	4658      	mov	r0, fp
 8008fda:	f000 fbe7 	bl	80097ac <__i2b>
 8008fde:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008fe0:	4604      	mov	r4, r0
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 81c9 	beq.w	800937a <_dtoa_r+0xb42>
 8008fe8:	461a      	mov	r2, r3
 8008fea:	4601      	mov	r1, r0
 8008fec:	4658      	mov	r0, fp
 8008fee:	f000 fc9b 	bl	8009928 <__pow5mult>
 8008ff2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008ff4:	4604      	mov	r4, r0
 8008ff6:	2b01      	cmp	r3, #1
 8008ff8:	f300 808f 	bgt.w	800911a <_dtoa_r+0x8e2>
 8008ffc:	9b02      	ldr	r3, [sp, #8]
 8008ffe:	2b00      	cmp	r3, #0
 8009000:	f040 8087 	bne.w	8009112 <_dtoa_r+0x8da>
 8009004:	9b03      	ldr	r3, [sp, #12]
 8009006:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800900a:	2b00      	cmp	r3, #0
 800900c:	f040 8083 	bne.w	8009116 <_dtoa_r+0x8de>
 8009010:	9b03      	ldr	r3, [sp, #12]
 8009012:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009016:	0d1b      	lsrs	r3, r3, #20
 8009018:	051b      	lsls	r3, r3, #20
 800901a:	b12b      	cbz	r3, 8009028 <_dtoa_r+0x7f0>
 800901c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800901e:	f108 0801 	add.w	r8, r8, #1
 8009022:	3301      	adds	r3, #1
 8009024:	9309      	str	r3, [sp, #36]	@ 0x24
 8009026:	2301      	movs	r3, #1
 8009028:	930a      	str	r3, [sp, #40]	@ 0x28
 800902a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800902c:	2b00      	cmp	r3, #0
 800902e:	f000 81aa 	beq.w	8009386 <_dtoa_r+0xb4e>
 8009032:	6923      	ldr	r3, [r4, #16]
 8009034:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009038:	6918      	ldr	r0, [r3, #16]
 800903a:	f000 fb6b 	bl	8009714 <__hi0bits>
 800903e:	f1c0 0020 	rsb	r0, r0, #32
 8009042:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009044:	4418      	add	r0, r3
 8009046:	f010 001f 	ands.w	r0, r0, #31
 800904a:	d071      	beq.n	8009130 <_dtoa_r+0x8f8>
 800904c:	f1c0 0320 	rsb	r3, r0, #32
 8009050:	2b04      	cmp	r3, #4
 8009052:	dd65      	ble.n	8009120 <_dtoa_r+0x8e8>
 8009054:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009056:	f1c0 001c 	rsb	r0, r0, #28
 800905a:	4403      	add	r3, r0
 800905c:	4480      	add	r8, r0
 800905e:	4406      	add	r6, r0
 8009060:	9309      	str	r3, [sp, #36]	@ 0x24
 8009062:	f1b8 0f00 	cmp.w	r8, #0
 8009066:	dd05      	ble.n	8009074 <_dtoa_r+0x83c>
 8009068:	4649      	mov	r1, r9
 800906a:	4642      	mov	r2, r8
 800906c:	4658      	mov	r0, fp
 800906e:	f000 fcb5 	bl	80099dc <__lshift>
 8009072:	4681      	mov	r9, r0
 8009074:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009076:	2b00      	cmp	r3, #0
 8009078:	dd05      	ble.n	8009086 <_dtoa_r+0x84e>
 800907a:	4621      	mov	r1, r4
 800907c:	461a      	mov	r2, r3
 800907e:	4658      	mov	r0, fp
 8009080:	f000 fcac 	bl	80099dc <__lshift>
 8009084:	4604      	mov	r4, r0
 8009086:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009088:	2b00      	cmp	r3, #0
 800908a:	d053      	beq.n	8009134 <_dtoa_r+0x8fc>
 800908c:	4621      	mov	r1, r4
 800908e:	4648      	mov	r0, r9
 8009090:	f000 fd10 	bl	8009ab4 <__mcmp>
 8009094:	2800      	cmp	r0, #0
 8009096:	da4d      	bge.n	8009134 <_dtoa_r+0x8fc>
 8009098:	1e7b      	subs	r3, r7, #1
 800909a:	4649      	mov	r1, r9
 800909c:	9304      	str	r3, [sp, #16]
 800909e:	220a      	movs	r2, #10
 80090a0:	2300      	movs	r3, #0
 80090a2:	4658      	mov	r0, fp
 80090a4:	f000 faf0 	bl	8009688 <__multadd>
 80090a8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80090aa:	4681      	mov	r9, r0
 80090ac:	2b00      	cmp	r3, #0
 80090ae:	f000 816c 	beq.w	800938a <_dtoa_r+0xb52>
 80090b2:	2300      	movs	r3, #0
 80090b4:	4629      	mov	r1, r5
 80090b6:	220a      	movs	r2, #10
 80090b8:	4658      	mov	r0, fp
 80090ba:	f000 fae5 	bl	8009688 <__multadd>
 80090be:	9b08      	ldr	r3, [sp, #32]
 80090c0:	4605      	mov	r5, r0
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	dc61      	bgt.n	800918a <_dtoa_r+0x952>
 80090c6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80090c8:	2b02      	cmp	r3, #2
 80090ca:	dc3b      	bgt.n	8009144 <_dtoa_r+0x90c>
 80090cc:	e05d      	b.n	800918a <_dtoa_r+0x952>
 80090ce:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80090d0:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80090d4:	e746      	b.n	8008f64 <_dtoa_r+0x72c>
 80090d6:	9b07      	ldr	r3, [sp, #28]
 80090d8:	1e5c      	subs	r4, r3, #1
 80090da:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80090dc:	42a3      	cmp	r3, r4
 80090de:	bfbf      	itttt	lt
 80090e0:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80090e2:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 80090e4:	1ae3      	sublt	r3, r4, r3
 80090e6:	18d2      	addlt	r2, r2, r3
 80090e8:	bfa8      	it	ge
 80090ea:	1b1c      	subge	r4, r3, r4
 80090ec:	9b07      	ldr	r3, [sp, #28]
 80090ee:	bfbe      	ittt	lt
 80090f0:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80090f2:	920e      	strlt	r2, [sp, #56]	@ 0x38
 80090f4:	2400      	movlt	r4, #0
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	bfb5      	itete	lt
 80090fa:	eba8 0603 	sublt.w	r6, r8, r3
 80090fe:	4646      	movge	r6, r8
 8009100:	2300      	movlt	r3, #0
 8009102:	9b07      	ldrge	r3, [sp, #28]
 8009104:	e730      	b.n	8008f68 <_dtoa_r+0x730>
 8009106:	4646      	mov	r6, r8
 8009108:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800910a:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800910c:	e735      	b.n	8008f7a <_dtoa_r+0x742>
 800910e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009110:	e75c      	b.n	8008fcc <_dtoa_r+0x794>
 8009112:	2300      	movs	r3, #0
 8009114:	e788      	b.n	8009028 <_dtoa_r+0x7f0>
 8009116:	9b02      	ldr	r3, [sp, #8]
 8009118:	e786      	b.n	8009028 <_dtoa_r+0x7f0>
 800911a:	2300      	movs	r3, #0
 800911c:	930a      	str	r3, [sp, #40]	@ 0x28
 800911e:	e788      	b.n	8009032 <_dtoa_r+0x7fa>
 8009120:	d09f      	beq.n	8009062 <_dtoa_r+0x82a>
 8009122:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009124:	331c      	adds	r3, #28
 8009126:	441a      	add	r2, r3
 8009128:	4498      	add	r8, r3
 800912a:	441e      	add	r6, r3
 800912c:	9209      	str	r2, [sp, #36]	@ 0x24
 800912e:	e798      	b.n	8009062 <_dtoa_r+0x82a>
 8009130:	4603      	mov	r3, r0
 8009132:	e7f6      	b.n	8009122 <_dtoa_r+0x8ea>
 8009134:	9b07      	ldr	r3, [sp, #28]
 8009136:	9704      	str	r7, [sp, #16]
 8009138:	2b00      	cmp	r3, #0
 800913a:	dc20      	bgt.n	800917e <_dtoa_r+0x946>
 800913c:	9308      	str	r3, [sp, #32]
 800913e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009140:	2b02      	cmp	r3, #2
 8009142:	dd1e      	ble.n	8009182 <_dtoa_r+0x94a>
 8009144:	9b08      	ldr	r3, [sp, #32]
 8009146:	2b00      	cmp	r3, #0
 8009148:	f47f aebc 	bne.w	8008ec4 <_dtoa_r+0x68c>
 800914c:	4621      	mov	r1, r4
 800914e:	2205      	movs	r2, #5
 8009150:	4658      	mov	r0, fp
 8009152:	f000 fa99 	bl	8009688 <__multadd>
 8009156:	4601      	mov	r1, r0
 8009158:	4604      	mov	r4, r0
 800915a:	4648      	mov	r0, r9
 800915c:	f000 fcaa 	bl	8009ab4 <__mcmp>
 8009160:	2800      	cmp	r0, #0
 8009162:	f77f aeaf 	ble.w	8008ec4 <_dtoa_r+0x68c>
 8009166:	2331      	movs	r3, #49	@ 0x31
 8009168:	4656      	mov	r6, sl
 800916a:	f806 3b01 	strb.w	r3, [r6], #1
 800916e:	9b04      	ldr	r3, [sp, #16]
 8009170:	3301      	adds	r3, #1
 8009172:	9304      	str	r3, [sp, #16]
 8009174:	e6aa      	b.n	8008ecc <_dtoa_r+0x694>
 8009176:	9c07      	ldr	r4, [sp, #28]
 8009178:	9704      	str	r7, [sp, #16]
 800917a:	4625      	mov	r5, r4
 800917c:	e7f3      	b.n	8009166 <_dtoa_r+0x92e>
 800917e:	9b07      	ldr	r3, [sp, #28]
 8009180:	9308      	str	r3, [sp, #32]
 8009182:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009184:	2b00      	cmp	r3, #0
 8009186:	f000 8104 	beq.w	8009392 <_dtoa_r+0xb5a>
 800918a:	2e00      	cmp	r6, #0
 800918c:	dd05      	ble.n	800919a <_dtoa_r+0x962>
 800918e:	4629      	mov	r1, r5
 8009190:	4632      	mov	r2, r6
 8009192:	4658      	mov	r0, fp
 8009194:	f000 fc22 	bl	80099dc <__lshift>
 8009198:	4605      	mov	r5, r0
 800919a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800919c:	2b00      	cmp	r3, #0
 800919e:	d05a      	beq.n	8009256 <_dtoa_r+0xa1e>
 80091a0:	4658      	mov	r0, fp
 80091a2:	6869      	ldr	r1, [r5, #4]
 80091a4:	f000 fa0e 	bl	80095c4 <_Balloc>
 80091a8:	4606      	mov	r6, r0
 80091aa:	b928      	cbnz	r0, 80091b8 <_dtoa_r+0x980>
 80091ac:	4602      	mov	r2, r0
 80091ae:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80091b2:	4b83      	ldr	r3, [pc, #524]	@ (80093c0 <_dtoa_r+0xb88>)
 80091b4:	f7ff bb54 	b.w	8008860 <_dtoa_r+0x28>
 80091b8:	692a      	ldr	r2, [r5, #16]
 80091ba:	f105 010c 	add.w	r1, r5, #12
 80091be:	3202      	adds	r2, #2
 80091c0:	0092      	lsls	r2, r2, #2
 80091c2:	300c      	adds	r0, #12
 80091c4:	f7ff faa1 	bl	800870a <memcpy>
 80091c8:	2201      	movs	r2, #1
 80091ca:	4631      	mov	r1, r6
 80091cc:	4658      	mov	r0, fp
 80091ce:	f000 fc05 	bl	80099dc <__lshift>
 80091d2:	462f      	mov	r7, r5
 80091d4:	4605      	mov	r5, r0
 80091d6:	f10a 0301 	add.w	r3, sl, #1
 80091da:	9307      	str	r3, [sp, #28]
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	4453      	add	r3, sl
 80091e0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80091e2:	9b02      	ldr	r3, [sp, #8]
 80091e4:	f003 0301 	and.w	r3, r3, #1
 80091e8:	930a      	str	r3, [sp, #40]	@ 0x28
 80091ea:	9b07      	ldr	r3, [sp, #28]
 80091ec:	4621      	mov	r1, r4
 80091ee:	3b01      	subs	r3, #1
 80091f0:	4648      	mov	r0, r9
 80091f2:	9302      	str	r3, [sp, #8]
 80091f4:	f7ff fa97 	bl	8008726 <quorem>
 80091f8:	4639      	mov	r1, r7
 80091fa:	9008      	str	r0, [sp, #32]
 80091fc:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009200:	4648      	mov	r0, r9
 8009202:	f000 fc57 	bl	8009ab4 <__mcmp>
 8009206:	462a      	mov	r2, r5
 8009208:	9009      	str	r0, [sp, #36]	@ 0x24
 800920a:	4621      	mov	r1, r4
 800920c:	4658      	mov	r0, fp
 800920e:	f000 fc6d 	bl	8009aec <__mdiff>
 8009212:	68c2      	ldr	r2, [r0, #12]
 8009214:	4606      	mov	r6, r0
 8009216:	bb02      	cbnz	r2, 800925a <_dtoa_r+0xa22>
 8009218:	4601      	mov	r1, r0
 800921a:	4648      	mov	r0, r9
 800921c:	f000 fc4a 	bl	8009ab4 <__mcmp>
 8009220:	4602      	mov	r2, r0
 8009222:	4631      	mov	r1, r6
 8009224:	4658      	mov	r0, fp
 8009226:	920c      	str	r2, [sp, #48]	@ 0x30
 8009228:	f000 fa0c 	bl	8009644 <_Bfree>
 800922c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800922e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8009230:	9e07      	ldr	r6, [sp, #28]
 8009232:	ea43 0102 	orr.w	r1, r3, r2
 8009236:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009238:	4319      	orrs	r1, r3
 800923a:	d110      	bne.n	800925e <_dtoa_r+0xa26>
 800923c:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009240:	d029      	beq.n	8009296 <_dtoa_r+0xa5e>
 8009242:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009244:	2b00      	cmp	r3, #0
 8009246:	dd02      	ble.n	800924e <_dtoa_r+0xa16>
 8009248:	9b08      	ldr	r3, [sp, #32]
 800924a:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800924e:	9b02      	ldr	r3, [sp, #8]
 8009250:	f883 8000 	strb.w	r8, [r3]
 8009254:	e63b      	b.n	8008ece <_dtoa_r+0x696>
 8009256:	4628      	mov	r0, r5
 8009258:	e7bb      	b.n	80091d2 <_dtoa_r+0x99a>
 800925a:	2201      	movs	r2, #1
 800925c:	e7e1      	b.n	8009222 <_dtoa_r+0x9ea>
 800925e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009260:	2b00      	cmp	r3, #0
 8009262:	db04      	blt.n	800926e <_dtoa_r+0xa36>
 8009264:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8009266:	430b      	orrs	r3, r1
 8009268:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800926a:	430b      	orrs	r3, r1
 800926c:	d120      	bne.n	80092b0 <_dtoa_r+0xa78>
 800926e:	2a00      	cmp	r2, #0
 8009270:	dded      	ble.n	800924e <_dtoa_r+0xa16>
 8009272:	4649      	mov	r1, r9
 8009274:	2201      	movs	r2, #1
 8009276:	4658      	mov	r0, fp
 8009278:	f000 fbb0 	bl	80099dc <__lshift>
 800927c:	4621      	mov	r1, r4
 800927e:	4681      	mov	r9, r0
 8009280:	f000 fc18 	bl	8009ab4 <__mcmp>
 8009284:	2800      	cmp	r0, #0
 8009286:	dc03      	bgt.n	8009290 <_dtoa_r+0xa58>
 8009288:	d1e1      	bne.n	800924e <_dtoa_r+0xa16>
 800928a:	f018 0f01 	tst.w	r8, #1
 800928e:	d0de      	beq.n	800924e <_dtoa_r+0xa16>
 8009290:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009294:	d1d8      	bne.n	8009248 <_dtoa_r+0xa10>
 8009296:	2339      	movs	r3, #57	@ 0x39
 8009298:	9a02      	ldr	r2, [sp, #8]
 800929a:	7013      	strb	r3, [r2, #0]
 800929c:	4633      	mov	r3, r6
 800929e:	461e      	mov	r6, r3
 80092a0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80092a4:	3b01      	subs	r3, #1
 80092a6:	2a39      	cmp	r2, #57	@ 0x39
 80092a8:	d052      	beq.n	8009350 <_dtoa_r+0xb18>
 80092aa:	3201      	adds	r2, #1
 80092ac:	701a      	strb	r2, [r3, #0]
 80092ae:	e60e      	b.n	8008ece <_dtoa_r+0x696>
 80092b0:	2a00      	cmp	r2, #0
 80092b2:	dd07      	ble.n	80092c4 <_dtoa_r+0xa8c>
 80092b4:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80092b8:	d0ed      	beq.n	8009296 <_dtoa_r+0xa5e>
 80092ba:	9a02      	ldr	r2, [sp, #8]
 80092bc:	f108 0301 	add.w	r3, r8, #1
 80092c0:	7013      	strb	r3, [r2, #0]
 80092c2:	e604      	b.n	8008ece <_dtoa_r+0x696>
 80092c4:	9b07      	ldr	r3, [sp, #28]
 80092c6:	9a07      	ldr	r2, [sp, #28]
 80092c8:	f803 8c01 	strb.w	r8, [r3, #-1]
 80092cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80092ce:	4293      	cmp	r3, r2
 80092d0:	d028      	beq.n	8009324 <_dtoa_r+0xaec>
 80092d2:	4649      	mov	r1, r9
 80092d4:	2300      	movs	r3, #0
 80092d6:	220a      	movs	r2, #10
 80092d8:	4658      	mov	r0, fp
 80092da:	f000 f9d5 	bl	8009688 <__multadd>
 80092de:	42af      	cmp	r7, r5
 80092e0:	4681      	mov	r9, r0
 80092e2:	f04f 0300 	mov.w	r3, #0
 80092e6:	f04f 020a 	mov.w	r2, #10
 80092ea:	4639      	mov	r1, r7
 80092ec:	4658      	mov	r0, fp
 80092ee:	d107      	bne.n	8009300 <_dtoa_r+0xac8>
 80092f0:	f000 f9ca 	bl	8009688 <__multadd>
 80092f4:	4607      	mov	r7, r0
 80092f6:	4605      	mov	r5, r0
 80092f8:	9b07      	ldr	r3, [sp, #28]
 80092fa:	3301      	adds	r3, #1
 80092fc:	9307      	str	r3, [sp, #28]
 80092fe:	e774      	b.n	80091ea <_dtoa_r+0x9b2>
 8009300:	f000 f9c2 	bl	8009688 <__multadd>
 8009304:	4629      	mov	r1, r5
 8009306:	4607      	mov	r7, r0
 8009308:	2300      	movs	r3, #0
 800930a:	220a      	movs	r2, #10
 800930c:	4658      	mov	r0, fp
 800930e:	f000 f9bb 	bl	8009688 <__multadd>
 8009312:	4605      	mov	r5, r0
 8009314:	e7f0      	b.n	80092f8 <_dtoa_r+0xac0>
 8009316:	9b08      	ldr	r3, [sp, #32]
 8009318:	2700      	movs	r7, #0
 800931a:	2b00      	cmp	r3, #0
 800931c:	bfcc      	ite	gt
 800931e:	461e      	movgt	r6, r3
 8009320:	2601      	movle	r6, #1
 8009322:	4456      	add	r6, sl
 8009324:	4649      	mov	r1, r9
 8009326:	2201      	movs	r2, #1
 8009328:	4658      	mov	r0, fp
 800932a:	f000 fb57 	bl	80099dc <__lshift>
 800932e:	4621      	mov	r1, r4
 8009330:	4681      	mov	r9, r0
 8009332:	f000 fbbf 	bl	8009ab4 <__mcmp>
 8009336:	2800      	cmp	r0, #0
 8009338:	dcb0      	bgt.n	800929c <_dtoa_r+0xa64>
 800933a:	d102      	bne.n	8009342 <_dtoa_r+0xb0a>
 800933c:	f018 0f01 	tst.w	r8, #1
 8009340:	d1ac      	bne.n	800929c <_dtoa_r+0xa64>
 8009342:	4633      	mov	r3, r6
 8009344:	461e      	mov	r6, r3
 8009346:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800934a:	2a30      	cmp	r2, #48	@ 0x30
 800934c:	d0fa      	beq.n	8009344 <_dtoa_r+0xb0c>
 800934e:	e5be      	b.n	8008ece <_dtoa_r+0x696>
 8009350:	459a      	cmp	sl, r3
 8009352:	d1a4      	bne.n	800929e <_dtoa_r+0xa66>
 8009354:	9b04      	ldr	r3, [sp, #16]
 8009356:	3301      	adds	r3, #1
 8009358:	9304      	str	r3, [sp, #16]
 800935a:	2331      	movs	r3, #49	@ 0x31
 800935c:	f88a 3000 	strb.w	r3, [sl]
 8009360:	e5b5      	b.n	8008ece <_dtoa_r+0x696>
 8009362:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8009364:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80093c4 <_dtoa_r+0xb8c>
 8009368:	b11b      	cbz	r3, 8009372 <_dtoa_r+0xb3a>
 800936a:	f10a 0308 	add.w	r3, sl, #8
 800936e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009370:	6013      	str	r3, [r2, #0]
 8009372:	4650      	mov	r0, sl
 8009374:	b017      	add	sp, #92	@ 0x5c
 8009376:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800937a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 800937c:	2b01      	cmp	r3, #1
 800937e:	f77f ae3d 	ble.w	8008ffc <_dtoa_r+0x7c4>
 8009382:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009384:	930a      	str	r3, [sp, #40]	@ 0x28
 8009386:	2001      	movs	r0, #1
 8009388:	e65b      	b.n	8009042 <_dtoa_r+0x80a>
 800938a:	9b08      	ldr	r3, [sp, #32]
 800938c:	2b00      	cmp	r3, #0
 800938e:	f77f aed6 	ble.w	800913e <_dtoa_r+0x906>
 8009392:	4656      	mov	r6, sl
 8009394:	4621      	mov	r1, r4
 8009396:	4648      	mov	r0, r9
 8009398:	f7ff f9c5 	bl	8008726 <quorem>
 800939c:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80093a0:	9b08      	ldr	r3, [sp, #32]
 80093a2:	f806 8b01 	strb.w	r8, [r6], #1
 80093a6:	eba6 020a 	sub.w	r2, r6, sl
 80093aa:	4293      	cmp	r3, r2
 80093ac:	ddb3      	ble.n	8009316 <_dtoa_r+0xade>
 80093ae:	4649      	mov	r1, r9
 80093b0:	2300      	movs	r3, #0
 80093b2:	220a      	movs	r2, #10
 80093b4:	4658      	mov	r0, fp
 80093b6:	f000 f967 	bl	8009688 <__multadd>
 80093ba:	4681      	mov	r9, r0
 80093bc:	e7ea      	b.n	8009394 <_dtoa_r+0xb5c>
 80093be:	bf00      	nop
 80093c0:	0800b330 	.word	0x0800b330
 80093c4:	0800b2b4 	.word	0x0800b2b4

080093c8 <_free_r>:
 80093c8:	b538      	push	{r3, r4, r5, lr}
 80093ca:	4605      	mov	r5, r0
 80093cc:	2900      	cmp	r1, #0
 80093ce:	d040      	beq.n	8009452 <_free_r+0x8a>
 80093d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80093d4:	1f0c      	subs	r4, r1, #4
 80093d6:	2b00      	cmp	r3, #0
 80093d8:	bfb8      	it	lt
 80093da:	18e4      	addlt	r4, r4, r3
 80093dc:	f000 f8e6 	bl	80095ac <__malloc_lock>
 80093e0:	4a1c      	ldr	r2, [pc, #112]	@ (8009454 <_free_r+0x8c>)
 80093e2:	6813      	ldr	r3, [r2, #0]
 80093e4:	b933      	cbnz	r3, 80093f4 <_free_r+0x2c>
 80093e6:	6063      	str	r3, [r4, #4]
 80093e8:	6014      	str	r4, [r2, #0]
 80093ea:	4628      	mov	r0, r5
 80093ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80093f0:	f000 b8e2 	b.w	80095b8 <__malloc_unlock>
 80093f4:	42a3      	cmp	r3, r4
 80093f6:	d908      	bls.n	800940a <_free_r+0x42>
 80093f8:	6820      	ldr	r0, [r4, #0]
 80093fa:	1821      	adds	r1, r4, r0
 80093fc:	428b      	cmp	r3, r1
 80093fe:	bf01      	itttt	eq
 8009400:	6819      	ldreq	r1, [r3, #0]
 8009402:	685b      	ldreq	r3, [r3, #4]
 8009404:	1809      	addeq	r1, r1, r0
 8009406:	6021      	streq	r1, [r4, #0]
 8009408:	e7ed      	b.n	80093e6 <_free_r+0x1e>
 800940a:	461a      	mov	r2, r3
 800940c:	685b      	ldr	r3, [r3, #4]
 800940e:	b10b      	cbz	r3, 8009414 <_free_r+0x4c>
 8009410:	42a3      	cmp	r3, r4
 8009412:	d9fa      	bls.n	800940a <_free_r+0x42>
 8009414:	6811      	ldr	r1, [r2, #0]
 8009416:	1850      	adds	r0, r2, r1
 8009418:	42a0      	cmp	r0, r4
 800941a:	d10b      	bne.n	8009434 <_free_r+0x6c>
 800941c:	6820      	ldr	r0, [r4, #0]
 800941e:	4401      	add	r1, r0
 8009420:	1850      	adds	r0, r2, r1
 8009422:	4283      	cmp	r3, r0
 8009424:	6011      	str	r1, [r2, #0]
 8009426:	d1e0      	bne.n	80093ea <_free_r+0x22>
 8009428:	6818      	ldr	r0, [r3, #0]
 800942a:	685b      	ldr	r3, [r3, #4]
 800942c:	4408      	add	r0, r1
 800942e:	6010      	str	r0, [r2, #0]
 8009430:	6053      	str	r3, [r2, #4]
 8009432:	e7da      	b.n	80093ea <_free_r+0x22>
 8009434:	d902      	bls.n	800943c <_free_r+0x74>
 8009436:	230c      	movs	r3, #12
 8009438:	602b      	str	r3, [r5, #0]
 800943a:	e7d6      	b.n	80093ea <_free_r+0x22>
 800943c:	6820      	ldr	r0, [r4, #0]
 800943e:	1821      	adds	r1, r4, r0
 8009440:	428b      	cmp	r3, r1
 8009442:	bf01      	itttt	eq
 8009444:	6819      	ldreq	r1, [r3, #0]
 8009446:	685b      	ldreq	r3, [r3, #4]
 8009448:	1809      	addeq	r1, r1, r0
 800944a:	6021      	streq	r1, [r4, #0]
 800944c:	6063      	str	r3, [r4, #4]
 800944e:	6054      	str	r4, [r2, #4]
 8009450:	e7cb      	b.n	80093ea <_free_r+0x22>
 8009452:	bd38      	pop	{r3, r4, r5, pc}
 8009454:	20001d00 	.word	0x20001d00

08009458 <malloc>:
 8009458:	4b02      	ldr	r3, [pc, #8]	@ (8009464 <malloc+0xc>)
 800945a:	4601      	mov	r1, r0
 800945c:	6818      	ldr	r0, [r3, #0]
 800945e:	f000 b825 	b.w	80094ac <_malloc_r>
 8009462:	bf00      	nop
 8009464:	2000001c 	.word	0x2000001c

08009468 <sbrk_aligned>:
 8009468:	b570      	push	{r4, r5, r6, lr}
 800946a:	4e0f      	ldr	r6, [pc, #60]	@ (80094a8 <sbrk_aligned+0x40>)
 800946c:	460c      	mov	r4, r1
 800946e:	6831      	ldr	r1, [r6, #0]
 8009470:	4605      	mov	r5, r0
 8009472:	b911      	cbnz	r1, 800947a <sbrk_aligned+0x12>
 8009474:	f001 f9c8 	bl	800a808 <_sbrk_r>
 8009478:	6030      	str	r0, [r6, #0]
 800947a:	4621      	mov	r1, r4
 800947c:	4628      	mov	r0, r5
 800947e:	f001 f9c3 	bl	800a808 <_sbrk_r>
 8009482:	1c43      	adds	r3, r0, #1
 8009484:	d103      	bne.n	800948e <sbrk_aligned+0x26>
 8009486:	f04f 34ff 	mov.w	r4, #4294967295
 800948a:	4620      	mov	r0, r4
 800948c:	bd70      	pop	{r4, r5, r6, pc}
 800948e:	1cc4      	adds	r4, r0, #3
 8009490:	f024 0403 	bic.w	r4, r4, #3
 8009494:	42a0      	cmp	r0, r4
 8009496:	d0f8      	beq.n	800948a <sbrk_aligned+0x22>
 8009498:	1a21      	subs	r1, r4, r0
 800949a:	4628      	mov	r0, r5
 800949c:	f001 f9b4 	bl	800a808 <_sbrk_r>
 80094a0:	3001      	adds	r0, #1
 80094a2:	d1f2      	bne.n	800948a <sbrk_aligned+0x22>
 80094a4:	e7ef      	b.n	8009486 <sbrk_aligned+0x1e>
 80094a6:	bf00      	nop
 80094a8:	20001cfc 	.word	0x20001cfc

080094ac <_malloc_r>:
 80094ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094b0:	1ccd      	adds	r5, r1, #3
 80094b2:	f025 0503 	bic.w	r5, r5, #3
 80094b6:	3508      	adds	r5, #8
 80094b8:	2d0c      	cmp	r5, #12
 80094ba:	bf38      	it	cc
 80094bc:	250c      	movcc	r5, #12
 80094be:	2d00      	cmp	r5, #0
 80094c0:	4606      	mov	r6, r0
 80094c2:	db01      	blt.n	80094c8 <_malloc_r+0x1c>
 80094c4:	42a9      	cmp	r1, r5
 80094c6:	d904      	bls.n	80094d2 <_malloc_r+0x26>
 80094c8:	230c      	movs	r3, #12
 80094ca:	6033      	str	r3, [r6, #0]
 80094cc:	2000      	movs	r0, #0
 80094ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80095a8 <_malloc_r+0xfc>
 80094d6:	f000 f869 	bl	80095ac <__malloc_lock>
 80094da:	f8d8 3000 	ldr.w	r3, [r8]
 80094de:	461c      	mov	r4, r3
 80094e0:	bb44      	cbnz	r4, 8009534 <_malloc_r+0x88>
 80094e2:	4629      	mov	r1, r5
 80094e4:	4630      	mov	r0, r6
 80094e6:	f7ff ffbf 	bl	8009468 <sbrk_aligned>
 80094ea:	1c43      	adds	r3, r0, #1
 80094ec:	4604      	mov	r4, r0
 80094ee:	d158      	bne.n	80095a2 <_malloc_r+0xf6>
 80094f0:	f8d8 4000 	ldr.w	r4, [r8]
 80094f4:	4627      	mov	r7, r4
 80094f6:	2f00      	cmp	r7, #0
 80094f8:	d143      	bne.n	8009582 <_malloc_r+0xd6>
 80094fa:	2c00      	cmp	r4, #0
 80094fc:	d04b      	beq.n	8009596 <_malloc_r+0xea>
 80094fe:	6823      	ldr	r3, [r4, #0]
 8009500:	4639      	mov	r1, r7
 8009502:	4630      	mov	r0, r6
 8009504:	eb04 0903 	add.w	r9, r4, r3
 8009508:	f001 f97e 	bl	800a808 <_sbrk_r>
 800950c:	4581      	cmp	r9, r0
 800950e:	d142      	bne.n	8009596 <_malloc_r+0xea>
 8009510:	6821      	ldr	r1, [r4, #0]
 8009512:	4630      	mov	r0, r6
 8009514:	1a6d      	subs	r5, r5, r1
 8009516:	4629      	mov	r1, r5
 8009518:	f7ff ffa6 	bl	8009468 <sbrk_aligned>
 800951c:	3001      	adds	r0, #1
 800951e:	d03a      	beq.n	8009596 <_malloc_r+0xea>
 8009520:	6823      	ldr	r3, [r4, #0]
 8009522:	442b      	add	r3, r5
 8009524:	6023      	str	r3, [r4, #0]
 8009526:	f8d8 3000 	ldr.w	r3, [r8]
 800952a:	685a      	ldr	r2, [r3, #4]
 800952c:	bb62      	cbnz	r2, 8009588 <_malloc_r+0xdc>
 800952e:	f8c8 7000 	str.w	r7, [r8]
 8009532:	e00f      	b.n	8009554 <_malloc_r+0xa8>
 8009534:	6822      	ldr	r2, [r4, #0]
 8009536:	1b52      	subs	r2, r2, r5
 8009538:	d420      	bmi.n	800957c <_malloc_r+0xd0>
 800953a:	2a0b      	cmp	r2, #11
 800953c:	d917      	bls.n	800956e <_malloc_r+0xc2>
 800953e:	1961      	adds	r1, r4, r5
 8009540:	42a3      	cmp	r3, r4
 8009542:	6025      	str	r5, [r4, #0]
 8009544:	bf18      	it	ne
 8009546:	6059      	strne	r1, [r3, #4]
 8009548:	6863      	ldr	r3, [r4, #4]
 800954a:	bf08      	it	eq
 800954c:	f8c8 1000 	streq.w	r1, [r8]
 8009550:	5162      	str	r2, [r4, r5]
 8009552:	604b      	str	r3, [r1, #4]
 8009554:	4630      	mov	r0, r6
 8009556:	f000 f82f 	bl	80095b8 <__malloc_unlock>
 800955a:	f104 000b 	add.w	r0, r4, #11
 800955e:	1d23      	adds	r3, r4, #4
 8009560:	f020 0007 	bic.w	r0, r0, #7
 8009564:	1ac2      	subs	r2, r0, r3
 8009566:	bf1c      	itt	ne
 8009568:	1a1b      	subne	r3, r3, r0
 800956a:	50a3      	strne	r3, [r4, r2]
 800956c:	e7af      	b.n	80094ce <_malloc_r+0x22>
 800956e:	6862      	ldr	r2, [r4, #4]
 8009570:	42a3      	cmp	r3, r4
 8009572:	bf0c      	ite	eq
 8009574:	f8c8 2000 	streq.w	r2, [r8]
 8009578:	605a      	strne	r2, [r3, #4]
 800957a:	e7eb      	b.n	8009554 <_malloc_r+0xa8>
 800957c:	4623      	mov	r3, r4
 800957e:	6864      	ldr	r4, [r4, #4]
 8009580:	e7ae      	b.n	80094e0 <_malloc_r+0x34>
 8009582:	463c      	mov	r4, r7
 8009584:	687f      	ldr	r7, [r7, #4]
 8009586:	e7b6      	b.n	80094f6 <_malloc_r+0x4a>
 8009588:	461a      	mov	r2, r3
 800958a:	685b      	ldr	r3, [r3, #4]
 800958c:	42a3      	cmp	r3, r4
 800958e:	d1fb      	bne.n	8009588 <_malloc_r+0xdc>
 8009590:	2300      	movs	r3, #0
 8009592:	6053      	str	r3, [r2, #4]
 8009594:	e7de      	b.n	8009554 <_malloc_r+0xa8>
 8009596:	230c      	movs	r3, #12
 8009598:	4630      	mov	r0, r6
 800959a:	6033      	str	r3, [r6, #0]
 800959c:	f000 f80c 	bl	80095b8 <__malloc_unlock>
 80095a0:	e794      	b.n	80094cc <_malloc_r+0x20>
 80095a2:	6005      	str	r5, [r0, #0]
 80095a4:	e7d6      	b.n	8009554 <_malloc_r+0xa8>
 80095a6:	bf00      	nop
 80095a8:	20001d00 	.word	0x20001d00

080095ac <__malloc_lock>:
 80095ac:	4801      	ldr	r0, [pc, #4]	@ (80095b4 <__malloc_lock+0x8>)
 80095ae:	f7ff b89c 	b.w	80086ea <__retarget_lock_acquire_recursive>
 80095b2:	bf00      	nop
 80095b4:	20001cf8 	.word	0x20001cf8

080095b8 <__malloc_unlock>:
 80095b8:	4801      	ldr	r0, [pc, #4]	@ (80095c0 <__malloc_unlock+0x8>)
 80095ba:	f7ff b897 	b.w	80086ec <__retarget_lock_release_recursive>
 80095be:	bf00      	nop
 80095c0:	20001cf8 	.word	0x20001cf8

080095c4 <_Balloc>:
 80095c4:	b570      	push	{r4, r5, r6, lr}
 80095c6:	69c6      	ldr	r6, [r0, #28]
 80095c8:	4604      	mov	r4, r0
 80095ca:	460d      	mov	r5, r1
 80095cc:	b976      	cbnz	r6, 80095ec <_Balloc+0x28>
 80095ce:	2010      	movs	r0, #16
 80095d0:	f7ff ff42 	bl	8009458 <malloc>
 80095d4:	4602      	mov	r2, r0
 80095d6:	61e0      	str	r0, [r4, #28]
 80095d8:	b920      	cbnz	r0, 80095e4 <_Balloc+0x20>
 80095da:	216b      	movs	r1, #107	@ 0x6b
 80095dc:	4b17      	ldr	r3, [pc, #92]	@ (800963c <_Balloc+0x78>)
 80095de:	4818      	ldr	r0, [pc, #96]	@ (8009640 <_Balloc+0x7c>)
 80095e0:	f001 f922 	bl	800a828 <__assert_func>
 80095e4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80095e8:	6006      	str	r6, [r0, #0]
 80095ea:	60c6      	str	r6, [r0, #12]
 80095ec:	69e6      	ldr	r6, [r4, #28]
 80095ee:	68f3      	ldr	r3, [r6, #12]
 80095f0:	b183      	cbz	r3, 8009614 <_Balloc+0x50>
 80095f2:	69e3      	ldr	r3, [r4, #28]
 80095f4:	68db      	ldr	r3, [r3, #12]
 80095f6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80095fa:	b9b8      	cbnz	r0, 800962c <_Balloc+0x68>
 80095fc:	2101      	movs	r1, #1
 80095fe:	fa01 f605 	lsl.w	r6, r1, r5
 8009602:	1d72      	adds	r2, r6, #5
 8009604:	4620      	mov	r0, r4
 8009606:	0092      	lsls	r2, r2, #2
 8009608:	f001 f92c 	bl	800a864 <_calloc_r>
 800960c:	b160      	cbz	r0, 8009628 <_Balloc+0x64>
 800960e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009612:	e00e      	b.n	8009632 <_Balloc+0x6e>
 8009614:	2221      	movs	r2, #33	@ 0x21
 8009616:	2104      	movs	r1, #4
 8009618:	4620      	mov	r0, r4
 800961a:	f001 f923 	bl	800a864 <_calloc_r>
 800961e:	69e3      	ldr	r3, [r4, #28]
 8009620:	60f0      	str	r0, [r6, #12]
 8009622:	68db      	ldr	r3, [r3, #12]
 8009624:	2b00      	cmp	r3, #0
 8009626:	d1e4      	bne.n	80095f2 <_Balloc+0x2e>
 8009628:	2000      	movs	r0, #0
 800962a:	bd70      	pop	{r4, r5, r6, pc}
 800962c:	6802      	ldr	r2, [r0, #0]
 800962e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009632:	2300      	movs	r3, #0
 8009634:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009638:	e7f7      	b.n	800962a <_Balloc+0x66>
 800963a:	bf00      	nop
 800963c:	0800b2c1 	.word	0x0800b2c1
 8009640:	0800b341 	.word	0x0800b341

08009644 <_Bfree>:
 8009644:	b570      	push	{r4, r5, r6, lr}
 8009646:	69c6      	ldr	r6, [r0, #28]
 8009648:	4605      	mov	r5, r0
 800964a:	460c      	mov	r4, r1
 800964c:	b976      	cbnz	r6, 800966c <_Bfree+0x28>
 800964e:	2010      	movs	r0, #16
 8009650:	f7ff ff02 	bl	8009458 <malloc>
 8009654:	4602      	mov	r2, r0
 8009656:	61e8      	str	r0, [r5, #28]
 8009658:	b920      	cbnz	r0, 8009664 <_Bfree+0x20>
 800965a:	218f      	movs	r1, #143	@ 0x8f
 800965c:	4b08      	ldr	r3, [pc, #32]	@ (8009680 <_Bfree+0x3c>)
 800965e:	4809      	ldr	r0, [pc, #36]	@ (8009684 <_Bfree+0x40>)
 8009660:	f001 f8e2 	bl	800a828 <__assert_func>
 8009664:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009668:	6006      	str	r6, [r0, #0]
 800966a:	60c6      	str	r6, [r0, #12]
 800966c:	b13c      	cbz	r4, 800967e <_Bfree+0x3a>
 800966e:	69eb      	ldr	r3, [r5, #28]
 8009670:	6862      	ldr	r2, [r4, #4]
 8009672:	68db      	ldr	r3, [r3, #12]
 8009674:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009678:	6021      	str	r1, [r4, #0]
 800967a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800967e:	bd70      	pop	{r4, r5, r6, pc}
 8009680:	0800b2c1 	.word	0x0800b2c1
 8009684:	0800b341 	.word	0x0800b341

08009688 <__multadd>:
 8009688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800968c:	4607      	mov	r7, r0
 800968e:	460c      	mov	r4, r1
 8009690:	461e      	mov	r6, r3
 8009692:	2000      	movs	r0, #0
 8009694:	690d      	ldr	r5, [r1, #16]
 8009696:	f101 0c14 	add.w	ip, r1, #20
 800969a:	f8dc 3000 	ldr.w	r3, [ip]
 800969e:	3001      	adds	r0, #1
 80096a0:	b299      	uxth	r1, r3
 80096a2:	fb02 6101 	mla	r1, r2, r1, r6
 80096a6:	0c1e      	lsrs	r6, r3, #16
 80096a8:	0c0b      	lsrs	r3, r1, #16
 80096aa:	fb02 3306 	mla	r3, r2, r6, r3
 80096ae:	b289      	uxth	r1, r1
 80096b0:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80096b4:	4285      	cmp	r5, r0
 80096b6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80096ba:	f84c 1b04 	str.w	r1, [ip], #4
 80096be:	dcec      	bgt.n	800969a <__multadd+0x12>
 80096c0:	b30e      	cbz	r6, 8009706 <__multadd+0x7e>
 80096c2:	68a3      	ldr	r3, [r4, #8]
 80096c4:	42ab      	cmp	r3, r5
 80096c6:	dc19      	bgt.n	80096fc <__multadd+0x74>
 80096c8:	6861      	ldr	r1, [r4, #4]
 80096ca:	4638      	mov	r0, r7
 80096cc:	3101      	adds	r1, #1
 80096ce:	f7ff ff79 	bl	80095c4 <_Balloc>
 80096d2:	4680      	mov	r8, r0
 80096d4:	b928      	cbnz	r0, 80096e2 <__multadd+0x5a>
 80096d6:	4602      	mov	r2, r0
 80096d8:	21ba      	movs	r1, #186	@ 0xba
 80096da:	4b0c      	ldr	r3, [pc, #48]	@ (800970c <__multadd+0x84>)
 80096dc:	480c      	ldr	r0, [pc, #48]	@ (8009710 <__multadd+0x88>)
 80096de:	f001 f8a3 	bl	800a828 <__assert_func>
 80096e2:	6922      	ldr	r2, [r4, #16]
 80096e4:	f104 010c 	add.w	r1, r4, #12
 80096e8:	3202      	adds	r2, #2
 80096ea:	0092      	lsls	r2, r2, #2
 80096ec:	300c      	adds	r0, #12
 80096ee:	f7ff f80c 	bl	800870a <memcpy>
 80096f2:	4621      	mov	r1, r4
 80096f4:	4638      	mov	r0, r7
 80096f6:	f7ff ffa5 	bl	8009644 <_Bfree>
 80096fa:	4644      	mov	r4, r8
 80096fc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009700:	3501      	adds	r5, #1
 8009702:	615e      	str	r6, [r3, #20]
 8009704:	6125      	str	r5, [r4, #16]
 8009706:	4620      	mov	r0, r4
 8009708:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800970c:	0800b330 	.word	0x0800b330
 8009710:	0800b341 	.word	0x0800b341

08009714 <__hi0bits>:
 8009714:	4603      	mov	r3, r0
 8009716:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800971a:	bf3a      	itte	cc
 800971c:	0403      	lslcc	r3, r0, #16
 800971e:	2010      	movcc	r0, #16
 8009720:	2000      	movcs	r0, #0
 8009722:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009726:	bf3c      	itt	cc
 8009728:	021b      	lslcc	r3, r3, #8
 800972a:	3008      	addcc	r0, #8
 800972c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009730:	bf3c      	itt	cc
 8009732:	011b      	lslcc	r3, r3, #4
 8009734:	3004      	addcc	r0, #4
 8009736:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800973a:	bf3c      	itt	cc
 800973c:	009b      	lslcc	r3, r3, #2
 800973e:	3002      	addcc	r0, #2
 8009740:	2b00      	cmp	r3, #0
 8009742:	db05      	blt.n	8009750 <__hi0bits+0x3c>
 8009744:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009748:	f100 0001 	add.w	r0, r0, #1
 800974c:	bf08      	it	eq
 800974e:	2020      	moveq	r0, #32
 8009750:	4770      	bx	lr

08009752 <__lo0bits>:
 8009752:	6803      	ldr	r3, [r0, #0]
 8009754:	4602      	mov	r2, r0
 8009756:	f013 0007 	ands.w	r0, r3, #7
 800975a:	d00b      	beq.n	8009774 <__lo0bits+0x22>
 800975c:	07d9      	lsls	r1, r3, #31
 800975e:	d421      	bmi.n	80097a4 <__lo0bits+0x52>
 8009760:	0798      	lsls	r0, r3, #30
 8009762:	bf49      	itett	mi
 8009764:	085b      	lsrmi	r3, r3, #1
 8009766:	089b      	lsrpl	r3, r3, #2
 8009768:	2001      	movmi	r0, #1
 800976a:	6013      	strmi	r3, [r2, #0]
 800976c:	bf5c      	itt	pl
 800976e:	2002      	movpl	r0, #2
 8009770:	6013      	strpl	r3, [r2, #0]
 8009772:	4770      	bx	lr
 8009774:	b299      	uxth	r1, r3
 8009776:	b909      	cbnz	r1, 800977c <__lo0bits+0x2a>
 8009778:	2010      	movs	r0, #16
 800977a:	0c1b      	lsrs	r3, r3, #16
 800977c:	b2d9      	uxtb	r1, r3
 800977e:	b909      	cbnz	r1, 8009784 <__lo0bits+0x32>
 8009780:	3008      	adds	r0, #8
 8009782:	0a1b      	lsrs	r3, r3, #8
 8009784:	0719      	lsls	r1, r3, #28
 8009786:	bf04      	itt	eq
 8009788:	091b      	lsreq	r3, r3, #4
 800978a:	3004      	addeq	r0, #4
 800978c:	0799      	lsls	r1, r3, #30
 800978e:	bf04      	itt	eq
 8009790:	089b      	lsreq	r3, r3, #2
 8009792:	3002      	addeq	r0, #2
 8009794:	07d9      	lsls	r1, r3, #31
 8009796:	d403      	bmi.n	80097a0 <__lo0bits+0x4e>
 8009798:	085b      	lsrs	r3, r3, #1
 800979a:	f100 0001 	add.w	r0, r0, #1
 800979e:	d003      	beq.n	80097a8 <__lo0bits+0x56>
 80097a0:	6013      	str	r3, [r2, #0]
 80097a2:	4770      	bx	lr
 80097a4:	2000      	movs	r0, #0
 80097a6:	4770      	bx	lr
 80097a8:	2020      	movs	r0, #32
 80097aa:	4770      	bx	lr

080097ac <__i2b>:
 80097ac:	b510      	push	{r4, lr}
 80097ae:	460c      	mov	r4, r1
 80097b0:	2101      	movs	r1, #1
 80097b2:	f7ff ff07 	bl	80095c4 <_Balloc>
 80097b6:	4602      	mov	r2, r0
 80097b8:	b928      	cbnz	r0, 80097c6 <__i2b+0x1a>
 80097ba:	f240 1145 	movw	r1, #325	@ 0x145
 80097be:	4b04      	ldr	r3, [pc, #16]	@ (80097d0 <__i2b+0x24>)
 80097c0:	4804      	ldr	r0, [pc, #16]	@ (80097d4 <__i2b+0x28>)
 80097c2:	f001 f831 	bl	800a828 <__assert_func>
 80097c6:	2301      	movs	r3, #1
 80097c8:	6144      	str	r4, [r0, #20]
 80097ca:	6103      	str	r3, [r0, #16]
 80097cc:	bd10      	pop	{r4, pc}
 80097ce:	bf00      	nop
 80097d0:	0800b330 	.word	0x0800b330
 80097d4:	0800b341 	.word	0x0800b341

080097d8 <__multiply>:
 80097d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097dc:	4614      	mov	r4, r2
 80097de:	690a      	ldr	r2, [r1, #16]
 80097e0:	6923      	ldr	r3, [r4, #16]
 80097e2:	460f      	mov	r7, r1
 80097e4:	429a      	cmp	r2, r3
 80097e6:	bfa2      	ittt	ge
 80097e8:	4623      	movge	r3, r4
 80097ea:	460c      	movge	r4, r1
 80097ec:	461f      	movge	r7, r3
 80097ee:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80097f2:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80097f6:	68a3      	ldr	r3, [r4, #8]
 80097f8:	6861      	ldr	r1, [r4, #4]
 80097fa:	eb0a 0609 	add.w	r6, sl, r9
 80097fe:	42b3      	cmp	r3, r6
 8009800:	b085      	sub	sp, #20
 8009802:	bfb8      	it	lt
 8009804:	3101      	addlt	r1, #1
 8009806:	f7ff fedd 	bl	80095c4 <_Balloc>
 800980a:	b930      	cbnz	r0, 800981a <__multiply+0x42>
 800980c:	4602      	mov	r2, r0
 800980e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8009812:	4b43      	ldr	r3, [pc, #268]	@ (8009920 <__multiply+0x148>)
 8009814:	4843      	ldr	r0, [pc, #268]	@ (8009924 <__multiply+0x14c>)
 8009816:	f001 f807 	bl	800a828 <__assert_func>
 800981a:	f100 0514 	add.w	r5, r0, #20
 800981e:	462b      	mov	r3, r5
 8009820:	2200      	movs	r2, #0
 8009822:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8009826:	4543      	cmp	r3, r8
 8009828:	d321      	bcc.n	800986e <__multiply+0x96>
 800982a:	f107 0114 	add.w	r1, r7, #20
 800982e:	f104 0214 	add.w	r2, r4, #20
 8009832:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 8009836:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800983a:	9302      	str	r3, [sp, #8]
 800983c:	1b13      	subs	r3, r2, r4
 800983e:	3b15      	subs	r3, #21
 8009840:	f023 0303 	bic.w	r3, r3, #3
 8009844:	3304      	adds	r3, #4
 8009846:	f104 0715 	add.w	r7, r4, #21
 800984a:	42ba      	cmp	r2, r7
 800984c:	bf38      	it	cc
 800984e:	2304      	movcc	r3, #4
 8009850:	9301      	str	r3, [sp, #4]
 8009852:	9b02      	ldr	r3, [sp, #8]
 8009854:	9103      	str	r1, [sp, #12]
 8009856:	428b      	cmp	r3, r1
 8009858:	d80c      	bhi.n	8009874 <__multiply+0x9c>
 800985a:	2e00      	cmp	r6, #0
 800985c:	dd03      	ble.n	8009866 <__multiply+0x8e>
 800985e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8009862:	2b00      	cmp	r3, #0
 8009864:	d05a      	beq.n	800991c <__multiply+0x144>
 8009866:	6106      	str	r6, [r0, #16]
 8009868:	b005      	add	sp, #20
 800986a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800986e:	f843 2b04 	str.w	r2, [r3], #4
 8009872:	e7d8      	b.n	8009826 <__multiply+0x4e>
 8009874:	f8b1 a000 	ldrh.w	sl, [r1]
 8009878:	f1ba 0f00 	cmp.w	sl, #0
 800987c:	d023      	beq.n	80098c6 <__multiply+0xee>
 800987e:	46a9      	mov	r9, r5
 8009880:	f04f 0c00 	mov.w	ip, #0
 8009884:	f104 0e14 	add.w	lr, r4, #20
 8009888:	f85e 7b04 	ldr.w	r7, [lr], #4
 800988c:	f8d9 3000 	ldr.w	r3, [r9]
 8009890:	fa1f fb87 	uxth.w	fp, r7
 8009894:	b29b      	uxth	r3, r3
 8009896:	fb0a 330b 	mla	r3, sl, fp, r3
 800989a:	4463      	add	r3, ip
 800989c:	f8d9 c000 	ldr.w	ip, [r9]
 80098a0:	0c3f      	lsrs	r7, r7, #16
 80098a2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80098a6:	fb0a c707 	mla	r7, sl, r7, ip
 80098aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80098ae:	b29b      	uxth	r3, r3
 80098b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098b4:	4572      	cmp	r2, lr
 80098b6:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80098ba:	f849 3b04 	str.w	r3, [r9], #4
 80098be:	d8e3      	bhi.n	8009888 <__multiply+0xb0>
 80098c0:	9b01      	ldr	r3, [sp, #4]
 80098c2:	f845 c003 	str.w	ip, [r5, r3]
 80098c6:	9b03      	ldr	r3, [sp, #12]
 80098c8:	3104      	adds	r1, #4
 80098ca:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80098ce:	f1b9 0f00 	cmp.w	r9, #0
 80098d2:	d021      	beq.n	8009918 <__multiply+0x140>
 80098d4:	46ae      	mov	lr, r5
 80098d6:	f04f 0a00 	mov.w	sl, #0
 80098da:	682b      	ldr	r3, [r5, #0]
 80098dc:	f104 0c14 	add.w	ip, r4, #20
 80098e0:	f8bc b000 	ldrh.w	fp, [ip]
 80098e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80098e8:	b29b      	uxth	r3, r3
 80098ea:	fb09 770b 	mla	r7, r9, fp, r7
 80098ee:	4457      	add	r7, sl
 80098f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80098f4:	f84e 3b04 	str.w	r3, [lr], #4
 80098f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 80098fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009900:	f8be 3000 	ldrh.w	r3, [lr]
 8009904:	4562      	cmp	r2, ip
 8009906:	fb09 330a 	mla	r3, r9, sl, r3
 800990a:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800990e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009912:	d8e5      	bhi.n	80098e0 <__multiply+0x108>
 8009914:	9f01      	ldr	r7, [sp, #4]
 8009916:	51eb      	str	r3, [r5, r7]
 8009918:	3504      	adds	r5, #4
 800991a:	e79a      	b.n	8009852 <__multiply+0x7a>
 800991c:	3e01      	subs	r6, #1
 800991e:	e79c      	b.n	800985a <__multiply+0x82>
 8009920:	0800b330 	.word	0x0800b330
 8009924:	0800b341 	.word	0x0800b341

08009928 <__pow5mult>:
 8009928:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800992c:	4615      	mov	r5, r2
 800992e:	f012 0203 	ands.w	r2, r2, #3
 8009932:	4607      	mov	r7, r0
 8009934:	460e      	mov	r6, r1
 8009936:	d007      	beq.n	8009948 <__pow5mult+0x20>
 8009938:	4c25      	ldr	r4, [pc, #148]	@ (80099d0 <__pow5mult+0xa8>)
 800993a:	3a01      	subs	r2, #1
 800993c:	2300      	movs	r3, #0
 800993e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009942:	f7ff fea1 	bl	8009688 <__multadd>
 8009946:	4606      	mov	r6, r0
 8009948:	10ad      	asrs	r5, r5, #2
 800994a:	d03d      	beq.n	80099c8 <__pow5mult+0xa0>
 800994c:	69fc      	ldr	r4, [r7, #28]
 800994e:	b97c      	cbnz	r4, 8009970 <__pow5mult+0x48>
 8009950:	2010      	movs	r0, #16
 8009952:	f7ff fd81 	bl	8009458 <malloc>
 8009956:	4602      	mov	r2, r0
 8009958:	61f8      	str	r0, [r7, #28]
 800995a:	b928      	cbnz	r0, 8009968 <__pow5mult+0x40>
 800995c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009960:	4b1c      	ldr	r3, [pc, #112]	@ (80099d4 <__pow5mult+0xac>)
 8009962:	481d      	ldr	r0, [pc, #116]	@ (80099d8 <__pow5mult+0xb0>)
 8009964:	f000 ff60 	bl	800a828 <__assert_func>
 8009968:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800996c:	6004      	str	r4, [r0, #0]
 800996e:	60c4      	str	r4, [r0, #12]
 8009970:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009974:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009978:	b94c      	cbnz	r4, 800998e <__pow5mult+0x66>
 800997a:	f240 2171 	movw	r1, #625	@ 0x271
 800997e:	4638      	mov	r0, r7
 8009980:	f7ff ff14 	bl	80097ac <__i2b>
 8009984:	2300      	movs	r3, #0
 8009986:	4604      	mov	r4, r0
 8009988:	f8c8 0008 	str.w	r0, [r8, #8]
 800998c:	6003      	str	r3, [r0, #0]
 800998e:	f04f 0900 	mov.w	r9, #0
 8009992:	07eb      	lsls	r3, r5, #31
 8009994:	d50a      	bpl.n	80099ac <__pow5mult+0x84>
 8009996:	4631      	mov	r1, r6
 8009998:	4622      	mov	r2, r4
 800999a:	4638      	mov	r0, r7
 800999c:	f7ff ff1c 	bl	80097d8 <__multiply>
 80099a0:	4680      	mov	r8, r0
 80099a2:	4631      	mov	r1, r6
 80099a4:	4638      	mov	r0, r7
 80099a6:	f7ff fe4d 	bl	8009644 <_Bfree>
 80099aa:	4646      	mov	r6, r8
 80099ac:	106d      	asrs	r5, r5, #1
 80099ae:	d00b      	beq.n	80099c8 <__pow5mult+0xa0>
 80099b0:	6820      	ldr	r0, [r4, #0]
 80099b2:	b938      	cbnz	r0, 80099c4 <__pow5mult+0x9c>
 80099b4:	4622      	mov	r2, r4
 80099b6:	4621      	mov	r1, r4
 80099b8:	4638      	mov	r0, r7
 80099ba:	f7ff ff0d 	bl	80097d8 <__multiply>
 80099be:	6020      	str	r0, [r4, #0]
 80099c0:	f8c0 9000 	str.w	r9, [r0]
 80099c4:	4604      	mov	r4, r0
 80099c6:	e7e4      	b.n	8009992 <__pow5mult+0x6a>
 80099c8:	4630      	mov	r0, r6
 80099ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80099ce:	bf00      	nop
 80099d0:	0800b39c 	.word	0x0800b39c
 80099d4:	0800b2c1 	.word	0x0800b2c1
 80099d8:	0800b341 	.word	0x0800b341

080099dc <__lshift>:
 80099dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099e0:	460c      	mov	r4, r1
 80099e2:	4607      	mov	r7, r0
 80099e4:	4691      	mov	r9, r2
 80099e6:	6923      	ldr	r3, [r4, #16]
 80099e8:	6849      	ldr	r1, [r1, #4]
 80099ea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80099ee:	68a3      	ldr	r3, [r4, #8]
 80099f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80099f4:	f108 0601 	add.w	r6, r8, #1
 80099f8:	42b3      	cmp	r3, r6
 80099fa:	db0b      	blt.n	8009a14 <__lshift+0x38>
 80099fc:	4638      	mov	r0, r7
 80099fe:	f7ff fde1 	bl	80095c4 <_Balloc>
 8009a02:	4605      	mov	r5, r0
 8009a04:	b948      	cbnz	r0, 8009a1a <__lshift+0x3e>
 8009a06:	4602      	mov	r2, r0
 8009a08:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009a0c:	4b27      	ldr	r3, [pc, #156]	@ (8009aac <__lshift+0xd0>)
 8009a0e:	4828      	ldr	r0, [pc, #160]	@ (8009ab0 <__lshift+0xd4>)
 8009a10:	f000 ff0a 	bl	800a828 <__assert_func>
 8009a14:	3101      	adds	r1, #1
 8009a16:	005b      	lsls	r3, r3, #1
 8009a18:	e7ee      	b.n	80099f8 <__lshift+0x1c>
 8009a1a:	2300      	movs	r3, #0
 8009a1c:	f100 0114 	add.w	r1, r0, #20
 8009a20:	f100 0210 	add.w	r2, r0, #16
 8009a24:	4618      	mov	r0, r3
 8009a26:	4553      	cmp	r3, sl
 8009a28:	db33      	blt.n	8009a92 <__lshift+0xb6>
 8009a2a:	6920      	ldr	r0, [r4, #16]
 8009a2c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009a30:	f104 0314 	add.w	r3, r4, #20
 8009a34:	f019 091f 	ands.w	r9, r9, #31
 8009a38:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009a3c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009a40:	d02b      	beq.n	8009a9a <__lshift+0xbe>
 8009a42:	468a      	mov	sl, r1
 8009a44:	2200      	movs	r2, #0
 8009a46:	f1c9 0e20 	rsb	lr, r9, #32
 8009a4a:	6818      	ldr	r0, [r3, #0]
 8009a4c:	fa00 f009 	lsl.w	r0, r0, r9
 8009a50:	4310      	orrs	r0, r2
 8009a52:	f84a 0b04 	str.w	r0, [sl], #4
 8009a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8009a5a:	459c      	cmp	ip, r3
 8009a5c:	fa22 f20e 	lsr.w	r2, r2, lr
 8009a60:	d8f3      	bhi.n	8009a4a <__lshift+0x6e>
 8009a62:	ebac 0304 	sub.w	r3, ip, r4
 8009a66:	3b15      	subs	r3, #21
 8009a68:	f023 0303 	bic.w	r3, r3, #3
 8009a6c:	3304      	adds	r3, #4
 8009a6e:	f104 0015 	add.w	r0, r4, #21
 8009a72:	4584      	cmp	ip, r0
 8009a74:	bf38      	it	cc
 8009a76:	2304      	movcc	r3, #4
 8009a78:	50ca      	str	r2, [r1, r3]
 8009a7a:	b10a      	cbz	r2, 8009a80 <__lshift+0xa4>
 8009a7c:	f108 0602 	add.w	r6, r8, #2
 8009a80:	3e01      	subs	r6, #1
 8009a82:	4638      	mov	r0, r7
 8009a84:	4621      	mov	r1, r4
 8009a86:	612e      	str	r6, [r5, #16]
 8009a88:	f7ff fddc 	bl	8009644 <_Bfree>
 8009a8c:	4628      	mov	r0, r5
 8009a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a92:	f842 0f04 	str.w	r0, [r2, #4]!
 8009a96:	3301      	adds	r3, #1
 8009a98:	e7c5      	b.n	8009a26 <__lshift+0x4a>
 8009a9a:	3904      	subs	r1, #4
 8009a9c:	f853 2b04 	ldr.w	r2, [r3], #4
 8009aa0:	459c      	cmp	ip, r3
 8009aa2:	f841 2f04 	str.w	r2, [r1, #4]!
 8009aa6:	d8f9      	bhi.n	8009a9c <__lshift+0xc0>
 8009aa8:	e7ea      	b.n	8009a80 <__lshift+0xa4>
 8009aaa:	bf00      	nop
 8009aac:	0800b330 	.word	0x0800b330
 8009ab0:	0800b341 	.word	0x0800b341

08009ab4 <__mcmp>:
 8009ab4:	4603      	mov	r3, r0
 8009ab6:	690a      	ldr	r2, [r1, #16]
 8009ab8:	6900      	ldr	r0, [r0, #16]
 8009aba:	b530      	push	{r4, r5, lr}
 8009abc:	1a80      	subs	r0, r0, r2
 8009abe:	d10e      	bne.n	8009ade <__mcmp+0x2a>
 8009ac0:	3314      	adds	r3, #20
 8009ac2:	3114      	adds	r1, #20
 8009ac4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8009ac8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8009acc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009ad0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8009ad4:	4295      	cmp	r5, r2
 8009ad6:	d003      	beq.n	8009ae0 <__mcmp+0x2c>
 8009ad8:	d205      	bcs.n	8009ae6 <__mcmp+0x32>
 8009ada:	f04f 30ff 	mov.w	r0, #4294967295
 8009ade:	bd30      	pop	{r4, r5, pc}
 8009ae0:	42a3      	cmp	r3, r4
 8009ae2:	d3f3      	bcc.n	8009acc <__mcmp+0x18>
 8009ae4:	e7fb      	b.n	8009ade <__mcmp+0x2a>
 8009ae6:	2001      	movs	r0, #1
 8009ae8:	e7f9      	b.n	8009ade <__mcmp+0x2a>
	...

08009aec <__mdiff>:
 8009aec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009af0:	4689      	mov	r9, r1
 8009af2:	4606      	mov	r6, r0
 8009af4:	4611      	mov	r1, r2
 8009af6:	4648      	mov	r0, r9
 8009af8:	4614      	mov	r4, r2
 8009afa:	f7ff ffdb 	bl	8009ab4 <__mcmp>
 8009afe:	1e05      	subs	r5, r0, #0
 8009b00:	d112      	bne.n	8009b28 <__mdiff+0x3c>
 8009b02:	4629      	mov	r1, r5
 8009b04:	4630      	mov	r0, r6
 8009b06:	f7ff fd5d 	bl	80095c4 <_Balloc>
 8009b0a:	4602      	mov	r2, r0
 8009b0c:	b928      	cbnz	r0, 8009b1a <__mdiff+0x2e>
 8009b0e:	f240 2137 	movw	r1, #567	@ 0x237
 8009b12:	4b3e      	ldr	r3, [pc, #248]	@ (8009c0c <__mdiff+0x120>)
 8009b14:	483e      	ldr	r0, [pc, #248]	@ (8009c10 <__mdiff+0x124>)
 8009b16:	f000 fe87 	bl	800a828 <__assert_func>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009b20:	4610      	mov	r0, r2
 8009b22:	b003      	add	sp, #12
 8009b24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b28:	bfbc      	itt	lt
 8009b2a:	464b      	movlt	r3, r9
 8009b2c:	46a1      	movlt	r9, r4
 8009b2e:	4630      	mov	r0, r6
 8009b30:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009b34:	bfba      	itte	lt
 8009b36:	461c      	movlt	r4, r3
 8009b38:	2501      	movlt	r5, #1
 8009b3a:	2500      	movge	r5, #0
 8009b3c:	f7ff fd42 	bl	80095c4 <_Balloc>
 8009b40:	4602      	mov	r2, r0
 8009b42:	b918      	cbnz	r0, 8009b4c <__mdiff+0x60>
 8009b44:	f240 2145 	movw	r1, #581	@ 0x245
 8009b48:	4b30      	ldr	r3, [pc, #192]	@ (8009c0c <__mdiff+0x120>)
 8009b4a:	e7e3      	b.n	8009b14 <__mdiff+0x28>
 8009b4c:	f100 0b14 	add.w	fp, r0, #20
 8009b50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8009b54:	f109 0310 	add.w	r3, r9, #16
 8009b58:	60c5      	str	r5, [r0, #12]
 8009b5a:	f04f 0c00 	mov.w	ip, #0
 8009b5e:	f109 0514 	add.w	r5, r9, #20
 8009b62:	46d9      	mov	r9, fp
 8009b64:	6926      	ldr	r6, [r4, #16]
 8009b66:	f104 0e14 	add.w	lr, r4, #20
 8009b6a:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009b6e:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009b72:	9301      	str	r3, [sp, #4]
 8009b74:	9b01      	ldr	r3, [sp, #4]
 8009b76:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009b7a:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009b7e:	b281      	uxth	r1, r0
 8009b80:	9301      	str	r3, [sp, #4]
 8009b82:	fa1f f38a 	uxth.w	r3, sl
 8009b86:	1a5b      	subs	r3, r3, r1
 8009b88:	0c00      	lsrs	r0, r0, #16
 8009b8a:	4463      	add	r3, ip
 8009b8c:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009b90:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8009b94:	b29b      	uxth	r3, r3
 8009b96:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8009b9a:	4576      	cmp	r6, lr
 8009b9c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009ba0:	f849 3b04 	str.w	r3, [r9], #4
 8009ba4:	d8e6      	bhi.n	8009b74 <__mdiff+0x88>
 8009ba6:	1b33      	subs	r3, r6, r4
 8009ba8:	3b15      	subs	r3, #21
 8009baa:	f023 0303 	bic.w	r3, r3, #3
 8009bae:	3415      	adds	r4, #21
 8009bb0:	3304      	adds	r3, #4
 8009bb2:	42a6      	cmp	r6, r4
 8009bb4:	bf38      	it	cc
 8009bb6:	2304      	movcc	r3, #4
 8009bb8:	441d      	add	r5, r3
 8009bba:	445b      	add	r3, fp
 8009bbc:	461e      	mov	r6, r3
 8009bbe:	462c      	mov	r4, r5
 8009bc0:	4544      	cmp	r4, r8
 8009bc2:	d30e      	bcc.n	8009be2 <__mdiff+0xf6>
 8009bc4:	f108 0103 	add.w	r1, r8, #3
 8009bc8:	1b49      	subs	r1, r1, r5
 8009bca:	f021 0103 	bic.w	r1, r1, #3
 8009bce:	3d03      	subs	r5, #3
 8009bd0:	45a8      	cmp	r8, r5
 8009bd2:	bf38      	it	cc
 8009bd4:	2100      	movcc	r1, #0
 8009bd6:	440b      	add	r3, r1
 8009bd8:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8009bdc:	b199      	cbz	r1, 8009c06 <__mdiff+0x11a>
 8009bde:	6117      	str	r7, [r2, #16]
 8009be0:	e79e      	b.n	8009b20 <__mdiff+0x34>
 8009be2:	46e6      	mov	lr, ip
 8009be4:	f854 1b04 	ldr.w	r1, [r4], #4
 8009be8:	fa1f fc81 	uxth.w	ip, r1
 8009bec:	44f4      	add	ip, lr
 8009bee:	0c08      	lsrs	r0, r1, #16
 8009bf0:	4471      	add	r1, lr
 8009bf2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009bf6:	b289      	uxth	r1, r1
 8009bf8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009bfc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009c00:	f846 1b04 	str.w	r1, [r6], #4
 8009c04:	e7dc      	b.n	8009bc0 <__mdiff+0xd4>
 8009c06:	3f01      	subs	r7, #1
 8009c08:	e7e6      	b.n	8009bd8 <__mdiff+0xec>
 8009c0a:	bf00      	nop
 8009c0c:	0800b330 	.word	0x0800b330
 8009c10:	0800b341 	.word	0x0800b341

08009c14 <__d2b>:
 8009c14:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009c18:	2101      	movs	r1, #1
 8009c1a:	4690      	mov	r8, r2
 8009c1c:	4699      	mov	r9, r3
 8009c1e:	9e08      	ldr	r6, [sp, #32]
 8009c20:	f7ff fcd0 	bl	80095c4 <_Balloc>
 8009c24:	4604      	mov	r4, r0
 8009c26:	b930      	cbnz	r0, 8009c36 <__d2b+0x22>
 8009c28:	4602      	mov	r2, r0
 8009c2a:	f240 310f 	movw	r1, #783	@ 0x30f
 8009c2e:	4b23      	ldr	r3, [pc, #140]	@ (8009cbc <__d2b+0xa8>)
 8009c30:	4823      	ldr	r0, [pc, #140]	@ (8009cc0 <__d2b+0xac>)
 8009c32:	f000 fdf9 	bl	800a828 <__assert_func>
 8009c36:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009c3a:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009c3e:	b10d      	cbz	r5, 8009c44 <__d2b+0x30>
 8009c40:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009c44:	9301      	str	r3, [sp, #4]
 8009c46:	f1b8 0300 	subs.w	r3, r8, #0
 8009c4a:	d024      	beq.n	8009c96 <__d2b+0x82>
 8009c4c:	4668      	mov	r0, sp
 8009c4e:	9300      	str	r3, [sp, #0]
 8009c50:	f7ff fd7f 	bl	8009752 <__lo0bits>
 8009c54:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009c58:	b1d8      	cbz	r0, 8009c92 <__d2b+0x7e>
 8009c5a:	f1c0 0320 	rsb	r3, r0, #32
 8009c5e:	fa02 f303 	lsl.w	r3, r2, r3
 8009c62:	430b      	orrs	r3, r1
 8009c64:	40c2      	lsrs	r2, r0
 8009c66:	6163      	str	r3, [r4, #20]
 8009c68:	9201      	str	r2, [sp, #4]
 8009c6a:	9b01      	ldr	r3, [sp, #4]
 8009c6c:	2b00      	cmp	r3, #0
 8009c6e:	bf0c      	ite	eq
 8009c70:	2201      	moveq	r2, #1
 8009c72:	2202      	movne	r2, #2
 8009c74:	61a3      	str	r3, [r4, #24]
 8009c76:	6122      	str	r2, [r4, #16]
 8009c78:	b1ad      	cbz	r5, 8009ca6 <__d2b+0x92>
 8009c7a:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009c7e:	4405      	add	r5, r0
 8009c80:	6035      	str	r5, [r6, #0]
 8009c82:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009c86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009c88:	6018      	str	r0, [r3, #0]
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	b002      	add	sp, #8
 8009c8e:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 8009c92:	6161      	str	r1, [r4, #20]
 8009c94:	e7e9      	b.n	8009c6a <__d2b+0x56>
 8009c96:	a801      	add	r0, sp, #4
 8009c98:	f7ff fd5b 	bl	8009752 <__lo0bits>
 8009c9c:	9b01      	ldr	r3, [sp, #4]
 8009c9e:	2201      	movs	r2, #1
 8009ca0:	6163      	str	r3, [r4, #20]
 8009ca2:	3020      	adds	r0, #32
 8009ca4:	e7e7      	b.n	8009c76 <__d2b+0x62>
 8009ca6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8009caa:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8009cae:	6030      	str	r0, [r6, #0]
 8009cb0:	6918      	ldr	r0, [r3, #16]
 8009cb2:	f7ff fd2f 	bl	8009714 <__hi0bits>
 8009cb6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8009cba:	e7e4      	b.n	8009c86 <__d2b+0x72>
 8009cbc:	0800b330 	.word	0x0800b330
 8009cc0:	0800b341 	.word	0x0800b341

08009cc4 <__ssputs_r>:
 8009cc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009cc8:	461f      	mov	r7, r3
 8009cca:	688e      	ldr	r6, [r1, #8]
 8009ccc:	4682      	mov	sl, r0
 8009cce:	42be      	cmp	r6, r7
 8009cd0:	460c      	mov	r4, r1
 8009cd2:	4690      	mov	r8, r2
 8009cd4:	680b      	ldr	r3, [r1, #0]
 8009cd6:	d82d      	bhi.n	8009d34 <__ssputs_r+0x70>
 8009cd8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cdc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009ce0:	d026      	beq.n	8009d30 <__ssputs_r+0x6c>
 8009ce2:	6965      	ldr	r5, [r4, #20]
 8009ce4:	6909      	ldr	r1, [r1, #16]
 8009ce6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cea:	eba3 0901 	sub.w	r9, r3, r1
 8009cee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cf2:	1c7b      	adds	r3, r7, #1
 8009cf4:	444b      	add	r3, r9
 8009cf6:	106d      	asrs	r5, r5, #1
 8009cf8:	429d      	cmp	r5, r3
 8009cfa:	bf38      	it	cc
 8009cfc:	461d      	movcc	r5, r3
 8009cfe:	0553      	lsls	r3, r2, #21
 8009d00:	d527      	bpl.n	8009d52 <__ssputs_r+0x8e>
 8009d02:	4629      	mov	r1, r5
 8009d04:	f7ff fbd2 	bl	80094ac <_malloc_r>
 8009d08:	4606      	mov	r6, r0
 8009d0a:	b360      	cbz	r0, 8009d66 <__ssputs_r+0xa2>
 8009d0c:	464a      	mov	r2, r9
 8009d0e:	6921      	ldr	r1, [r4, #16]
 8009d10:	f7fe fcfb 	bl	800870a <memcpy>
 8009d14:	89a3      	ldrh	r3, [r4, #12]
 8009d16:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009d1a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009d1e:	81a3      	strh	r3, [r4, #12]
 8009d20:	6126      	str	r6, [r4, #16]
 8009d22:	444e      	add	r6, r9
 8009d24:	6026      	str	r6, [r4, #0]
 8009d26:	463e      	mov	r6, r7
 8009d28:	6165      	str	r5, [r4, #20]
 8009d2a:	eba5 0509 	sub.w	r5, r5, r9
 8009d2e:	60a5      	str	r5, [r4, #8]
 8009d30:	42be      	cmp	r6, r7
 8009d32:	d900      	bls.n	8009d36 <__ssputs_r+0x72>
 8009d34:	463e      	mov	r6, r7
 8009d36:	4632      	mov	r2, r6
 8009d38:	4641      	mov	r1, r8
 8009d3a:	6820      	ldr	r0, [r4, #0]
 8009d3c:	f000 fd49 	bl	800a7d2 <memmove>
 8009d40:	2000      	movs	r0, #0
 8009d42:	68a3      	ldr	r3, [r4, #8]
 8009d44:	1b9b      	subs	r3, r3, r6
 8009d46:	60a3      	str	r3, [r4, #8]
 8009d48:	6823      	ldr	r3, [r4, #0]
 8009d4a:	4433      	add	r3, r6
 8009d4c:	6023      	str	r3, [r4, #0]
 8009d4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d52:	462a      	mov	r2, r5
 8009d54:	f000 fdac 	bl	800a8b0 <_realloc_r>
 8009d58:	4606      	mov	r6, r0
 8009d5a:	2800      	cmp	r0, #0
 8009d5c:	d1e0      	bne.n	8009d20 <__ssputs_r+0x5c>
 8009d5e:	4650      	mov	r0, sl
 8009d60:	6921      	ldr	r1, [r4, #16]
 8009d62:	f7ff fb31 	bl	80093c8 <_free_r>
 8009d66:	230c      	movs	r3, #12
 8009d68:	f8ca 3000 	str.w	r3, [sl]
 8009d6c:	89a3      	ldrh	r3, [r4, #12]
 8009d6e:	f04f 30ff 	mov.w	r0, #4294967295
 8009d72:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d76:	81a3      	strh	r3, [r4, #12]
 8009d78:	e7e9      	b.n	8009d4e <__ssputs_r+0x8a>
	...

08009d7c <_svfiprintf_r>:
 8009d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d80:	4698      	mov	r8, r3
 8009d82:	898b      	ldrh	r3, [r1, #12]
 8009d84:	4607      	mov	r7, r0
 8009d86:	061b      	lsls	r3, r3, #24
 8009d88:	460d      	mov	r5, r1
 8009d8a:	4614      	mov	r4, r2
 8009d8c:	b09d      	sub	sp, #116	@ 0x74
 8009d8e:	d510      	bpl.n	8009db2 <_svfiprintf_r+0x36>
 8009d90:	690b      	ldr	r3, [r1, #16]
 8009d92:	b973      	cbnz	r3, 8009db2 <_svfiprintf_r+0x36>
 8009d94:	2140      	movs	r1, #64	@ 0x40
 8009d96:	f7ff fb89 	bl	80094ac <_malloc_r>
 8009d9a:	6028      	str	r0, [r5, #0]
 8009d9c:	6128      	str	r0, [r5, #16]
 8009d9e:	b930      	cbnz	r0, 8009dae <_svfiprintf_r+0x32>
 8009da0:	230c      	movs	r3, #12
 8009da2:	603b      	str	r3, [r7, #0]
 8009da4:	f04f 30ff 	mov.w	r0, #4294967295
 8009da8:	b01d      	add	sp, #116	@ 0x74
 8009daa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009dae:	2340      	movs	r3, #64	@ 0x40
 8009db0:	616b      	str	r3, [r5, #20]
 8009db2:	2300      	movs	r3, #0
 8009db4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009db6:	2320      	movs	r3, #32
 8009db8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009dbc:	2330      	movs	r3, #48	@ 0x30
 8009dbe:	f04f 0901 	mov.w	r9, #1
 8009dc2:	f8cd 800c 	str.w	r8, [sp, #12]
 8009dc6:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009f60 <_svfiprintf_r+0x1e4>
 8009dca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009dce:	4623      	mov	r3, r4
 8009dd0:	469a      	mov	sl, r3
 8009dd2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dd6:	b10a      	cbz	r2, 8009ddc <_svfiprintf_r+0x60>
 8009dd8:	2a25      	cmp	r2, #37	@ 0x25
 8009dda:	d1f9      	bne.n	8009dd0 <_svfiprintf_r+0x54>
 8009ddc:	ebba 0b04 	subs.w	fp, sl, r4
 8009de0:	d00b      	beq.n	8009dfa <_svfiprintf_r+0x7e>
 8009de2:	465b      	mov	r3, fp
 8009de4:	4622      	mov	r2, r4
 8009de6:	4629      	mov	r1, r5
 8009de8:	4638      	mov	r0, r7
 8009dea:	f7ff ff6b 	bl	8009cc4 <__ssputs_r>
 8009dee:	3001      	adds	r0, #1
 8009df0:	f000 80a7 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009df4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009df6:	445a      	add	r2, fp
 8009df8:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dfa:	f89a 3000 	ldrb.w	r3, [sl]
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	f000 809f 	beq.w	8009f42 <_svfiprintf_r+0x1c6>
 8009e04:	2300      	movs	r3, #0
 8009e06:	f04f 32ff 	mov.w	r2, #4294967295
 8009e0a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009e0e:	f10a 0a01 	add.w	sl, sl, #1
 8009e12:	9304      	str	r3, [sp, #16]
 8009e14:	9307      	str	r3, [sp, #28]
 8009e16:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009e1a:	931a      	str	r3, [sp, #104]	@ 0x68
 8009e1c:	4654      	mov	r4, sl
 8009e1e:	2205      	movs	r2, #5
 8009e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009e24:	484e      	ldr	r0, [pc, #312]	@ (8009f60 <_svfiprintf_r+0x1e4>)
 8009e26:	f7fe fc62 	bl	80086ee <memchr>
 8009e2a:	9a04      	ldr	r2, [sp, #16]
 8009e2c:	b9d8      	cbnz	r0, 8009e66 <_svfiprintf_r+0xea>
 8009e2e:	06d0      	lsls	r0, r2, #27
 8009e30:	bf44      	itt	mi
 8009e32:	2320      	movmi	r3, #32
 8009e34:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e38:	0711      	lsls	r1, r2, #28
 8009e3a:	bf44      	itt	mi
 8009e3c:	232b      	movmi	r3, #43	@ 0x2b
 8009e3e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e42:	f89a 3000 	ldrb.w	r3, [sl]
 8009e46:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e48:	d015      	beq.n	8009e76 <_svfiprintf_r+0xfa>
 8009e4a:	4654      	mov	r4, sl
 8009e4c:	2000      	movs	r0, #0
 8009e4e:	f04f 0c0a 	mov.w	ip, #10
 8009e52:	9a07      	ldr	r2, [sp, #28]
 8009e54:	4621      	mov	r1, r4
 8009e56:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e5a:	3b30      	subs	r3, #48	@ 0x30
 8009e5c:	2b09      	cmp	r3, #9
 8009e5e:	d94b      	bls.n	8009ef8 <_svfiprintf_r+0x17c>
 8009e60:	b1b0      	cbz	r0, 8009e90 <_svfiprintf_r+0x114>
 8009e62:	9207      	str	r2, [sp, #28]
 8009e64:	e014      	b.n	8009e90 <_svfiprintf_r+0x114>
 8009e66:	eba0 0308 	sub.w	r3, r0, r8
 8009e6a:	fa09 f303 	lsl.w	r3, r9, r3
 8009e6e:	4313      	orrs	r3, r2
 8009e70:	46a2      	mov	sl, r4
 8009e72:	9304      	str	r3, [sp, #16]
 8009e74:	e7d2      	b.n	8009e1c <_svfiprintf_r+0xa0>
 8009e76:	9b03      	ldr	r3, [sp, #12]
 8009e78:	1d19      	adds	r1, r3, #4
 8009e7a:	681b      	ldr	r3, [r3, #0]
 8009e7c:	9103      	str	r1, [sp, #12]
 8009e7e:	2b00      	cmp	r3, #0
 8009e80:	bfbb      	ittet	lt
 8009e82:	425b      	neglt	r3, r3
 8009e84:	f042 0202 	orrlt.w	r2, r2, #2
 8009e88:	9307      	strge	r3, [sp, #28]
 8009e8a:	9307      	strlt	r3, [sp, #28]
 8009e8c:	bfb8      	it	lt
 8009e8e:	9204      	strlt	r2, [sp, #16]
 8009e90:	7823      	ldrb	r3, [r4, #0]
 8009e92:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e94:	d10a      	bne.n	8009eac <_svfiprintf_r+0x130>
 8009e96:	7863      	ldrb	r3, [r4, #1]
 8009e98:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e9a:	d132      	bne.n	8009f02 <_svfiprintf_r+0x186>
 8009e9c:	9b03      	ldr	r3, [sp, #12]
 8009e9e:	3402      	adds	r4, #2
 8009ea0:	1d1a      	adds	r2, r3, #4
 8009ea2:	681b      	ldr	r3, [r3, #0]
 8009ea4:	9203      	str	r2, [sp, #12]
 8009ea6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009eaa:	9305      	str	r3, [sp, #20]
 8009eac:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009f64 <_svfiprintf_r+0x1e8>
 8009eb0:	2203      	movs	r2, #3
 8009eb2:	4650      	mov	r0, sl
 8009eb4:	7821      	ldrb	r1, [r4, #0]
 8009eb6:	f7fe fc1a 	bl	80086ee <memchr>
 8009eba:	b138      	cbz	r0, 8009ecc <_svfiprintf_r+0x150>
 8009ebc:	2240      	movs	r2, #64	@ 0x40
 8009ebe:	9b04      	ldr	r3, [sp, #16]
 8009ec0:	eba0 000a 	sub.w	r0, r0, sl
 8009ec4:	4082      	lsls	r2, r0
 8009ec6:	4313      	orrs	r3, r2
 8009ec8:	3401      	adds	r4, #1
 8009eca:	9304      	str	r3, [sp, #16]
 8009ecc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ed0:	2206      	movs	r2, #6
 8009ed2:	4825      	ldr	r0, [pc, #148]	@ (8009f68 <_svfiprintf_r+0x1ec>)
 8009ed4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009ed8:	f7fe fc09 	bl	80086ee <memchr>
 8009edc:	2800      	cmp	r0, #0
 8009ede:	d036      	beq.n	8009f4e <_svfiprintf_r+0x1d2>
 8009ee0:	4b22      	ldr	r3, [pc, #136]	@ (8009f6c <_svfiprintf_r+0x1f0>)
 8009ee2:	bb1b      	cbnz	r3, 8009f2c <_svfiprintf_r+0x1b0>
 8009ee4:	9b03      	ldr	r3, [sp, #12]
 8009ee6:	3307      	adds	r3, #7
 8009ee8:	f023 0307 	bic.w	r3, r3, #7
 8009eec:	3308      	adds	r3, #8
 8009eee:	9303      	str	r3, [sp, #12]
 8009ef0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009ef2:	4433      	add	r3, r6
 8009ef4:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ef6:	e76a      	b.n	8009dce <_svfiprintf_r+0x52>
 8009ef8:	460c      	mov	r4, r1
 8009efa:	2001      	movs	r0, #1
 8009efc:	fb0c 3202 	mla	r2, ip, r2, r3
 8009f00:	e7a8      	b.n	8009e54 <_svfiprintf_r+0xd8>
 8009f02:	2300      	movs	r3, #0
 8009f04:	f04f 0c0a 	mov.w	ip, #10
 8009f08:	4619      	mov	r1, r3
 8009f0a:	3401      	adds	r4, #1
 8009f0c:	9305      	str	r3, [sp, #20]
 8009f0e:	4620      	mov	r0, r4
 8009f10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009f14:	3a30      	subs	r2, #48	@ 0x30
 8009f16:	2a09      	cmp	r2, #9
 8009f18:	d903      	bls.n	8009f22 <_svfiprintf_r+0x1a6>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d0c6      	beq.n	8009eac <_svfiprintf_r+0x130>
 8009f1e:	9105      	str	r1, [sp, #20]
 8009f20:	e7c4      	b.n	8009eac <_svfiprintf_r+0x130>
 8009f22:	4604      	mov	r4, r0
 8009f24:	2301      	movs	r3, #1
 8009f26:	fb0c 2101 	mla	r1, ip, r1, r2
 8009f2a:	e7f0      	b.n	8009f0e <_svfiprintf_r+0x192>
 8009f2c:	ab03      	add	r3, sp, #12
 8009f2e:	9300      	str	r3, [sp, #0]
 8009f30:	462a      	mov	r2, r5
 8009f32:	4638      	mov	r0, r7
 8009f34:	4b0e      	ldr	r3, [pc, #56]	@ (8009f70 <_svfiprintf_r+0x1f4>)
 8009f36:	a904      	add	r1, sp, #16
 8009f38:	f7fd fe14 	bl	8007b64 <_printf_float>
 8009f3c:	1c42      	adds	r2, r0, #1
 8009f3e:	4606      	mov	r6, r0
 8009f40:	d1d6      	bne.n	8009ef0 <_svfiprintf_r+0x174>
 8009f42:	89ab      	ldrh	r3, [r5, #12]
 8009f44:	065b      	lsls	r3, r3, #25
 8009f46:	f53f af2d 	bmi.w	8009da4 <_svfiprintf_r+0x28>
 8009f4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f4c:	e72c      	b.n	8009da8 <_svfiprintf_r+0x2c>
 8009f4e:	ab03      	add	r3, sp, #12
 8009f50:	9300      	str	r3, [sp, #0]
 8009f52:	462a      	mov	r2, r5
 8009f54:	4638      	mov	r0, r7
 8009f56:	4b06      	ldr	r3, [pc, #24]	@ (8009f70 <_svfiprintf_r+0x1f4>)
 8009f58:	a904      	add	r1, sp, #16
 8009f5a:	f7fe f8a1 	bl	80080a0 <_printf_i>
 8009f5e:	e7ed      	b.n	8009f3c <_svfiprintf_r+0x1c0>
 8009f60:	0800b498 	.word	0x0800b498
 8009f64:	0800b49e 	.word	0x0800b49e
 8009f68:	0800b4a2 	.word	0x0800b4a2
 8009f6c:	08007b65 	.word	0x08007b65
 8009f70:	08009cc5 	.word	0x08009cc5

08009f74 <_sungetc_r>:
 8009f74:	b538      	push	{r3, r4, r5, lr}
 8009f76:	1c4b      	adds	r3, r1, #1
 8009f78:	4614      	mov	r4, r2
 8009f7a:	d103      	bne.n	8009f84 <_sungetc_r+0x10>
 8009f7c:	f04f 35ff 	mov.w	r5, #4294967295
 8009f80:	4628      	mov	r0, r5
 8009f82:	bd38      	pop	{r3, r4, r5, pc}
 8009f84:	8993      	ldrh	r3, [r2, #12]
 8009f86:	b2cd      	uxtb	r5, r1
 8009f88:	f023 0320 	bic.w	r3, r3, #32
 8009f8c:	8193      	strh	r3, [r2, #12]
 8009f8e:	6853      	ldr	r3, [r2, #4]
 8009f90:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009f92:	b18a      	cbz	r2, 8009fb8 <_sungetc_r+0x44>
 8009f94:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009f96:	429a      	cmp	r2, r3
 8009f98:	dd08      	ble.n	8009fac <_sungetc_r+0x38>
 8009f9a:	6823      	ldr	r3, [r4, #0]
 8009f9c:	1e5a      	subs	r2, r3, #1
 8009f9e:	6022      	str	r2, [r4, #0]
 8009fa0:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009fa4:	6863      	ldr	r3, [r4, #4]
 8009fa6:	3301      	adds	r3, #1
 8009fa8:	6063      	str	r3, [r4, #4]
 8009faa:	e7e9      	b.n	8009f80 <_sungetc_r+0xc>
 8009fac:	4621      	mov	r1, r4
 8009fae:	f000 fbd8 	bl	800a762 <__submore>
 8009fb2:	2800      	cmp	r0, #0
 8009fb4:	d0f1      	beq.n	8009f9a <_sungetc_r+0x26>
 8009fb6:	e7e1      	b.n	8009f7c <_sungetc_r+0x8>
 8009fb8:	6921      	ldr	r1, [r4, #16]
 8009fba:	6822      	ldr	r2, [r4, #0]
 8009fbc:	b141      	cbz	r1, 8009fd0 <_sungetc_r+0x5c>
 8009fbe:	4291      	cmp	r1, r2
 8009fc0:	d206      	bcs.n	8009fd0 <_sungetc_r+0x5c>
 8009fc2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009fc6:	42a9      	cmp	r1, r5
 8009fc8:	d102      	bne.n	8009fd0 <_sungetc_r+0x5c>
 8009fca:	3a01      	subs	r2, #1
 8009fcc:	6022      	str	r2, [r4, #0]
 8009fce:	e7ea      	b.n	8009fa6 <_sungetc_r+0x32>
 8009fd0:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009fd4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009fd8:	6363      	str	r3, [r4, #52]	@ 0x34
 8009fda:	2303      	movs	r3, #3
 8009fdc:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009fde:	4623      	mov	r3, r4
 8009fe0:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009fe4:	6023      	str	r3, [r4, #0]
 8009fe6:	2301      	movs	r3, #1
 8009fe8:	e7de      	b.n	8009fa8 <_sungetc_r+0x34>

08009fea <__ssrefill_r>:
 8009fea:	b510      	push	{r4, lr}
 8009fec:	460c      	mov	r4, r1
 8009fee:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009ff0:	b169      	cbz	r1, 800a00e <__ssrefill_r+0x24>
 8009ff2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ff6:	4299      	cmp	r1, r3
 8009ff8:	d001      	beq.n	8009ffe <__ssrefill_r+0x14>
 8009ffa:	f7ff f9e5 	bl	80093c8 <_free_r>
 8009ffe:	2000      	movs	r0, #0
 800a000:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a002:	6360      	str	r0, [r4, #52]	@ 0x34
 800a004:	6063      	str	r3, [r4, #4]
 800a006:	b113      	cbz	r3, 800a00e <__ssrefill_r+0x24>
 800a008:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a00a:	6023      	str	r3, [r4, #0]
 800a00c:	bd10      	pop	{r4, pc}
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	f04f 30ff 	mov.w	r0, #4294967295
 800a014:	6023      	str	r3, [r4, #0]
 800a016:	2300      	movs	r3, #0
 800a018:	6063      	str	r3, [r4, #4]
 800a01a:	89a3      	ldrh	r3, [r4, #12]
 800a01c:	f043 0320 	orr.w	r3, r3, #32
 800a020:	81a3      	strh	r3, [r4, #12]
 800a022:	e7f3      	b.n	800a00c <__ssrefill_r+0x22>

0800a024 <__ssvfiscanf_r>:
 800a024:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a028:	460c      	mov	r4, r1
 800a02a:	2100      	movs	r1, #0
 800a02c:	4606      	mov	r6, r0
 800a02e:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 800a032:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 800a036:	49aa      	ldr	r1, [pc, #680]	@ (800a2e0 <__ssvfiscanf_r+0x2bc>)
 800a038:	f10d 0804 	add.w	r8, sp, #4
 800a03c:	91a0      	str	r1, [sp, #640]	@ 0x280
 800a03e:	49a9      	ldr	r1, [pc, #676]	@ (800a2e4 <__ssvfiscanf_r+0x2c0>)
 800a040:	4fa9      	ldr	r7, [pc, #676]	@ (800a2e8 <__ssvfiscanf_r+0x2c4>)
 800a042:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 800a046:	91a1      	str	r1, [sp, #644]	@ 0x284
 800a048:	9300      	str	r3, [sp, #0]
 800a04a:	7813      	ldrb	r3, [r2, #0]
 800a04c:	2b00      	cmp	r3, #0
 800a04e:	f000 8159 	beq.w	800a304 <__ssvfiscanf_r+0x2e0>
 800a052:	5cf9      	ldrb	r1, [r7, r3]
 800a054:	1c55      	adds	r5, r2, #1
 800a056:	f011 0108 	ands.w	r1, r1, #8
 800a05a:	d019      	beq.n	800a090 <__ssvfiscanf_r+0x6c>
 800a05c:	6863      	ldr	r3, [r4, #4]
 800a05e:	2b00      	cmp	r3, #0
 800a060:	dd0f      	ble.n	800a082 <__ssvfiscanf_r+0x5e>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	781a      	ldrb	r2, [r3, #0]
 800a066:	5cba      	ldrb	r2, [r7, r2]
 800a068:	0712      	lsls	r2, r2, #28
 800a06a:	d401      	bmi.n	800a070 <__ssvfiscanf_r+0x4c>
 800a06c:	462a      	mov	r2, r5
 800a06e:	e7ec      	b.n	800a04a <__ssvfiscanf_r+0x26>
 800a070:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a072:	3301      	adds	r3, #1
 800a074:	3201      	adds	r2, #1
 800a076:	9245      	str	r2, [sp, #276]	@ 0x114
 800a078:	6862      	ldr	r2, [r4, #4]
 800a07a:	6023      	str	r3, [r4, #0]
 800a07c:	3a01      	subs	r2, #1
 800a07e:	6062      	str	r2, [r4, #4]
 800a080:	e7ec      	b.n	800a05c <__ssvfiscanf_r+0x38>
 800a082:	4621      	mov	r1, r4
 800a084:	4630      	mov	r0, r6
 800a086:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a088:	4798      	blx	r3
 800a08a:	2800      	cmp	r0, #0
 800a08c:	d0e9      	beq.n	800a062 <__ssvfiscanf_r+0x3e>
 800a08e:	e7ed      	b.n	800a06c <__ssvfiscanf_r+0x48>
 800a090:	2b25      	cmp	r3, #37	@ 0x25
 800a092:	d012      	beq.n	800a0ba <__ssvfiscanf_r+0x96>
 800a094:	4699      	mov	r9, r3
 800a096:	6863      	ldr	r3, [r4, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	f340 8094 	ble.w	800a1c6 <__ssvfiscanf_r+0x1a2>
 800a09e:	6822      	ldr	r2, [r4, #0]
 800a0a0:	7813      	ldrb	r3, [r2, #0]
 800a0a2:	454b      	cmp	r3, r9
 800a0a4:	f040 812e 	bne.w	800a304 <__ssvfiscanf_r+0x2e0>
 800a0a8:	6863      	ldr	r3, [r4, #4]
 800a0aa:	3201      	adds	r2, #1
 800a0ac:	3b01      	subs	r3, #1
 800a0ae:	6063      	str	r3, [r4, #4]
 800a0b0:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 800a0b2:	6022      	str	r2, [r4, #0]
 800a0b4:	3301      	adds	r3, #1
 800a0b6:	9345      	str	r3, [sp, #276]	@ 0x114
 800a0b8:	e7d8      	b.n	800a06c <__ssvfiscanf_r+0x48>
 800a0ba:	9141      	str	r1, [sp, #260]	@ 0x104
 800a0bc:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a0be:	7853      	ldrb	r3, [r2, #1]
 800a0c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0c2:	bf04      	itt	eq
 800a0c4:	2310      	moveq	r3, #16
 800a0c6:	1c95      	addeq	r5, r2, #2
 800a0c8:	f04f 020a 	mov.w	r2, #10
 800a0cc:	bf08      	it	eq
 800a0ce:	9341      	streq	r3, [sp, #260]	@ 0x104
 800a0d0:	46a9      	mov	r9, r5
 800a0d2:	f819 1b01 	ldrb.w	r1, [r9], #1
 800a0d6:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 800a0da:	2b09      	cmp	r3, #9
 800a0dc:	d91e      	bls.n	800a11c <__ssvfiscanf_r+0xf8>
 800a0de:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 800a2ec <__ssvfiscanf_r+0x2c8>
 800a0e2:	2203      	movs	r2, #3
 800a0e4:	4650      	mov	r0, sl
 800a0e6:	f7fe fb02 	bl	80086ee <memchr>
 800a0ea:	b138      	cbz	r0, 800a0fc <__ssvfiscanf_r+0xd8>
 800a0ec:	2301      	movs	r3, #1
 800a0ee:	464d      	mov	r5, r9
 800a0f0:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a0f2:	eba0 000a 	sub.w	r0, r0, sl
 800a0f6:	4083      	lsls	r3, r0
 800a0f8:	4313      	orrs	r3, r2
 800a0fa:	9341      	str	r3, [sp, #260]	@ 0x104
 800a0fc:	f815 3b01 	ldrb.w	r3, [r5], #1
 800a100:	2b78      	cmp	r3, #120	@ 0x78
 800a102:	d806      	bhi.n	800a112 <__ssvfiscanf_r+0xee>
 800a104:	2b57      	cmp	r3, #87	@ 0x57
 800a106:	d810      	bhi.n	800a12a <__ssvfiscanf_r+0x106>
 800a108:	2b25      	cmp	r3, #37	@ 0x25
 800a10a:	d0c3      	beq.n	800a094 <__ssvfiscanf_r+0x70>
 800a10c:	d856      	bhi.n	800a1bc <__ssvfiscanf_r+0x198>
 800a10e:	2b00      	cmp	r3, #0
 800a110:	d064      	beq.n	800a1dc <__ssvfiscanf_r+0x1b8>
 800a112:	2303      	movs	r3, #3
 800a114:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a116:	230a      	movs	r3, #10
 800a118:	9342      	str	r3, [sp, #264]	@ 0x108
 800a11a:	e077      	b.n	800a20c <__ssvfiscanf_r+0x1e8>
 800a11c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800a11e:	464d      	mov	r5, r9
 800a120:	fb02 1103 	mla	r1, r2, r3, r1
 800a124:	3930      	subs	r1, #48	@ 0x30
 800a126:	9143      	str	r1, [sp, #268]	@ 0x10c
 800a128:	e7d2      	b.n	800a0d0 <__ssvfiscanf_r+0xac>
 800a12a:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 800a12e:	2a20      	cmp	r2, #32
 800a130:	d8ef      	bhi.n	800a112 <__ssvfiscanf_r+0xee>
 800a132:	a101      	add	r1, pc, #4	@ (adr r1, 800a138 <__ssvfiscanf_r+0x114>)
 800a134:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a138:	0800a1eb 	.word	0x0800a1eb
 800a13c:	0800a113 	.word	0x0800a113
 800a140:	0800a113 	.word	0x0800a113
 800a144:	0800a245 	.word	0x0800a245
 800a148:	0800a113 	.word	0x0800a113
 800a14c:	0800a113 	.word	0x0800a113
 800a150:	0800a113 	.word	0x0800a113
 800a154:	0800a113 	.word	0x0800a113
 800a158:	0800a113 	.word	0x0800a113
 800a15c:	0800a113 	.word	0x0800a113
 800a160:	0800a113 	.word	0x0800a113
 800a164:	0800a25b 	.word	0x0800a25b
 800a168:	0800a241 	.word	0x0800a241
 800a16c:	0800a1c3 	.word	0x0800a1c3
 800a170:	0800a1c3 	.word	0x0800a1c3
 800a174:	0800a1c3 	.word	0x0800a1c3
 800a178:	0800a113 	.word	0x0800a113
 800a17c:	0800a1fd 	.word	0x0800a1fd
 800a180:	0800a113 	.word	0x0800a113
 800a184:	0800a113 	.word	0x0800a113
 800a188:	0800a113 	.word	0x0800a113
 800a18c:	0800a113 	.word	0x0800a113
 800a190:	0800a26b 	.word	0x0800a26b
 800a194:	0800a205 	.word	0x0800a205
 800a198:	0800a1e3 	.word	0x0800a1e3
 800a19c:	0800a113 	.word	0x0800a113
 800a1a0:	0800a113 	.word	0x0800a113
 800a1a4:	0800a267 	.word	0x0800a267
 800a1a8:	0800a113 	.word	0x0800a113
 800a1ac:	0800a241 	.word	0x0800a241
 800a1b0:	0800a113 	.word	0x0800a113
 800a1b4:	0800a113 	.word	0x0800a113
 800a1b8:	0800a1eb 	.word	0x0800a1eb
 800a1bc:	3b45      	subs	r3, #69	@ 0x45
 800a1be:	2b02      	cmp	r3, #2
 800a1c0:	d8a7      	bhi.n	800a112 <__ssvfiscanf_r+0xee>
 800a1c2:	2305      	movs	r3, #5
 800a1c4:	e021      	b.n	800a20a <__ssvfiscanf_r+0x1e6>
 800a1c6:	4621      	mov	r1, r4
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a1cc:	4798      	blx	r3
 800a1ce:	2800      	cmp	r0, #0
 800a1d0:	f43f af65 	beq.w	800a09e <__ssvfiscanf_r+0x7a>
 800a1d4:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a1d6:	2800      	cmp	r0, #0
 800a1d8:	f040 808c 	bne.w	800a2f4 <__ssvfiscanf_r+0x2d0>
 800a1dc:	f04f 30ff 	mov.w	r0, #4294967295
 800a1e0:	e08c      	b.n	800a2fc <__ssvfiscanf_r+0x2d8>
 800a1e2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a1e4:	f042 0220 	orr.w	r2, r2, #32
 800a1e8:	9241      	str	r2, [sp, #260]	@ 0x104
 800a1ea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 800a1ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a1f0:	9241      	str	r2, [sp, #260]	@ 0x104
 800a1f2:	2210      	movs	r2, #16
 800a1f4:	2b6e      	cmp	r3, #110	@ 0x6e
 800a1f6:	9242      	str	r2, [sp, #264]	@ 0x108
 800a1f8:	d902      	bls.n	800a200 <__ssvfiscanf_r+0x1dc>
 800a1fa:	e005      	b.n	800a208 <__ssvfiscanf_r+0x1e4>
 800a1fc:	2300      	movs	r3, #0
 800a1fe:	9342      	str	r3, [sp, #264]	@ 0x108
 800a200:	2303      	movs	r3, #3
 800a202:	e002      	b.n	800a20a <__ssvfiscanf_r+0x1e6>
 800a204:	2308      	movs	r3, #8
 800a206:	9342      	str	r3, [sp, #264]	@ 0x108
 800a208:	2304      	movs	r3, #4
 800a20a:	9347      	str	r3, [sp, #284]	@ 0x11c
 800a20c:	6863      	ldr	r3, [r4, #4]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	dd39      	ble.n	800a286 <__ssvfiscanf_r+0x262>
 800a212:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a214:	0659      	lsls	r1, r3, #25
 800a216:	d404      	bmi.n	800a222 <__ssvfiscanf_r+0x1fe>
 800a218:	6823      	ldr	r3, [r4, #0]
 800a21a:	781a      	ldrb	r2, [r3, #0]
 800a21c:	5cba      	ldrb	r2, [r7, r2]
 800a21e:	0712      	lsls	r2, r2, #28
 800a220:	d438      	bmi.n	800a294 <__ssvfiscanf_r+0x270>
 800a222:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 800a224:	2b02      	cmp	r3, #2
 800a226:	dc47      	bgt.n	800a2b8 <__ssvfiscanf_r+0x294>
 800a228:	466b      	mov	r3, sp
 800a22a:	4622      	mov	r2, r4
 800a22c:	4630      	mov	r0, r6
 800a22e:	a941      	add	r1, sp, #260	@ 0x104
 800a230:	f000 f86a 	bl	800a308 <_scanf_chars>
 800a234:	2801      	cmp	r0, #1
 800a236:	d065      	beq.n	800a304 <__ssvfiscanf_r+0x2e0>
 800a238:	2802      	cmp	r0, #2
 800a23a:	f47f af17 	bne.w	800a06c <__ssvfiscanf_r+0x48>
 800a23e:	e7c9      	b.n	800a1d4 <__ssvfiscanf_r+0x1b0>
 800a240:	220a      	movs	r2, #10
 800a242:	e7d7      	b.n	800a1f4 <__ssvfiscanf_r+0x1d0>
 800a244:	4629      	mov	r1, r5
 800a246:	4640      	mov	r0, r8
 800a248:	f000 fa52 	bl	800a6f0 <__sccl>
 800a24c:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a24e:	4605      	mov	r5, r0
 800a250:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a254:	9341      	str	r3, [sp, #260]	@ 0x104
 800a256:	2301      	movs	r3, #1
 800a258:	e7d7      	b.n	800a20a <__ssvfiscanf_r+0x1e6>
 800a25a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 800a25c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a260:	9341      	str	r3, [sp, #260]	@ 0x104
 800a262:	2300      	movs	r3, #0
 800a264:	e7d1      	b.n	800a20a <__ssvfiscanf_r+0x1e6>
 800a266:	2302      	movs	r3, #2
 800a268:	e7cf      	b.n	800a20a <__ssvfiscanf_r+0x1e6>
 800a26a:	9841      	ldr	r0, [sp, #260]	@ 0x104
 800a26c:	06c3      	lsls	r3, r0, #27
 800a26e:	f53f aefd 	bmi.w	800a06c <__ssvfiscanf_r+0x48>
 800a272:	9b00      	ldr	r3, [sp, #0]
 800a274:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a276:	1d19      	adds	r1, r3, #4
 800a278:	9100      	str	r1, [sp, #0]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	07c0      	lsls	r0, r0, #31
 800a27e:	bf4c      	ite	mi
 800a280:	801a      	strhmi	r2, [r3, #0]
 800a282:	601a      	strpl	r2, [r3, #0]
 800a284:	e6f2      	b.n	800a06c <__ssvfiscanf_r+0x48>
 800a286:	4621      	mov	r1, r4
 800a288:	4630      	mov	r0, r6
 800a28a:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a28c:	4798      	blx	r3
 800a28e:	2800      	cmp	r0, #0
 800a290:	d0bf      	beq.n	800a212 <__ssvfiscanf_r+0x1ee>
 800a292:	e79f      	b.n	800a1d4 <__ssvfiscanf_r+0x1b0>
 800a294:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 800a296:	3201      	adds	r2, #1
 800a298:	9245      	str	r2, [sp, #276]	@ 0x114
 800a29a:	6862      	ldr	r2, [r4, #4]
 800a29c:	3a01      	subs	r2, #1
 800a29e:	2a00      	cmp	r2, #0
 800a2a0:	6062      	str	r2, [r4, #4]
 800a2a2:	dd02      	ble.n	800a2aa <__ssvfiscanf_r+0x286>
 800a2a4:	3301      	adds	r3, #1
 800a2a6:	6023      	str	r3, [r4, #0]
 800a2a8:	e7b6      	b.n	800a218 <__ssvfiscanf_r+0x1f4>
 800a2aa:	4621      	mov	r1, r4
 800a2ac:	4630      	mov	r0, r6
 800a2ae:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 800a2b0:	4798      	blx	r3
 800a2b2:	2800      	cmp	r0, #0
 800a2b4:	d0b0      	beq.n	800a218 <__ssvfiscanf_r+0x1f4>
 800a2b6:	e78d      	b.n	800a1d4 <__ssvfiscanf_r+0x1b0>
 800a2b8:	2b04      	cmp	r3, #4
 800a2ba:	dc06      	bgt.n	800a2ca <__ssvfiscanf_r+0x2a6>
 800a2bc:	466b      	mov	r3, sp
 800a2be:	4622      	mov	r2, r4
 800a2c0:	4630      	mov	r0, r6
 800a2c2:	a941      	add	r1, sp, #260	@ 0x104
 800a2c4:	f000 f87a 	bl	800a3bc <_scanf_i>
 800a2c8:	e7b4      	b.n	800a234 <__ssvfiscanf_r+0x210>
 800a2ca:	4b09      	ldr	r3, [pc, #36]	@ (800a2f0 <__ssvfiscanf_r+0x2cc>)
 800a2cc:	2b00      	cmp	r3, #0
 800a2ce:	f43f aecd 	beq.w	800a06c <__ssvfiscanf_r+0x48>
 800a2d2:	466b      	mov	r3, sp
 800a2d4:	4622      	mov	r2, r4
 800a2d6:	4630      	mov	r0, r6
 800a2d8:	a941      	add	r1, sp, #260	@ 0x104
 800a2da:	f3af 8000 	nop.w
 800a2de:	e7a9      	b.n	800a234 <__ssvfiscanf_r+0x210>
 800a2e0:	08009f75 	.word	0x08009f75
 800a2e4:	08009feb 	.word	0x08009feb
 800a2e8:	0800b50b 	.word	0x0800b50b
 800a2ec:	0800b49e 	.word	0x0800b49e
 800a2f0:	00000000 	.word	0x00000000
 800a2f4:	89a3      	ldrh	r3, [r4, #12]
 800a2f6:	065b      	lsls	r3, r3, #25
 800a2f8:	f53f af70 	bmi.w	800a1dc <__ssvfiscanf_r+0x1b8>
 800a2fc:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a300:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a304:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a306:	e7f9      	b.n	800a2fc <__ssvfiscanf_r+0x2d8>

0800a308 <_scanf_chars>:
 800a308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a30c:	4615      	mov	r5, r2
 800a30e:	688a      	ldr	r2, [r1, #8]
 800a310:	4680      	mov	r8, r0
 800a312:	460c      	mov	r4, r1
 800a314:	b932      	cbnz	r2, 800a324 <_scanf_chars+0x1c>
 800a316:	698a      	ldr	r2, [r1, #24]
 800a318:	2a00      	cmp	r2, #0
 800a31a:	bf14      	ite	ne
 800a31c:	f04f 32ff 	movne.w	r2, #4294967295
 800a320:	2201      	moveq	r2, #1
 800a322:	608a      	str	r2, [r1, #8]
 800a324:	2700      	movs	r7, #0
 800a326:	6822      	ldr	r2, [r4, #0]
 800a328:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a3b8 <_scanf_chars+0xb0>
 800a32c:	06d1      	lsls	r1, r2, #27
 800a32e:	bf5f      	itttt	pl
 800a330:	681a      	ldrpl	r2, [r3, #0]
 800a332:	1d11      	addpl	r1, r2, #4
 800a334:	6019      	strpl	r1, [r3, #0]
 800a336:	6816      	ldrpl	r6, [r2, #0]
 800a338:	69a0      	ldr	r0, [r4, #24]
 800a33a:	b188      	cbz	r0, 800a360 <_scanf_chars+0x58>
 800a33c:	2801      	cmp	r0, #1
 800a33e:	d107      	bne.n	800a350 <_scanf_chars+0x48>
 800a340:	682b      	ldr	r3, [r5, #0]
 800a342:	781a      	ldrb	r2, [r3, #0]
 800a344:	6963      	ldr	r3, [r4, #20]
 800a346:	5c9b      	ldrb	r3, [r3, r2]
 800a348:	b953      	cbnz	r3, 800a360 <_scanf_chars+0x58>
 800a34a:	2f00      	cmp	r7, #0
 800a34c:	d031      	beq.n	800a3b2 <_scanf_chars+0xaa>
 800a34e:	e022      	b.n	800a396 <_scanf_chars+0x8e>
 800a350:	2802      	cmp	r0, #2
 800a352:	d120      	bne.n	800a396 <_scanf_chars+0x8e>
 800a354:	682b      	ldr	r3, [r5, #0]
 800a356:	781b      	ldrb	r3, [r3, #0]
 800a358:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a35c:	071b      	lsls	r3, r3, #28
 800a35e:	d41a      	bmi.n	800a396 <_scanf_chars+0x8e>
 800a360:	6823      	ldr	r3, [r4, #0]
 800a362:	3701      	adds	r7, #1
 800a364:	06da      	lsls	r2, r3, #27
 800a366:	bf5e      	ittt	pl
 800a368:	682b      	ldrpl	r3, [r5, #0]
 800a36a:	781b      	ldrbpl	r3, [r3, #0]
 800a36c:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a370:	682a      	ldr	r2, [r5, #0]
 800a372:	686b      	ldr	r3, [r5, #4]
 800a374:	3201      	adds	r2, #1
 800a376:	602a      	str	r2, [r5, #0]
 800a378:	68a2      	ldr	r2, [r4, #8]
 800a37a:	3b01      	subs	r3, #1
 800a37c:	3a01      	subs	r2, #1
 800a37e:	606b      	str	r3, [r5, #4]
 800a380:	60a2      	str	r2, [r4, #8]
 800a382:	b142      	cbz	r2, 800a396 <_scanf_chars+0x8e>
 800a384:	2b00      	cmp	r3, #0
 800a386:	dcd7      	bgt.n	800a338 <_scanf_chars+0x30>
 800a388:	4629      	mov	r1, r5
 800a38a:	4640      	mov	r0, r8
 800a38c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a390:	4798      	blx	r3
 800a392:	2800      	cmp	r0, #0
 800a394:	d0d0      	beq.n	800a338 <_scanf_chars+0x30>
 800a396:	6823      	ldr	r3, [r4, #0]
 800a398:	f013 0310 	ands.w	r3, r3, #16
 800a39c:	d105      	bne.n	800a3aa <_scanf_chars+0xa2>
 800a39e:	68e2      	ldr	r2, [r4, #12]
 800a3a0:	3201      	adds	r2, #1
 800a3a2:	60e2      	str	r2, [r4, #12]
 800a3a4:	69a2      	ldr	r2, [r4, #24]
 800a3a6:	b102      	cbz	r2, 800a3aa <_scanf_chars+0xa2>
 800a3a8:	7033      	strb	r3, [r6, #0]
 800a3aa:	2000      	movs	r0, #0
 800a3ac:	6923      	ldr	r3, [r4, #16]
 800a3ae:	443b      	add	r3, r7
 800a3b0:	6123      	str	r3, [r4, #16]
 800a3b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a3b6:	bf00      	nop
 800a3b8:	0800b50b 	.word	0x0800b50b

0800a3bc <_scanf_i>:
 800a3bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a3c0:	460c      	mov	r4, r1
 800a3c2:	4698      	mov	r8, r3
 800a3c4:	4b72      	ldr	r3, [pc, #456]	@ (800a590 <_scanf_i+0x1d4>)
 800a3c6:	b087      	sub	sp, #28
 800a3c8:	4682      	mov	sl, r0
 800a3ca:	4616      	mov	r6, r2
 800a3cc:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a3d0:	ab03      	add	r3, sp, #12
 800a3d2:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a3d6:	4b6f      	ldr	r3, [pc, #444]	@ (800a594 <_scanf_i+0x1d8>)
 800a3d8:	69a1      	ldr	r1, [r4, #24]
 800a3da:	4a6f      	ldr	r2, [pc, #444]	@ (800a598 <_scanf_i+0x1dc>)
 800a3dc:	4627      	mov	r7, r4
 800a3de:	2903      	cmp	r1, #3
 800a3e0:	bf08      	it	eq
 800a3e2:	461a      	moveq	r2, r3
 800a3e4:	68a3      	ldr	r3, [r4, #8]
 800a3e6:	9201      	str	r2, [sp, #4]
 800a3e8:	1e5a      	subs	r2, r3, #1
 800a3ea:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a3ee:	bf81      	itttt	hi
 800a3f0:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a3f4:	eb03 0905 	addhi.w	r9, r3, r5
 800a3f8:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a3fc:	60a3      	strhi	r3, [r4, #8]
 800a3fe:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a402:	bf98      	it	ls
 800a404:	f04f 0900 	movls.w	r9, #0
 800a408:	463d      	mov	r5, r7
 800a40a:	f04f 0b00 	mov.w	fp, #0
 800a40e:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a412:	6023      	str	r3, [r4, #0]
 800a414:	6831      	ldr	r1, [r6, #0]
 800a416:	ab03      	add	r3, sp, #12
 800a418:	2202      	movs	r2, #2
 800a41a:	7809      	ldrb	r1, [r1, #0]
 800a41c:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a420:	f7fe f965 	bl	80086ee <memchr>
 800a424:	b328      	cbz	r0, 800a472 <_scanf_i+0xb6>
 800a426:	f1bb 0f01 	cmp.w	fp, #1
 800a42a:	d159      	bne.n	800a4e0 <_scanf_i+0x124>
 800a42c:	6862      	ldr	r2, [r4, #4]
 800a42e:	b92a      	cbnz	r2, 800a43c <_scanf_i+0x80>
 800a430:	2108      	movs	r1, #8
 800a432:	6822      	ldr	r2, [r4, #0]
 800a434:	6061      	str	r1, [r4, #4]
 800a436:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a43a:	6022      	str	r2, [r4, #0]
 800a43c:	6822      	ldr	r2, [r4, #0]
 800a43e:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a442:	6022      	str	r2, [r4, #0]
 800a444:	68a2      	ldr	r2, [r4, #8]
 800a446:	1e51      	subs	r1, r2, #1
 800a448:	60a1      	str	r1, [r4, #8]
 800a44a:	b192      	cbz	r2, 800a472 <_scanf_i+0xb6>
 800a44c:	6832      	ldr	r2, [r6, #0]
 800a44e:	1c51      	adds	r1, r2, #1
 800a450:	6031      	str	r1, [r6, #0]
 800a452:	7812      	ldrb	r2, [r2, #0]
 800a454:	f805 2b01 	strb.w	r2, [r5], #1
 800a458:	6872      	ldr	r2, [r6, #4]
 800a45a:	3a01      	subs	r2, #1
 800a45c:	2a00      	cmp	r2, #0
 800a45e:	6072      	str	r2, [r6, #4]
 800a460:	dc07      	bgt.n	800a472 <_scanf_i+0xb6>
 800a462:	4631      	mov	r1, r6
 800a464:	4650      	mov	r0, sl
 800a466:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a46a:	4790      	blx	r2
 800a46c:	2800      	cmp	r0, #0
 800a46e:	f040 8085 	bne.w	800a57c <_scanf_i+0x1c0>
 800a472:	f10b 0b01 	add.w	fp, fp, #1
 800a476:	f1bb 0f03 	cmp.w	fp, #3
 800a47a:	d1cb      	bne.n	800a414 <_scanf_i+0x58>
 800a47c:	6863      	ldr	r3, [r4, #4]
 800a47e:	b90b      	cbnz	r3, 800a484 <_scanf_i+0xc8>
 800a480:	230a      	movs	r3, #10
 800a482:	6063      	str	r3, [r4, #4]
 800a484:	6863      	ldr	r3, [r4, #4]
 800a486:	4945      	ldr	r1, [pc, #276]	@ (800a59c <_scanf_i+0x1e0>)
 800a488:	6960      	ldr	r0, [r4, #20]
 800a48a:	1ac9      	subs	r1, r1, r3
 800a48c:	f000 f930 	bl	800a6f0 <__sccl>
 800a490:	f04f 0b00 	mov.w	fp, #0
 800a494:	68a3      	ldr	r3, [r4, #8]
 800a496:	6822      	ldr	r2, [r4, #0]
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d03d      	beq.n	800a518 <_scanf_i+0x15c>
 800a49c:	6831      	ldr	r1, [r6, #0]
 800a49e:	6960      	ldr	r0, [r4, #20]
 800a4a0:	f891 c000 	ldrb.w	ip, [r1]
 800a4a4:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a4a8:	2800      	cmp	r0, #0
 800a4aa:	d035      	beq.n	800a518 <_scanf_i+0x15c>
 800a4ac:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a4b0:	d124      	bne.n	800a4fc <_scanf_i+0x140>
 800a4b2:	0510      	lsls	r0, r2, #20
 800a4b4:	d522      	bpl.n	800a4fc <_scanf_i+0x140>
 800a4b6:	f10b 0b01 	add.w	fp, fp, #1
 800a4ba:	f1b9 0f00 	cmp.w	r9, #0
 800a4be:	d003      	beq.n	800a4c8 <_scanf_i+0x10c>
 800a4c0:	3301      	adds	r3, #1
 800a4c2:	f109 39ff 	add.w	r9, r9, #4294967295
 800a4c6:	60a3      	str	r3, [r4, #8]
 800a4c8:	6873      	ldr	r3, [r6, #4]
 800a4ca:	3b01      	subs	r3, #1
 800a4cc:	2b00      	cmp	r3, #0
 800a4ce:	6073      	str	r3, [r6, #4]
 800a4d0:	dd1b      	ble.n	800a50a <_scanf_i+0x14e>
 800a4d2:	6833      	ldr	r3, [r6, #0]
 800a4d4:	3301      	adds	r3, #1
 800a4d6:	6033      	str	r3, [r6, #0]
 800a4d8:	68a3      	ldr	r3, [r4, #8]
 800a4da:	3b01      	subs	r3, #1
 800a4dc:	60a3      	str	r3, [r4, #8]
 800a4de:	e7d9      	b.n	800a494 <_scanf_i+0xd8>
 800a4e0:	f1bb 0f02 	cmp.w	fp, #2
 800a4e4:	d1ae      	bne.n	800a444 <_scanf_i+0x88>
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a4ec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a4f0:	d1bf      	bne.n	800a472 <_scanf_i+0xb6>
 800a4f2:	2110      	movs	r1, #16
 800a4f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a4f8:	6061      	str	r1, [r4, #4]
 800a4fa:	e7a2      	b.n	800a442 <_scanf_i+0x86>
 800a4fc:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a500:	6022      	str	r2, [r4, #0]
 800a502:	780b      	ldrb	r3, [r1, #0]
 800a504:	f805 3b01 	strb.w	r3, [r5], #1
 800a508:	e7de      	b.n	800a4c8 <_scanf_i+0x10c>
 800a50a:	4631      	mov	r1, r6
 800a50c:	4650      	mov	r0, sl
 800a50e:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a512:	4798      	blx	r3
 800a514:	2800      	cmp	r0, #0
 800a516:	d0df      	beq.n	800a4d8 <_scanf_i+0x11c>
 800a518:	6823      	ldr	r3, [r4, #0]
 800a51a:	05d9      	lsls	r1, r3, #23
 800a51c:	d50d      	bpl.n	800a53a <_scanf_i+0x17e>
 800a51e:	42bd      	cmp	r5, r7
 800a520:	d909      	bls.n	800a536 <_scanf_i+0x17a>
 800a522:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a526:	4632      	mov	r2, r6
 800a528:	4650      	mov	r0, sl
 800a52a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a52e:	f105 39ff 	add.w	r9, r5, #4294967295
 800a532:	4798      	blx	r3
 800a534:	464d      	mov	r5, r9
 800a536:	42bd      	cmp	r5, r7
 800a538:	d028      	beq.n	800a58c <_scanf_i+0x1d0>
 800a53a:	6822      	ldr	r2, [r4, #0]
 800a53c:	f012 0210 	ands.w	r2, r2, #16
 800a540:	d113      	bne.n	800a56a <_scanf_i+0x1ae>
 800a542:	702a      	strb	r2, [r5, #0]
 800a544:	4639      	mov	r1, r7
 800a546:	6863      	ldr	r3, [r4, #4]
 800a548:	4650      	mov	r0, sl
 800a54a:	9e01      	ldr	r6, [sp, #4]
 800a54c:	47b0      	blx	r6
 800a54e:	f8d8 3000 	ldr.w	r3, [r8]
 800a552:	6821      	ldr	r1, [r4, #0]
 800a554:	1d1a      	adds	r2, r3, #4
 800a556:	f8c8 2000 	str.w	r2, [r8]
 800a55a:	f011 0f20 	tst.w	r1, #32
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	d00f      	beq.n	800a582 <_scanf_i+0x1c6>
 800a562:	6018      	str	r0, [r3, #0]
 800a564:	68e3      	ldr	r3, [r4, #12]
 800a566:	3301      	adds	r3, #1
 800a568:	60e3      	str	r3, [r4, #12]
 800a56a:	2000      	movs	r0, #0
 800a56c:	6923      	ldr	r3, [r4, #16]
 800a56e:	1bed      	subs	r5, r5, r7
 800a570:	445d      	add	r5, fp
 800a572:	442b      	add	r3, r5
 800a574:	6123      	str	r3, [r4, #16]
 800a576:	b007      	add	sp, #28
 800a578:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a57c:	f04f 0b00 	mov.w	fp, #0
 800a580:	e7ca      	b.n	800a518 <_scanf_i+0x15c>
 800a582:	07ca      	lsls	r2, r1, #31
 800a584:	bf4c      	ite	mi
 800a586:	8018      	strhmi	r0, [r3, #0]
 800a588:	6018      	strpl	r0, [r3, #0]
 800a58a:	e7eb      	b.n	800a564 <_scanf_i+0x1a8>
 800a58c:	2001      	movs	r0, #1
 800a58e:	e7f2      	b.n	800a576 <_scanf_i+0x1ba>
 800a590:	0800b238 	.word	0x0800b238
 800a594:	0800aa01 	.word	0x0800aa01
 800a598:	0800aae1 	.word	0x0800aae1
 800a59c:	0800b4b9 	.word	0x0800b4b9

0800a5a0 <__sflush_r>:
 800a5a0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a5a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a5a6:	0716      	lsls	r6, r2, #28
 800a5a8:	4605      	mov	r5, r0
 800a5aa:	460c      	mov	r4, r1
 800a5ac:	d454      	bmi.n	800a658 <__sflush_r+0xb8>
 800a5ae:	684b      	ldr	r3, [r1, #4]
 800a5b0:	2b00      	cmp	r3, #0
 800a5b2:	dc02      	bgt.n	800a5ba <__sflush_r+0x1a>
 800a5b4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a5b6:	2b00      	cmp	r3, #0
 800a5b8:	dd48      	ble.n	800a64c <__sflush_r+0xac>
 800a5ba:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5bc:	2e00      	cmp	r6, #0
 800a5be:	d045      	beq.n	800a64c <__sflush_r+0xac>
 800a5c0:	2300      	movs	r3, #0
 800a5c2:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a5c6:	682f      	ldr	r7, [r5, #0]
 800a5c8:	6a21      	ldr	r1, [r4, #32]
 800a5ca:	602b      	str	r3, [r5, #0]
 800a5cc:	d030      	beq.n	800a630 <__sflush_r+0x90>
 800a5ce:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a5d0:	89a3      	ldrh	r3, [r4, #12]
 800a5d2:	0759      	lsls	r1, r3, #29
 800a5d4:	d505      	bpl.n	800a5e2 <__sflush_r+0x42>
 800a5d6:	6863      	ldr	r3, [r4, #4]
 800a5d8:	1ad2      	subs	r2, r2, r3
 800a5da:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a5dc:	b10b      	cbz	r3, 800a5e2 <__sflush_r+0x42>
 800a5de:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a5e0:	1ad2      	subs	r2, r2, r3
 800a5e2:	2300      	movs	r3, #0
 800a5e4:	4628      	mov	r0, r5
 800a5e6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a5e8:	6a21      	ldr	r1, [r4, #32]
 800a5ea:	47b0      	blx	r6
 800a5ec:	1c43      	adds	r3, r0, #1
 800a5ee:	89a3      	ldrh	r3, [r4, #12]
 800a5f0:	d106      	bne.n	800a600 <__sflush_r+0x60>
 800a5f2:	6829      	ldr	r1, [r5, #0]
 800a5f4:	291d      	cmp	r1, #29
 800a5f6:	d82b      	bhi.n	800a650 <__sflush_r+0xb0>
 800a5f8:	4a28      	ldr	r2, [pc, #160]	@ (800a69c <__sflush_r+0xfc>)
 800a5fa:	410a      	asrs	r2, r1
 800a5fc:	07d6      	lsls	r6, r2, #31
 800a5fe:	d427      	bmi.n	800a650 <__sflush_r+0xb0>
 800a600:	2200      	movs	r2, #0
 800a602:	6062      	str	r2, [r4, #4]
 800a604:	6922      	ldr	r2, [r4, #16]
 800a606:	04d9      	lsls	r1, r3, #19
 800a608:	6022      	str	r2, [r4, #0]
 800a60a:	d504      	bpl.n	800a616 <__sflush_r+0x76>
 800a60c:	1c42      	adds	r2, r0, #1
 800a60e:	d101      	bne.n	800a614 <__sflush_r+0x74>
 800a610:	682b      	ldr	r3, [r5, #0]
 800a612:	b903      	cbnz	r3, 800a616 <__sflush_r+0x76>
 800a614:	6560      	str	r0, [r4, #84]	@ 0x54
 800a616:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a618:	602f      	str	r7, [r5, #0]
 800a61a:	b1b9      	cbz	r1, 800a64c <__sflush_r+0xac>
 800a61c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a620:	4299      	cmp	r1, r3
 800a622:	d002      	beq.n	800a62a <__sflush_r+0x8a>
 800a624:	4628      	mov	r0, r5
 800a626:	f7fe fecf 	bl	80093c8 <_free_r>
 800a62a:	2300      	movs	r3, #0
 800a62c:	6363      	str	r3, [r4, #52]	@ 0x34
 800a62e:	e00d      	b.n	800a64c <__sflush_r+0xac>
 800a630:	2301      	movs	r3, #1
 800a632:	4628      	mov	r0, r5
 800a634:	47b0      	blx	r6
 800a636:	4602      	mov	r2, r0
 800a638:	1c50      	adds	r0, r2, #1
 800a63a:	d1c9      	bne.n	800a5d0 <__sflush_r+0x30>
 800a63c:	682b      	ldr	r3, [r5, #0]
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d0c6      	beq.n	800a5d0 <__sflush_r+0x30>
 800a642:	2b1d      	cmp	r3, #29
 800a644:	d001      	beq.n	800a64a <__sflush_r+0xaa>
 800a646:	2b16      	cmp	r3, #22
 800a648:	d11d      	bne.n	800a686 <__sflush_r+0xe6>
 800a64a:	602f      	str	r7, [r5, #0]
 800a64c:	2000      	movs	r0, #0
 800a64e:	e021      	b.n	800a694 <__sflush_r+0xf4>
 800a650:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a654:	b21b      	sxth	r3, r3
 800a656:	e01a      	b.n	800a68e <__sflush_r+0xee>
 800a658:	690f      	ldr	r7, [r1, #16]
 800a65a:	2f00      	cmp	r7, #0
 800a65c:	d0f6      	beq.n	800a64c <__sflush_r+0xac>
 800a65e:	0793      	lsls	r3, r2, #30
 800a660:	bf18      	it	ne
 800a662:	2300      	movne	r3, #0
 800a664:	680e      	ldr	r6, [r1, #0]
 800a666:	bf08      	it	eq
 800a668:	694b      	ldreq	r3, [r1, #20]
 800a66a:	1bf6      	subs	r6, r6, r7
 800a66c:	600f      	str	r7, [r1, #0]
 800a66e:	608b      	str	r3, [r1, #8]
 800a670:	2e00      	cmp	r6, #0
 800a672:	ddeb      	ble.n	800a64c <__sflush_r+0xac>
 800a674:	4633      	mov	r3, r6
 800a676:	463a      	mov	r2, r7
 800a678:	4628      	mov	r0, r5
 800a67a:	6a21      	ldr	r1, [r4, #32]
 800a67c:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a680:	47e0      	blx	ip
 800a682:	2800      	cmp	r0, #0
 800a684:	dc07      	bgt.n	800a696 <__sflush_r+0xf6>
 800a686:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a68a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a68e:	f04f 30ff 	mov.w	r0, #4294967295
 800a692:	81a3      	strh	r3, [r4, #12]
 800a694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a696:	4407      	add	r7, r0
 800a698:	1a36      	subs	r6, r6, r0
 800a69a:	e7e9      	b.n	800a670 <__sflush_r+0xd0>
 800a69c:	dfbffffe 	.word	0xdfbffffe

0800a6a0 <_fflush_r>:
 800a6a0:	b538      	push	{r3, r4, r5, lr}
 800a6a2:	690b      	ldr	r3, [r1, #16]
 800a6a4:	4605      	mov	r5, r0
 800a6a6:	460c      	mov	r4, r1
 800a6a8:	b913      	cbnz	r3, 800a6b0 <_fflush_r+0x10>
 800a6aa:	2500      	movs	r5, #0
 800a6ac:	4628      	mov	r0, r5
 800a6ae:	bd38      	pop	{r3, r4, r5, pc}
 800a6b0:	b118      	cbz	r0, 800a6ba <_fflush_r+0x1a>
 800a6b2:	6a03      	ldr	r3, [r0, #32]
 800a6b4:	b90b      	cbnz	r3, 800a6ba <_fflush_r+0x1a>
 800a6b6:	f7fd fe9f 	bl	80083f8 <__sinit>
 800a6ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d0f3      	beq.n	800a6aa <_fflush_r+0xa>
 800a6c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a6c4:	07d0      	lsls	r0, r2, #31
 800a6c6:	d404      	bmi.n	800a6d2 <_fflush_r+0x32>
 800a6c8:	0599      	lsls	r1, r3, #22
 800a6ca:	d402      	bmi.n	800a6d2 <_fflush_r+0x32>
 800a6cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ce:	f7fe f80c 	bl	80086ea <__retarget_lock_acquire_recursive>
 800a6d2:	4628      	mov	r0, r5
 800a6d4:	4621      	mov	r1, r4
 800a6d6:	f7ff ff63 	bl	800a5a0 <__sflush_r>
 800a6da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a6dc:	4605      	mov	r5, r0
 800a6de:	07da      	lsls	r2, r3, #31
 800a6e0:	d4e4      	bmi.n	800a6ac <_fflush_r+0xc>
 800a6e2:	89a3      	ldrh	r3, [r4, #12]
 800a6e4:	059b      	lsls	r3, r3, #22
 800a6e6:	d4e1      	bmi.n	800a6ac <_fflush_r+0xc>
 800a6e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a6ea:	f7fd ffff 	bl	80086ec <__retarget_lock_release_recursive>
 800a6ee:	e7dd      	b.n	800a6ac <_fflush_r+0xc>

0800a6f0 <__sccl>:
 800a6f0:	b570      	push	{r4, r5, r6, lr}
 800a6f2:	780b      	ldrb	r3, [r1, #0]
 800a6f4:	4604      	mov	r4, r0
 800a6f6:	2b5e      	cmp	r3, #94	@ 0x5e
 800a6f8:	bf0b      	itete	eq
 800a6fa:	784b      	ldrbeq	r3, [r1, #1]
 800a6fc:	1c4a      	addne	r2, r1, #1
 800a6fe:	1c8a      	addeq	r2, r1, #2
 800a700:	2100      	movne	r1, #0
 800a702:	bf08      	it	eq
 800a704:	2101      	moveq	r1, #1
 800a706:	3801      	subs	r0, #1
 800a708:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a70c:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a710:	42a8      	cmp	r0, r5
 800a712:	d1fb      	bne.n	800a70c <__sccl+0x1c>
 800a714:	b90b      	cbnz	r3, 800a71a <__sccl+0x2a>
 800a716:	1e50      	subs	r0, r2, #1
 800a718:	bd70      	pop	{r4, r5, r6, pc}
 800a71a:	f081 0101 	eor.w	r1, r1, #1
 800a71e:	4610      	mov	r0, r2
 800a720:	54e1      	strb	r1, [r4, r3]
 800a722:	4602      	mov	r2, r0
 800a724:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a728:	2d2d      	cmp	r5, #45	@ 0x2d
 800a72a:	d005      	beq.n	800a738 <__sccl+0x48>
 800a72c:	2d5d      	cmp	r5, #93	@ 0x5d
 800a72e:	d016      	beq.n	800a75e <__sccl+0x6e>
 800a730:	2d00      	cmp	r5, #0
 800a732:	d0f1      	beq.n	800a718 <__sccl+0x28>
 800a734:	462b      	mov	r3, r5
 800a736:	e7f2      	b.n	800a71e <__sccl+0x2e>
 800a738:	7846      	ldrb	r6, [r0, #1]
 800a73a:	2e5d      	cmp	r6, #93	@ 0x5d
 800a73c:	d0fa      	beq.n	800a734 <__sccl+0x44>
 800a73e:	42b3      	cmp	r3, r6
 800a740:	dcf8      	bgt.n	800a734 <__sccl+0x44>
 800a742:	461a      	mov	r2, r3
 800a744:	3002      	adds	r0, #2
 800a746:	3201      	adds	r2, #1
 800a748:	4296      	cmp	r6, r2
 800a74a:	54a1      	strb	r1, [r4, r2]
 800a74c:	dcfb      	bgt.n	800a746 <__sccl+0x56>
 800a74e:	1af2      	subs	r2, r6, r3
 800a750:	3a01      	subs	r2, #1
 800a752:	42b3      	cmp	r3, r6
 800a754:	bfa8      	it	ge
 800a756:	2200      	movge	r2, #0
 800a758:	1c5d      	adds	r5, r3, #1
 800a75a:	18ab      	adds	r3, r5, r2
 800a75c:	e7e1      	b.n	800a722 <__sccl+0x32>
 800a75e:	4610      	mov	r0, r2
 800a760:	e7da      	b.n	800a718 <__sccl+0x28>

0800a762 <__submore>:
 800a762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a766:	460c      	mov	r4, r1
 800a768:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a76a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a76e:	4299      	cmp	r1, r3
 800a770:	d11b      	bne.n	800a7aa <__submore+0x48>
 800a772:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a776:	f7fe fe99 	bl	80094ac <_malloc_r>
 800a77a:	b918      	cbnz	r0, 800a784 <__submore+0x22>
 800a77c:	f04f 30ff 	mov.w	r0, #4294967295
 800a780:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a784:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a788:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a78a:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a78e:	6360      	str	r0, [r4, #52]	@ 0x34
 800a790:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a794:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a798:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a79c:	7043      	strb	r3, [r0, #1]
 800a79e:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a7a2:	7003      	strb	r3, [r0, #0]
 800a7a4:	6020      	str	r0, [r4, #0]
 800a7a6:	2000      	movs	r0, #0
 800a7a8:	e7ea      	b.n	800a780 <__submore+0x1e>
 800a7aa:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a7ac:	0077      	lsls	r7, r6, #1
 800a7ae:	463a      	mov	r2, r7
 800a7b0:	f000 f87e 	bl	800a8b0 <_realloc_r>
 800a7b4:	4605      	mov	r5, r0
 800a7b6:	2800      	cmp	r0, #0
 800a7b8:	d0e0      	beq.n	800a77c <__submore+0x1a>
 800a7ba:	eb00 0806 	add.w	r8, r0, r6
 800a7be:	4601      	mov	r1, r0
 800a7c0:	4632      	mov	r2, r6
 800a7c2:	4640      	mov	r0, r8
 800a7c4:	f7fd ffa1 	bl	800870a <memcpy>
 800a7c8:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a7cc:	f8c4 8000 	str.w	r8, [r4]
 800a7d0:	e7e9      	b.n	800a7a6 <__submore+0x44>

0800a7d2 <memmove>:
 800a7d2:	4288      	cmp	r0, r1
 800a7d4:	b510      	push	{r4, lr}
 800a7d6:	eb01 0402 	add.w	r4, r1, r2
 800a7da:	d902      	bls.n	800a7e2 <memmove+0x10>
 800a7dc:	4284      	cmp	r4, r0
 800a7de:	4623      	mov	r3, r4
 800a7e0:	d807      	bhi.n	800a7f2 <memmove+0x20>
 800a7e2:	1e43      	subs	r3, r0, #1
 800a7e4:	42a1      	cmp	r1, r4
 800a7e6:	d008      	beq.n	800a7fa <memmove+0x28>
 800a7e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a7ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a7f0:	e7f8      	b.n	800a7e4 <memmove+0x12>
 800a7f2:	4601      	mov	r1, r0
 800a7f4:	4402      	add	r2, r0
 800a7f6:	428a      	cmp	r2, r1
 800a7f8:	d100      	bne.n	800a7fc <memmove+0x2a>
 800a7fa:	bd10      	pop	{r4, pc}
 800a7fc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a800:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a804:	e7f7      	b.n	800a7f6 <memmove+0x24>
	...

0800a808 <_sbrk_r>:
 800a808:	b538      	push	{r3, r4, r5, lr}
 800a80a:	2300      	movs	r3, #0
 800a80c:	4d05      	ldr	r5, [pc, #20]	@ (800a824 <_sbrk_r+0x1c>)
 800a80e:	4604      	mov	r4, r0
 800a810:	4608      	mov	r0, r1
 800a812:	602b      	str	r3, [r5, #0]
 800a814:	f7f7 f982 	bl	8001b1c <_sbrk>
 800a818:	1c43      	adds	r3, r0, #1
 800a81a:	d102      	bne.n	800a822 <_sbrk_r+0x1a>
 800a81c:	682b      	ldr	r3, [r5, #0]
 800a81e:	b103      	cbz	r3, 800a822 <_sbrk_r+0x1a>
 800a820:	6023      	str	r3, [r4, #0]
 800a822:	bd38      	pop	{r3, r4, r5, pc}
 800a824:	20001cf4 	.word	0x20001cf4

0800a828 <__assert_func>:
 800a828:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a82a:	4614      	mov	r4, r2
 800a82c:	461a      	mov	r2, r3
 800a82e:	4b09      	ldr	r3, [pc, #36]	@ (800a854 <__assert_func+0x2c>)
 800a830:	4605      	mov	r5, r0
 800a832:	681b      	ldr	r3, [r3, #0]
 800a834:	68d8      	ldr	r0, [r3, #12]
 800a836:	b954      	cbnz	r4, 800a84e <__assert_func+0x26>
 800a838:	4b07      	ldr	r3, [pc, #28]	@ (800a858 <__assert_func+0x30>)
 800a83a:	461c      	mov	r4, r3
 800a83c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a840:	9100      	str	r1, [sp, #0]
 800a842:	462b      	mov	r3, r5
 800a844:	4905      	ldr	r1, [pc, #20]	@ (800a85c <__assert_func+0x34>)
 800a846:	f000 f95b 	bl	800ab00 <fiprintf>
 800a84a:	f000 f96b 	bl	800ab24 <abort>
 800a84e:	4b04      	ldr	r3, [pc, #16]	@ (800a860 <__assert_func+0x38>)
 800a850:	e7f4      	b.n	800a83c <__assert_func+0x14>
 800a852:	bf00      	nop
 800a854:	2000001c 	.word	0x2000001c
 800a858:	0800b509 	.word	0x0800b509
 800a85c:	0800b4db 	.word	0x0800b4db
 800a860:	0800b4ce 	.word	0x0800b4ce

0800a864 <_calloc_r>:
 800a864:	b570      	push	{r4, r5, r6, lr}
 800a866:	fba1 5402 	umull	r5, r4, r1, r2
 800a86a:	b93c      	cbnz	r4, 800a87c <_calloc_r+0x18>
 800a86c:	4629      	mov	r1, r5
 800a86e:	f7fe fe1d 	bl	80094ac <_malloc_r>
 800a872:	4606      	mov	r6, r0
 800a874:	b928      	cbnz	r0, 800a882 <_calloc_r+0x1e>
 800a876:	2600      	movs	r6, #0
 800a878:	4630      	mov	r0, r6
 800a87a:	bd70      	pop	{r4, r5, r6, pc}
 800a87c:	220c      	movs	r2, #12
 800a87e:	6002      	str	r2, [r0, #0]
 800a880:	e7f9      	b.n	800a876 <_calloc_r+0x12>
 800a882:	462a      	mov	r2, r5
 800a884:	4621      	mov	r1, r4
 800a886:	f7fd fe90 	bl	80085aa <memset>
 800a88a:	e7f5      	b.n	800a878 <_calloc_r+0x14>

0800a88c <__ascii_mbtowc>:
 800a88c:	b082      	sub	sp, #8
 800a88e:	b901      	cbnz	r1, 800a892 <__ascii_mbtowc+0x6>
 800a890:	a901      	add	r1, sp, #4
 800a892:	b142      	cbz	r2, 800a8a6 <__ascii_mbtowc+0x1a>
 800a894:	b14b      	cbz	r3, 800a8aa <__ascii_mbtowc+0x1e>
 800a896:	7813      	ldrb	r3, [r2, #0]
 800a898:	600b      	str	r3, [r1, #0]
 800a89a:	7812      	ldrb	r2, [r2, #0]
 800a89c:	1e10      	subs	r0, r2, #0
 800a89e:	bf18      	it	ne
 800a8a0:	2001      	movne	r0, #1
 800a8a2:	b002      	add	sp, #8
 800a8a4:	4770      	bx	lr
 800a8a6:	4610      	mov	r0, r2
 800a8a8:	e7fb      	b.n	800a8a2 <__ascii_mbtowc+0x16>
 800a8aa:	f06f 0001 	mvn.w	r0, #1
 800a8ae:	e7f8      	b.n	800a8a2 <__ascii_mbtowc+0x16>

0800a8b0 <_realloc_r>:
 800a8b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a8b4:	4680      	mov	r8, r0
 800a8b6:	4615      	mov	r5, r2
 800a8b8:	460c      	mov	r4, r1
 800a8ba:	b921      	cbnz	r1, 800a8c6 <_realloc_r+0x16>
 800a8bc:	4611      	mov	r1, r2
 800a8be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a8c2:	f7fe bdf3 	b.w	80094ac <_malloc_r>
 800a8c6:	b92a      	cbnz	r2, 800a8d4 <_realloc_r+0x24>
 800a8c8:	f7fe fd7e 	bl	80093c8 <_free_r>
 800a8cc:	2400      	movs	r4, #0
 800a8ce:	4620      	mov	r0, r4
 800a8d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a8d4:	f000 f92d 	bl	800ab32 <_malloc_usable_size_r>
 800a8d8:	4285      	cmp	r5, r0
 800a8da:	4606      	mov	r6, r0
 800a8dc:	d802      	bhi.n	800a8e4 <_realloc_r+0x34>
 800a8de:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a8e2:	d8f4      	bhi.n	800a8ce <_realloc_r+0x1e>
 800a8e4:	4629      	mov	r1, r5
 800a8e6:	4640      	mov	r0, r8
 800a8e8:	f7fe fde0 	bl	80094ac <_malloc_r>
 800a8ec:	4607      	mov	r7, r0
 800a8ee:	2800      	cmp	r0, #0
 800a8f0:	d0ec      	beq.n	800a8cc <_realloc_r+0x1c>
 800a8f2:	42b5      	cmp	r5, r6
 800a8f4:	462a      	mov	r2, r5
 800a8f6:	4621      	mov	r1, r4
 800a8f8:	bf28      	it	cs
 800a8fa:	4632      	movcs	r2, r6
 800a8fc:	f7fd ff05 	bl	800870a <memcpy>
 800a900:	4621      	mov	r1, r4
 800a902:	4640      	mov	r0, r8
 800a904:	f7fe fd60 	bl	80093c8 <_free_r>
 800a908:	463c      	mov	r4, r7
 800a90a:	e7e0      	b.n	800a8ce <_realloc_r+0x1e>

0800a90c <_strtol_l.constprop.0>:
 800a90c:	2b24      	cmp	r3, #36	@ 0x24
 800a90e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a912:	4686      	mov	lr, r0
 800a914:	4690      	mov	r8, r2
 800a916:	d801      	bhi.n	800a91c <_strtol_l.constprop.0+0x10>
 800a918:	2b01      	cmp	r3, #1
 800a91a:	d106      	bne.n	800a92a <_strtol_l.constprop.0+0x1e>
 800a91c:	f7fd feba 	bl	8008694 <__errno>
 800a920:	2316      	movs	r3, #22
 800a922:	6003      	str	r3, [r0, #0]
 800a924:	2000      	movs	r0, #0
 800a926:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a92a:	460d      	mov	r5, r1
 800a92c:	4833      	ldr	r0, [pc, #204]	@ (800a9fc <_strtol_l.constprop.0+0xf0>)
 800a92e:	462a      	mov	r2, r5
 800a930:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a934:	5d06      	ldrb	r6, [r0, r4]
 800a936:	f016 0608 	ands.w	r6, r6, #8
 800a93a:	d1f8      	bne.n	800a92e <_strtol_l.constprop.0+0x22>
 800a93c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a93e:	d12d      	bne.n	800a99c <_strtol_l.constprop.0+0x90>
 800a940:	2601      	movs	r6, #1
 800a942:	782c      	ldrb	r4, [r5, #0]
 800a944:	1c95      	adds	r5, r2, #2
 800a946:	f033 0210 	bics.w	r2, r3, #16
 800a94a:	d109      	bne.n	800a960 <_strtol_l.constprop.0+0x54>
 800a94c:	2c30      	cmp	r4, #48	@ 0x30
 800a94e:	d12a      	bne.n	800a9a6 <_strtol_l.constprop.0+0x9a>
 800a950:	782a      	ldrb	r2, [r5, #0]
 800a952:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a956:	2a58      	cmp	r2, #88	@ 0x58
 800a958:	d125      	bne.n	800a9a6 <_strtol_l.constprop.0+0x9a>
 800a95a:	2310      	movs	r3, #16
 800a95c:	786c      	ldrb	r4, [r5, #1]
 800a95e:	3502      	adds	r5, #2
 800a960:	2200      	movs	r2, #0
 800a962:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a966:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a96a:	fbbc f9f3 	udiv	r9, ip, r3
 800a96e:	4610      	mov	r0, r2
 800a970:	fb03 ca19 	mls	sl, r3, r9, ip
 800a974:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a978:	2f09      	cmp	r7, #9
 800a97a:	d81b      	bhi.n	800a9b4 <_strtol_l.constprop.0+0xa8>
 800a97c:	463c      	mov	r4, r7
 800a97e:	42a3      	cmp	r3, r4
 800a980:	dd27      	ble.n	800a9d2 <_strtol_l.constprop.0+0xc6>
 800a982:	1c57      	adds	r7, r2, #1
 800a984:	d007      	beq.n	800a996 <_strtol_l.constprop.0+0x8a>
 800a986:	4581      	cmp	r9, r0
 800a988:	d320      	bcc.n	800a9cc <_strtol_l.constprop.0+0xc0>
 800a98a:	d101      	bne.n	800a990 <_strtol_l.constprop.0+0x84>
 800a98c:	45a2      	cmp	sl, r4
 800a98e:	db1d      	blt.n	800a9cc <_strtol_l.constprop.0+0xc0>
 800a990:	2201      	movs	r2, #1
 800a992:	fb00 4003 	mla	r0, r0, r3, r4
 800a996:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a99a:	e7eb      	b.n	800a974 <_strtol_l.constprop.0+0x68>
 800a99c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a99e:	bf04      	itt	eq
 800a9a0:	782c      	ldrbeq	r4, [r5, #0]
 800a9a2:	1c95      	addeq	r5, r2, #2
 800a9a4:	e7cf      	b.n	800a946 <_strtol_l.constprop.0+0x3a>
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	d1da      	bne.n	800a960 <_strtol_l.constprop.0+0x54>
 800a9aa:	2c30      	cmp	r4, #48	@ 0x30
 800a9ac:	bf0c      	ite	eq
 800a9ae:	2308      	moveq	r3, #8
 800a9b0:	230a      	movne	r3, #10
 800a9b2:	e7d5      	b.n	800a960 <_strtol_l.constprop.0+0x54>
 800a9b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a9b8:	2f19      	cmp	r7, #25
 800a9ba:	d801      	bhi.n	800a9c0 <_strtol_l.constprop.0+0xb4>
 800a9bc:	3c37      	subs	r4, #55	@ 0x37
 800a9be:	e7de      	b.n	800a97e <_strtol_l.constprop.0+0x72>
 800a9c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a9c4:	2f19      	cmp	r7, #25
 800a9c6:	d804      	bhi.n	800a9d2 <_strtol_l.constprop.0+0xc6>
 800a9c8:	3c57      	subs	r4, #87	@ 0x57
 800a9ca:	e7d8      	b.n	800a97e <_strtol_l.constprop.0+0x72>
 800a9cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a9d0:	e7e1      	b.n	800a996 <_strtol_l.constprop.0+0x8a>
 800a9d2:	1c53      	adds	r3, r2, #1
 800a9d4:	d108      	bne.n	800a9e8 <_strtol_l.constprop.0+0xdc>
 800a9d6:	2322      	movs	r3, #34	@ 0x22
 800a9d8:	4660      	mov	r0, ip
 800a9da:	f8ce 3000 	str.w	r3, [lr]
 800a9de:	f1b8 0f00 	cmp.w	r8, #0
 800a9e2:	d0a0      	beq.n	800a926 <_strtol_l.constprop.0+0x1a>
 800a9e4:	1e69      	subs	r1, r5, #1
 800a9e6:	e006      	b.n	800a9f6 <_strtol_l.constprop.0+0xea>
 800a9e8:	b106      	cbz	r6, 800a9ec <_strtol_l.constprop.0+0xe0>
 800a9ea:	4240      	negs	r0, r0
 800a9ec:	f1b8 0f00 	cmp.w	r8, #0
 800a9f0:	d099      	beq.n	800a926 <_strtol_l.constprop.0+0x1a>
 800a9f2:	2a00      	cmp	r2, #0
 800a9f4:	d1f6      	bne.n	800a9e4 <_strtol_l.constprop.0+0xd8>
 800a9f6:	f8c8 1000 	str.w	r1, [r8]
 800a9fa:	e794      	b.n	800a926 <_strtol_l.constprop.0+0x1a>
 800a9fc:	0800b50b 	.word	0x0800b50b

0800aa00 <_strtol_r>:
 800aa00:	f7ff bf84 	b.w	800a90c <_strtol_l.constprop.0>

0800aa04 <_strtoul_l.constprop.0>:
 800aa04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800aa08:	4686      	mov	lr, r0
 800aa0a:	460d      	mov	r5, r1
 800aa0c:	4e33      	ldr	r6, [pc, #204]	@ (800aadc <_strtoul_l.constprop.0+0xd8>)
 800aa0e:	4628      	mov	r0, r5
 800aa10:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa14:	5d37      	ldrb	r7, [r6, r4]
 800aa16:	f017 0708 	ands.w	r7, r7, #8
 800aa1a:	d1f8      	bne.n	800aa0e <_strtoul_l.constprop.0+0xa>
 800aa1c:	2c2d      	cmp	r4, #45	@ 0x2d
 800aa1e:	d12f      	bne.n	800aa80 <_strtoul_l.constprop.0+0x7c>
 800aa20:	2701      	movs	r7, #1
 800aa22:	782c      	ldrb	r4, [r5, #0]
 800aa24:	1c85      	adds	r5, r0, #2
 800aa26:	f033 0010 	bics.w	r0, r3, #16
 800aa2a:	d109      	bne.n	800aa40 <_strtoul_l.constprop.0+0x3c>
 800aa2c:	2c30      	cmp	r4, #48	@ 0x30
 800aa2e:	d12c      	bne.n	800aa8a <_strtoul_l.constprop.0+0x86>
 800aa30:	7828      	ldrb	r0, [r5, #0]
 800aa32:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800aa36:	2858      	cmp	r0, #88	@ 0x58
 800aa38:	d127      	bne.n	800aa8a <_strtoul_l.constprop.0+0x86>
 800aa3a:	2310      	movs	r3, #16
 800aa3c:	786c      	ldrb	r4, [r5, #1]
 800aa3e:	3502      	adds	r5, #2
 800aa40:	f04f 38ff 	mov.w	r8, #4294967295
 800aa44:	fbb8 f8f3 	udiv	r8, r8, r3
 800aa48:	2600      	movs	r6, #0
 800aa4a:	fb03 f908 	mul.w	r9, r3, r8
 800aa4e:	4630      	mov	r0, r6
 800aa50:	ea6f 0909 	mvn.w	r9, r9
 800aa54:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800aa58:	f1bc 0f09 	cmp.w	ip, #9
 800aa5c:	d81c      	bhi.n	800aa98 <_strtoul_l.constprop.0+0x94>
 800aa5e:	4664      	mov	r4, ip
 800aa60:	42a3      	cmp	r3, r4
 800aa62:	dd2a      	ble.n	800aaba <_strtoul_l.constprop.0+0xb6>
 800aa64:	f1b6 3fff 	cmp.w	r6, #4294967295
 800aa68:	d007      	beq.n	800aa7a <_strtoul_l.constprop.0+0x76>
 800aa6a:	4580      	cmp	r8, r0
 800aa6c:	d322      	bcc.n	800aab4 <_strtoul_l.constprop.0+0xb0>
 800aa6e:	d101      	bne.n	800aa74 <_strtoul_l.constprop.0+0x70>
 800aa70:	45a1      	cmp	r9, r4
 800aa72:	db1f      	blt.n	800aab4 <_strtoul_l.constprop.0+0xb0>
 800aa74:	2601      	movs	r6, #1
 800aa76:	fb00 4003 	mla	r0, r0, r3, r4
 800aa7a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800aa7e:	e7e9      	b.n	800aa54 <_strtoul_l.constprop.0+0x50>
 800aa80:	2c2b      	cmp	r4, #43	@ 0x2b
 800aa82:	bf04      	itt	eq
 800aa84:	782c      	ldrbeq	r4, [r5, #0]
 800aa86:	1c85      	addeq	r5, r0, #2
 800aa88:	e7cd      	b.n	800aa26 <_strtoul_l.constprop.0+0x22>
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d1d8      	bne.n	800aa40 <_strtoul_l.constprop.0+0x3c>
 800aa8e:	2c30      	cmp	r4, #48	@ 0x30
 800aa90:	bf0c      	ite	eq
 800aa92:	2308      	moveq	r3, #8
 800aa94:	230a      	movne	r3, #10
 800aa96:	e7d3      	b.n	800aa40 <_strtoul_l.constprop.0+0x3c>
 800aa98:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800aa9c:	f1bc 0f19 	cmp.w	ip, #25
 800aaa0:	d801      	bhi.n	800aaa6 <_strtoul_l.constprop.0+0xa2>
 800aaa2:	3c37      	subs	r4, #55	@ 0x37
 800aaa4:	e7dc      	b.n	800aa60 <_strtoul_l.constprop.0+0x5c>
 800aaa6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800aaaa:	f1bc 0f19 	cmp.w	ip, #25
 800aaae:	d804      	bhi.n	800aaba <_strtoul_l.constprop.0+0xb6>
 800aab0:	3c57      	subs	r4, #87	@ 0x57
 800aab2:	e7d5      	b.n	800aa60 <_strtoul_l.constprop.0+0x5c>
 800aab4:	f04f 36ff 	mov.w	r6, #4294967295
 800aab8:	e7df      	b.n	800aa7a <_strtoul_l.constprop.0+0x76>
 800aaba:	1c73      	adds	r3, r6, #1
 800aabc:	d106      	bne.n	800aacc <_strtoul_l.constprop.0+0xc8>
 800aabe:	2322      	movs	r3, #34	@ 0x22
 800aac0:	4630      	mov	r0, r6
 800aac2:	f8ce 3000 	str.w	r3, [lr]
 800aac6:	b932      	cbnz	r2, 800aad6 <_strtoul_l.constprop.0+0xd2>
 800aac8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aacc:	b107      	cbz	r7, 800aad0 <_strtoul_l.constprop.0+0xcc>
 800aace:	4240      	negs	r0, r0
 800aad0:	2a00      	cmp	r2, #0
 800aad2:	d0f9      	beq.n	800aac8 <_strtoul_l.constprop.0+0xc4>
 800aad4:	b106      	cbz	r6, 800aad8 <_strtoul_l.constprop.0+0xd4>
 800aad6:	1e69      	subs	r1, r5, #1
 800aad8:	6011      	str	r1, [r2, #0]
 800aada:	e7f5      	b.n	800aac8 <_strtoul_l.constprop.0+0xc4>
 800aadc:	0800b50b 	.word	0x0800b50b

0800aae0 <_strtoul_r>:
 800aae0:	f7ff bf90 	b.w	800aa04 <_strtoul_l.constprop.0>

0800aae4 <__ascii_wctomb>:
 800aae4:	4603      	mov	r3, r0
 800aae6:	4608      	mov	r0, r1
 800aae8:	b141      	cbz	r1, 800aafc <__ascii_wctomb+0x18>
 800aaea:	2aff      	cmp	r2, #255	@ 0xff
 800aaec:	d904      	bls.n	800aaf8 <__ascii_wctomb+0x14>
 800aaee:	228a      	movs	r2, #138	@ 0x8a
 800aaf0:	f04f 30ff 	mov.w	r0, #4294967295
 800aaf4:	601a      	str	r2, [r3, #0]
 800aaf6:	4770      	bx	lr
 800aaf8:	2001      	movs	r0, #1
 800aafa:	700a      	strb	r2, [r1, #0]
 800aafc:	4770      	bx	lr
	...

0800ab00 <fiprintf>:
 800ab00:	b40e      	push	{r1, r2, r3}
 800ab02:	b503      	push	{r0, r1, lr}
 800ab04:	4601      	mov	r1, r0
 800ab06:	ab03      	add	r3, sp, #12
 800ab08:	4805      	ldr	r0, [pc, #20]	@ (800ab20 <fiprintf+0x20>)
 800ab0a:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab0e:	6800      	ldr	r0, [r0, #0]
 800ab10:	9301      	str	r3, [sp, #4]
 800ab12:	f000 f83d 	bl	800ab90 <_vfiprintf_r>
 800ab16:	b002      	add	sp, #8
 800ab18:	f85d eb04 	ldr.w	lr, [sp], #4
 800ab1c:	b003      	add	sp, #12
 800ab1e:	4770      	bx	lr
 800ab20:	2000001c 	.word	0x2000001c

0800ab24 <abort>:
 800ab24:	2006      	movs	r0, #6
 800ab26:	b508      	push	{r3, lr}
 800ab28:	f000 fa06 	bl	800af38 <raise>
 800ab2c:	2001      	movs	r0, #1
 800ab2e:	f7f6 ff80 	bl	8001a32 <_exit>

0800ab32 <_malloc_usable_size_r>:
 800ab32:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ab36:	1f18      	subs	r0, r3, #4
 800ab38:	2b00      	cmp	r3, #0
 800ab3a:	bfbc      	itt	lt
 800ab3c:	580b      	ldrlt	r3, [r1, r0]
 800ab3e:	18c0      	addlt	r0, r0, r3
 800ab40:	4770      	bx	lr

0800ab42 <__sfputc_r>:
 800ab42:	6893      	ldr	r3, [r2, #8]
 800ab44:	b410      	push	{r4}
 800ab46:	3b01      	subs	r3, #1
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	6093      	str	r3, [r2, #8]
 800ab4c:	da07      	bge.n	800ab5e <__sfputc_r+0x1c>
 800ab4e:	6994      	ldr	r4, [r2, #24]
 800ab50:	42a3      	cmp	r3, r4
 800ab52:	db01      	blt.n	800ab58 <__sfputc_r+0x16>
 800ab54:	290a      	cmp	r1, #10
 800ab56:	d102      	bne.n	800ab5e <__sfputc_r+0x1c>
 800ab58:	bc10      	pop	{r4}
 800ab5a:	f000 b931 	b.w	800adc0 <__swbuf_r>
 800ab5e:	6813      	ldr	r3, [r2, #0]
 800ab60:	1c58      	adds	r0, r3, #1
 800ab62:	6010      	str	r0, [r2, #0]
 800ab64:	7019      	strb	r1, [r3, #0]
 800ab66:	4608      	mov	r0, r1
 800ab68:	bc10      	pop	{r4}
 800ab6a:	4770      	bx	lr

0800ab6c <__sfputs_r>:
 800ab6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ab6e:	4606      	mov	r6, r0
 800ab70:	460f      	mov	r7, r1
 800ab72:	4614      	mov	r4, r2
 800ab74:	18d5      	adds	r5, r2, r3
 800ab76:	42ac      	cmp	r4, r5
 800ab78:	d101      	bne.n	800ab7e <__sfputs_r+0x12>
 800ab7a:	2000      	movs	r0, #0
 800ab7c:	e007      	b.n	800ab8e <__sfputs_r+0x22>
 800ab7e:	463a      	mov	r2, r7
 800ab80:	4630      	mov	r0, r6
 800ab82:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ab86:	f7ff ffdc 	bl	800ab42 <__sfputc_r>
 800ab8a:	1c43      	adds	r3, r0, #1
 800ab8c:	d1f3      	bne.n	800ab76 <__sfputs_r+0xa>
 800ab8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800ab90 <_vfiprintf_r>:
 800ab90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ab94:	460d      	mov	r5, r1
 800ab96:	4614      	mov	r4, r2
 800ab98:	4698      	mov	r8, r3
 800ab9a:	4606      	mov	r6, r0
 800ab9c:	b09d      	sub	sp, #116	@ 0x74
 800ab9e:	b118      	cbz	r0, 800aba8 <_vfiprintf_r+0x18>
 800aba0:	6a03      	ldr	r3, [r0, #32]
 800aba2:	b90b      	cbnz	r3, 800aba8 <_vfiprintf_r+0x18>
 800aba4:	f7fd fc28 	bl	80083f8 <__sinit>
 800aba8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abaa:	07d9      	lsls	r1, r3, #31
 800abac:	d405      	bmi.n	800abba <_vfiprintf_r+0x2a>
 800abae:	89ab      	ldrh	r3, [r5, #12]
 800abb0:	059a      	lsls	r2, r3, #22
 800abb2:	d402      	bmi.n	800abba <_vfiprintf_r+0x2a>
 800abb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abb6:	f7fd fd98 	bl	80086ea <__retarget_lock_acquire_recursive>
 800abba:	89ab      	ldrh	r3, [r5, #12]
 800abbc:	071b      	lsls	r3, r3, #28
 800abbe:	d501      	bpl.n	800abc4 <_vfiprintf_r+0x34>
 800abc0:	692b      	ldr	r3, [r5, #16]
 800abc2:	b99b      	cbnz	r3, 800abec <_vfiprintf_r+0x5c>
 800abc4:	4629      	mov	r1, r5
 800abc6:	4630      	mov	r0, r6
 800abc8:	f000 f938 	bl	800ae3c <__swsetup_r>
 800abcc:	b170      	cbz	r0, 800abec <_vfiprintf_r+0x5c>
 800abce:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800abd0:	07dc      	lsls	r4, r3, #31
 800abd2:	d504      	bpl.n	800abde <_vfiprintf_r+0x4e>
 800abd4:	f04f 30ff 	mov.w	r0, #4294967295
 800abd8:	b01d      	add	sp, #116	@ 0x74
 800abda:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800abde:	89ab      	ldrh	r3, [r5, #12]
 800abe0:	0598      	lsls	r0, r3, #22
 800abe2:	d4f7      	bmi.n	800abd4 <_vfiprintf_r+0x44>
 800abe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800abe6:	f7fd fd81 	bl	80086ec <__retarget_lock_release_recursive>
 800abea:	e7f3      	b.n	800abd4 <_vfiprintf_r+0x44>
 800abec:	2300      	movs	r3, #0
 800abee:	9309      	str	r3, [sp, #36]	@ 0x24
 800abf0:	2320      	movs	r3, #32
 800abf2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800abf6:	2330      	movs	r3, #48	@ 0x30
 800abf8:	f04f 0901 	mov.w	r9, #1
 800abfc:	f8cd 800c 	str.w	r8, [sp, #12]
 800ac00:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800adac <_vfiprintf_r+0x21c>
 800ac04:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800ac08:	4623      	mov	r3, r4
 800ac0a:	469a      	mov	sl, r3
 800ac0c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ac10:	b10a      	cbz	r2, 800ac16 <_vfiprintf_r+0x86>
 800ac12:	2a25      	cmp	r2, #37	@ 0x25
 800ac14:	d1f9      	bne.n	800ac0a <_vfiprintf_r+0x7a>
 800ac16:	ebba 0b04 	subs.w	fp, sl, r4
 800ac1a:	d00b      	beq.n	800ac34 <_vfiprintf_r+0xa4>
 800ac1c:	465b      	mov	r3, fp
 800ac1e:	4622      	mov	r2, r4
 800ac20:	4629      	mov	r1, r5
 800ac22:	4630      	mov	r0, r6
 800ac24:	f7ff ffa2 	bl	800ab6c <__sfputs_r>
 800ac28:	3001      	adds	r0, #1
 800ac2a:	f000 80a7 	beq.w	800ad7c <_vfiprintf_r+0x1ec>
 800ac2e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ac30:	445a      	add	r2, fp
 800ac32:	9209      	str	r2, [sp, #36]	@ 0x24
 800ac34:	f89a 3000 	ldrb.w	r3, [sl]
 800ac38:	2b00      	cmp	r3, #0
 800ac3a:	f000 809f 	beq.w	800ad7c <_vfiprintf_r+0x1ec>
 800ac3e:	2300      	movs	r3, #0
 800ac40:	f04f 32ff 	mov.w	r2, #4294967295
 800ac44:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ac48:	f10a 0a01 	add.w	sl, sl, #1
 800ac4c:	9304      	str	r3, [sp, #16]
 800ac4e:	9307      	str	r3, [sp, #28]
 800ac50:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800ac54:	931a      	str	r3, [sp, #104]	@ 0x68
 800ac56:	4654      	mov	r4, sl
 800ac58:	2205      	movs	r2, #5
 800ac5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ac5e:	4853      	ldr	r0, [pc, #332]	@ (800adac <_vfiprintf_r+0x21c>)
 800ac60:	f7fd fd45 	bl	80086ee <memchr>
 800ac64:	9a04      	ldr	r2, [sp, #16]
 800ac66:	b9d8      	cbnz	r0, 800aca0 <_vfiprintf_r+0x110>
 800ac68:	06d1      	lsls	r1, r2, #27
 800ac6a:	bf44      	itt	mi
 800ac6c:	2320      	movmi	r3, #32
 800ac6e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac72:	0713      	lsls	r3, r2, #28
 800ac74:	bf44      	itt	mi
 800ac76:	232b      	movmi	r3, #43	@ 0x2b
 800ac78:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800ac7c:	f89a 3000 	ldrb.w	r3, [sl]
 800ac80:	2b2a      	cmp	r3, #42	@ 0x2a
 800ac82:	d015      	beq.n	800acb0 <_vfiprintf_r+0x120>
 800ac84:	4654      	mov	r4, sl
 800ac86:	2000      	movs	r0, #0
 800ac88:	f04f 0c0a 	mov.w	ip, #10
 800ac8c:	9a07      	ldr	r2, [sp, #28]
 800ac8e:	4621      	mov	r1, r4
 800ac90:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ac94:	3b30      	subs	r3, #48	@ 0x30
 800ac96:	2b09      	cmp	r3, #9
 800ac98:	d94b      	bls.n	800ad32 <_vfiprintf_r+0x1a2>
 800ac9a:	b1b0      	cbz	r0, 800acca <_vfiprintf_r+0x13a>
 800ac9c:	9207      	str	r2, [sp, #28]
 800ac9e:	e014      	b.n	800acca <_vfiprintf_r+0x13a>
 800aca0:	eba0 0308 	sub.w	r3, r0, r8
 800aca4:	fa09 f303 	lsl.w	r3, r9, r3
 800aca8:	4313      	orrs	r3, r2
 800acaa:	46a2      	mov	sl, r4
 800acac:	9304      	str	r3, [sp, #16]
 800acae:	e7d2      	b.n	800ac56 <_vfiprintf_r+0xc6>
 800acb0:	9b03      	ldr	r3, [sp, #12]
 800acb2:	1d19      	adds	r1, r3, #4
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	9103      	str	r1, [sp, #12]
 800acb8:	2b00      	cmp	r3, #0
 800acba:	bfbb      	ittet	lt
 800acbc:	425b      	neglt	r3, r3
 800acbe:	f042 0202 	orrlt.w	r2, r2, #2
 800acc2:	9307      	strge	r3, [sp, #28]
 800acc4:	9307      	strlt	r3, [sp, #28]
 800acc6:	bfb8      	it	lt
 800acc8:	9204      	strlt	r2, [sp, #16]
 800acca:	7823      	ldrb	r3, [r4, #0]
 800accc:	2b2e      	cmp	r3, #46	@ 0x2e
 800acce:	d10a      	bne.n	800ace6 <_vfiprintf_r+0x156>
 800acd0:	7863      	ldrb	r3, [r4, #1]
 800acd2:	2b2a      	cmp	r3, #42	@ 0x2a
 800acd4:	d132      	bne.n	800ad3c <_vfiprintf_r+0x1ac>
 800acd6:	9b03      	ldr	r3, [sp, #12]
 800acd8:	3402      	adds	r4, #2
 800acda:	1d1a      	adds	r2, r3, #4
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	9203      	str	r2, [sp, #12]
 800ace0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800ace4:	9305      	str	r3, [sp, #20]
 800ace6:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800adb0 <_vfiprintf_r+0x220>
 800acea:	2203      	movs	r2, #3
 800acec:	4650      	mov	r0, sl
 800acee:	7821      	ldrb	r1, [r4, #0]
 800acf0:	f7fd fcfd 	bl	80086ee <memchr>
 800acf4:	b138      	cbz	r0, 800ad06 <_vfiprintf_r+0x176>
 800acf6:	2240      	movs	r2, #64	@ 0x40
 800acf8:	9b04      	ldr	r3, [sp, #16]
 800acfa:	eba0 000a 	sub.w	r0, r0, sl
 800acfe:	4082      	lsls	r2, r0
 800ad00:	4313      	orrs	r3, r2
 800ad02:	3401      	adds	r4, #1
 800ad04:	9304      	str	r3, [sp, #16]
 800ad06:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ad0a:	2206      	movs	r2, #6
 800ad0c:	4829      	ldr	r0, [pc, #164]	@ (800adb4 <_vfiprintf_r+0x224>)
 800ad0e:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800ad12:	f7fd fcec 	bl	80086ee <memchr>
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d03f      	beq.n	800ad9a <_vfiprintf_r+0x20a>
 800ad1a:	4b27      	ldr	r3, [pc, #156]	@ (800adb8 <_vfiprintf_r+0x228>)
 800ad1c:	bb1b      	cbnz	r3, 800ad66 <_vfiprintf_r+0x1d6>
 800ad1e:	9b03      	ldr	r3, [sp, #12]
 800ad20:	3307      	adds	r3, #7
 800ad22:	f023 0307 	bic.w	r3, r3, #7
 800ad26:	3308      	adds	r3, #8
 800ad28:	9303      	str	r3, [sp, #12]
 800ad2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ad2c:	443b      	add	r3, r7
 800ad2e:	9309      	str	r3, [sp, #36]	@ 0x24
 800ad30:	e76a      	b.n	800ac08 <_vfiprintf_r+0x78>
 800ad32:	460c      	mov	r4, r1
 800ad34:	2001      	movs	r0, #1
 800ad36:	fb0c 3202 	mla	r2, ip, r2, r3
 800ad3a:	e7a8      	b.n	800ac8e <_vfiprintf_r+0xfe>
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	f04f 0c0a 	mov.w	ip, #10
 800ad42:	4619      	mov	r1, r3
 800ad44:	3401      	adds	r4, #1
 800ad46:	9305      	str	r3, [sp, #20]
 800ad48:	4620      	mov	r0, r4
 800ad4a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ad4e:	3a30      	subs	r2, #48	@ 0x30
 800ad50:	2a09      	cmp	r2, #9
 800ad52:	d903      	bls.n	800ad5c <_vfiprintf_r+0x1cc>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d0c6      	beq.n	800ace6 <_vfiprintf_r+0x156>
 800ad58:	9105      	str	r1, [sp, #20]
 800ad5a:	e7c4      	b.n	800ace6 <_vfiprintf_r+0x156>
 800ad5c:	4604      	mov	r4, r0
 800ad5e:	2301      	movs	r3, #1
 800ad60:	fb0c 2101 	mla	r1, ip, r1, r2
 800ad64:	e7f0      	b.n	800ad48 <_vfiprintf_r+0x1b8>
 800ad66:	ab03      	add	r3, sp, #12
 800ad68:	9300      	str	r3, [sp, #0]
 800ad6a:	462a      	mov	r2, r5
 800ad6c:	4630      	mov	r0, r6
 800ad6e:	4b13      	ldr	r3, [pc, #76]	@ (800adbc <_vfiprintf_r+0x22c>)
 800ad70:	a904      	add	r1, sp, #16
 800ad72:	f7fc fef7 	bl	8007b64 <_printf_float>
 800ad76:	4607      	mov	r7, r0
 800ad78:	1c78      	adds	r0, r7, #1
 800ad7a:	d1d6      	bne.n	800ad2a <_vfiprintf_r+0x19a>
 800ad7c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ad7e:	07d9      	lsls	r1, r3, #31
 800ad80:	d405      	bmi.n	800ad8e <_vfiprintf_r+0x1fe>
 800ad82:	89ab      	ldrh	r3, [r5, #12]
 800ad84:	059a      	lsls	r2, r3, #22
 800ad86:	d402      	bmi.n	800ad8e <_vfiprintf_r+0x1fe>
 800ad88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800ad8a:	f7fd fcaf 	bl	80086ec <__retarget_lock_release_recursive>
 800ad8e:	89ab      	ldrh	r3, [r5, #12]
 800ad90:	065b      	lsls	r3, r3, #25
 800ad92:	f53f af1f 	bmi.w	800abd4 <_vfiprintf_r+0x44>
 800ad96:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800ad98:	e71e      	b.n	800abd8 <_vfiprintf_r+0x48>
 800ad9a:	ab03      	add	r3, sp, #12
 800ad9c:	9300      	str	r3, [sp, #0]
 800ad9e:	462a      	mov	r2, r5
 800ada0:	4630      	mov	r0, r6
 800ada2:	4b06      	ldr	r3, [pc, #24]	@ (800adbc <_vfiprintf_r+0x22c>)
 800ada4:	a904      	add	r1, sp, #16
 800ada6:	f7fd f97b 	bl	80080a0 <_printf_i>
 800adaa:	e7e4      	b.n	800ad76 <_vfiprintf_r+0x1e6>
 800adac:	0800b498 	.word	0x0800b498
 800adb0:	0800b49e 	.word	0x0800b49e
 800adb4:	0800b4a2 	.word	0x0800b4a2
 800adb8:	08007b65 	.word	0x08007b65
 800adbc:	0800ab6d 	.word	0x0800ab6d

0800adc0 <__swbuf_r>:
 800adc0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800adc2:	460e      	mov	r6, r1
 800adc4:	4614      	mov	r4, r2
 800adc6:	4605      	mov	r5, r0
 800adc8:	b118      	cbz	r0, 800add2 <__swbuf_r+0x12>
 800adca:	6a03      	ldr	r3, [r0, #32]
 800adcc:	b90b      	cbnz	r3, 800add2 <__swbuf_r+0x12>
 800adce:	f7fd fb13 	bl	80083f8 <__sinit>
 800add2:	69a3      	ldr	r3, [r4, #24]
 800add4:	60a3      	str	r3, [r4, #8]
 800add6:	89a3      	ldrh	r3, [r4, #12]
 800add8:	071a      	lsls	r2, r3, #28
 800adda:	d501      	bpl.n	800ade0 <__swbuf_r+0x20>
 800addc:	6923      	ldr	r3, [r4, #16]
 800adde:	b943      	cbnz	r3, 800adf2 <__swbuf_r+0x32>
 800ade0:	4621      	mov	r1, r4
 800ade2:	4628      	mov	r0, r5
 800ade4:	f000 f82a 	bl	800ae3c <__swsetup_r>
 800ade8:	b118      	cbz	r0, 800adf2 <__swbuf_r+0x32>
 800adea:	f04f 37ff 	mov.w	r7, #4294967295
 800adee:	4638      	mov	r0, r7
 800adf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800adf2:	6823      	ldr	r3, [r4, #0]
 800adf4:	6922      	ldr	r2, [r4, #16]
 800adf6:	b2f6      	uxtb	r6, r6
 800adf8:	1a98      	subs	r0, r3, r2
 800adfa:	6963      	ldr	r3, [r4, #20]
 800adfc:	4637      	mov	r7, r6
 800adfe:	4283      	cmp	r3, r0
 800ae00:	dc05      	bgt.n	800ae0e <__swbuf_r+0x4e>
 800ae02:	4621      	mov	r1, r4
 800ae04:	4628      	mov	r0, r5
 800ae06:	f7ff fc4b 	bl	800a6a0 <_fflush_r>
 800ae0a:	2800      	cmp	r0, #0
 800ae0c:	d1ed      	bne.n	800adea <__swbuf_r+0x2a>
 800ae0e:	68a3      	ldr	r3, [r4, #8]
 800ae10:	3b01      	subs	r3, #1
 800ae12:	60a3      	str	r3, [r4, #8]
 800ae14:	6823      	ldr	r3, [r4, #0]
 800ae16:	1c5a      	adds	r2, r3, #1
 800ae18:	6022      	str	r2, [r4, #0]
 800ae1a:	701e      	strb	r6, [r3, #0]
 800ae1c:	6962      	ldr	r2, [r4, #20]
 800ae1e:	1c43      	adds	r3, r0, #1
 800ae20:	429a      	cmp	r2, r3
 800ae22:	d004      	beq.n	800ae2e <__swbuf_r+0x6e>
 800ae24:	89a3      	ldrh	r3, [r4, #12]
 800ae26:	07db      	lsls	r3, r3, #31
 800ae28:	d5e1      	bpl.n	800adee <__swbuf_r+0x2e>
 800ae2a:	2e0a      	cmp	r6, #10
 800ae2c:	d1df      	bne.n	800adee <__swbuf_r+0x2e>
 800ae2e:	4621      	mov	r1, r4
 800ae30:	4628      	mov	r0, r5
 800ae32:	f7ff fc35 	bl	800a6a0 <_fflush_r>
 800ae36:	2800      	cmp	r0, #0
 800ae38:	d0d9      	beq.n	800adee <__swbuf_r+0x2e>
 800ae3a:	e7d6      	b.n	800adea <__swbuf_r+0x2a>

0800ae3c <__swsetup_r>:
 800ae3c:	b538      	push	{r3, r4, r5, lr}
 800ae3e:	4b29      	ldr	r3, [pc, #164]	@ (800aee4 <__swsetup_r+0xa8>)
 800ae40:	4605      	mov	r5, r0
 800ae42:	6818      	ldr	r0, [r3, #0]
 800ae44:	460c      	mov	r4, r1
 800ae46:	b118      	cbz	r0, 800ae50 <__swsetup_r+0x14>
 800ae48:	6a03      	ldr	r3, [r0, #32]
 800ae4a:	b90b      	cbnz	r3, 800ae50 <__swsetup_r+0x14>
 800ae4c:	f7fd fad4 	bl	80083f8 <__sinit>
 800ae50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ae54:	0719      	lsls	r1, r3, #28
 800ae56:	d422      	bmi.n	800ae9e <__swsetup_r+0x62>
 800ae58:	06da      	lsls	r2, r3, #27
 800ae5a:	d407      	bmi.n	800ae6c <__swsetup_r+0x30>
 800ae5c:	2209      	movs	r2, #9
 800ae5e:	602a      	str	r2, [r5, #0]
 800ae60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ae64:	f04f 30ff 	mov.w	r0, #4294967295
 800ae68:	81a3      	strh	r3, [r4, #12]
 800ae6a:	e033      	b.n	800aed4 <__swsetup_r+0x98>
 800ae6c:	0758      	lsls	r0, r3, #29
 800ae6e:	d512      	bpl.n	800ae96 <__swsetup_r+0x5a>
 800ae70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ae72:	b141      	cbz	r1, 800ae86 <__swsetup_r+0x4a>
 800ae74:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ae78:	4299      	cmp	r1, r3
 800ae7a:	d002      	beq.n	800ae82 <__swsetup_r+0x46>
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f7fe faa3 	bl	80093c8 <_free_r>
 800ae82:	2300      	movs	r3, #0
 800ae84:	6363      	str	r3, [r4, #52]	@ 0x34
 800ae86:	89a3      	ldrh	r3, [r4, #12]
 800ae88:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ae8c:	81a3      	strh	r3, [r4, #12]
 800ae8e:	2300      	movs	r3, #0
 800ae90:	6063      	str	r3, [r4, #4]
 800ae92:	6923      	ldr	r3, [r4, #16]
 800ae94:	6023      	str	r3, [r4, #0]
 800ae96:	89a3      	ldrh	r3, [r4, #12]
 800ae98:	f043 0308 	orr.w	r3, r3, #8
 800ae9c:	81a3      	strh	r3, [r4, #12]
 800ae9e:	6923      	ldr	r3, [r4, #16]
 800aea0:	b94b      	cbnz	r3, 800aeb6 <__swsetup_r+0x7a>
 800aea2:	89a3      	ldrh	r3, [r4, #12]
 800aea4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800aea8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800aeac:	d003      	beq.n	800aeb6 <__swsetup_r+0x7a>
 800aeae:	4621      	mov	r1, r4
 800aeb0:	4628      	mov	r0, r5
 800aeb2:	f000 f882 	bl	800afba <__smakebuf_r>
 800aeb6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aeba:	f013 0201 	ands.w	r2, r3, #1
 800aebe:	d00a      	beq.n	800aed6 <__swsetup_r+0x9a>
 800aec0:	2200      	movs	r2, #0
 800aec2:	60a2      	str	r2, [r4, #8]
 800aec4:	6962      	ldr	r2, [r4, #20]
 800aec6:	4252      	negs	r2, r2
 800aec8:	61a2      	str	r2, [r4, #24]
 800aeca:	6922      	ldr	r2, [r4, #16]
 800aecc:	b942      	cbnz	r2, 800aee0 <__swsetup_r+0xa4>
 800aece:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800aed2:	d1c5      	bne.n	800ae60 <__swsetup_r+0x24>
 800aed4:	bd38      	pop	{r3, r4, r5, pc}
 800aed6:	0799      	lsls	r1, r3, #30
 800aed8:	bf58      	it	pl
 800aeda:	6962      	ldrpl	r2, [r4, #20]
 800aedc:	60a2      	str	r2, [r4, #8]
 800aede:	e7f4      	b.n	800aeca <__swsetup_r+0x8e>
 800aee0:	2000      	movs	r0, #0
 800aee2:	e7f7      	b.n	800aed4 <__swsetup_r+0x98>
 800aee4:	2000001c 	.word	0x2000001c

0800aee8 <_raise_r>:
 800aee8:	291f      	cmp	r1, #31
 800aeea:	b538      	push	{r3, r4, r5, lr}
 800aeec:	4605      	mov	r5, r0
 800aeee:	460c      	mov	r4, r1
 800aef0:	d904      	bls.n	800aefc <_raise_r+0x14>
 800aef2:	2316      	movs	r3, #22
 800aef4:	6003      	str	r3, [r0, #0]
 800aef6:	f04f 30ff 	mov.w	r0, #4294967295
 800aefa:	bd38      	pop	{r3, r4, r5, pc}
 800aefc:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aefe:	b112      	cbz	r2, 800af06 <_raise_r+0x1e>
 800af00:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800af04:	b94b      	cbnz	r3, 800af1a <_raise_r+0x32>
 800af06:	4628      	mov	r0, r5
 800af08:	f000 f830 	bl	800af6c <_getpid_r>
 800af0c:	4622      	mov	r2, r4
 800af0e:	4601      	mov	r1, r0
 800af10:	4628      	mov	r0, r5
 800af12:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800af16:	f000 b817 	b.w	800af48 <_kill_r>
 800af1a:	2b01      	cmp	r3, #1
 800af1c:	d00a      	beq.n	800af34 <_raise_r+0x4c>
 800af1e:	1c59      	adds	r1, r3, #1
 800af20:	d103      	bne.n	800af2a <_raise_r+0x42>
 800af22:	2316      	movs	r3, #22
 800af24:	6003      	str	r3, [r0, #0]
 800af26:	2001      	movs	r0, #1
 800af28:	e7e7      	b.n	800aefa <_raise_r+0x12>
 800af2a:	2100      	movs	r1, #0
 800af2c:	4620      	mov	r0, r4
 800af2e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800af32:	4798      	blx	r3
 800af34:	2000      	movs	r0, #0
 800af36:	e7e0      	b.n	800aefa <_raise_r+0x12>

0800af38 <raise>:
 800af38:	4b02      	ldr	r3, [pc, #8]	@ (800af44 <raise+0xc>)
 800af3a:	4601      	mov	r1, r0
 800af3c:	6818      	ldr	r0, [r3, #0]
 800af3e:	f7ff bfd3 	b.w	800aee8 <_raise_r>
 800af42:	bf00      	nop
 800af44:	2000001c 	.word	0x2000001c

0800af48 <_kill_r>:
 800af48:	b538      	push	{r3, r4, r5, lr}
 800af4a:	2300      	movs	r3, #0
 800af4c:	4d06      	ldr	r5, [pc, #24]	@ (800af68 <_kill_r+0x20>)
 800af4e:	4604      	mov	r4, r0
 800af50:	4608      	mov	r0, r1
 800af52:	4611      	mov	r1, r2
 800af54:	602b      	str	r3, [r5, #0]
 800af56:	f7f6 fd5c 	bl	8001a12 <_kill>
 800af5a:	1c43      	adds	r3, r0, #1
 800af5c:	d102      	bne.n	800af64 <_kill_r+0x1c>
 800af5e:	682b      	ldr	r3, [r5, #0]
 800af60:	b103      	cbz	r3, 800af64 <_kill_r+0x1c>
 800af62:	6023      	str	r3, [r4, #0]
 800af64:	bd38      	pop	{r3, r4, r5, pc}
 800af66:	bf00      	nop
 800af68:	20001cf4 	.word	0x20001cf4

0800af6c <_getpid_r>:
 800af6c:	f7f6 bd4a 	b.w	8001a04 <_getpid>

0800af70 <__swhatbuf_r>:
 800af70:	b570      	push	{r4, r5, r6, lr}
 800af72:	460c      	mov	r4, r1
 800af74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800af78:	4615      	mov	r5, r2
 800af7a:	2900      	cmp	r1, #0
 800af7c:	461e      	mov	r6, r3
 800af7e:	b096      	sub	sp, #88	@ 0x58
 800af80:	da0c      	bge.n	800af9c <__swhatbuf_r+0x2c>
 800af82:	89a3      	ldrh	r3, [r4, #12]
 800af84:	2100      	movs	r1, #0
 800af86:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800af8a:	bf14      	ite	ne
 800af8c:	2340      	movne	r3, #64	@ 0x40
 800af8e:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800af92:	2000      	movs	r0, #0
 800af94:	6031      	str	r1, [r6, #0]
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	b016      	add	sp, #88	@ 0x58
 800af9a:	bd70      	pop	{r4, r5, r6, pc}
 800af9c:	466a      	mov	r2, sp
 800af9e:	f000 f849 	bl	800b034 <_fstat_r>
 800afa2:	2800      	cmp	r0, #0
 800afa4:	dbed      	blt.n	800af82 <__swhatbuf_r+0x12>
 800afa6:	9901      	ldr	r1, [sp, #4]
 800afa8:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800afac:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800afb0:	4259      	negs	r1, r3
 800afb2:	4159      	adcs	r1, r3
 800afb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800afb8:	e7eb      	b.n	800af92 <__swhatbuf_r+0x22>

0800afba <__smakebuf_r>:
 800afba:	898b      	ldrh	r3, [r1, #12]
 800afbc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800afbe:	079d      	lsls	r5, r3, #30
 800afc0:	4606      	mov	r6, r0
 800afc2:	460c      	mov	r4, r1
 800afc4:	d507      	bpl.n	800afd6 <__smakebuf_r+0x1c>
 800afc6:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800afca:	6023      	str	r3, [r4, #0]
 800afcc:	6123      	str	r3, [r4, #16]
 800afce:	2301      	movs	r3, #1
 800afd0:	6163      	str	r3, [r4, #20]
 800afd2:	b003      	add	sp, #12
 800afd4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800afd6:	466a      	mov	r2, sp
 800afd8:	ab01      	add	r3, sp, #4
 800afda:	f7ff ffc9 	bl	800af70 <__swhatbuf_r>
 800afde:	9f00      	ldr	r7, [sp, #0]
 800afe0:	4605      	mov	r5, r0
 800afe2:	4639      	mov	r1, r7
 800afe4:	4630      	mov	r0, r6
 800afe6:	f7fe fa61 	bl	80094ac <_malloc_r>
 800afea:	b948      	cbnz	r0, 800b000 <__smakebuf_r+0x46>
 800afec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aff0:	059a      	lsls	r2, r3, #22
 800aff2:	d4ee      	bmi.n	800afd2 <__smakebuf_r+0x18>
 800aff4:	f023 0303 	bic.w	r3, r3, #3
 800aff8:	f043 0302 	orr.w	r3, r3, #2
 800affc:	81a3      	strh	r3, [r4, #12]
 800affe:	e7e2      	b.n	800afc6 <__smakebuf_r+0xc>
 800b000:	89a3      	ldrh	r3, [r4, #12]
 800b002:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800b006:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b00a:	81a3      	strh	r3, [r4, #12]
 800b00c:	9b01      	ldr	r3, [sp, #4]
 800b00e:	6020      	str	r0, [r4, #0]
 800b010:	b15b      	cbz	r3, 800b02a <__smakebuf_r+0x70>
 800b012:	4630      	mov	r0, r6
 800b014:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b018:	f000 f81e 	bl	800b058 <_isatty_r>
 800b01c:	b128      	cbz	r0, 800b02a <__smakebuf_r+0x70>
 800b01e:	89a3      	ldrh	r3, [r4, #12]
 800b020:	f023 0303 	bic.w	r3, r3, #3
 800b024:	f043 0301 	orr.w	r3, r3, #1
 800b028:	81a3      	strh	r3, [r4, #12]
 800b02a:	89a3      	ldrh	r3, [r4, #12]
 800b02c:	431d      	orrs	r5, r3
 800b02e:	81a5      	strh	r5, [r4, #12]
 800b030:	e7cf      	b.n	800afd2 <__smakebuf_r+0x18>
	...

0800b034 <_fstat_r>:
 800b034:	b538      	push	{r3, r4, r5, lr}
 800b036:	2300      	movs	r3, #0
 800b038:	4d06      	ldr	r5, [pc, #24]	@ (800b054 <_fstat_r+0x20>)
 800b03a:	4604      	mov	r4, r0
 800b03c:	4608      	mov	r0, r1
 800b03e:	4611      	mov	r1, r2
 800b040:	602b      	str	r3, [r5, #0]
 800b042:	f7f6 fd45 	bl	8001ad0 <_fstat>
 800b046:	1c43      	adds	r3, r0, #1
 800b048:	d102      	bne.n	800b050 <_fstat_r+0x1c>
 800b04a:	682b      	ldr	r3, [r5, #0]
 800b04c:	b103      	cbz	r3, 800b050 <_fstat_r+0x1c>
 800b04e:	6023      	str	r3, [r4, #0]
 800b050:	bd38      	pop	{r3, r4, r5, pc}
 800b052:	bf00      	nop
 800b054:	20001cf4 	.word	0x20001cf4

0800b058 <_isatty_r>:
 800b058:	b538      	push	{r3, r4, r5, lr}
 800b05a:	2300      	movs	r3, #0
 800b05c:	4d05      	ldr	r5, [pc, #20]	@ (800b074 <_isatty_r+0x1c>)
 800b05e:	4604      	mov	r4, r0
 800b060:	4608      	mov	r0, r1
 800b062:	602b      	str	r3, [r5, #0]
 800b064:	f7f6 fd43 	bl	8001aee <_isatty>
 800b068:	1c43      	adds	r3, r0, #1
 800b06a:	d102      	bne.n	800b072 <_isatty_r+0x1a>
 800b06c:	682b      	ldr	r3, [r5, #0]
 800b06e:	b103      	cbz	r3, 800b072 <_isatty_r+0x1a>
 800b070:	6023      	str	r3, [r4, #0]
 800b072:	bd38      	pop	{r3, r4, r5, pc}
 800b074:	20001cf4 	.word	0x20001cf4

0800b078 <_init>:
 800b078:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b07a:	bf00      	nop
 800b07c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b07e:	bc08      	pop	{r3}
 800b080:	469e      	mov	lr, r3
 800b082:	4770      	bx	lr

0800b084 <_fini>:
 800b084:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b086:	bf00      	nop
 800b088:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b08a:	bc08      	pop	{r3}
 800b08c:	469e      	mov	lr, r3
 800b08e:	4770      	bx	lr
