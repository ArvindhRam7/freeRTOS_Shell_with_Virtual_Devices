
RTOS_Shell_VirtualDevices.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ac4c  08000110  08000110  00001110  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000005e0  0800ad60  0800ad60  0000bd60  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b340  0800b340  0000d1d8  2**0
                  CONTENTS
  4 .ARM          00000008  0800b340  0800b340  0000c340  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b348  0800b348  0000d1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b348  0800b348  0000c348  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b34c  0800b34c  0000c34c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  0800b350  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001b24  200001d8  0800b528  0000d1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20001cfc  0800b528  0000dcfc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000d1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000150cd  00000000  00000000  0000d201  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00003d79  00000000  00000000  000222ce  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011c0  00000000  00000000  00026048  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000d62  00000000  00000000  00027208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001bfe3  00000000  00000000  00027f6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015b76  00000000  00000000  00043f4d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009666c  00000000  00000000  00059ac3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000f012f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005b6c  00000000  00000000  000f0174  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006f  00000000  00000000  000f5ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001d8 	.word	0x200001d8
 800012c:	00000000 	.word	0x00000000
 8000130:	0800ad44 	.word	0x0800ad44

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001dc 	.word	0x200001dc
 800014c:	0800ad44 	.word	0x0800ad44

08000150 <strcmp>:
 8000150:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000154:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000158:	2a01      	cmp	r2, #1
 800015a:	bf28      	it	cs
 800015c:	429a      	cmpcs	r2, r3
 800015e:	d0f7      	beq.n	8000150 <strcmp>
 8000160:	1ad0      	subs	r0, r2, r3
 8000162:	4770      	bx	lr

08000164 <strlen>:
 8000164:	4603      	mov	r3, r0
 8000166:	f813 2b01 	ldrb.w	r2, [r3], #1
 800016a:	2a00      	cmp	r2, #0
 800016c:	d1fb      	bne.n	8000166 <strlen+0x2>
 800016e:	1a18      	subs	r0, r3, r0
 8000170:	3801      	subs	r0, #1
 8000172:	4770      	bx	lr

08000174 <__aeabi_drsub>:
 8000174:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000178:	e002      	b.n	8000180 <__adddf3>
 800017a:	bf00      	nop

0800017c <__aeabi_dsub>:
 800017c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000180 <__adddf3>:
 8000180:	b530      	push	{r4, r5, lr}
 8000182:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000186:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800018a:	ea94 0f05 	teq	r4, r5
 800018e:	bf08      	it	eq
 8000190:	ea90 0f02 	teqeq	r0, r2
 8000194:	bf1f      	itttt	ne
 8000196:	ea54 0c00 	orrsne.w	ip, r4, r0
 800019a:	ea55 0c02 	orrsne.w	ip, r5, r2
 800019e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80001a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80001a6:	f000 80e2 	beq.w	800036e <__adddf3+0x1ee>
 80001aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80001ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80001b2:	bfb8      	it	lt
 80001b4:	426d      	neglt	r5, r5
 80001b6:	dd0c      	ble.n	80001d2 <__adddf3+0x52>
 80001b8:	442c      	add	r4, r5
 80001ba:	ea80 0202 	eor.w	r2, r0, r2
 80001be:	ea81 0303 	eor.w	r3, r1, r3
 80001c2:	ea82 0000 	eor.w	r0, r2, r0
 80001c6:	ea83 0101 	eor.w	r1, r3, r1
 80001ca:	ea80 0202 	eor.w	r2, r0, r2
 80001ce:	ea81 0303 	eor.w	r3, r1, r3
 80001d2:	2d36      	cmp	r5, #54	@ 0x36
 80001d4:	bf88      	it	hi
 80001d6:	bd30      	pophi	{r4, r5, pc}
 80001d8:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001e0:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x70>
 80001ea:	4240      	negs	r0, r0
 80001ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001f0:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001fc:	d002      	beq.n	8000204 <__adddf3+0x84>
 80001fe:	4252      	negs	r2, r2
 8000200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000204:	ea94 0f05 	teq	r4, r5
 8000208:	f000 80a7 	beq.w	800035a <__adddf3+0x1da>
 800020c:	f1a4 0401 	sub.w	r4, r4, #1
 8000210:	f1d5 0e20 	rsbs	lr, r5, #32
 8000214:	db0d      	blt.n	8000232 <__adddf3+0xb2>
 8000216:	fa02 fc0e 	lsl.w	ip, r2, lr
 800021a:	fa22 f205 	lsr.w	r2, r2, r5
 800021e:	1880      	adds	r0, r0, r2
 8000220:	f141 0100 	adc.w	r1, r1, #0
 8000224:	fa03 f20e 	lsl.w	r2, r3, lr
 8000228:	1880      	adds	r0, r0, r2
 800022a:	fa43 f305 	asr.w	r3, r3, r5
 800022e:	4159      	adcs	r1, r3
 8000230:	e00e      	b.n	8000250 <__adddf3+0xd0>
 8000232:	f1a5 0520 	sub.w	r5, r5, #32
 8000236:	f10e 0e20 	add.w	lr, lr, #32
 800023a:	2a01      	cmp	r2, #1
 800023c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000240:	bf28      	it	cs
 8000242:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000246:	fa43 f305 	asr.w	r3, r3, r5
 800024a:	18c0      	adds	r0, r0, r3
 800024c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000250:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000254:	d507      	bpl.n	8000266 <__adddf3+0xe6>
 8000256:	f04f 0e00 	mov.w	lr, #0
 800025a:	f1dc 0c00 	rsbs	ip, ip, #0
 800025e:	eb7e 0000 	sbcs.w	r0, lr, r0
 8000262:	eb6e 0101 	sbc.w	r1, lr, r1
 8000266:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 800026a:	d31b      	bcc.n	80002a4 <__adddf3+0x124>
 800026c:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000270:	d30c      	bcc.n	800028c <__adddf3+0x10c>
 8000272:	0849      	lsrs	r1, r1, #1
 8000274:	ea5f 0030 	movs.w	r0, r0, rrx
 8000278:	ea4f 0c3c 	mov.w	ip, ip, rrx
 800027c:	f104 0401 	add.w	r4, r4, #1
 8000280:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000284:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000288:	f080 809a 	bcs.w	80003c0 <__adddf3+0x240>
 800028c:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000290:	bf08      	it	eq
 8000292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000296:	f150 0000 	adcs.w	r0, r0, #0
 800029a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800029e:	ea41 0105 	orr.w	r1, r1, r5
 80002a2:	bd30      	pop	{r4, r5, pc}
 80002a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80002a8:	4140      	adcs	r0, r0
 80002aa:	eb41 0101 	adc.w	r1, r1, r1
 80002ae:	3c01      	subs	r4, #1
 80002b0:	bf28      	it	cs
 80002b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80002b6:	d2e9      	bcs.n	800028c <__adddf3+0x10c>
 80002b8:	f091 0f00 	teq	r1, #0
 80002bc:	bf04      	itt	eq
 80002be:	4601      	moveq	r1, r0
 80002c0:	2000      	moveq	r0, #0
 80002c2:	fab1 f381 	clz	r3, r1
 80002c6:	bf08      	it	eq
 80002c8:	3320      	addeq	r3, #32
 80002ca:	f1a3 030b 	sub.w	r3, r3, #11
 80002ce:	f1b3 0220 	subs.w	r2, r3, #32
 80002d2:	da0c      	bge.n	80002ee <__adddf3+0x16e>
 80002d4:	320c      	adds	r2, #12
 80002d6:	dd08      	ble.n	80002ea <__adddf3+0x16a>
 80002d8:	f102 0c14 	add.w	ip, r2, #20
 80002dc:	f1c2 020c 	rsb	r2, r2, #12
 80002e0:	fa01 f00c 	lsl.w	r0, r1, ip
 80002e4:	fa21 f102 	lsr.w	r1, r1, r2
 80002e8:	e00c      	b.n	8000304 <__adddf3+0x184>
 80002ea:	f102 0214 	add.w	r2, r2, #20
 80002ee:	bfd8      	it	le
 80002f0:	f1c2 0c20 	rsble	ip, r2, #32
 80002f4:	fa01 f102 	lsl.w	r1, r1, r2
 80002f8:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002fc:	bfdc      	itt	le
 80002fe:	ea41 010c 	orrle.w	r1, r1, ip
 8000302:	4090      	lslle	r0, r2
 8000304:	1ae4      	subs	r4, r4, r3
 8000306:	bfa2      	ittt	ge
 8000308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800030c:	4329      	orrge	r1, r5
 800030e:	bd30      	popge	{r4, r5, pc}
 8000310:	ea6f 0404 	mvn.w	r4, r4
 8000314:	3c1f      	subs	r4, #31
 8000316:	da1c      	bge.n	8000352 <__adddf3+0x1d2>
 8000318:	340c      	adds	r4, #12
 800031a:	dc0e      	bgt.n	800033a <__adddf3+0x1ba>
 800031c:	f104 0414 	add.w	r4, r4, #20
 8000320:	f1c4 0220 	rsb	r2, r4, #32
 8000324:	fa20 f004 	lsr.w	r0, r0, r4
 8000328:	fa01 f302 	lsl.w	r3, r1, r2
 800032c:	ea40 0003 	orr.w	r0, r0, r3
 8000330:	fa21 f304 	lsr.w	r3, r1, r4
 8000334:	ea45 0103 	orr.w	r1, r5, r3
 8000338:	bd30      	pop	{r4, r5, pc}
 800033a:	f1c4 040c 	rsb	r4, r4, #12
 800033e:	f1c4 0220 	rsb	r2, r4, #32
 8000342:	fa20 f002 	lsr.w	r0, r0, r2
 8000346:	fa01 f304 	lsl.w	r3, r1, r4
 800034a:	ea40 0003 	orr.w	r0, r0, r3
 800034e:	4629      	mov	r1, r5
 8000350:	bd30      	pop	{r4, r5, pc}
 8000352:	fa21 f004 	lsr.w	r0, r1, r4
 8000356:	4629      	mov	r1, r5
 8000358:	bd30      	pop	{r4, r5, pc}
 800035a:	f094 0f00 	teq	r4, #0
 800035e:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 8000362:	bf06      	itte	eq
 8000364:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000368:	3401      	addeq	r4, #1
 800036a:	3d01      	subne	r5, #1
 800036c:	e74e      	b.n	800020c <__adddf3+0x8c>
 800036e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000372:	bf18      	it	ne
 8000374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000378:	d029      	beq.n	80003ce <__adddf3+0x24e>
 800037a:	ea94 0f05 	teq	r4, r5
 800037e:	bf08      	it	eq
 8000380:	ea90 0f02 	teqeq	r0, r2
 8000384:	d005      	beq.n	8000392 <__adddf3+0x212>
 8000386:	ea54 0c00 	orrs.w	ip, r4, r0
 800038a:	bf04      	itt	eq
 800038c:	4619      	moveq	r1, r3
 800038e:	4610      	moveq	r0, r2
 8000390:	bd30      	pop	{r4, r5, pc}
 8000392:	ea91 0f03 	teq	r1, r3
 8000396:	bf1e      	ittt	ne
 8000398:	2100      	movne	r1, #0
 800039a:	2000      	movne	r0, #0
 800039c:	bd30      	popne	{r4, r5, pc}
 800039e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80003a2:	d105      	bne.n	80003b0 <__adddf3+0x230>
 80003a4:	0040      	lsls	r0, r0, #1
 80003a6:	4149      	adcs	r1, r1
 80003a8:	bf28      	it	cs
 80003aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80003b4:	bf3c      	itt	cc
 80003b6:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80003ba:	bd30      	popcc	{r4, r5, pc}
 80003bc:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80003c0:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003c4:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d2:	bf1a      	itte	ne
 80003d4:	4619      	movne	r1, r3
 80003d6:	4610      	movne	r0, r2
 80003d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003dc:	bf1c      	itt	ne
 80003de:	460b      	movne	r3, r1
 80003e0:	4602      	movne	r2, r0
 80003e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003e6:	bf06      	itte	eq
 80003e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003ec:	ea91 0f03 	teqeq	r1, r3
 80003f0:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	bf00      	nop

080003f8 <__aeabi_ui2d>:
 80003f8:	f090 0f00 	teq	r0, #0
 80003fc:	bf04      	itt	eq
 80003fe:	2100      	moveq	r1, #0
 8000400:	4770      	bxeq	lr
 8000402:	b530      	push	{r4, r5, lr}
 8000404:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000408:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800040c:	f04f 0500 	mov.w	r5, #0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e750      	b.n	80002b8 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_i2d>:
 8000418:	f090 0f00 	teq	r0, #0
 800041c:	bf04      	itt	eq
 800041e:	2100      	moveq	r1, #0
 8000420:	4770      	bxeq	lr
 8000422:	b530      	push	{r4, r5, lr}
 8000424:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000428:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800042c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000430:	bf48      	it	mi
 8000432:	4240      	negmi	r0, r0
 8000434:	f04f 0100 	mov.w	r1, #0
 8000438:	e73e      	b.n	80002b8 <__adddf3+0x138>
 800043a:	bf00      	nop

0800043c <__aeabi_f2d>:
 800043c:	0042      	lsls	r2, r0, #1
 800043e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000442:	ea4f 0131 	mov.w	r1, r1, rrx
 8000446:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800044a:	bf1f      	itttt	ne
 800044c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000450:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000454:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000458:	4770      	bxne	lr
 800045a:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800045e:	bf08      	it	eq
 8000460:	4770      	bxeq	lr
 8000462:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000466:	bf04      	itt	eq
 8000468:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 800046c:	4770      	bxeq	lr
 800046e:	b530      	push	{r4, r5, lr}
 8000470:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000474:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000478:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800047c:	e71c      	b.n	80002b8 <__adddf3+0x138>
 800047e:	bf00      	nop

08000480 <__aeabi_ul2d>:
 8000480:	ea50 0201 	orrs.w	r2, r0, r1
 8000484:	bf08      	it	eq
 8000486:	4770      	bxeq	lr
 8000488:	b530      	push	{r4, r5, lr}
 800048a:	f04f 0500 	mov.w	r5, #0
 800048e:	e00a      	b.n	80004a6 <__aeabi_l2d+0x16>

08000490 <__aeabi_l2d>:
 8000490:	ea50 0201 	orrs.w	r2, r0, r1
 8000494:	bf08      	it	eq
 8000496:	4770      	bxeq	lr
 8000498:	b530      	push	{r4, r5, lr}
 800049a:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800049e:	d502      	bpl.n	80004a6 <__aeabi_l2d+0x16>
 80004a0:	4240      	negs	r0, r0
 80004a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80004a6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80004aa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80004ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80004b2:	f43f aed8 	beq.w	8000266 <__adddf3+0xe6>
 80004b6:	f04f 0203 	mov.w	r2, #3
 80004ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004be:	bf18      	it	ne
 80004c0:	3203      	addne	r2, #3
 80004c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004c6:	bf18      	it	ne
 80004c8:	3203      	addne	r2, #3
 80004ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ce:	f1c2 0320 	rsb	r3, r2, #32
 80004d2:	fa00 fc03 	lsl.w	ip, r0, r3
 80004d6:	fa20 f002 	lsr.w	r0, r0, r2
 80004da:	fa01 fe03 	lsl.w	lr, r1, r3
 80004de:	ea40 000e 	orr.w	r0, r0, lr
 80004e2:	fa21 f102 	lsr.w	r1, r1, r2
 80004e6:	4414      	add	r4, r2
 80004e8:	e6bd      	b.n	8000266 <__adddf3+0xe6>
 80004ea:	bf00      	nop

080004ec <__aeabi_dmul>:
 80004ec:	b570      	push	{r4, r5, r6, lr}
 80004ee:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004f2:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004fa:	bf1d      	ittte	ne
 80004fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000500:	ea94 0f0c 	teqne	r4, ip
 8000504:	ea95 0f0c 	teqne	r5, ip
 8000508:	f000 f8de 	bleq	80006c8 <__aeabi_dmul+0x1dc>
 800050c:	442c      	add	r4, r5
 800050e:	ea81 0603 	eor.w	r6, r1, r3
 8000512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800051a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800051e:	bf18      	it	ne
 8000520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000524:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000528:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800052c:	d038      	beq.n	80005a0 <__aeabi_dmul+0xb4>
 800052e:	fba0 ce02 	umull	ip, lr, r0, r2
 8000532:	f04f 0500 	mov.w	r5, #0
 8000536:	fbe1 e502 	umlal	lr, r5, r1, r2
 800053a:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800053e:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000542:	f04f 0600 	mov.w	r6, #0
 8000546:	fbe1 5603 	umlal	r5, r6, r1, r3
 800054a:	f09c 0f00 	teq	ip, #0
 800054e:	bf18      	it	ne
 8000550:	f04e 0e01 	orrne.w	lr, lr, #1
 8000554:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000558:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 800055c:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000560:	d204      	bcs.n	800056c <__aeabi_dmul+0x80>
 8000562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000566:	416d      	adcs	r5, r5
 8000568:	eb46 0606 	adc.w	r6, r6, r6
 800056c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800057c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000580:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000584:	bf88      	it	hi
 8000586:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800058a:	d81e      	bhi.n	80005ca <__aeabi_dmul+0xde>
 800058c:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000590:	bf08      	it	eq
 8000592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000596:	f150 0000 	adcs.w	r0, r0, #0
 800059a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800059e:	bd70      	pop	{r4, r5, r6, pc}
 80005a0:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80005a4:	ea46 0101 	orr.w	r1, r6, r1
 80005a8:	ea40 0002 	orr.w	r0, r0, r2
 80005ac:	ea81 0103 	eor.w	r1, r1, r3
 80005b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005b4:	bfc2      	ittt	gt
 80005b6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005be:	bd70      	popgt	{r4, r5, r6, pc}
 80005c0:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005c4:	f04f 0e00 	mov.w	lr, #0
 80005c8:	3c01      	subs	r4, #1
 80005ca:	f300 80ab 	bgt.w	8000724 <__aeabi_dmul+0x238>
 80005ce:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005d2:	bfde      	ittt	le
 80005d4:	2000      	movle	r0, #0
 80005d6:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005da:	bd70      	pople	{r4, r5, r6, pc}
 80005dc:	f1c4 0400 	rsb	r4, r4, #0
 80005e0:	3c20      	subs	r4, #32
 80005e2:	da35      	bge.n	8000650 <__aeabi_dmul+0x164>
 80005e4:	340c      	adds	r4, #12
 80005e6:	dc1b      	bgt.n	8000620 <__aeabi_dmul+0x134>
 80005e8:	f104 0414 	add.w	r4, r4, #20
 80005ec:	f1c4 0520 	rsb	r5, r4, #32
 80005f0:	fa00 f305 	lsl.w	r3, r0, r5
 80005f4:	fa20 f004 	lsr.w	r0, r0, r4
 80005f8:	fa01 f205 	lsl.w	r2, r1, r5
 80005fc:	ea40 0002 	orr.w	r0, r0, r2
 8000600:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000604:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800060c:	fa21 f604 	lsr.w	r6, r1, r4
 8000610:	eb42 0106 	adc.w	r1, r2, r6
 8000614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000618:	bf08      	it	eq
 800061a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800061e:	bd70      	pop	{r4, r5, r6, pc}
 8000620:	f1c4 040c 	rsb	r4, r4, #12
 8000624:	f1c4 0520 	rsb	r5, r4, #32
 8000628:	fa00 f304 	lsl.w	r3, r0, r4
 800062c:	fa20 f005 	lsr.w	r0, r0, r5
 8000630:	fa01 f204 	lsl.w	r2, r1, r4
 8000634:	ea40 0002 	orr.w	r0, r0, r2
 8000638:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800063c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000640:	f141 0100 	adc.w	r1, r1, #0
 8000644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000648:	bf08      	it	eq
 800064a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800064e:	bd70      	pop	{r4, r5, r6, pc}
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f205 	lsl.w	r2, r0, r5
 8000658:	ea4e 0e02 	orr.w	lr, lr, r2
 800065c:	fa20 f304 	lsr.w	r3, r0, r4
 8000660:	fa01 f205 	lsl.w	r2, r1, r5
 8000664:	ea43 0302 	orr.w	r3, r3, r2
 8000668:	fa21 f004 	lsr.w	r0, r1, r4
 800066c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000670:	fa21 f204 	lsr.w	r2, r1, r4
 8000674:	ea20 0002 	bic.w	r0, r0, r2
 8000678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 800067c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000680:	bf08      	it	eq
 8000682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000686:	bd70      	pop	{r4, r5, r6, pc}
 8000688:	f094 0f00 	teq	r4, #0
 800068c:	d10f      	bne.n	80006ae <__aeabi_dmul+0x1c2>
 800068e:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000692:	0040      	lsls	r0, r0, #1
 8000694:	eb41 0101 	adc.w	r1, r1, r1
 8000698:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800069c:	bf08      	it	eq
 800069e:	3c01      	subeq	r4, #1
 80006a0:	d0f7      	beq.n	8000692 <__aeabi_dmul+0x1a6>
 80006a2:	ea41 0106 	orr.w	r1, r1, r6
 80006a6:	f095 0f00 	teq	r5, #0
 80006aa:	bf18      	it	ne
 80006ac:	4770      	bxne	lr
 80006ae:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80006b2:	0052      	lsls	r2, r2, #1
 80006b4:	eb43 0303 	adc.w	r3, r3, r3
 80006b8:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80006bc:	bf08      	it	eq
 80006be:	3d01      	subeq	r5, #1
 80006c0:	d0f7      	beq.n	80006b2 <__aeabi_dmul+0x1c6>
 80006c2:	ea43 0306 	orr.w	r3, r3, r6
 80006c6:	4770      	bx	lr
 80006c8:	ea94 0f0c 	teq	r4, ip
 80006cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006d0:	bf18      	it	ne
 80006d2:	ea95 0f0c 	teqne	r5, ip
 80006d6:	d00c      	beq.n	80006f2 <__aeabi_dmul+0x206>
 80006d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006dc:	bf18      	it	ne
 80006de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006e2:	d1d1      	bne.n	8000688 <__aeabi_dmul+0x19c>
 80006e4:	ea81 0103 	eor.w	r1, r1, r3
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006ec:	f04f 0000 	mov.w	r0, #0
 80006f0:	bd70      	pop	{r4, r5, r6, pc}
 80006f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006f6:	bf06      	itte	eq
 80006f8:	4610      	moveq	r0, r2
 80006fa:	4619      	moveq	r1, r3
 80006fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000700:	d019      	beq.n	8000736 <__aeabi_dmul+0x24a>
 8000702:	ea94 0f0c 	teq	r4, ip
 8000706:	d102      	bne.n	800070e <__aeabi_dmul+0x222>
 8000708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 800070c:	d113      	bne.n	8000736 <__aeabi_dmul+0x24a>
 800070e:	ea95 0f0c 	teq	r5, ip
 8000712:	d105      	bne.n	8000720 <__aeabi_dmul+0x234>
 8000714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000718:	bf1c      	itt	ne
 800071a:	4610      	movne	r0, r2
 800071c:	4619      	movne	r1, r3
 800071e:	d10a      	bne.n	8000736 <__aeabi_dmul+0x24a>
 8000720:	ea81 0103 	eor.w	r1, r1, r3
 8000724:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000728:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800072c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000730:	f04f 0000 	mov.w	r0, #0
 8000734:	bd70      	pop	{r4, r5, r6, pc}
 8000736:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 800073a:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800073e:	bd70      	pop	{r4, r5, r6, pc}

08000740 <__aeabi_ddiv>:
 8000740:	b570      	push	{r4, r5, r6, lr}
 8000742:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000746:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800074a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800074e:	bf1d      	ittte	ne
 8000750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000754:	ea94 0f0c 	teqne	r4, ip
 8000758:	ea95 0f0c 	teqne	r5, ip
 800075c:	f000 f8a7 	bleq	80008ae <__aeabi_ddiv+0x16e>
 8000760:	eba4 0405 	sub.w	r4, r4, r5
 8000764:	ea81 0e03 	eor.w	lr, r1, r3
 8000768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800076c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000770:	f000 8088 	beq.w	8000884 <__aeabi_ddiv+0x144>
 8000774:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000778:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 800077c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000784:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 800078c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000790:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000794:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000798:	429d      	cmp	r5, r3
 800079a:	bf08      	it	eq
 800079c:	4296      	cmpeq	r6, r2
 800079e:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80007a2:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80007a6:	d202      	bcs.n	80007ae <__aeabi_ddiv+0x6e>
 80007a8:	085b      	lsrs	r3, r3, #1
 80007aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ae:	1ab6      	subs	r6, r6, r2
 80007b0:	eb65 0503 	sbc.w	r5, r5, r3
 80007b4:	085b      	lsrs	r3, r3, #1
 80007b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ba:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80007be:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80007c2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007c6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ca:	bf22      	ittt	cs
 80007cc:	1ab6      	subcs	r6, r6, r2
 80007ce:	4675      	movcs	r5, lr
 80007d0:	ea40 000c 	orrcs.w	r0, r0, ip
 80007d4:	085b      	lsrs	r3, r3, #1
 80007d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007da:	ebb6 0e02 	subs.w	lr, r6, r2
 80007de:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e2:	bf22      	ittt	cs
 80007e4:	1ab6      	subcs	r6, r6, r2
 80007e6:	4675      	movcs	r5, lr
 80007e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007ec:	085b      	lsrs	r3, r3, #1
 80007ee:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007f6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fa:	bf22      	ittt	cs
 80007fc:	1ab6      	subcs	r6, r6, r2
 80007fe:	4675      	movcs	r5, lr
 8000800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000804:	085b      	lsrs	r3, r3, #1
 8000806:	ea4f 0232 	mov.w	r2, r2, rrx
 800080a:	ebb6 0e02 	subs.w	lr, r6, r2
 800080e:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000812:	bf22      	ittt	cs
 8000814:	1ab6      	subcs	r6, r6, r2
 8000816:	4675      	movcs	r5, lr
 8000818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 800081c:	ea55 0e06 	orrs.w	lr, r5, r6
 8000820:	d018      	beq.n	8000854 <__aeabi_ddiv+0x114>
 8000822:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800082a:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800082e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800083a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800083e:	d1c0      	bne.n	80007c2 <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000844:	d10b      	bne.n	800085e <__aeabi_ddiv+0x11e>
 8000846:	ea41 0100 	orr.w	r1, r1, r0
 800084a:	f04f 0000 	mov.w	r0, #0
 800084e:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 8000852:	e7b6      	b.n	80007c2 <__aeabi_ddiv+0x82>
 8000854:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000858:	bf04      	itt	eq
 800085a:	4301      	orreq	r1, r0
 800085c:	2000      	moveq	r0, #0
 800085e:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000862:	bf88      	it	hi
 8000864:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000868:	f63f aeaf 	bhi.w	80005ca <__aeabi_dmul+0xde>
 800086c:	ebb5 0c03 	subs.w	ip, r5, r3
 8000870:	bf04      	itt	eq
 8000872:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800087a:	f150 0000 	adcs.w	r0, r0, #0
 800087e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000882:	bd70      	pop	{r4, r5, r6, pc}
 8000884:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 800088c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000890:	bfc2      	ittt	gt
 8000892:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800089a:	bd70      	popgt	{r4, r5, r6, pc}
 800089c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80008a0:	f04f 0e00 	mov.w	lr, #0
 80008a4:	3c01      	subs	r4, #1
 80008a6:	e690      	b.n	80005ca <__aeabi_dmul+0xde>
 80008a8:	ea45 0e06 	orr.w	lr, r5, r6
 80008ac:	e68d      	b.n	80005ca <__aeabi_dmul+0xde>
 80008ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80008b2:	ea94 0f0c 	teq	r4, ip
 80008b6:	bf08      	it	eq
 80008b8:	ea95 0f0c 	teqeq	r5, ip
 80008bc:	f43f af3b 	beq.w	8000736 <__aeabi_dmul+0x24a>
 80008c0:	ea94 0f0c 	teq	r4, ip
 80008c4:	d10a      	bne.n	80008dc <__aeabi_ddiv+0x19c>
 80008c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008ca:	f47f af34 	bne.w	8000736 <__aeabi_dmul+0x24a>
 80008ce:	ea95 0f0c 	teq	r5, ip
 80008d2:	f47f af25 	bne.w	8000720 <__aeabi_dmul+0x234>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e72c      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008dc:	ea95 0f0c 	teq	r5, ip
 80008e0:	d106      	bne.n	80008f0 <__aeabi_ddiv+0x1b0>
 80008e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e6:	f43f aefd 	beq.w	80006e4 <__aeabi_dmul+0x1f8>
 80008ea:	4610      	mov	r0, r2
 80008ec:	4619      	mov	r1, r3
 80008ee:	e722      	b.n	8000736 <__aeabi_dmul+0x24a>
 80008f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008f4:	bf18      	it	ne
 80008f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008fa:	f47f aec5 	bne.w	8000688 <__aeabi_dmul+0x19c>
 80008fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000902:	f47f af0d 	bne.w	8000720 <__aeabi_dmul+0x234>
 8000906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800090a:	f47f aeeb 	bne.w	80006e4 <__aeabi_dmul+0x1f8>
 800090e:	e712      	b.n	8000736 <__aeabi_dmul+0x24a>

08000910 <__gedf2>:
 8000910:	f04f 3cff 	mov.w	ip, #4294967295
 8000914:	e006      	b.n	8000924 <__cmpdf2+0x4>
 8000916:	bf00      	nop

08000918 <__ledf2>:
 8000918:	f04f 0c01 	mov.w	ip, #1
 800091c:	e002      	b.n	8000924 <__cmpdf2+0x4>
 800091e:	bf00      	nop

08000920 <__cmpdf2>:
 8000920:	f04f 0c01 	mov.w	ip, #1
 8000924:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800092c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000934:	bf18      	it	ne
 8000936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800093a:	d01b      	beq.n	8000974 <__cmpdf2+0x54>
 800093c:	b001      	add	sp, #4
 800093e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000942:	bf0c      	ite	eq
 8000944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000948:	ea91 0f03 	teqne	r1, r3
 800094c:	bf02      	ittt	eq
 800094e:	ea90 0f02 	teqeq	r0, r2
 8000952:	2000      	moveq	r0, #0
 8000954:	4770      	bxeq	lr
 8000956:	f110 0f00 	cmn.w	r0, #0
 800095a:	ea91 0f03 	teq	r1, r3
 800095e:	bf58      	it	pl
 8000960:	4299      	cmppl	r1, r3
 8000962:	bf08      	it	eq
 8000964:	4290      	cmpeq	r0, r2
 8000966:	bf2c      	ite	cs
 8000968:	17d8      	asrcs	r0, r3, #31
 800096a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800096e:	f040 0001 	orr.w	r0, r0, #1
 8000972:	4770      	bx	lr
 8000974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800097c:	d102      	bne.n	8000984 <__cmpdf2+0x64>
 800097e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000982:	d107      	bne.n	8000994 <__cmpdf2+0x74>
 8000984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800098c:	d1d6      	bne.n	800093c <__cmpdf2+0x1c>
 800098e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000992:	d0d3      	beq.n	800093c <__cmpdf2+0x1c>
 8000994:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000998:	4770      	bx	lr
 800099a:	bf00      	nop

0800099c <__aeabi_cdrcmple>:
 800099c:	4684      	mov	ip, r0
 800099e:	4610      	mov	r0, r2
 80009a0:	4662      	mov	r2, ip
 80009a2:	468c      	mov	ip, r1
 80009a4:	4619      	mov	r1, r3
 80009a6:	4663      	mov	r3, ip
 80009a8:	e000      	b.n	80009ac <__aeabi_cdcmpeq>
 80009aa:	bf00      	nop

080009ac <__aeabi_cdcmpeq>:
 80009ac:	b501      	push	{r0, lr}
 80009ae:	f7ff ffb7 	bl	8000920 <__cmpdf2>
 80009b2:	2800      	cmp	r0, #0
 80009b4:	bf48      	it	mi
 80009b6:	f110 0f00 	cmnmi.w	r0, #0
 80009ba:	bd01      	pop	{r0, pc}

080009bc <__aeabi_dcmpeq>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff fff4 	bl	80009ac <__aeabi_cdcmpeq>
 80009c4:	bf0c      	ite	eq
 80009c6:	2001      	moveq	r0, #1
 80009c8:	2000      	movne	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmplt>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffea 	bl	80009ac <__aeabi_cdcmpeq>
 80009d8:	bf34      	ite	cc
 80009da:	2001      	movcc	r0, #1
 80009dc:	2000      	movcs	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmple>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffe0 	bl	80009ac <__aeabi_cdcmpeq>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpge>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffce 	bl	800099c <__aeabi_cdrcmple>
 8000a00:	bf94      	ite	ls
 8000a02:	2001      	movls	r0, #1
 8000a04:	2000      	movhi	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpgt>:
 8000a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a10:	f7ff ffc4 	bl	800099c <__aeabi_cdrcmple>
 8000a14:	bf34      	ite	cc
 8000a16:	2001      	movcc	r0, #1
 8000a18:	2000      	movcs	r0, #0
 8000a1a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a1e:	bf00      	nop

08000a20 <__aeabi_dcmpun>:
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__aeabi_dcmpun+0x10>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d10a      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d102      	bne.n	8000a40 <__aeabi_dcmpun+0x20>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d102      	bne.n	8000a46 <__aeabi_dcmpun+0x26>
 8000a40:	f04f 0000 	mov.w	r0, #0
 8000a44:	4770      	bx	lr
 8000a46:	f04f 0001 	mov.w	r0, #1
 8000a4a:	4770      	bx	lr

08000a4c <__aeabi_d2iz>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a54:	d215      	bcs.n	8000a82 <__aeabi_d2iz+0x36>
 8000a56:	d511      	bpl.n	8000a7c <__aeabi_d2iz+0x30>
 8000a58:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a60:	d912      	bls.n	8000a88 <__aeabi_d2iz+0x3c>
 8000a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a66:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a6e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a72:	fa23 f002 	lsr.w	r0, r3, r2
 8000a76:	bf18      	it	ne
 8000a78:	4240      	negne	r0, r0
 8000a7a:	4770      	bx	lr
 8000a7c:	f04f 0000 	mov.w	r0, #0
 8000a80:	4770      	bx	lr
 8000a82:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a86:	d105      	bne.n	8000a94 <__aeabi_d2iz+0x48>
 8000a88:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	bf08      	it	eq
 8000a8e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a92:	4770      	bx	lr
 8000a94:	f04f 0000 	mov.w	r0, #0
 8000a98:	4770      	bx	lr
 8000a9a:	bf00      	nop

08000a9c <__aeabi_frsub>:
 8000a9c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000aa0:	e002      	b.n	8000aa8 <__addsf3>
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_fsub>:
 8000aa4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000aa8 <__addsf3>:
 8000aa8:	0042      	lsls	r2, r0, #1
 8000aaa:	bf1f      	itttt	ne
 8000aac:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000ab0:	ea92 0f03 	teqne	r2, r3
 8000ab4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ab8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000abc:	d06a      	beq.n	8000b94 <__addsf3+0xec>
 8000abe:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000ac2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000ac6:	bfc1      	itttt	gt
 8000ac8:	18d2      	addgt	r2, r2, r3
 8000aca:	4041      	eorgt	r1, r0
 8000acc:	4048      	eorgt	r0, r1
 8000ace:	4041      	eorgt	r1, r0
 8000ad0:	bfb8      	it	lt
 8000ad2:	425b      	neglt	r3, r3
 8000ad4:	2b19      	cmp	r3, #25
 8000ad6:	bf88      	it	hi
 8000ad8:	4770      	bxhi	lr
 8000ada:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000ade:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000ae6:	bf18      	it	ne
 8000ae8:	4240      	negne	r0, r0
 8000aea:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000aee:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000af2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000af6:	bf18      	it	ne
 8000af8:	4249      	negne	r1, r1
 8000afa:	ea92 0f03 	teq	r2, r3
 8000afe:	d03f      	beq.n	8000b80 <__addsf3+0xd8>
 8000b00:	f1a2 0201 	sub.w	r2, r2, #1
 8000b04:	fa41 fc03 	asr.w	ip, r1, r3
 8000b08:	eb10 000c 	adds.w	r0, r0, ip
 8000b0c:	f1c3 0320 	rsb	r3, r3, #32
 8000b10:	fa01 f103 	lsl.w	r1, r1, r3
 8000b14:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b18:	d502      	bpl.n	8000b20 <__addsf3+0x78>
 8000b1a:	4249      	negs	r1, r1
 8000b1c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b20:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b24:	d313      	bcc.n	8000b4e <__addsf3+0xa6>
 8000b26:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b2a:	d306      	bcc.n	8000b3a <__addsf3+0x92>
 8000b2c:	0840      	lsrs	r0, r0, #1
 8000b2e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b32:	f102 0201 	add.w	r2, r2, #1
 8000b36:	2afe      	cmp	r2, #254	@ 0xfe
 8000b38:	d251      	bcs.n	8000bde <__addsf3+0x136>
 8000b3a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b42:	bf08      	it	eq
 8000b44:	f020 0001 	biceq.w	r0, r0, #1
 8000b48:	ea40 0003 	orr.w	r0, r0, r3
 8000b4c:	4770      	bx	lr
 8000b4e:	0049      	lsls	r1, r1, #1
 8000b50:	eb40 0000 	adc.w	r0, r0, r0
 8000b54:	3a01      	subs	r2, #1
 8000b56:	bf28      	it	cs
 8000b58:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000b5c:	d2ed      	bcs.n	8000b3a <__addsf3+0x92>
 8000b5e:	fab0 fc80 	clz	ip, r0
 8000b62:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b66:	ebb2 020c 	subs.w	r2, r2, ip
 8000b6a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b6e:	bfaa      	itet	ge
 8000b70:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000b74:	4252      	neglt	r2, r2
 8000b76:	4318      	orrge	r0, r3
 8000b78:	bfbc      	itt	lt
 8000b7a:	40d0      	lsrlt	r0, r2
 8000b7c:	4318      	orrlt	r0, r3
 8000b7e:	4770      	bx	lr
 8000b80:	f092 0f00 	teq	r2, #0
 8000b84:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000b88:	bf06      	itte	eq
 8000b8a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000b8e:	3201      	addeq	r2, #1
 8000b90:	3b01      	subne	r3, #1
 8000b92:	e7b5      	b.n	8000b00 <__addsf3+0x58>
 8000b94:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000b98:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000b9c:	bf18      	it	ne
 8000b9e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ba2:	d021      	beq.n	8000be8 <__addsf3+0x140>
 8000ba4:	ea92 0f03 	teq	r2, r3
 8000ba8:	d004      	beq.n	8000bb4 <__addsf3+0x10c>
 8000baa:	f092 0f00 	teq	r2, #0
 8000bae:	bf08      	it	eq
 8000bb0:	4608      	moveq	r0, r1
 8000bb2:	4770      	bx	lr
 8000bb4:	ea90 0f01 	teq	r0, r1
 8000bb8:	bf1c      	itt	ne
 8000bba:	2000      	movne	r0, #0
 8000bbc:	4770      	bxne	lr
 8000bbe:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000bc2:	d104      	bne.n	8000bce <__addsf3+0x126>
 8000bc4:	0040      	lsls	r0, r0, #1
 8000bc6:	bf28      	it	cs
 8000bc8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000bcc:	4770      	bx	lr
 8000bce:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000bd2:	bf3c      	itt	cc
 8000bd4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000bd8:	4770      	bxcc	lr
 8000bda:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000bde:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000be2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000be6:	4770      	bx	lr
 8000be8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000bec:	bf16      	itet	ne
 8000bee:	4608      	movne	r0, r1
 8000bf0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000bf4:	4601      	movne	r1, r0
 8000bf6:	0242      	lsls	r2, r0, #9
 8000bf8:	bf06      	itte	eq
 8000bfa:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000bfe:	ea90 0f01 	teqeq	r0, r1
 8000c02:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c06:	4770      	bx	lr

08000c08 <__aeabi_ui2f>:
 8000c08:	f04f 0300 	mov.w	r3, #0
 8000c0c:	e004      	b.n	8000c18 <__aeabi_i2f+0x8>
 8000c0e:	bf00      	nop

08000c10 <__aeabi_i2f>:
 8000c10:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c14:	bf48      	it	mi
 8000c16:	4240      	negmi	r0, r0
 8000c18:	ea5f 0c00 	movs.w	ip, r0
 8000c1c:	bf08      	it	eq
 8000c1e:	4770      	bxeq	lr
 8000c20:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c24:	4601      	mov	r1, r0
 8000c26:	f04f 0000 	mov.w	r0, #0
 8000c2a:	e01c      	b.n	8000c66 <__aeabi_l2f+0x2a>

08000c2c <__aeabi_ul2f>:
 8000c2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c30:	bf08      	it	eq
 8000c32:	4770      	bxeq	lr
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e00a      	b.n	8000c50 <__aeabi_l2f+0x14>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_l2f>:
 8000c3c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c40:	bf08      	it	eq
 8000c42:	4770      	bxeq	lr
 8000c44:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c48:	d502      	bpl.n	8000c50 <__aeabi_l2f+0x14>
 8000c4a:	4240      	negs	r0, r0
 8000c4c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c50:	ea5f 0c01 	movs.w	ip, r1
 8000c54:	bf02      	ittt	eq
 8000c56:	4684      	moveq	ip, r0
 8000c58:	4601      	moveq	r1, r0
 8000c5a:	2000      	moveq	r0, #0
 8000c5c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000c60:	bf08      	it	eq
 8000c62:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000c66:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000c6a:	fabc f28c 	clz	r2, ip
 8000c6e:	3a08      	subs	r2, #8
 8000c70:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000c74:	db10      	blt.n	8000c98 <__aeabi_l2f+0x5c>
 8000c76:	fa01 fc02 	lsl.w	ip, r1, r2
 8000c7a:	4463      	add	r3, ip
 8000c7c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c80:	f1c2 0220 	rsb	r2, r2, #32
 8000c84:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000c88:	fa20 f202 	lsr.w	r2, r0, r2
 8000c8c:	eb43 0002 	adc.w	r0, r3, r2
 8000c90:	bf08      	it	eq
 8000c92:	f020 0001 	biceq.w	r0, r0, #1
 8000c96:	4770      	bx	lr
 8000c98:	f102 0220 	add.w	r2, r2, #32
 8000c9c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca0:	f1c2 0220 	rsb	r2, r2, #32
 8000ca4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ca8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cac:	eb43 0002 	adc.w	r0, r3, r2
 8000cb0:	bf08      	it	eq
 8000cb2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cb6:	4770      	bx	lr

08000cb8 <StartShellTask>:
	snprintf(response, max_len, "Time: %02d:%02d:%02d Date: %02d-%02d-%04d\n",
			sTime.Hours, sTime.Minutes, sTime.Seconds, sDate.Date, sDate.Month,
			2000 + sDate.Year);
}

void StartShellTask(void *argument) {
 8000cb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000cba:	b0cd      	sub	sp, #308	@ 0x134
 8000cbc:	af06      	add	r7, sp, #24
 8000cbe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000cc2:	f5a3 738a 	sub.w	r3, r3, #276	@ 0x114
 8000cc6:	6018      	str	r0, [r3, #0]
	VirtualTemperatureSensor tempSensor;
 8000cc8:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000ccc:	4618      	mov	r0, r3
 8000cce:	f000 f9db 	bl	8001088 <_ZN24VirtualTemperatureSensorC1Ev>
	VirtualVoltageSensor voltageSensor;

	char rxChar;
	char command[100];
	char response[100];
	unsigned int cmdIndex = 0;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

	while (1) {
		// Read one byte at a time
		if (xStreamBufferReceive(uartRxStreamBuffer, &rxChar, 1, portMAX_DELAY) == 1) {
 8000cd8:	4bc8      	ldr	r3, [pc, #800]	@ (8000ffc <StartShellTask+0x344>)
 8000cda:	6818      	ldr	r0, [r3, #0]
 8000cdc:	f107 01fb 	add.w	r1, r7, #251	@ 0xfb
 8000ce0:	f04f 33ff 	mov.w	r3, #4294967295
 8000ce4:	2201      	movs	r2, #1
 8000ce6:	f004 fa82 	bl	80051ee <xStreamBufferReceive>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b01      	cmp	r3, #1
 8000cee:	bf0c      	ite	eq
 8000cf0:	2301      	moveq	r3, #1
 8000cf2:	2300      	movne	r3, #0
 8000cf4:	b2db      	uxtb	r3, r3
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d0ee      	beq.n	8000cd8 <StartShellTask+0x20>
			if (rxChar == '\r' || rxChar == '\n') {
 8000cfa:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000cfe:	2b0d      	cmp	r3, #13
 8000d00:	d004      	beq.n	8000d0c <StartShellTask+0x54>
 8000d02:	f897 30fb 	ldrb.w	r3, [r7, #251]	@ 0xfb
 8000d06:	2b0a      	cmp	r3, #10
 8000d08:	f040 819c 	bne.w	8001044 <StartShellTask+0x38c>
				command[cmdIndex] = '\0'; // Null-terminate
 8000d0c:	f107 0294 	add.w	r2, r7, #148	@ 0x94
 8000d10:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8000d14:	4413      	add	r3, r2
 8000d16:	2200      	movs	r2, #0
 8000d18:	701a      	strb	r2, [r3, #0]
				cmdIndex = 0;
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114

				// Trim any trailing newline or carriage return
				command[strcspn(command, "\r\n")] = 0;
 8000d20:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d24:	49b6      	ldr	r1, [pc, #728]	@ (8001000 <StartShellTask+0x348>)
 8000d26:	4618      	mov	r0, r3
 8000d28:	f007 faad 	bl	8008286 <strcspn>
 8000d2c:	4603      	mov	r3, r0
 8000d2e:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8000d32:	443b      	add	r3, r7
 8000d34:	2200      	movs	r2, #0
 8000d36:	f803 2c84 	strb.w	r2, [r3, #-132]

				if (strcmp(command, "GET_TEMPERATURE") == 0) {
 8000d3a:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d3e:	49b1      	ldr	r1, [pc, #708]	@ (8001004 <StartShellTask+0x34c>)
 8000d40:	4618      	mov	r0, r3
 8000d42:	f7ff fa05 	bl	8000150 <strcmp>
 8000d46:	4603      	mov	r3, r0
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d115      	bne.n	8000d78 <StartShellTask+0xc0>
					float temp = tempSensor.getTemperature();
 8000d4c:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8000d50:	4618      	mov	r0, r3
 8000d52:	f000 f9a3 	bl	800109c <_ZN24VirtualTemperatureSensor14getTemperatureEv>
 8000d56:	f8c7 0108 	str.w	r0, [r7, #264]	@ 0x108
					snprintf(response, sizeof(response), "Temperature: %.2f°C\n", temp);
 8000d5a:	f8d7 0108 	ldr.w	r0, [r7, #264]	@ 0x108
 8000d5e:	f7ff fb6d 	bl	800043c <__aeabi_f2d>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000d6a:	e9cd 2300 	strd	r2, r3, [sp]
 8000d6e:	4aa6      	ldr	r2, [pc, #664]	@ (8001008 <StartShellTask+0x350>)
 8000d70:	2164      	movs	r1, #100	@ 0x64
 8000d72:	f007 f9dd 	bl	8008130 <sniprintf>
 8000d76:	e12c      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_HUMIDITY") == 0) {
 8000d78:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000d7c:	49a3      	ldr	r1, [pc, #652]	@ (800100c <StartShellTask+0x354>)
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f7ff f9e6 	bl	8000150 <strcmp>
 8000d84:	4603      	mov	r3, r0
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d115      	bne.n	8000db6 <StartShellTask+0xfe>
					float hum = humiditySensor.getHumidity();
 8000d8a:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8000d8e:	4618      	mov	r0, r3
 8000d90:	f000 f96e 	bl	8001070 <_ZNK21VirtualHumiditySensor11getHumidityEv>
 8000d94:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
					snprintf(response, sizeof(response), "Humidity: %.2f%%\n", hum);
 8000d98:	f8d7 010c 	ldr.w	r0, [r7, #268]	@ 0x10c
 8000d9c:	f7ff fb4e 	bl	800043c <__aeabi_f2d>
 8000da0:	4602      	mov	r2, r0
 8000da2:	460b      	mov	r3, r1
 8000da4:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000da8:	e9cd 2300 	strd	r2, r3, [sp]
 8000dac:	4a98      	ldr	r2, [pc, #608]	@ (8001010 <StartShellTask+0x358>)
 8000dae:	2164      	movs	r1, #100	@ 0x64
 8000db0:	f007 f9be 	bl	8008130 <sniprintf>
 8000db4:	e10d      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_VOLTAGE") == 0) {
 8000db6:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000dba:	4996      	ldr	r1, [pc, #600]	@ (8001014 <StartShellTask+0x35c>)
 8000dbc:	4618      	mov	r0, r3
 8000dbe:	f7ff f9c7 	bl	8000150 <strcmp>
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	2b00      	cmp	r3, #0
 8000dc6:	d115      	bne.n	8000df4 <StartShellTask+0x13c>
					float volt = voltageSensor.getVoltage();
 8000dc8:	f107 03fc 	add.w	r3, r7, #252	@ 0xfc
 8000dcc:	4618      	mov	r0, r3
 8000dce:	f000 f989 	bl	80010e4 <_ZNK20VirtualVoltageSensor10getVoltageEv>
 8000dd2:	f8c7 0110 	str.w	r0, [r7, #272]	@ 0x110
					snprintf(response, sizeof(response), "Voltage: %.2f V\n", volt);
 8000dd6:	f8d7 0110 	ldr.w	r0, [r7, #272]	@ 0x110
 8000dda:	f7ff fb2f 	bl	800043c <__aeabi_f2d>
 8000dde:	4602      	mov	r2, r0
 8000de0:	460b      	mov	r3, r1
 8000de2:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000de6:	e9cd 2300 	strd	r2, r3, [sp]
 8000dea:	4a8b      	ldr	r2, [pc, #556]	@ (8001018 <StartShellTask+0x360>)
 8000dec:	2164      	movs	r1, #100	@ 0x64
 8000dee:	f007 f99f 	bl	8008130 <sniprintf>
 8000df2:	e0ee      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strcmp(command, "GET_TIME") == 0) {
 8000df4:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000df8:	4988      	ldr	r1, [pc, #544]	@ (800101c <StartShellTask+0x364>)
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	f7ff f9a8 	bl	8000150 <strcmp>
 8000e00:	4603      	mov	r3, r0
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d12d      	bne.n	8000e62 <StartShellTask+0x1aa>
					RTC_TimeTypeDef time;
					RTC_DateTypeDef date;
					HAL_RTC_GetTime(&hrtc, &time, RTC_FORMAT_BIN);
 8000e06:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8000e0a:	2200      	movs	r2, #0
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4884      	ldr	r0, [pc, #528]	@ (8001020 <StartShellTask+0x368>)
 8000e10:	f001 fec6 	bl	8002ba0 <HAL_RTC_GetTime>
					HAL_RTC_GetDate(&hrtc, &date, RTC_FORMAT_BIN);
 8000e14:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e18:	2200      	movs	r2, #0
 8000e1a:	4619      	mov	r1, r3
 8000e1c:	4880      	ldr	r0, [pc, #512]	@ (8001020 <StartShellTask+0x368>)
 8000e1e:	f002 f84d 	bl	8002ebc <HAL_RTC_GetDate>
					snprintf(response, sizeof(response),
						"Time: %02d:%02d:%02d, Date: %02d/%02d/%04d\n",
						time.Hours, time.Minutes, time.Seconds,
 8000e22:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
					snprintf(response, sizeof(response),
 8000e26:	461e      	mov	r6, r3
						time.Hours, time.Minutes, time.Seconds,
 8000e28:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
					snprintf(response, sizeof(response),
 8000e2c:	461a      	mov	r2, r3
						time.Hours, time.Minutes, time.Seconds,
 8000e2e:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
					snprintf(response, sizeof(response),
 8000e32:	4619      	mov	r1, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
					snprintf(response, sizeof(response),
 8000e38:	461c      	mov	r4, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e3a:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
					snprintf(response, sizeof(response),
 8000e3e:	461d      	mov	r5, r3
						date.Date, date.Month, 2000 + date.Year);
 8000e40:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
					snprintf(response, sizeof(response),
 8000e44:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 8000e48:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8000e4c:	9304      	str	r3, [sp, #16]
 8000e4e:	9503      	str	r5, [sp, #12]
 8000e50:	9402      	str	r4, [sp, #8]
 8000e52:	9101      	str	r1, [sp, #4]
 8000e54:	9200      	str	r2, [sp, #0]
 8000e56:	4633      	mov	r3, r6
 8000e58:	4a72      	ldr	r2, [pc, #456]	@ (8001024 <StartShellTask+0x36c>)
 8000e5a:	2164      	movs	r1, #100	@ 0x64
 8000e5c:	f007 f968 	bl	8008130 <sniprintf>
 8000e60:	e0b7      	b.n	8000fd2 <StartShellTask+0x31a>
				} else if (strncmp(command, "SET_TIME", 8) == 0) {
 8000e62:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000e66:	2208      	movs	r2, #8
 8000e68:	496f      	ldr	r1, [pc, #444]	@ (8001028 <StartShellTask+0x370>)
 8000e6a:	4618      	mov	r0, r3
 8000e6c:	f007 fa1c 	bl	80082a8 <strncmp>
 8000e70:	4603      	mov	r3, r0
 8000e72:	2b00      	cmp	r3, #0
 8000e74:	f040 809d 	bne.w	8000fb2 <StartShellTask+0x2fa>
					int hh, mm, ss, dd, mo, yyyy;
					if (sscanf(command + 9, "%d %d %d %d %d %d", &hh, &mm, &ss, &dd, &mo, &yyyy) == 6) {
 8000e78:	f107 0094 	add.w	r0, r7, #148	@ 0x94
 8000e7c:	3009      	adds	r0, #9
 8000e7e:	f107 0120 	add.w	r1, r7, #32
 8000e82:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8000e86:	f107 0310 	add.w	r3, r7, #16
 8000e8a:	9303      	str	r3, [sp, #12]
 8000e8c:	f107 0314 	add.w	r3, r7, #20
 8000e90:	9302      	str	r3, [sp, #8]
 8000e92:	f107 0318 	add.w	r3, r7, #24
 8000e96:	9301      	str	r3, [sp, #4]
 8000e98:	f107 031c 	add.w	r3, r7, #28
 8000e9c:	9300      	str	r3, [sp, #0]
 8000e9e:	460b      	mov	r3, r1
 8000ea0:	4962      	ldr	r1, [pc, #392]	@ (800102c <StartShellTask+0x374>)
 8000ea2:	f007 f979 	bl	8008198 <siscanf>
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	2b06      	cmp	r3, #6
 8000eaa:	bf0c      	ite	eq
 8000eac:	2301      	moveq	r3, #1
 8000eae:	2300      	movne	r3, #0
 8000eb0:	b2db      	uxtb	r3, r3
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d075      	beq.n	8000fa2 <StartShellTask+0x2ea>
						RTC_TimeTypeDef sTime = {0};
 8000eb6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eba:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ebe:	2100      	movs	r1, #0
 8000ec0:	460a      	mov	r2, r1
 8000ec2:	801a      	strh	r2, [r3, #0]
 8000ec4:	460a      	mov	r2, r1
 8000ec6:	709a      	strb	r2, [r3, #2]
						RTC_DateTypeDef sDate = {0};
 8000ec8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ecc:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	601a      	str	r2, [r3, #0]

						sTime.Hours = hh;
 8000ed4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000ed6:	b2da      	uxtb	r2, r3
 8000ed8:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000edc:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000ee0:	701a      	strb	r2, [r3, #0]
						sTime.Minutes = mm;
 8000ee2:	6a3b      	ldr	r3, [r7, #32]
 8000ee4:	b2da      	uxtb	r2, r3
 8000ee6:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000eea:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000eee:	705a      	strb	r2, [r3, #1]
						sTime.Seconds = ss;
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	b2da      	uxtb	r2, r3
 8000ef4:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000ef8:	f5a3 7386 	sub.w	r3, r3, #268	@ 0x10c
 8000efc:	709a      	strb	r2, [r3, #2]
						sDate.Date = dd;
 8000efe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f02:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	b2da      	uxtb	r2, r3
 8000f0a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f0e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f12:	709a      	strb	r2, [r3, #2]
						sDate.Month = mo;
 8000f14:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f18:	f5a3 7382 	sub.w	r3, r3, #260	@ 0x104
 8000f1c:	681b      	ldr	r3, [r3, #0]
 8000f1e:	b2da      	uxtb	r2, r3
 8000f20:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f24:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f28:	705a      	strb	r2, [r3, #1]
						sDate.Year = yyyy - 2000;
 8000f2a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f2e:	f5a3 7384 	sub.w	r3, r3, #264	@ 0x108
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	b2db      	uxtb	r3, r3
 8000f36:	3330      	adds	r3, #48	@ 0x30
 8000f38:	b2da      	uxtb	r2, r3
 8000f3a:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f3e:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f42:	70da      	strb	r2, [r3, #3]
						sDate.WeekDay = RTC_WEEKDAY_MONDAY; // Not used by HAL
 8000f44:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8000f48:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8000f4c:	2201      	movs	r2, #1
 8000f4e:	701a      	strb	r2, [r3, #0]

						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8000f50:	f107 030c 	add.w	r3, r7, #12
 8000f54:	2200      	movs	r2, #0
 8000f56:	4619      	mov	r1, r3
 8000f58:	4831      	ldr	r0, [pc, #196]	@ (8001020 <StartShellTask+0x368>)
 8000f5a:	f001 fd89 	bl	8002a70 <HAL_RTC_SetTime>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d10b      	bne.n	8000f7c <StartShellTask+0x2c4>
							HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) == HAL_OK) {
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	2200      	movs	r2, #0
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	482c      	ldr	r0, [pc, #176]	@ (8001020 <StartShellTask+0x368>)
 8000f6e:	f001 feef 	bl	8002d50 <HAL_RTC_SetDate>
 8000f72:	4603      	mov	r3, r0
						if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) == HAL_OK &&
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d101      	bne.n	8000f7c <StartShellTask+0x2c4>
 8000f78:	2301      	movs	r3, #1
 8000f7a:	e000      	b.n	8000f7e <StartShellTask+0x2c6>
 8000f7c:	2300      	movs	r3, #0
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d007      	beq.n	8000f92 <StartShellTask+0x2da>
							snprintf(response, sizeof(response), "Time set successfully\n");
 8000f82:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f86:	4a2a      	ldr	r2, [pc, #168]	@ (8001030 <StartShellTask+0x378>)
 8000f88:	2164      	movs	r1, #100	@ 0x64
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f007 f8d0 	bl	8008130 <sniprintf>
 8000f90:	e01f      	b.n	8000fd2 <StartShellTask+0x31a>
						} else {
							snprintf(response, sizeof(response), "Failed to set time\n");
 8000f92:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000f96:	4a27      	ldr	r2, [pc, #156]	@ (8001034 <StartShellTask+0x37c>)
 8000f98:	2164      	movs	r1, #100	@ 0x64
 8000f9a:	4618      	mov	r0, r3
 8000f9c:	f007 f8c8 	bl	8008130 <sniprintf>
 8000fa0:	e017      	b.n	8000fd2 <StartShellTask+0x31a>
						}
					} else {
						snprintf(response, sizeof(response), "Usage: SET_TIME hh mm ss dd mm yyyy\n");
 8000fa2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fa6:	4a24      	ldr	r2, [pc, #144]	@ (8001038 <StartShellTask+0x380>)
 8000fa8:	2164      	movs	r1, #100	@ 0x64
 8000faa:	4618      	mov	r0, r3
 8000fac:	f007 f8c0 	bl	8008130 <sniprintf>
 8000fb0:	e00f      	b.n	8000fd2 <StartShellTask+0x31a>
					}
				} else if (strlen(command) > 0) {
 8000fb2:	f107 0394 	add.w	r3, r7, #148	@ 0x94
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d007      	beq.n	8000fcc <StartShellTask+0x314>
					snprintf(response, sizeof(response), "Unknown command\n");
 8000fbc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fc0:	4a1e      	ldr	r2, [pc, #120]	@ (800103c <StartShellTask+0x384>)
 8000fc2:	2164      	movs	r1, #100	@ 0x64
 8000fc4:	4618      	mov	r0, r3
 8000fc6:	f007 f8b3 	bl	8008130 <sniprintf>
 8000fca:	e002      	b.n	8000fd2 <StartShellTask+0x31a>
				} else {
					response[0] = '\0'; // empty command, don't respond
 8000fcc:	2300      	movs	r3, #0
 8000fce:	f887 3030 	strb.w	r3, [r7, #48]	@ 0x30
				}

				if (strlen(response) > 0) {
 8000fd2:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	2b00      	cmp	r3, #0
 8000fda:	d046      	beq.n	800106a <StartShellTask+0x3b2>
					HAL_UART_Transmit(&huart2, (uint8_t*) response, strlen(response), HAL_MAX_DELAY);
 8000fdc:	f107 0330 	add.w	r3, r7, #48	@ 0x30
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f7ff f8bf 	bl	8000164 <strlen>
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	b29a      	uxth	r2, r3
 8000fea:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295
 8000ff2:	4813      	ldr	r0, [pc, #76]	@ (8001040 <StartShellTask+0x388>)
 8000ff4:	f002 faa8 	bl	8003548 <HAL_UART_Transmit>
				}
			} else if (cmdIndex < sizeof(command) - 1) {
 8000ff8:	e037      	b.n	800106a <StartShellTask+0x3b2>
 8000ffa:	bf00      	nop
 8000ffc:	200001f4 	.word	0x200001f4
 8001000:	0800adb4 	.word	0x0800adb4
 8001004:	0800adb8 	.word	0x0800adb8
 8001008:	0800adc8 	.word	0x0800adc8
 800100c:	0800ade0 	.word	0x0800ade0
 8001010:	0800adf0 	.word	0x0800adf0
 8001014:	0800ae04 	.word	0x0800ae04
 8001018:	0800ae10 	.word	0x0800ae10
 800101c:	0800ae24 	.word	0x0800ae24
 8001020:	20000240 	.word	0x20000240
 8001024:	0800ae30 	.word	0x0800ae30
 8001028:	0800ae5c 	.word	0x0800ae5c
 800102c:	0800ae68 	.word	0x0800ae68
 8001030:	0800ae7c 	.word	0x0800ae7c
 8001034:	0800ae94 	.word	0x0800ae94
 8001038:	0800aea8 	.word	0x0800aea8
 800103c:	0800aed0 	.word	0x0800aed0
 8001040:	200001f8 	.word	0x200001f8
 8001044:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001048:	2b62      	cmp	r3, #98	@ 0x62
 800104a:	f63f ae45 	bhi.w	8000cd8 <StartShellTask+0x20>
				command[cmdIndex++] = rxChar;
 800104e:	f897 10fb 	ldrb.w	r1, [r7, #251]	@ 0xfb
 8001052:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001056:	1c5a      	adds	r2, r3, #1
 8001058:	f8c7 2114 	str.w	r2, [r7, #276]	@ 0x114
 800105c:	f503 738c 	add.w	r3, r3, #280	@ 0x118
 8001060:	443b      	add	r3, r7
 8001062:	460a      	mov	r2, r1
 8001064:	f803 2c84 	strb.w	r2, [r3, #-132]
 8001068:	e636      	b.n	8000cd8 <StartShellTask+0x20>
			} else if (cmdIndex < sizeof(command) - 1) {
 800106a:	bf00      	nop
			}
		}
	}
 800106c:	e634      	b.n	8000cd8 <StartShellTask+0x20>
 800106e:	bf00      	nop

08001070 <_ZNK21VirtualHumiditySensor11getHumidityEv>:
#include "VirtualHumiditySensor.h"

float VirtualHumiditySensor::getHumidity() const {
 8001070:	b480      	push	{r7}
 8001072:	b083      	sub	sp, #12
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
    // Simulate some constant or random humidity
    return 45.7f;
 8001078:	4b02      	ldr	r3, [pc, #8]	@ (8001084 <_ZNK21VirtualHumiditySensor11getHumidityEv+0x14>)
}
 800107a:	4618      	mov	r0, r3
 800107c:	370c      	adds	r7, #12
 800107e:	46bd      	mov	sp, r7
 8001080:	bc80      	pop	{r7}
 8001082:	4770      	bx	lr
 8001084:	4236cccd 	.word	0x4236cccd

08001088 <_ZN24VirtualTemperatureSensorC1Ev>:
#include "VirtualTemperatureSensor.h"
#include <cstdlib>

VirtualTemperatureSensor::VirtualTemperatureSensor() {
 8001088:	b480      	push	{r7}
 800108a:	b083      	sub	sp, #12
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
    // Initialization if needed
}
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4618      	mov	r0, r3
 8001094:	370c      	adds	r7, #12
 8001096:	46bd      	mov	sp, r7
 8001098:	bc80      	pop	{r7}
 800109a:	4770      	bx	lr

0800109c <_ZN24VirtualTemperatureSensor14getTemperatureEv>:

float VirtualTemperatureSensor::getTemperature() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b082      	sub	sp, #8
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
    return 25.0f + (rand() % 10); // Simulate 25–35°C
 80010a4:	f006 fae8 	bl	8007678 <rand>
 80010a8:	4601      	mov	r1, r0
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x40>)
 80010ac:	fb83 2301 	smull	r2, r3, r3, r1
 80010b0:	109a      	asrs	r2, r3, #2
 80010b2:	17cb      	asrs	r3, r1, #31
 80010b4:	1ad2      	subs	r2, r2, r3
 80010b6:	4613      	mov	r3, r2
 80010b8:	009b      	lsls	r3, r3, #2
 80010ba:	4413      	add	r3, r2
 80010bc:	005b      	lsls	r3, r3, #1
 80010be:	1aca      	subs	r2, r1, r3
 80010c0:	4610      	mov	r0, r2
 80010c2:	f7ff fda5 	bl	8000c10 <__aeabi_i2f>
 80010c6:	4603      	mov	r3, r0
 80010c8:	4905      	ldr	r1, [pc, #20]	@ (80010e0 <_ZN24VirtualTemperatureSensor14getTemperatureEv+0x44>)
 80010ca:	4618      	mov	r0, r3
 80010cc:	f7ff fcec 	bl	8000aa8 <__addsf3>
 80010d0:	4603      	mov	r3, r0
}
 80010d2:	4618      	mov	r0, r3
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}
 80010da:	bf00      	nop
 80010dc:	66666667 	.word	0x66666667
 80010e0:	41c80000 	.word	0x41c80000

080010e4 <_ZNK20VirtualVoltageSensor10getVoltageEv>:
#include "VirtualVoltageSensor.h"

float VirtualVoltageSensor::getVoltage() const {
 80010e4:	b480      	push	{r7}
 80010e6:	b083      	sub	sp, #12
 80010e8:	af00      	add	r7, sp, #0
 80010ea:	6078      	str	r0, [r7, #4]
    // Simulate battery or supply voltage
    return 3.73f;
 80010ec:	4b02      	ldr	r3, [pc, #8]	@ (80010f8 <_ZNK20VirtualVoltageSensor10getVoltageEv+0x14>)
}
 80010ee:	4618      	mov	r0, r3
 80010f0:	370c      	adds	r7, #12
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bc80      	pop	{r7}
 80010f6:	4770      	bx	lr
 80010f8:	406eb852 	.word	0x406eb852

080010fc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80010fc:	b580      	push	{r7, lr}
 80010fe:	b08a      	sub	sp, #40	@ 0x28
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001102:	f000 fbab 	bl	800185c <HAL_Init>

  /* USER CODE BEGIN Init */
  MX_RTC_Init();
 8001106:	f000 f92f 	bl	8001368 <_Z11MX_RTC_Initv>
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800110a:	f000 f845 	bl	8001198 <_Z18SystemClock_Configv>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800110e:	f000 f8bd 	bl	800128c <_ZL12MX_GPIO_Initv>
  MX_USART2_UART_Init();
 8001112:	f000 f88d 	bl	8001230 <_ZL19MX_USART2_UART_Initv>
  /* USER CODE BEGIN 2 */
  HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 8001116:	2201      	movs	r2, #1
 8001118:	491a      	ldr	r1, [pc, #104]	@ (8001184 <main+0x88>)
 800111a:	481b      	ldr	r0, [pc, #108]	@ (8001188 <main+0x8c>)
 800111c:	f002 fa9f 	bl	800365e <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001120:	f003 f870 	bl	8004204 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* USER CODE BEGIN RTOS_QUEUES */
  /* add queues, ... */
  uartRxStreamBuffer = xStreamBufferCreate(128, 1);
 8001124:	2200      	movs	r2, #0
 8001126:	2101      	movs	r1, #1
 8001128:	2080      	movs	r0, #128	@ 0x80
 800112a:	f003 ff1f 	bl	8004f6c <xStreamBufferGenericCreate>
 800112e:	4603      	mov	r3, r0
 8001130:	4a16      	ldr	r2, [pc, #88]	@ (800118c <main+0x90>)
 8001132:	6013      	str	r3, [r2, #0]
  configASSERT(uartRxStreamBuffer != NULL);
 8001134:	4b15      	ldr	r3, [pc, #84]	@ (800118c <main+0x90>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d10b      	bne.n	8001154 <main+0x58>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800113c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8001140:	f383 8811 	msr	BASEPRI, r3
 8001144:	f3bf 8f6f 	isb	sy
 8001148:	f3bf 8f4f 	dsb	sy
 800114c:	627b      	str	r3, [r7, #36]	@ 0x24
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800114e:	bf00      	nop
 8001150:	bf00      	nop
 8001152:	e7fd      	b.n	8001150 <main+0x54>
  /* Create the thread(s) */
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  const osThreadAttr_t shellTask_attributes = {
 8001154:	463b      	mov	r3, r7
 8001156:	2224      	movs	r2, #36	@ 0x24
 8001158:	2100      	movs	r1, #0
 800115a:	4618      	mov	r0, r3
 800115c:	f007 f88b 	bl	8008276 <memset>
 8001160:	4b0b      	ldr	r3, [pc, #44]	@ (8001190 <main+0x94>)
 8001162:	603b      	str	r3, [r7, #0]
 8001164:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001168:	617b      	str	r3, [r7, #20]
 800116a:	2318      	movs	r3, #24
 800116c:	61bb      	str	r3, [r7, #24]
    .name = "ShellTask",
    .stack_size = 512 * 4,  // 2KB stack
    .priority = (osPriority_t) osPriorityNormal,
  };
  /* add threads, ... */
  osThreadNew(StartShellTask, NULL, &shellTask_attributes);
 800116e:	463b      	mov	r3, r7
 8001170:	461a      	mov	r2, r3
 8001172:	2100      	movs	r1, #0
 8001174:	4807      	ldr	r0, [pc, #28]	@ (8001194 <main+0x98>)
 8001176:	f003 f88d 	bl	8004294 <osThreadNew>
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800117a:	f003 f865 	bl	8004248 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800117e:	bf00      	nop
 8001180:	e7fd      	b.n	800117e <main+0x82>
 8001182:	bf00      	nop
 8001184:	20000254 	.word	0x20000254
 8001188:	200001f8 	.word	0x200001f8
 800118c:	200001f4 	.word	0x200001f4
 8001190:	0800aef0 	.word	0x0800aef0
 8001194:	08000cb9 	.word	0x08000cb9

08001198 <_Z18SystemClock_Configv>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b090      	sub	sp, #64	@ 0x40
 800119c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2228      	movs	r2, #40	@ 0x28
 80011a4:	2100      	movs	r1, #0
 80011a6:	4618      	mov	r0, r3
 80011a8:	f007 f865 	bl	8008276 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011ac:	1d3b      	adds	r3, r7, #4
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
 80011b8:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011ba:	2302      	movs	r3, #2
 80011bc:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011be:	2301      	movs	r3, #1
 80011c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011c2:	2310      	movs	r3, #16
 80011c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011c6:	2302      	movs	r3, #2
 80011c8:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80011ca:	2300      	movs	r3, #0
 80011cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80011ce:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80011d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 0318 	add.w	r3, r7, #24
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 fef7 	bl	8001fcc <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	bf14      	ite	ne
 80011e4:	2301      	movne	r3, #1
 80011e6:	2300      	moveq	r3, #0
 80011e8:	b2db      	uxtb	r3, r3
 80011ea:	2b00      	cmp	r3, #0
 80011ec:	d001      	beq.n	80011f2 <_Z18SystemClock_Configv+0x5a>
  {
    Error_Handler();
 80011ee:	f000 f949 	bl	8001484 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011f2:	230f      	movs	r3, #15
 80011f4:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011f6:	2302      	movs	r3, #2
 80011f8:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001202:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001204:	2300      	movs	r3, #0
 8001206:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001208:	1d3b      	adds	r3, r7, #4
 800120a:	2102      	movs	r1, #2
 800120c:	4618      	mov	r0, r3
 800120e:	f001 f95f 	bl	80024d0 <HAL_RCC_ClockConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	bf14      	ite	ne
 8001218:	2301      	movne	r3, #1
 800121a:	2300      	moveq	r3, #0
 800121c:	b2db      	uxtb	r3, r3
 800121e:	2b00      	cmp	r3, #0
 8001220:	d001      	beq.n	8001226 <_Z18SystemClock_Configv+0x8e>
  {
    Error_Handler();
 8001222:	f000 f92f 	bl	8001484 <Error_Handler>
  }
}
 8001226:	bf00      	nop
 8001228:	3740      	adds	r7, #64	@ 0x40
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}
	...

08001230 <_ZL19MX_USART2_UART_Initv>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001234:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001236:	4a14      	ldr	r2, [pc, #80]	@ (8001288 <_ZL19MX_USART2_UART_Initv+0x58>)
 8001238:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800123a:	4b12      	ldr	r3, [pc, #72]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800123c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001240:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001242:	4b10      	ldr	r3, [pc, #64]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001244:	2200      	movs	r2, #0
 8001246:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001248:	4b0e      	ldr	r3, [pc, #56]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800124a:	2200      	movs	r2, #0
 800124c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800124e:	4b0d      	ldr	r3, [pc, #52]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001250:	2200      	movs	r2, #0
 8001252:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001256:	220c      	movs	r2, #12
 8001258:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800125a:	4b0a      	ldr	r3, [pc, #40]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 800125c:	2200      	movs	r2, #0
 800125e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001260:	4b08      	ldr	r3, [pc, #32]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001262:	2200      	movs	r2, #0
 8001264:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001266:	4807      	ldr	r0, [pc, #28]	@ (8001284 <_ZL19MX_USART2_UART_Initv+0x54>)
 8001268:	f002 f91e 	bl	80034a8 <HAL_UART_Init>
 800126c:	4603      	mov	r3, r0
 800126e:	2b00      	cmp	r3, #0
 8001270:	bf14      	ite	ne
 8001272:	2301      	movne	r3, #1
 8001274:	2300      	moveq	r3, #0
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d001      	beq.n	8001280 <_ZL19MX_USART2_UART_Initv+0x50>
  {
    Error_Handler();
 800127c:	f000 f902 	bl	8001484 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001280:	bf00      	nop
 8001282:	bd80      	pop	{r7, pc}
 8001284:	200001f8 	.word	0x200001f8
 8001288:	40004400 	.word	0x40004400

0800128c <_ZL12MX_GPIO_Initv>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b088      	sub	sp, #32
 8001290:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001292:	f107 0310 	add.w	r3, r7, #16
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]
 800129c:	609a      	str	r2, [r3, #8]
 800129e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80012a0:	4b2d      	ldr	r3, [pc, #180]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012a2:	699b      	ldr	r3, [r3, #24]
 80012a4:	4a2c      	ldr	r2, [pc, #176]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012a6:	f043 0310 	orr.w	r3, r3, #16
 80012aa:	6193      	str	r3, [r2, #24]
 80012ac:	4b2a      	ldr	r3, [pc, #168]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012ae:	699b      	ldr	r3, [r3, #24]
 80012b0:	f003 0310 	and.w	r3, r3, #16
 80012b4:	60fb      	str	r3, [r7, #12]
 80012b6:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012b8:	4b27      	ldr	r3, [pc, #156]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012ba:	699b      	ldr	r3, [r3, #24]
 80012bc:	4a26      	ldr	r2, [pc, #152]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012be:	f043 0320 	orr.w	r3, r3, #32
 80012c2:	6193      	str	r3, [r2, #24]
 80012c4:	4b24      	ldr	r3, [pc, #144]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012c6:	699b      	ldr	r3, [r3, #24]
 80012c8:	f003 0320 	and.w	r3, r3, #32
 80012cc:	60bb      	str	r3, [r7, #8]
 80012ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d0:	4b21      	ldr	r3, [pc, #132]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012d2:	699b      	ldr	r3, [r3, #24]
 80012d4:	4a20      	ldr	r2, [pc, #128]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012d6:	f043 0304 	orr.w	r3, r3, #4
 80012da:	6193      	str	r3, [r2, #24]
 80012dc:	4b1e      	ldr	r3, [pc, #120]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012de:	699b      	ldr	r3, [r3, #24]
 80012e0:	f003 0304 	and.w	r3, r3, #4
 80012e4:	607b      	str	r3, [r7, #4]
 80012e6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012e8:	4b1b      	ldr	r3, [pc, #108]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012ea:	699b      	ldr	r3, [r3, #24]
 80012ec:	4a1a      	ldr	r2, [pc, #104]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012ee:	f043 0308 	orr.w	r3, r3, #8
 80012f2:	6193      	str	r3, [r2, #24]
 80012f4:	4b18      	ldr	r3, [pc, #96]	@ (8001358 <_ZL12MX_GPIO_Initv+0xcc>)
 80012f6:	699b      	ldr	r3, [r3, #24]
 80012f8:	f003 0308 	and.w	r3, r3, #8
 80012fc:	603b      	str	r3, [r7, #0]
 80012fe:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001300:	2200      	movs	r2, #0
 8001302:	2120      	movs	r1, #32
 8001304:	4815      	ldr	r0, [pc, #84]	@ (800135c <_ZL12MX_GPIO_Initv+0xd0>)
 8001306:	f000 fe3d 	bl	8001f84 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800130a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800130e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001310:	4b13      	ldr	r3, [pc, #76]	@ (8001360 <_ZL12MX_GPIO_Initv+0xd4>)
 8001312:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001318:	f107 0310 	add.w	r3, r7, #16
 800131c:	4619      	mov	r1, r3
 800131e:	4811      	ldr	r0, [pc, #68]	@ (8001364 <_ZL12MX_GPIO_Initv+0xd8>)
 8001320:	f000 fcac 	bl	8001c7c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001324:	2320      	movs	r3, #32
 8001326:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001328:	2301      	movs	r3, #1
 800132a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132c:	2300      	movs	r3, #0
 800132e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001330:	2302      	movs	r3, #2
 8001332:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 0310 	add.w	r3, r7, #16
 8001338:	4619      	mov	r1, r3
 800133a:	4808      	ldr	r0, [pc, #32]	@ (800135c <_ZL12MX_GPIO_Initv+0xd0>)
 800133c:	f000 fc9e 	bl	8001c7c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 5, 0);
 8001340:	2200      	movs	r2, #0
 8001342:	2105      	movs	r1, #5
 8001344:	2028      	movs	r0, #40	@ 0x28
 8001346:	f000 fbb0 	bl	8001aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800134a:	2028      	movs	r0, #40	@ 0x28
 800134c:	f000 fbc9 	bl	8001ae2 <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001350:	bf00      	nop
 8001352:	3720      	adds	r7, #32
 8001354:	46bd      	mov	sp, r7
 8001356:	bd80      	pop	{r7, pc}
 8001358:	40021000 	.word	0x40021000
 800135c:	40010800 	.word	0x40010800
 8001360:	10110000 	.word	0x10110000
 8001364:	40011000 	.word	0x40011000

08001368 <_Z11MX_RTC_Initv>:

/* USER CODE BEGIN 4 */
void MX_RTC_Init() {
 8001368:	b580      	push	{r7, lr}
 800136a:	b084      	sub	sp, #16
 800136c:	af00      	add	r7, sp, #0
    // Enable the RTC clock
    __HAL_RCC_PWR_CLK_ENABLE();
 800136e:	4b40      	ldr	r3, [pc, #256]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 8001370:	69db      	ldr	r3, [r3, #28]
 8001372:	4a3f      	ldr	r2, [pc, #252]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 8001374:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001378:	61d3      	str	r3, [r2, #28]
 800137a:	4b3d      	ldr	r3, [pc, #244]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 800137c:	69db      	ldr	r3, [r3, #28]
 800137e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001382:	607b      	str	r3, [r7, #4]
 8001384:	687b      	ldr	r3, [r7, #4]
    HAL_PWR_EnableBkUpAccess();
 8001386:	f000 fe15 	bl	8001fb4 <HAL_PWR_EnableBkUpAccess>
    __HAL_RCC_BKP_CLK_ENABLE();
 800138a:	4b39      	ldr	r3, [pc, #228]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 800138c:	69db      	ldr	r3, [r3, #28]
 800138e:	4a38      	ldr	r2, [pc, #224]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 8001390:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001394:	61d3      	str	r3, [r2, #28]
 8001396:	4b36      	ldr	r3, [pc, #216]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 8001398:	69db      	ldr	r3, [r3, #28]
 800139a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800139e:	603b      	str	r3, [r7, #0]
 80013a0:	683b      	ldr	r3, [r7, #0]
    __HAL_RCC_RTC_ENABLE();
 80013a2:	4b34      	ldr	r3, [pc, #208]	@ (8001474 <_Z11MX_RTC_Initv+0x10c>)
 80013a4:	2201      	movs	r2, #1
 80013a6:	601a      	str	r2, [r3, #0]

    // Select LSI as RTC clock source
    __HAL_RCC_LSE_CONFIG(RCC_LSE_OFF);      // Turn off LSE
 80013a8:	4b31      	ldr	r3, [pc, #196]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013aa:	6a1b      	ldr	r3, [r3, #32]
 80013ac:	4a30      	ldr	r2, [pc, #192]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013ae:	f023 0301 	bic.w	r3, r3, #1
 80013b2:	6213      	str	r3, [r2, #32]
 80013b4:	4b2e      	ldr	r3, [pc, #184]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013b6:	6a1b      	ldr	r3, [r3, #32]
 80013b8:	4a2d      	ldr	r2, [pc, #180]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013ba:	f023 0304 	bic.w	r3, r3, #4
 80013be:	6213      	str	r3, [r2, #32]
    __HAL_RCC_LSI_ENABLE();                 // Turn on LSI
 80013c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001478 <_Z11MX_RTC_Initv+0x110>)
 80013c2:	2201      	movs	r2, #1
 80013c4:	601a      	str	r2, [r3, #0]
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET); // Wait until LSI ready
 80013c6:	bf00      	nop
 80013c8:	4b29      	ldr	r3, [pc, #164]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80013cc:	f003 0302 	and.w	r3, r3, #2
 80013d0:	2b00      	cmp	r3, #0
 80013d2:	bf0c      	ite	eq
 80013d4:	2301      	moveq	r3, #1
 80013d6:	2300      	movne	r3, #0
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d1f4      	bne.n	80013c8 <_Z11MX_RTC_Initv+0x60>
    __HAL_RCC_RTC_CONFIG(RCC_RTCCLKSOURCE_LSI);
 80013de:	4b24      	ldr	r3, [pc, #144]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013e0:	6a1b      	ldr	r3, [r3, #32]
 80013e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80013e6:	4a22      	ldr	r2, [pc, #136]	@ (8001470 <_Z11MX_RTC_Initv+0x108>)
 80013e8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80013ec:	6213      	str	r3, [r2, #32]

    hrtc.Instance = RTC;
 80013ee:	4b23      	ldr	r3, [pc, #140]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 80013f0:	4a23      	ldr	r2, [pc, #140]	@ (8001480 <_Z11MX_RTC_Initv+0x118>)
 80013f2:	601a      	str	r2, [r3, #0]
    hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 80013f4:	4b21      	ldr	r3, [pc, #132]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 80013f6:	f04f 32ff 	mov.w	r2, #4294967295
 80013fa:	605a      	str	r2, [r3, #4]
    hrtc.Init.OutPut = RTC_OUTPUTSOURCE_NONE;
 80013fc:	4b1f      	ldr	r3, [pc, #124]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 80013fe:	2200      	movs	r2, #0
 8001400:	609a      	str	r2, [r3, #8]

    if (HAL_RTC_Init(&hrtc) != HAL_OK) {
 8001402:	481e      	ldr	r0, [pc, #120]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 8001404:	f001 faa8 	bl	8002958 <HAL_RTC_Init>
 8001408:	4603      	mov	r3, r0
 800140a:	2b00      	cmp	r3, #0
 800140c:	bf14      	ite	ne
 800140e:	2301      	movne	r3, #1
 8001410:	2300      	moveq	r3, #0
 8001412:	b2db      	uxtb	r3, r3
 8001414:	2b00      	cmp	r3, #0
 8001416:	d001      	beq.n	800141c <_Z11MX_RTC_Initv+0xb4>
        Error_Handler();
 8001418:	f000 f834 	bl	8001484 <Error_Handler>
    }

    // Set default time/date once
    RTC_TimeTypeDef sTime = {0};
 800141c:	f107 030c 	add.w	r3, r7, #12
 8001420:	2100      	movs	r1, #0
 8001422:	460a      	mov	r2, r1
 8001424:	801a      	strh	r2, [r3, #0]
 8001426:	460a      	mov	r2, r1
 8001428:	709a      	strb	r2, [r3, #2]
    RTC_DateTypeDef sDate = {0};
 800142a:	2300      	movs	r3, #0
 800142c:	60bb      	str	r3, [r7, #8]

    sTime.Hours = 12;
 800142e:	230c      	movs	r3, #12
 8001430:	733b      	strb	r3, [r7, #12]
    sTime.Minutes = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	737b      	strb	r3, [r7, #13]
    sTime.Seconds = 0;
 8001436:	2300      	movs	r3, #0
 8001438:	73bb      	strb	r3, [r7, #14]

    sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 800143a:	2301      	movs	r3, #1
 800143c:	723b      	strb	r3, [r7, #8]
    sDate.Month = RTC_MONTH_JANUARY;
 800143e:	2301      	movs	r3, #1
 8001440:	727b      	strb	r3, [r7, #9]
    sDate.Date = 1;
 8001442:	2301      	movs	r3, #1
 8001444:	72bb      	strb	r3, [r7, #10]
    sDate.Year = 23;
 8001446:	2317      	movs	r3, #23
 8001448:	72fb      	strb	r3, [r7, #11]

    HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 800144a:	f107 030c 	add.w	r3, r7, #12
 800144e:	2200      	movs	r2, #0
 8001450:	4619      	mov	r1, r3
 8001452:	480a      	ldr	r0, [pc, #40]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 8001454:	f001 fb0c 	bl	8002a70 <HAL_RTC_SetTime>
    HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN);
 8001458:	f107 0308 	add.w	r3, r7, #8
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	4806      	ldr	r0, [pc, #24]	@ (800147c <_Z11MX_RTC_Initv+0x114>)
 8001462:	f001 fc75 	bl	8002d50 <HAL_RTC_SetDate>
}
 8001466:	bf00      	nop
 8001468:	3710      	adds	r7, #16
 800146a:	46bd      	mov	sp, r7
 800146c:	bd80      	pop	{r7, pc}
 800146e:	bf00      	nop
 8001470:	40021000 	.word	0x40021000
 8001474:	4242043c 	.word	0x4242043c
 8001478:	42420480 	.word	0x42420480
 800147c:	20000240 	.word	0x20000240
 8001480:	40002800 	.word	0x40002800

08001484 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001484:	b480      	push	{r7}
 8001486:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001488:	b672      	cpsid	i
}
 800148a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800148c:	bf00      	nop
 800148e:	e7fd      	b.n	800148c <Error_Handler+0x8>

08001490 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001490:	b580      	push	{r7, lr}
 8001492:	b084      	sub	sp, #16
 8001494:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001496:	4b18      	ldr	r3, [pc, #96]	@ (80014f8 <HAL_MspInit+0x68>)
 8001498:	699b      	ldr	r3, [r3, #24]
 800149a:	4a17      	ldr	r2, [pc, #92]	@ (80014f8 <HAL_MspInit+0x68>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6193      	str	r3, [r2, #24]
 80014a2:	4b15      	ldr	r3, [pc, #84]	@ (80014f8 <HAL_MspInit+0x68>)
 80014a4:	699b      	ldr	r3, [r3, #24]
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	60bb      	str	r3, [r7, #8]
 80014ac:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	4b12      	ldr	r3, [pc, #72]	@ (80014f8 <HAL_MspInit+0x68>)
 80014b0:	69db      	ldr	r3, [r3, #28]
 80014b2:	4a11      	ldr	r2, [pc, #68]	@ (80014f8 <HAL_MspInit+0x68>)
 80014b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014b8:	61d3      	str	r3, [r2, #28]
 80014ba:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_MspInit+0x68>)
 80014bc:	69db      	ldr	r3, [r3, #28]
 80014be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	210f      	movs	r1, #15
 80014ca:	f06f 0001 	mvn.w	r0, #1
 80014ce:	f000 faec 	bl	8001aaa <HAL_NVIC_SetPriority>

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014d2:	4b0a      	ldr	r3, [pc, #40]	@ (80014fc <HAL_MspInit+0x6c>)
 80014d4:	685b      	ldr	r3, [r3, #4]
 80014d6:	60fb      	str	r3, [r7, #12]
 80014d8:	68fb      	ldr	r3, [r7, #12]
 80014da:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80014de:	60fb      	str	r3, [r7, #12]
 80014e0:	68fb      	ldr	r3, [r7, #12]
 80014e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	4a04      	ldr	r2, [pc, #16]	@ (80014fc <HAL_MspInit+0x6c>)
 80014ea:	68fb      	ldr	r3, [r7, #12]
 80014ec:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014ee:	bf00      	nop
 80014f0:	3710      	adds	r7, #16
 80014f2:	46bd      	mov	sp, r7
 80014f4:	bd80      	pop	{r7, pc}
 80014f6:	bf00      	nop
 80014f8:	40021000 	.word	0x40021000
 80014fc:	40010000 	.word	0x40010000

08001500 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001500:	b580      	push	{r7, lr}
 8001502:	b084      	sub	sp, #16
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	4a0b      	ldr	r2, [pc, #44]	@ (800153c <HAL_RTC_MspInit+0x3c>)
 800150e:	4293      	cmp	r3, r2
 8001510:	d110      	bne.n	8001534 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001512:	f000 fd4f 	bl	8001fb4 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001516:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <HAL_RTC_MspInit+0x40>)
 8001518:	69db      	ldr	r3, [r3, #28]
 800151a:	4a09      	ldr	r2, [pc, #36]	@ (8001540 <HAL_RTC_MspInit+0x40>)
 800151c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001520:	61d3      	str	r3, [r2, #28]
 8001522:	4b07      	ldr	r3, [pc, #28]	@ (8001540 <HAL_RTC_MspInit+0x40>)
 8001524:	69db      	ldr	r3, [r3, #28]
 8001526:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <HAL_RTC_MspInit+0x44>)
 8001530:	2201      	movs	r2, #1
 8001532:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001534:	bf00      	nop
 8001536:	3710      	adds	r7, #16
 8001538:	46bd      	mov	sp, r7
 800153a:	bd80      	pop	{r7, pc}
 800153c:	40002800 	.word	0x40002800
 8001540:	40021000 	.word	0x40021000
 8001544:	4242043c 	.word	0x4242043c

08001548 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b088      	sub	sp, #32
 800154c:	af00      	add	r7, sp, #0
 800154e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001550:	f107 0310 	add.w	r3, r7, #16
 8001554:	2200      	movs	r2, #0
 8001556:	601a      	str	r2, [r3, #0]
 8001558:	605a      	str	r2, [r3, #4]
 800155a:	609a      	str	r2, [r3, #8]
 800155c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a19      	ldr	r2, [pc, #100]	@ (80015c8 <HAL_UART_MspInit+0x80>)
 8001564:	4293      	cmp	r3, r2
 8001566:	d12b      	bne.n	80015c0 <HAL_UART_MspInit+0x78>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001568:	4b18      	ldr	r3, [pc, #96]	@ (80015cc <HAL_UART_MspInit+0x84>)
 800156a:	69db      	ldr	r3, [r3, #28]
 800156c:	4a17      	ldr	r2, [pc, #92]	@ (80015cc <HAL_UART_MspInit+0x84>)
 800156e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001572:	61d3      	str	r3, [r2, #28]
 8001574:	4b15      	ldr	r3, [pc, #84]	@ (80015cc <HAL_UART_MspInit+0x84>)
 8001576:	69db      	ldr	r3, [r3, #28]
 8001578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800157c:	60fb      	str	r3, [r7, #12]
 800157e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001580:	4b12      	ldr	r3, [pc, #72]	@ (80015cc <HAL_UART_MspInit+0x84>)
 8001582:	699b      	ldr	r3, [r3, #24]
 8001584:	4a11      	ldr	r2, [pc, #68]	@ (80015cc <HAL_UART_MspInit+0x84>)
 8001586:	f043 0304 	orr.w	r3, r3, #4
 800158a:	6193      	str	r3, [r2, #24]
 800158c:	4b0f      	ldr	r3, [pc, #60]	@ (80015cc <HAL_UART_MspInit+0x84>)
 800158e:	699b      	ldr	r3, [r3, #24]
 8001590:	f003 0304 	and.w	r3, r3, #4
 8001594:	60bb      	str	r3, [r7, #8]
 8001596:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001598:	230c      	movs	r3, #12
 800159a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800159c:	2302      	movs	r3, #2
 800159e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a0:	2302      	movs	r3, #2
 80015a2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015a4:	f107 0310 	add.w	r3, r7, #16
 80015a8:	4619      	mov	r1, r3
 80015aa:	4809      	ldr	r0, [pc, #36]	@ (80015d0 <HAL_UART_MspInit+0x88>)
 80015ac:	f000 fb66 	bl	8001c7c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 80015b0:	2200      	movs	r2, #0
 80015b2:	2105      	movs	r1, #5
 80015b4:	2026      	movs	r0, #38	@ 0x26
 80015b6:	f000 fa78 	bl	8001aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80015ba:	2026      	movs	r0, #38	@ 0x26
 80015bc:	f000 fa91 	bl	8001ae2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80015c0:	bf00      	nop
 80015c2:	3720      	adds	r7, #32
 80015c4:	46bd      	mov	sp, r7
 80015c6:	bd80      	pop	{r7, pc}
 80015c8:	40004400 	.word	0x40004400
 80015cc:	40021000 	.word	0x40021000
 80015d0:	40010800 	.word	0x40010800

080015d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80015d8:	bf00      	nop
 80015da:	e7fd      	b.n	80015d8 <NMI_Handler+0x4>

080015dc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015dc:	b480      	push	{r7}
 80015de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015e0:	bf00      	nop
 80015e2:	e7fd      	b.n	80015e0 <HardFault_Handler+0x4>

080015e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015e4:	b480      	push	{r7}
 80015e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015e8:	bf00      	nop
 80015ea:	e7fd      	b.n	80015e8 <MemManage_Handler+0x4>

080015ec <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015f0:	bf00      	nop
 80015f2:	e7fd      	b.n	80015f0 <BusFault_Handler+0x4>

080015f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015f4:	b480      	push	{r7}
 80015f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015f8:	bf00      	nop
 80015fa:	e7fd      	b.n	80015f8 <UsageFault_Handler+0x4>

080015fc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015fc:	b480      	push	{r7}
 80015fe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001600:	bf00      	nop
 8001602:	46bd      	mov	sp, r7
 8001604:	bc80      	pop	{r7}
 8001606:	4770      	bx	lr

08001608 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001608:	b580      	push	{r7, lr}
 800160a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 800160c:	4802      	ldr	r0, [pc, #8]	@ (8001618 <USART2_IRQHandler+0x10>)
 800160e:	f002 f84b 	bl	80036a8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001612:	bf00      	nop
 8001614:	bd80      	pop	{r7, pc}
 8001616:	bf00      	nop
 8001618:	200001f8 	.word	0x200001f8

0800161c <HAL_UART_RxCpltCallback>:
/* USER CODE BEGIN 1 */
extern StreamBufferHandle_t uartRxStreamBuffer;
extern UART_HandleTypeDef huart2;
extern uint8_t uartRxByte;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	4a10      	ldr	r2, [pc, #64]	@ (800166c <HAL_UART_RxCpltCallback+0x50>)
 800162a:	4293      	cmp	r3, r2
 800162c:	d119      	bne.n	8001662 <HAL_UART_RxCpltCallback+0x46>
        BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]

        // Push the received byte into the stream buffer (from ISR)
        xStreamBufferSendFromISR(uartRxStreamBuffer, &uartRxByte, 1, &xHigherPriorityTaskWoken);
 8001632:	4b0f      	ldr	r3, [pc, #60]	@ (8001670 <HAL_UART_RxCpltCallback+0x54>)
 8001634:	6818      	ldr	r0, [r3, #0]
 8001636:	f107 030c 	add.w	r3, r7, #12
 800163a:	2201      	movs	r2, #1
 800163c:	490d      	ldr	r1, [pc, #52]	@ (8001674 <HAL_UART_RxCpltCallback+0x58>)
 800163e:	f003 fd26 	bl	800508e <xStreamBufferSendFromISR>

        // Restart UART interrupt for next byte
        HAL_UART_Receive_IT(&huart2, &uartRxByte, 1);
 8001642:	2201      	movs	r2, #1
 8001644:	490b      	ldr	r1, [pc, #44]	@ (8001674 <HAL_UART_RxCpltCallback+0x58>)
 8001646:	480c      	ldr	r0, [pc, #48]	@ (8001678 <HAL_UART_RxCpltCallback+0x5c>)
 8001648:	f002 f809 	bl	800365e <HAL_UART_Receive_IT>

        // Yield if needed
        portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d007      	beq.n	8001662 <HAL_UART_RxCpltCallback+0x46>
 8001652:	4b0a      	ldr	r3, [pc, #40]	@ (800167c <HAL_UART_RxCpltCallback+0x60>)
 8001654:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8001658:	601a      	str	r2, [r3, #0]
 800165a:	f3bf 8f4f 	dsb	sy
 800165e:	f3bf 8f6f 	isb	sy
    }
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
 800166a:	bf00      	nop
 800166c:	40004400 	.word	0x40004400
 8001670:	200001f4 	.word	0x200001f4
 8001674:	20000254 	.word	0x20000254
 8001678:	200001f8 	.word	0x200001f8
 800167c:	e000ed04 	.word	0xe000ed04

08001680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001680:	b480      	push	{r7}
 8001682:	af00      	add	r7, sp, #0
  return 1;
 8001684:	2301      	movs	r3, #1
}
 8001686:	4618      	mov	r0, r3
 8001688:	46bd      	mov	sp, r7
 800168a:	bc80      	pop	{r7}
 800168c:	4770      	bx	lr

0800168e <_kill>:

int _kill(int pid, int sig)
{
 800168e:	b580      	push	{r7, lr}
 8001690:	b082      	sub	sp, #8
 8001692:	af00      	add	r7, sp, #0
 8001694:	6078      	str	r0, [r7, #4]
 8001696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001698:	f006 fe62 	bl	8008360 <__errno>
 800169c:	4603      	mov	r3, r0
 800169e:	2216      	movs	r2, #22
 80016a0:	601a      	str	r2, [r3, #0]
  return -1;
 80016a2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <_exit>:

void _exit (int status)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
 80016b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80016b6:	f04f 31ff 	mov.w	r1, #4294967295
 80016ba:	6878      	ldr	r0, [r7, #4]
 80016bc:	f7ff ffe7 	bl	800168e <_kill>
  while (1) {}    /* Make sure we hang here */
 80016c0:	bf00      	nop
 80016c2:	e7fd      	b.n	80016c0 <_exit+0x12>

080016c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80016c4:	b580      	push	{r7, lr}
 80016c6:	b086      	sub	sp, #24
 80016c8:	af00      	add	r7, sp, #0
 80016ca:	60f8      	str	r0, [r7, #12]
 80016cc:	60b9      	str	r1, [r7, #8]
 80016ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016d0:	2300      	movs	r3, #0
 80016d2:	617b      	str	r3, [r7, #20]
 80016d4:	e00a      	b.n	80016ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80016d6:	f3af 8000 	nop.w
 80016da:	4601      	mov	r1, r0
 80016dc:	68bb      	ldr	r3, [r7, #8]
 80016de:	1c5a      	adds	r2, r3, #1
 80016e0:	60ba      	str	r2, [r7, #8]
 80016e2:	b2ca      	uxtb	r2, r1
 80016e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80016e6:	697b      	ldr	r3, [r7, #20]
 80016e8:	3301      	adds	r3, #1
 80016ea:	617b      	str	r3, [r7, #20]
 80016ec:	697a      	ldr	r2, [r7, #20]
 80016ee:	687b      	ldr	r3, [r7, #4]
 80016f0:	429a      	cmp	r2, r3
 80016f2:	dbf0      	blt.n	80016d6 <_read+0x12>
  }

  return len;
 80016f4:	687b      	ldr	r3, [r7, #4]
}
 80016f6:	4618      	mov	r0, r3
 80016f8:	3718      	adds	r7, #24
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd80      	pop	{r7, pc}

080016fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80016fe:	b580      	push	{r7, lr}
 8001700:	b086      	sub	sp, #24
 8001702:	af00      	add	r7, sp, #0
 8001704:	60f8      	str	r0, [r7, #12]
 8001706:	60b9      	str	r1, [r7, #8]
 8001708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800170a:	2300      	movs	r3, #0
 800170c:	617b      	str	r3, [r7, #20]
 800170e:	e009      	b.n	8001724 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001710:	68bb      	ldr	r3, [r7, #8]
 8001712:	1c5a      	adds	r2, r3, #1
 8001714:	60ba      	str	r2, [r7, #8]
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	4618      	mov	r0, r3
 800171a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800171e:	697b      	ldr	r3, [r7, #20]
 8001720:	3301      	adds	r3, #1
 8001722:	617b      	str	r3, [r7, #20]
 8001724:	697a      	ldr	r2, [r7, #20]
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	429a      	cmp	r2, r3
 800172a:	dbf1      	blt.n	8001710 <_write+0x12>
  }
  return len;
 800172c:	687b      	ldr	r3, [r7, #4]
}
 800172e:	4618      	mov	r0, r3
 8001730:	3718      	adds	r7, #24
 8001732:	46bd      	mov	sp, r7
 8001734:	bd80      	pop	{r7, pc}

08001736 <_close>:

int _close(int file)
{
 8001736:	b480      	push	{r7}
 8001738:	b083      	sub	sp, #12
 800173a:	af00      	add	r7, sp, #0
 800173c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800173e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001742:	4618      	mov	r0, r3
 8001744:	370c      	adds	r7, #12
 8001746:	46bd      	mov	sp, r7
 8001748:	bc80      	pop	{r7}
 800174a:	4770      	bx	lr

0800174c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800174c:	b480      	push	{r7}
 800174e:	b083      	sub	sp, #12
 8001750:	af00      	add	r7, sp, #0
 8001752:	6078      	str	r0, [r7, #4]
 8001754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001756:	683b      	ldr	r3, [r7, #0]
 8001758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800175c:	605a      	str	r2, [r3, #4]
  return 0;
 800175e:	2300      	movs	r3, #0
}
 8001760:	4618      	mov	r0, r3
 8001762:	370c      	adds	r7, #12
 8001764:	46bd      	mov	sp, r7
 8001766:	bc80      	pop	{r7}
 8001768:	4770      	bx	lr

0800176a <_isatty>:

int _isatty(int file)
{
 800176a:	b480      	push	{r7}
 800176c:	b083      	sub	sp, #12
 800176e:	af00      	add	r7, sp, #0
 8001770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001772:	2301      	movs	r3, #1
}
 8001774:	4618      	mov	r0, r3
 8001776:	370c      	adds	r7, #12
 8001778:	46bd      	mov	sp, r7
 800177a:	bc80      	pop	{r7}
 800177c:	4770      	bx	lr

0800177e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800177e:	b480      	push	{r7}
 8001780:	b085      	sub	sp, #20
 8001782:	af00      	add	r7, sp, #0
 8001784:	60f8      	str	r0, [r7, #12]
 8001786:	60b9      	str	r1, [r7, #8]
 8001788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800178a:	2300      	movs	r3, #0
}
 800178c:	4618      	mov	r0, r3
 800178e:	3714      	adds	r7, #20
 8001790:	46bd      	mov	sp, r7
 8001792:	bc80      	pop	{r7}
 8001794:	4770      	bx	lr
	...

08001798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80017a0:	4a14      	ldr	r2, [pc, #80]	@ (80017f4 <_sbrk+0x5c>)
 80017a2:	4b15      	ldr	r3, [pc, #84]	@ (80017f8 <_sbrk+0x60>)
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80017ac:	4b13      	ldr	r3, [pc, #76]	@ (80017fc <_sbrk+0x64>)
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d102      	bne.n	80017ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80017b4:	4b11      	ldr	r3, [pc, #68]	@ (80017fc <_sbrk+0x64>)
 80017b6:	4a12      	ldr	r2, [pc, #72]	@ (8001800 <_sbrk+0x68>)
 80017b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80017ba:	4b10      	ldr	r3, [pc, #64]	@ (80017fc <_sbrk+0x64>)
 80017bc:	681a      	ldr	r2, [r3, #0]
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	4413      	add	r3, r2
 80017c2:	693a      	ldr	r2, [r7, #16]
 80017c4:	429a      	cmp	r2, r3
 80017c6:	d207      	bcs.n	80017d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80017c8:	f006 fdca 	bl	8008360 <__errno>
 80017cc:	4603      	mov	r3, r0
 80017ce:	220c      	movs	r2, #12
 80017d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295
 80017d6:	e009      	b.n	80017ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80017d8:	4b08      	ldr	r3, [pc, #32]	@ (80017fc <_sbrk+0x64>)
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80017de:	4b07      	ldr	r3, [pc, #28]	@ (80017fc <_sbrk+0x64>)
 80017e0:	681a      	ldr	r2, [r3, #0]
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	4413      	add	r3, r2
 80017e6:	4a05      	ldr	r2, [pc, #20]	@ (80017fc <_sbrk+0x64>)
 80017e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80017ea:	68fb      	ldr	r3, [r7, #12]
}
 80017ec:	4618      	mov	r0, r3
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	bd80      	pop	{r7, pc}
 80017f4:	20005000 	.word	0x20005000
 80017f8:	00000400 	.word	0x00000400
 80017fc:	20000258 	.word	0x20000258
 8001800:	20001d00 	.word	0x20001d00

08001804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001804:	b480      	push	{r7}
 8001806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001808:	bf00      	nop
 800180a:	46bd      	mov	sp, r7
 800180c:	bc80      	pop	{r7}
 800180e:	4770      	bx	lr

08001810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001810:	f7ff fff8 	bl	8001804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001814:	480b      	ldr	r0, [pc, #44]	@ (8001844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001816:	490c      	ldr	r1, [pc, #48]	@ (8001848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001818:	4a0c      	ldr	r2, [pc, #48]	@ (800184c <LoopFillZerobss+0x16>)
  movs r3, #0
 800181a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800181c:	e002      	b.n	8001824 <LoopCopyDataInit>

0800181e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800181e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001822:	3304      	adds	r3, #4

08001824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001828:	d3f9      	bcc.n	800181e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800182a:	4a09      	ldr	r2, [pc, #36]	@ (8001850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800182c:	4c09      	ldr	r4, [pc, #36]	@ (8001854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800182e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001830:	e001      	b.n	8001836 <LoopFillZerobss>

08001832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001834:	3204      	adds	r2, #4

08001836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001838:	d3fb      	bcc.n	8001832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800183a:	f006 fd97 	bl	800836c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800183e:	f7ff fc5d 	bl	80010fc <main>
  bx lr
 8001842:	4770      	bx	lr
  ldr r0, =_sdata
 8001844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001848:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 800184c:	0800b350 	.word	0x0800b350
  ldr r2, =_sbss
 8001850:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001854:	20001cfc 	.word	0x20001cfc

08001858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001858:	e7fe      	b.n	8001858 <ADC1_2_IRQHandler>
	...

0800185c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001860:	4b08      	ldr	r3, [pc, #32]	@ (8001884 <HAL_Init+0x28>)
 8001862:	681b      	ldr	r3, [r3, #0]
 8001864:	4a07      	ldr	r2, [pc, #28]	@ (8001884 <HAL_Init+0x28>)
 8001866:	f043 0310 	orr.w	r3, r3, #16
 800186a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800186c:	2003      	movs	r0, #3
 800186e:	f000 f911 	bl	8001a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001872:	200f      	movs	r0, #15
 8001874:	f000 f808 	bl	8001888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001878:	f7ff fe0a 	bl	8001490 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800187c:	2300      	movs	r3, #0
}
 800187e:	4618      	mov	r0, r3
 8001880:	bd80      	pop	{r7, pc}
 8001882:	bf00      	nop
 8001884:	40022000 	.word	0x40022000

08001888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001888:	b580      	push	{r7, lr}
 800188a:	b082      	sub	sp, #8
 800188c:	af00      	add	r7, sp, #0
 800188e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001890:	4b12      	ldr	r3, [pc, #72]	@ (80018dc <HAL_InitTick+0x54>)
 8001892:	681a      	ldr	r2, [r3, #0]
 8001894:	4b12      	ldr	r3, [pc, #72]	@ (80018e0 <HAL_InitTick+0x58>)
 8001896:	781b      	ldrb	r3, [r3, #0]
 8001898:	4619      	mov	r1, r3
 800189a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800189e:	fbb3 f3f1 	udiv	r3, r3, r1
 80018a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018a6:	4618      	mov	r0, r3
 80018a8:	f000 f929 	bl	8001afe <HAL_SYSTICK_Config>
 80018ac:	4603      	mov	r3, r0
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d001      	beq.n	80018b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018b2:	2301      	movs	r3, #1
 80018b4:	e00e      	b.n	80018d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	2b0f      	cmp	r3, #15
 80018ba:	d80a      	bhi.n	80018d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018bc:	2200      	movs	r2, #0
 80018be:	6879      	ldr	r1, [r7, #4]
 80018c0:	f04f 30ff 	mov.w	r0, #4294967295
 80018c4:	f000 f8f1 	bl	8001aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018c8:	4a06      	ldr	r2, [pc, #24]	@ (80018e4 <HAL_InitTick+0x5c>)
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018ce:	2300      	movs	r3, #0
 80018d0:	e000      	b.n	80018d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018d2:	2301      	movs	r3, #1
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3708      	adds	r7, #8
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20000000 	.word	0x20000000
 80018e0:	20000008 	.word	0x20000008
 80018e4:	20000004 	.word	0x20000004

080018e8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e8:	b480      	push	{r7}
 80018ea:	af00      	add	r7, sp, #0
  return uwTick;
 80018ec:	4b02      	ldr	r3, [pc, #8]	@ (80018f8 <HAL_GetTick+0x10>)
 80018ee:	681b      	ldr	r3, [r3, #0]
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bc80      	pop	{r7}
 80018f6:	4770      	bx	lr
 80018f8:	2000025c 	.word	0x2000025c

080018fc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018fc:	b480      	push	{r7}
 80018fe:	b085      	sub	sp, #20
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	f003 0307 	and.w	r3, r3, #7
 800190a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800190c:	4b0c      	ldr	r3, [pc, #48]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 800190e:	68db      	ldr	r3, [r3, #12]
 8001910:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001912:	68ba      	ldr	r2, [r7, #8]
 8001914:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001918:	4013      	ands	r3, r2
 800191a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001924:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001928:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800192c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800192e:	4a04      	ldr	r2, [pc, #16]	@ (8001940 <__NVIC_SetPriorityGrouping+0x44>)
 8001930:	68bb      	ldr	r3, [r7, #8]
 8001932:	60d3      	str	r3, [r2, #12]
}
 8001934:	bf00      	nop
 8001936:	3714      	adds	r7, #20
 8001938:	46bd      	mov	sp, r7
 800193a:	bc80      	pop	{r7}
 800193c:	4770      	bx	lr
 800193e:	bf00      	nop
 8001940:	e000ed00 	.word	0xe000ed00

08001944 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001944:	b480      	push	{r7}
 8001946:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001948:	4b04      	ldr	r3, [pc, #16]	@ (800195c <__NVIC_GetPriorityGrouping+0x18>)
 800194a:	68db      	ldr	r3, [r3, #12]
 800194c:	0a1b      	lsrs	r3, r3, #8
 800194e:	f003 0307 	and.w	r3, r3, #7
}
 8001952:	4618      	mov	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	bc80      	pop	{r7}
 8001958:	4770      	bx	lr
 800195a:	bf00      	nop
 800195c:	e000ed00 	.word	0xe000ed00

08001960 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800196a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800196e:	2b00      	cmp	r3, #0
 8001970:	db0b      	blt.n	800198a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001972:	79fb      	ldrb	r3, [r7, #7]
 8001974:	f003 021f 	and.w	r2, r3, #31
 8001978:	4906      	ldr	r1, [pc, #24]	@ (8001994 <__NVIC_EnableIRQ+0x34>)
 800197a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197e:	095b      	lsrs	r3, r3, #5
 8001980:	2001      	movs	r0, #1
 8001982:	fa00 f202 	lsl.w	r2, r0, r2
 8001986:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800198a:	bf00      	nop
 800198c:	370c      	adds	r7, #12
 800198e:	46bd      	mov	sp, r7
 8001990:	bc80      	pop	{r7}
 8001992:	4770      	bx	lr
 8001994:	e000e100 	.word	0xe000e100

08001998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	4603      	mov	r3, r0
 80019a0:	6039      	str	r1, [r7, #0]
 80019a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019a8:	2b00      	cmp	r3, #0
 80019aa:	db0a      	blt.n	80019c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019ac:	683b      	ldr	r3, [r7, #0]
 80019ae:	b2da      	uxtb	r2, r3
 80019b0:	490c      	ldr	r1, [pc, #48]	@ (80019e4 <__NVIC_SetPriority+0x4c>)
 80019b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b6:	0112      	lsls	r2, r2, #4
 80019b8:	b2d2      	uxtb	r2, r2
 80019ba:	440b      	add	r3, r1
 80019bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019c0:	e00a      	b.n	80019d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c2:	683b      	ldr	r3, [r7, #0]
 80019c4:	b2da      	uxtb	r2, r3
 80019c6:	4908      	ldr	r1, [pc, #32]	@ (80019e8 <__NVIC_SetPriority+0x50>)
 80019c8:	79fb      	ldrb	r3, [r7, #7]
 80019ca:	f003 030f 	and.w	r3, r3, #15
 80019ce:	3b04      	subs	r3, #4
 80019d0:	0112      	lsls	r2, r2, #4
 80019d2:	b2d2      	uxtb	r2, r2
 80019d4:	440b      	add	r3, r1
 80019d6:	761a      	strb	r2, [r3, #24]
}
 80019d8:	bf00      	nop
 80019da:	370c      	adds	r7, #12
 80019dc:	46bd      	mov	sp, r7
 80019de:	bc80      	pop	{r7}
 80019e0:	4770      	bx	lr
 80019e2:	bf00      	nop
 80019e4:	e000e100 	.word	0xe000e100
 80019e8:	e000ed00 	.word	0xe000ed00

080019ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ec:	b480      	push	{r7}
 80019ee:	b089      	sub	sp, #36	@ 0x24
 80019f0:	af00      	add	r7, sp, #0
 80019f2:	60f8      	str	r0, [r7, #12]
 80019f4:	60b9      	str	r1, [r7, #8]
 80019f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019f8:	68fb      	ldr	r3, [r7, #12]
 80019fa:	f003 0307 	and.w	r3, r3, #7
 80019fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a00:	69fb      	ldr	r3, [r7, #28]
 8001a02:	f1c3 0307 	rsb	r3, r3, #7
 8001a06:	2b04      	cmp	r3, #4
 8001a08:	bf28      	it	cs
 8001a0a:	2304      	movcs	r3, #4
 8001a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a0e:	69fb      	ldr	r3, [r7, #28]
 8001a10:	3304      	adds	r3, #4
 8001a12:	2b06      	cmp	r3, #6
 8001a14:	d902      	bls.n	8001a1c <NVIC_EncodePriority+0x30>
 8001a16:	69fb      	ldr	r3, [r7, #28]
 8001a18:	3b03      	subs	r3, #3
 8001a1a:	e000      	b.n	8001a1e <NVIC_EncodePriority+0x32>
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a20:	f04f 32ff 	mov.w	r2, #4294967295
 8001a24:	69bb      	ldr	r3, [r7, #24]
 8001a26:	fa02 f303 	lsl.w	r3, r2, r3
 8001a2a:	43da      	mvns	r2, r3
 8001a2c:	68bb      	ldr	r3, [r7, #8]
 8001a2e:	401a      	ands	r2, r3
 8001a30:	697b      	ldr	r3, [r7, #20]
 8001a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a34:	f04f 31ff 	mov.w	r1, #4294967295
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a3e:	43d9      	mvns	r1, r3
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a44:	4313      	orrs	r3, r2
         );
}
 8001a46:	4618      	mov	r0, r3
 8001a48:	3724      	adds	r7, #36	@ 0x24
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bc80      	pop	{r7}
 8001a4e:	4770      	bx	lr

08001a50 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	b082      	sub	sp, #8
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	3b01      	subs	r3, #1
 8001a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a60:	d301      	bcc.n	8001a66 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a62:	2301      	movs	r3, #1
 8001a64:	e00f      	b.n	8001a86 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a66:	4a0a      	ldr	r2, [pc, #40]	@ (8001a90 <SysTick_Config+0x40>)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3b01      	subs	r3, #1
 8001a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a6e:	210f      	movs	r1, #15
 8001a70:	f04f 30ff 	mov.w	r0, #4294967295
 8001a74:	f7ff ff90 	bl	8001998 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a78:	4b05      	ldr	r3, [pc, #20]	@ (8001a90 <SysTick_Config+0x40>)
 8001a7a:	2200      	movs	r2, #0
 8001a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a7e:	4b04      	ldr	r3, [pc, #16]	@ (8001a90 <SysTick_Config+0x40>)
 8001a80:	2207      	movs	r2, #7
 8001a82:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a84:	2300      	movs	r3, #0
}
 8001a86:	4618      	mov	r0, r3
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}
 8001a8e:	bf00      	nop
 8001a90:	e000e010 	.word	0xe000e010

08001a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a9c:	6878      	ldr	r0, [r7, #4]
 8001a9e:	f7ff ff2d 	bl	80018fc <__NVIC_SetPriorityGrouping>
}
 8001aa2:	bf00      	nop
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b086      	sub	sp, #24
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	60b9      	str	r1, [r7, #8]
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001abc:	f7ff ff42 	bl	8001944 <__NVIC_GetPriorityGrouping>
 8001ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ac2:	687a      	ldr	r2, [r7, #4]
 8001ac4:	68b9      	ldr	r1, [r7, #8]
 8001ac6:	6978      	ldr	r0, [r7, #20]
 8001ac8:	f7ff ff90 	bl	80019ec <NVIC_EncodePriority>
 8001acc:	4602      	mov	r2, r0
 8001ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ad2:	4611      	mov	r1, r2
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff5f 	bl	8001998 <__NVIC_SetPriority>
}
 8001ada:	bf00      	nop
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	4603      	mov	r3, r0
 8001aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff35 	bl	8001960 <__NVIC_EnableIRQ>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}

08001afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001afe:	b580      	push	{r7, lr}
 8001b00:	b082      	sub	sp, #8
 8001b02:	af00      	add	r7, sp, #0
 8001b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b06:	6878      	ldr	r0, [r7, #4]
 8001b08:	f7ff ffa2 	bl	8001a50 <SysTick_Config>
 8001b0c:	4603      	mov	r3, r0
}
 8001b0e:	4618      	mov	r0, r3
 8001b10:	3708      	adds	r7, #8
 8001b12:	46bd      	mov	sp, r7
 8001b14:	bd80      	pop	{r7, pc}

08001b16 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001b16:	b480      	push	{r7}
 8001b18:	b085      	sub	sp, #20
 8001b1a:	af00      	add	r7, sp, #0
 8001b1c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b1e:	2300      	movs	r3, #0
 8001b20:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b28:	b2db      	uxtb	r3, r3
 8001b2a:	2b02      	cmp	r3, #2
 8001b2c:	d008      	beq.n	8001b40 <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2204      	movs	r2, #4
 8001b32:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2200      	movs	r2, #0
 8001b38:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8001b3c:	2301      	movs	r3, #1
 8001b3e:	e020      	b.n	8001b82 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	681a      	ldr	r2, [r3, #0]
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	f022 020e 	bic.w	r2, r2, #14
 8001b4e:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	681a      	ldr	r2, [r3, #0]
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f022 0201 	bic.w	r2, r2, #1
 8001b5e:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001b68:	2101      	movs	r1, #1
 8001b6a:	fa01 f202 	lsl.w	r2, r1, r2
 8001b6e:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2201      	movs	r2, #1
 8001b74:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8001b80:	7bfb      	ldrb	r3, [r7, #15]
}
 8001b82:	4618      	mov	r0, r3
 8001b84:	3714      	adds	r7, #20
 8001b86:	46bd      	mov	sp, r7
 8001b88:	bc80      	pop	{r7}
 8001b8a:	4770      	bx	lr

08001b8c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001b8c:	b580      	push	{r7, lr}
 8001b8e:	b084      	sub	sp, #16
 8001b90:	af00      	add	r7, sp, #0
 8001b92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001b94:	2300      	movs	r3, #0
 8001b96:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	d005      	beq.n	8001bb0 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2204      	movs	r2, #4
 8001ba8:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001baa:	2301      	movs	r3, #1
 8001bac:	73fb      	strb	r3, [r7, #15]
 8001bae:	e051      	b.n	8001c54 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	681a      	ldr	r2, [r3, #0]
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	f022 020e 	bic.w	r2, r2, #14
 8001bbe:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	f022 0201 	bic.w	r2, r2, #1
 8001bce:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4a22      	ldr	r2, [pc, #136]	@ (8001c60 <HAL_DMA_Abort_IT+0xd4>)
 8001bd6:	4293      	cmp	r3, r2
 8001bd8:	d029      	beq.n	8001c2e <HAL_DMA_Abort_IT+0xa2>
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	4a21      	ldr	r2, [pc, #132]	@ (8001c64 <HAL_DMA_Abort_IT+0xd8>)
 8001be0:	4293      	cmp	r3, r2
 8001be2:	d022      	beq.n	8001c2a <HAL_DMA_Abort_IT+0x9e>
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a1f      	ldr	r2, [pc, #124]	@ (8001c68 <HAL_DMA_Abort_IT+0xdc>)
 8001bea:	4293      	cmp	r3, r2
 8001bec:	d01a      	beq.n	8001c24 <HAL_DMA_Abort_IT+0x98>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4a1e      	ldr	r2, [pc, #120]	@ (8001c6c <HAL_DMA_Abort_IT+0xe0>)
 8001bf4:	4293      	cmp	r3, r2
 8001bf6:	d012      	beq.n	8001c1e <HAL_DMA_Abort_IT+0x92>
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8001c70 <HAL_DMA_Abort_IT+0xe4>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d00a      	beq.n	8001c18 <HAL_DMA_Abort_IT+0x8c>
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4a1b      	ldr	r2, [pc, #108]	@ (8001c74 <HAL_DMA_Abort_IT+0xe8>)
 8001c08:	4293      	cmp	r3, r2
 8001c0a:	d102      	bne.n	8001c12 <HAL_DMA_Abort_IT+0x86>
 8001c0c:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8001c10:	e00e      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001c16:	e00b      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001c1c:	e008      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c1e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001c22:	e005      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c24:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001c28:	e002      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c2a:	2310      	movs	r3, #16
 8001c2c:	e000      	b.n	8001c30 <HAL_DMA_Abort_IT+0xa4>
 8001c2e:	2301      	movs	r3, #1
 8001c30:	4a11      	ldr	r2, [pc, #68]	@ (8001c78 <HAL_DMA_Abort_IT+0xec>)
 8001c32:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2201      	movs	r2, #1
 8001c38:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d003      	beq.n	8001c54 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001c50:	6878      	ldr	r0, [r7, #4]
 8001c52:	4798      	blx	r3
    } 
  }
  return status;
 8001c54:	7bfb      	ldrb	r3, [r7, #15]
}
 8001c56:	4618      	mov	r0, r3
 8001c58:	3710      	adds	r7, #16
 8001c5a:	46bd      	mov	sp, r7
 8001c5c:	bd80      	pop	{r7, pc}
 8001c5e:	bf00      	nop
 8001c60:	40020008 	.word	0x40020008
 8001c64:	4002001c 	.word	0x4002001c
 8001c68:	40020030 	.word	0x40020030
 8001c6c:	40020044 	.word	0x40020044
 8001c70:	40020058 	.word	0x40020058
 8001c74:	4002006c 	.word	0x4002006c
 8001c78:	40020000 	.word	0x40020000

08001c7c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001c7c:	b480      	push	{r7}
 8001c7e:	b08b      	sub	sp, #44	@ 0x2c
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001c86:	2300      	movs	r3, #0
 8001c88:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001c8a:	2300      	movs	r3, #0
 8001c8c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c8e:	e169      	b.n	8001f64 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001c90:	2201      	movs	r2, #1
 8001c92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c94:	fa02 f303 	lsl.w	r3, r2, r3
 8001c98:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c9a:	683b      	ldr	r3, [r7, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	69fa      	ldr	r2, [r7, #28]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	69fb      	ldr	r3, [r7, #28]
 8001ca8:	429a      	cmp	r2, r3
 8001caa:	f040 8158 	bne.w	8001f5e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001cae:	683b      	ldr	r3, [r7, #0]
 8001cb0:	685b      	ldr	r3, [r3, #4]
 8001cb2:	4a9a      	ldr	r2, [pc, #616]	@ (8001f1c <HAL_GPIO_Init+0x2a0>)
 8001cb4:	4293      	cmp	r3, r2
 8001cb6:	d05e      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
 8001cb8:	4a98      	ldr	r2, [pc, #608]	@ (8001f1c <HAL_GPIO_Init+0x2a0>)
 8001cba:	4293      	cmp	r3, r2
 8001cbc:	d875      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001cbe:	4a98      	ldr	r2, [pc, #608]	@ (8001f20 <HAL_GPIO_Init+0x2a4>)
 8001cc0:	4293      	cmp	r3, r2
 8001cc2:	d058      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
 8001cc4:	4a96      	ldr	r2, [pc, #600]	@ (8001f20 <HAL_GPIO_Init+0x2a4>)
 8001cc6:	4293      	cmp	r3, r2
 8001cc8:	d86f      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001cca:	4a96      	ldr	r2, [pc, #600]	@ (8001f24 <HAL_GPIO_Init+0x2a8>)
 8001ccc:	4293      	cmp	r3, r2
 8001cce:	d052      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
 8001cd0:	4a94      	ldr	r2, [pc, #592]	@ (8001f24 <HAL_GPIO_Init+0x2a8>)
 8001cd2:	4293      	cmp	r3, r2
 8001cd4:	d869      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001cd6:	4a94      	ldr	r2, [pc, #592]	@ (8001f28 <HAL_GPIO_Init+0x2ac>)
 8001cd8:	4293      	cmp	r3, r2
 8001cda:	d04c      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
 8001cdc:	4a92      	ldr	r2, [pc, #584]	@ (8001f28 <HAL_GPIO_Init+0x2ac>)
 8001cde:	4293      	cmp	r3, r2
 8001ce0:	d863      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001ce2:	4a92      	ldr	r2, [pc, #584]	@ (8001f2c <HAL_GPIO_Init+0x2b0>)
 8001ce4:	4293      	cmp	r3, r2
 8001ce6:	d046      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
 8001ce8:	4a90      	ldr	r2, [pc, #576]	@ (8001f2c <HAL_GPIO_Init+0x2b0>)
 8001cea:	4293      	cmp	r3, r2
 8001cec:	d85d      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001cee:	2b12      	cmp	r3, #18
 8001cf0:	d82a      	bhi.n	8001d48 <HAL_GPIO_Init+0xcc>
 8001cf2:	2b12      	cmp	r3, #18
 8001cf4:	d859      	bhi.n	8001daa <HAL_GPIO_Init+0x12e>
 8001cf6:	a201      	add	r2, pc, #4	@ (adr r2, 8001cfc <HAL_GPIO_Init+0x80>)
 8001cf8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cfc:	08001d77 	.word	0x08001d77
 8001d00:	08001d51 	.word	0x08001d51
 8001d04:	08001d63 	.word	0x08001d63
 8001d08:	08001da5 	.word	0x08001da5
 8001d0c:	08001dab 	.word	0x08001dab
 8001d10:	08001dab 	.word	0x08001dab
 8001d14:	08001dab 	.word	0x08001dab
 8001d18:	08001dab 	.word	0x08001dab
 8001d1c:	08001dab 	.word	0x08001dab
 8001d20:	08001dab 	.word	0x08001dab
 8001d24:	08001dab 	.word	0x08001dab
 8001d28:	08001dab 	.word	0x08001dab
 8001d2c:	08001dab 	.word	0x08001dab
 8001d30:	08001dab 	.word	0x08001dab
 8001d34:	08001dab 	.word	0x08001dab
 8001d38:	08001dab 	.word	0x08001dab
 8001d3c:	08001dab 	.word	0x08001dab
 8001d40:	08001d59 	.word	0x08001d59
 8001d44:	08001d6d 	.word	0x08001d6d
 8001d48:	4a79      	ldr	r2, [pc, #484]	@ (8001f30 <HAL_GPIO_Init+0x2b4>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d013      	beq.n	8001d76 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d4e:	e02c      	b.n	8001daa <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d50:	683b      	ldr	r3, [r7, #0]
 8001d52:	68db      	ldr	r3, [r3, #12]
 8001d54:	623b      	str	r3, [r7, #32]
          break;
 8001d56:	e029      	b.n	8001dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	68db      	ldr	r3, [r3, #12]
 8001d5c:	3304      	adds	r3, #4
 8001d5e:	623b      	str	r3, [r7, #32]
          break;
 8001d60:	e024      	b.n	8001dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d62:	683b      	ldr	r3, [r7, #0]
 8001d64:	68db      	ldr	r3, [r3, #12]
 8001d66:	3308      	adds	r3, #8
 8001d68:	623b      	str	r3, [r7, #32]
          break;
 8001d6a:	e01f      	b.n	8001dac <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001d6c:	683b      	ldr	r3, [r7, #0]
 8001d6e:	68db      	ldr	r3, [r3, #12]
 8001d70:	330c      	adds	r3, #12
 8001d72:	623b      	str	r3, [r7, #32]
          break;
 8001d74:	e01a      	b.n	8001dac <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001d76:	683b      	ldr	r3, [r7, #0]
 8001d78:	689b      	ldr	r3, [r3, #8]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d102      	bne.n	8001d84 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001d7e:	2304      	movs	r3, #4
 8001d80:	623b      	str	r3, [r7, #32]
          break;
 8001d82:	e013      	b.n	8001dac <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	689b      	ldr	r3, [r3, #8]
 8001d88:	2b01      	cmp	r3, #1
 8001d8a:	d105      	bne.n	8001d98 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d8c:	2308      	movs	r3, #8
 8001d8e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	69fa      	ldr	r2, [r7, #28]
 8001d94:	611a      	str	r2, [r3, #16]
          break;
 8001d96:	e009      	b.n	8001dac <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001d98:	2308      	movs	r3, #8
 8001d9a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001d9c:	687b      	ldr	r3, [r7, #4]
 8001d9e:	69fa      	ldr	r2, [r7, #28]
 8001da0:	615a      	str	r2, [r3, #20]
          break;
 8001da2:	e003      	b.n	8001dac <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001da4:	2300      	movs	r3, #0
 8001da6:	623b      	str	r3, [r7, #32]
          break;
 8001da8:	e000      	b.n	8001dac <HAL_GPIO_Init+0x130>
          break;
 8001daa:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001dac:	69bb      	ldr	r3, [r7, #24]
 8001dae:	2bff      	cmp	r3, #255	@ 0xff
 8001db0:	d801      	bhi.n	8001db6 <HAL_GPIO_Init+0x13a>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	e001      	b.n	8001dba <HAL_GPIO_Init+0x13e>
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	3304      	adds	r3, #4
 8001dba:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001dbc:	69bb      	ldr	r3, [r7, #24]
 8001dbe:	2bff      	cmp	r3, #255	@ 0xff
 8001dc0:	d802      	bhi.n	8001dc8 <HAL_GPIO_Init+0x14c>
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	e002      	b.n	8001dce <HAL_GPIO_Init+0x152>
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dca:	3b08      	subs	r3, #8
 8001dcc:	009b      	lsls	r3, r3, #2
 8001dce:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001dd0:	697b      	ldr	r3, [r7, #20]
 8001dd2:	681a      	ldr	r2, [r3, #0]
 8001dd4:	210f      	movs	r1, #15
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	fa01 f303 	lsl.w	r3, r1, r3
 8001ddc:	43db      	mvns	r3, r3
 8001dde:	401a      	ands	r2, r3
 8001de0:	6a39      	ldr	r1, [r7, #32]
 8001de2:	693b      	ldr	r3, [r7, #16]
 8001de4:	fa01 f303 	lsl.w	r3, r1, r3
 8001de8:	431a      	orrs	r2, r3
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	f000 80b1 	beq.w	8001f5e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001dfc:	4b4d      	ldr	r3, [pc, #308]	@ (8001f34 <HAL_GPIO_Init+0x2b8>)
 8001dfe:	699b      	ldr	r3, [r3, #24]
 8001e00:	4a4c      	ldr	r2, [pc, #304]	@ (8001f34 <HAL_GPIO_Init+0x2b8>)
 8001e02:	f043 0301 	orr.w	r3, r3, #1
 8001e06:	6193      	str	r3, [r2, #24]
 8001e08:	4b4a      	ldr	r3, [pc, #296]	@ (8001f34 <HAL_GPIO_Init+0x2b8>)
 8001e0a:	699b      	ldr	r3, [r3, #24]
 8001e0c:	f003 0301 	and.w	r3, r3, #1
 8001e10:	60bb      	str	r3, [r7, #8]
 8001e12:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e14:	4a48      	ldr	r2, [pc, #288]	@ (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001e16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e18:	089b      	lsrs	r3, r3, #2
 8001e1a:	3302      	adds	r3, #2
 8001e1c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e20:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e24:	f003 0303 	and.w	r3, r3, #3
 8001e28:	009b      	lsls	r3, r3, #2
 8001e2a:	220f      	movs	r2, #15
 8001e2c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e30:	43db      	mvns	r3, r3
 8001e32:	68fa      	ldr	r2, [r7, #12]
 8001e34:	4013      	ands	r3, r2
 8001e36:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	4a40      	ldr	r2, [pc, #256]	@ (8001f3c <HAL_GPIO_Init+0x2c0>)
 8001e3c:	4293      	cmp	r3, r2
 8001e3e:	d013      	beq.n	8001e68 <HAL_GPIO_Init+0x1ec>
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	4a3f      	ldr	r2, [pc, #252]	@ (8001f40 <HAL_GPIO_Init+0x2c4>)
 8001e44:	4293      	cmp	r3, r2
 8001e46:	d00d      	beq.n	8001e64 <HAL_GPIO_Init+0x1e8>
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	4a3e      	ldr	r2, [pc, #248]	@ (8001f44 <HAL_GPIO_Init+0x2c8>)
 8001e4c:	4293      	cmp	r3, r2
 8001e4e:	d007      	beq.n	8001e60 <HAL_GPIO_Init+0x1e4>
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	4a3d      	ldr	r2, [pc, #244]	@ (8001f48 <HAL_GPIO_Init+0x2cc>)
 8001e54:	4293      	cmp	r3, r2
 8001e56:	d101      	bne.n	8001e5c <HAL_GPIO_Init+0x1e0>
 8001e58:	2303      	movs	r3, #3
 8001e5a:	e006      	b.n	8001e6a <HAL_GPIO_Init+0x1ee>
 8001e5c:	2304      	movs	r3, #4
 8001e5e:	e004      	b.n	8001e6a <HAL_GPIO_Init+0x1ee>
 8001e60:	2302      	movs	r3, #2
 8001e62:	e002      	b.n	8001e6a <HAL_GPIO_Init+0x1ee>
 8001e64:	2301      	movs	r3, #1
 8001e66:	e000      	b.n	8001e6a <HAL_GPIO_Init+0x1ee>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001e6c:	f002 0203 	and.w	r2, r2, #3
 8001e70:	0092      	lsls	r2, r2, #2
 8001e72:	4093      	lsls	r3, r2
 8001e74:	68fa      	ldr	r2, [r7, #12]
 8001e76:	4313      	orrs	r3, r2
 8001e78:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001e7a:	492f      	ldr	r1, [pc, #188]	@ (8001f38 <HAL_GPIO_Init+0x2bc>)
 8001e7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e7e:	089b      	lsrs	r3, r3, #2
 8001e80:	3302      	adds	r3, #2
 8001e82:	68fa      	ldr	r2, [r7, #12]
 8001e84:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e88:	683b      	ldr	r3, [r7, #0]
 8001e8a:	685b      	ldr	r3, [r3, #4]
 8001e8c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d006      	beq.n	8001ea2 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001e94:	4b2d      	ldr	r3, [pc, #180]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001e96:	689a      	ldr	r2, [r3, #8]
 8001e98:	492c      	ldr	r1, [pc, #176]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	4313      	orrs	r3, r2
 8001e9e:	608b      	str	r3, [r1, #8]
 8001ea0:	e006      	b.n	8001eb0 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001ea2:	4b2a      	ldr	r3, [pc, #168]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ea4:	689a      	ldr	r2, [r3, #8]
 8001ea6:	69bb      	ldr	r3, [r7, #24]
 8001ea8:	43db      	mvns	r3, r3
 8001eaa:	4928      	ldr	r1, [pc, #160]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001eac:	4013      	ands	r3, r2
 8001eae:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d006      	beq.n	8001eca <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ebc:	4b23      	ldr	r3, [pc, #140]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ebe:	68da      	ldr	r2, [r3, #12]
 8001ec0:	4922      	ldr	r1, [pc, #136]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	4313      	orrs	r3, r2
 8001ec6:	60cb      	str	r3, [r1, #12]
 8001ec8:	e006      	b.n	8001ed8 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001eca:	4b20      	ldr	r3, [pc, #128]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ecc:	68da      	ldr	r2, [r3, #12]
 8001ece:	69bb      	ldr	r3, [r7, #24]
 8001ed0:	43db      	mvns	r3, r3
 8001ed2:	491e      	ldr	r1, [pc, #120]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ed4:	4013      	ands	r3, r2
 8001ed6:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001ed8:	683b      	ldr	r3, [r7, #0]
 8001eda:	685b      	ldr	r3, [r3, #4]
 8001edc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d006      	beq.n	8001ef2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001ee4:	4b19      	ldr	r3, [pc, #100]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ee6:	685a      	ldr	r2, [r3, #4]
 8001ee8:	4918      	ldr	r1, [pc, #96]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001eea:	69bb      	ldr	r3, [r7, #24]
 8001eec:	4313      	orrs	r3, r2
 8001eee:	604b      	str	r3, [r1, #4]
 8001ef0:	e006      	b.n	8001f00 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001ef2:	4b16      	ldr	r3, [pc, #88]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001ef4:	685a      	ldr	r2, [r3, #4]
 8001ef6:	69bb      	ldr	r3, [r7, #24]
 8001ef8:	43db      	mvns	r3, r3
 8001efa:	4914      	ldr	r1, [pc, #80]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001efc:	4013      	ands	r3, r2
 8001efe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f00:	683b      	ldr	r3, [r7, #0]
 8001f02:	685b      	ldr	r3, [r3, #4]
 8001f04:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d021      	beq.n	8001f50 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	490e      	ldr	r1, [pc, #56]	@ (8001f4c <HAL_GPIO_Init+0x2d0>)
 8001f12:	69bb      	ldr	r3, [r7, #24]
 8001f14:	4313      	orrs	r3, r2
 8001f16:	600b      	str	r3, [r1, #0]
 8001f18:	e021      	b.n	8001f5e <HAL_GPIO_Init+0x2e2>
 8001f1a:	bf00      	nop
 8001f1c:	10320000 	.word	0x10320000
 8001f20:	10310000 	.word	0x10310000
 8001f24:	10220000 	.word	0x10220000
 8001f28:	10210000 	.word	0x10210000
 8001f2c:	10120000 	.word	0x10120000
 8001f30:	10110000 	.word	0x10110000
 8001f34:	40021000 	.word	0x40021000
 8001f38:	40010000 	.word	0x40010000
 8001f3c:	40010800 	.word	0x40010800
 8001f40:	40010c00 	.word	0x40010c00
 8001f44:	40011000 	.word	0x40011000
 8001f48:	40011400 	.word	0x40011400
 8001f4c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f50:	4b0b      	ldr	r3, [pc, #44]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001f52:	681a      	ldr	r2, [r3, #0]
 8001f54:	69bb      	ldr	r3, [r7, #24]
 8001f56:	43db      	mvns	r3, r3
 8001f58:	4909      	ldr	r1, [pc, #36]	@ (8001f80 <HAL_GPIO_Init+0x304>)
 8001f5a:	4013      	ands	r3, r2
 8001f5c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f60:	3301      	adds	r3, #1
 8001f62:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	681a      	ldr	r2, [r3, #0]
 8001f68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f6a:	fa22 f303 	lsr.w	r3, r2, r3
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	f47f ae8e 	bne.w	8001c90 <HAL_GPIO_Init+0x14>
  }
}
 8001f74:	bf00      	nop
 8001f76:	bf00      	nop
 8001f78:	372c      	adds	r7, #44	@ 0x2c
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bc80      	pop	{r7}
 8001f7e:	4770      	bx	lr
 8001f80:	40010400 	.word	0x40010400

08001f84 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f84:	b480      	push	{r7}
 8001f86:	b083      	sub	sp, #12
 8001f88:	af00      	add	r7, sp, #0
 8001f8a:	6078      	str	r0, [r7, #4]
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	807b      	strh	r3, [r7, #2]
 8001f90:	4613      	mov	r3, r2
 8001f92:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001f94:	787b      	ldrb	r3, [r7, #1]
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d003      	beq.n	8001fa2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f9a:	887a      	ldrh	r2, [r7, #2]
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001fa0:	e003      	b.n	8001faa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001fa2:	887b      	ldrh	r3, [r7, #2]
 8001fa4:	041a      	lsls	r2, r3, #16
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	611a      	str	r2, [r3, #16]
}
 8001faa:	bf00      	nop
 8001fac:	370c      	adds	r7, #12
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bc80      	pop	{r7}
 8001fb2:	4770      	bx	lr

08001fb4 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8001fb4:	b480      	push	{r7}
 8001fb6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8001fb8:	4b03      	ldr	r3, [pc, #12]	@ (8001fc8 <HAL_PWR_EnableBkUpAccess+0x14>)
 8001fba:	2201      	movs	r2, #1
 8001fbc:	601a      	str	r2, [r3, #0]
}
 8001fbe:	bf00      	nop
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bc80      	pop	{r7}
 8001fc4:	4770      	bx	lr
 8001fc6:	bf00      	nop
 8001fc8:	420e0020 	.word	0x420e0020

08001fcc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	b086      	sub	sp, #24
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d101      	bne.n	8001fde <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001fda:	2301      	movs	r3, #1
 8001fdc:	e272      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0301 	and.w	r3, r3, #1
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	f000 8087 	beq.w	80020fa <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001fec:	4b92      	ldr	r3, [pc, #584]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001fee:	685b      	ldr	r3, [r3, #4]
 8001ff0:	f003 030c 	and.w	r3, r3, #12
 8001ff4:	2b04      	cmp	r3, #4
 8001ff6:	d00c      	beq.n	8002012 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001ff8:	4b8f      	ldr	r3, [pc, #572]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f003 030c 	and.w	r3, r3, #12
 8002000:	2b08      	cmp	r3, #8
 8002002:	d112      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
 8002004:	4b8c      	ldr	r3, [pc, #560]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002010:	d10b      	bne.n	800202a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002012:	4b89      	ldr	r3, [pc, #548]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800201a:	2b00      	cmp	r3, #0
 800201c:	d06c      	beq.n	80020f8 <HAL_RCC_OscConfig+0x12c>
 800201e:	687b      	ldr	r3, [r7, #4]
 8002020:	685b      	ldr	r3, [r3, #4]
 8002022:	2b00      	cmp	r3, #0
 8002024:	d168      	bne.n	80020f8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002026:	2301      	movs	r3, #1
 8002028:	e24c      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	685b      	ldr	r3, [r3, #4]
 800202e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x76>
 8002034:	4b80      	ldr	r3, [pc, #512]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a7f      	ldr	r2, [pc, #508]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800203a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800203e:	6013      	str	r3, [r2, #0]
 8002040:	e02e      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	685b      	ldr	r3, [r3, #4]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x98>
 800204a:	4b7b      	ldr	r3, [pc, #492]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a7a      	ldr	r2, [pc, #488]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002050:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002054:	6013      	str	r3, [r2, #0]
 8002056:	4b78      	ldr	r3, [pc, #480]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	4a77      	ldr	r2, [pc, #476]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800205c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002060:	6013      	str	r3, [r2, #0]
 8002062:	e01d      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800206c:	d10c      	bne.n	8002088 <HAL_RCC_OscConfig+0xbc>
 800206e:	4b72      	ldr	r3, [pc, #456]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002070:	681b      	ldr	r3, [r3, #0]
 8002072:	4a71      	ldr	r2, [pc, #452]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002074:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002078:	6013      	str	r3, [r2, #0]
 800207a:	4b6f      	ldr	r3, [pc, #444]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	4a6e      	ldr	r2, [pc, #440]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002080:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002084:	6013      	str	r3, [r2, #0]
 8002086:	e00b      	b.n	80020a0 <HAL_RCC_OscConfig+0xd4>
 8002088:	4b6b      	ldr	r3, [pc, #428]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a6a      	ldr	r2, [pc, #424]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800208e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002092:	6013      	str	r3, [r2, #0]
 8002094:	4b68      	ldr	r3, [pc, #416]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	4a67      	ldr	r2, [pc, #412]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800209a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800209e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	685b      	ldr	r3, [r3, #4]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d013      	beq.n	80020d0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020a8:	f7ff fc1e 	bl	80018e8 <HAL_GetTick>
 80020ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020ae:	e008      	b.n	80020c2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020b0:	f7ff fc1a 	bl	80018e8 <HAL_GetTick>
 80020b4:	4602      	mov	r2, r0
 80020b6:	693b      	ldr	r3, [r7, #16]
 80020b8:	1ad3      	subs	r3, r2, r3
 80020ba:	2b64      	cmp	r3, #100	@ 0x64
 80020bc:	d901      	bls.n	80020c2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80020be:	2303      	movs	r3, #3
 80020c0:	e200      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020c2:	4b5d      	ldr	r3, [pc, #372]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	681b      	ldr	r3, [r3, #0]
 80020c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d0f0      	beq.n	80020b0 <HAL_RCC_OscConfig+0xe4>
 80020ce:	e014      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020d0:	f7ff fc0a 	bl	80018e8 <HAL_GetTick>
 80020d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020d6:	e008      	b.n	80020ea <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80020d8:	f7ff fc06 	bl	80018e8 <HAL_GetTick>
 80020dc:	4602      	mov	r2, r0
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	1ad3      	subs	r3, r2, r3
 80020e2:	2b64      	cmp	r3, #100	@ 0x64
 80020e4:	d901      	bls.n	80020ea <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80020e6:	2303      	movs	r3, #3
 80020e8:	e1ec      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80020ea:	4b53      	ldr	r3, [pc, #332]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d1f0      	bne.n	80020d8 <HAL_RCC_OscConfig+0x10c>
 80020f6:	e000      	b.n	80020fa <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80020f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	f003 0302 	and.w	r3, r3, #2
 8002102:	2b00      	cmp	r3, #0
 8002104:	d063      	beq.n	80021ce <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002106:	4b4c      	ldr	r3, [pc, #304]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002108:	685b      	ldr	r3, [r3, #4]
 800210a:	f003 030c 	and.w	r3, r3, #12
 800210e:	2b00      	cmp	r3, #0
 8002110:	d00b      	beq.n	800212a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002112:	4b49      	ldr	r3, [pc, #292]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002114:	685b      	ldr	r3, [r3, #4]
 8002116:	f003 030c 	and.w	r3, r3, #12
 800211a:	2b08      	cmp	r3, #8
 800211c:	d11c      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
 800211e:	4b46      	ldr	r3, [pc, #280]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002120:	685b      	ldr	r3, [r3, #4]
 8002122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002126:	2b00      	cmp	r3, #0
 8002128:	d116      	bne.n	8002158 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800212a:	4b43      	ldr	r3, [pc, #268]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800212c:	681b      	ldr	r3, [r3, #0]
 800212e:	f003 0302 	and.w	r3, r3, #2
 8002132:	2b00      	cmp	r3, #0
 8002134:	d005      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	691b      	ldr	r3, [r3, #16]
 800213a:	2b01      	cmp	r3, #1
 800213c:	d001      	beq.n	8002142 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800213e:	2301      	movs	r3, #1
 8002140:	e1c0      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002142:	4b3d      	ldr	r3, [pc, #244]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	695b      	ldr	r3, [r3, #20]
 800214e:	00db      	lsls	r3, r3, #3
 8002150:	4939      	ldr	r1, [pc, #228]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002152:	4313      	orrs	r3, r2
 8002154:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002156:	e03a      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d020      	beq.n	80021a2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002160:	4b36      	ldr	r3, [pc, #216]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 8002162:	2201      	movs	r2, #1
 8002164:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002166:	f7ff fbbf 	bl	80018e8 <HAL_GetTick>
 800216a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800216e:	f7ff fbbb 	bl	80018e8 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	693b      	ldr	r3, [r7, #16]
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e1a1      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002180:	4b2d      	ldr	r3, [pc, #180]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f003 0302 	and.w	r3, r3, #2
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800218c:	4b2a      	ldr	r3, [pc, #168]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	695b      	ldr	r3, [r3, #20]
 8002198:	00db      	lsls	r3, r3, #3
 800219a:	4927      	ldr	r1, [pc, #156]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 800219c:	4313      	orrs	r3, r2
 800219e:	600b      	str	r3, [r1, #0]
 80021a0:	e015      	b.n	80021ce <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021a2:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_RCC_OscConfig+0x270>)
 80021a4:	2200      	movs	r2, #0
 80021a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021a8:	f7ff fb9e 	bl	80018e8 <HAL_GetTick>
 80021ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021ae:	e008      	b.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021b0:	f7ff fb9a 	bl	80018e8 <HAL_GetTick>
 80021b4:	4602      	mov	r2, r0
 80021b6:	693b      	ldr	r3, [r7, #16]
 80021b8:	1ad3      	subs	r3, r2, r3
 80021ba:	2b02      	cmp	r3, #2
 80021bc:	d901      	bls.n	80021c2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80021be:	2303      	movs	r3, #3
 80021c0:	e180      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021c2:	4b1d      	ldr	r3, [pc, #116]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f003 0302 	and.w	r3, r3, #2
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d1f0      	bne.n	80021b0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f003 0308 	and.w	r3, r3, #8
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d03a      	beq.n	8002250 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d019      	beq.n	8002216 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80021e2:	4b17      	ldr	r3, [pc, #92]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 80021e4:	2201      	movs	r2, #1
 80021e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80021e8:	f7ff fb7e 	bl	80018e8 <HAL_GetTick>
 80021ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80021ee:	e008      	b.n	8002202 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80021f0:	f7ff fb7a 	bl	80018e8 <HAL_GetTick>
 80021f4:	4602      	mov	r2, r0
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	1ad3      	subs	r3, r2, r3
 80021fa:	2b02      	cmp	r3, #2
 80021fc:	d901      	bls.n	8002202 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80021fe:	2303      	movs	r3, #3
 8002200:	e160      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002202:	4b0d      	ldr	r3, [pc, #52]	@ (8002238 <HAL_RCC_OscConfig+0x26c>)
 8002204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002206:	f003 0302 	and.w	r3, r3, #2
 800220a:	2b00      	cmp	r3, #0
 800220c:	d0f0      	beq.n	80021f0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800220e:	2001      	movs	r0, #1
 8002210:	f000 face 	bl	80027b0 <RCC_Delay>
 8002214:	e01c      	b.n	8002250 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002216:	4b0a      	ldr	r3, [pc, #40]	@ (8002240 <HAL_RCC_OscConfig+0x274>)
 8002218:	2200      	movs	r2, #0
 800221a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800221c:	f7ff fb64 	bl	80018e8 <HAL_GetTick>
 8002220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002222:	e00f      	b.n	8002244 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002224:	f7ff fb60 	bl	80018e8 <HAL_GetTick>
 8002228:	4602      	mov	r2, r0
 800222a:	693b      	ldr	r3, [r7, #16]
 800222c:	1ad3      	subs	r3, r2, r3
 800222e:	2b02      	cmp	r3, #2
 8002230:	d908      	bls.n	8002244 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e146      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
 8002236:	bf00      	nop
 8002238:	40021000 	.word	0x40021000
 800223c:	42420000 	.word	0x42420000
 8002240:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002244:	4b92      	ldr	r3, [pc, #584]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d1e9      	bne.n	8002224 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0304 	and.w	r3, r3, #4
 8002258:	2b00      	cmp	r3, #0
 800225a:	f000 80a6 	beq.w	80023aa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800225e:	2300      	movs	r3, #0
 8002260:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002262:	4b8b      	ldr	r3, [pc, #556]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002264:	69db      	ldr	r3, [r3, #28]
 8002266:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800226a:	2b00      	cmp	r3, #0
 800226c:	d10d      	bne.n	800228a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800226e:	4b88      	ldr	r3, [pc, #544]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002270:	69db      	ldr	r3, [r3, #28]
 8002272:	4a87      	ldr	r2, [pc, #540]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002274:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002278:	61d3      	str	r3, [r2, #28]
 800227a:	4b85      	ldr	r3, [pc, #532]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800227c:	69db      	ldr	r3, [r3, #28]
 800227e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002282:	60bb      	str	r3, [r7, #8]
 8002284:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002286:	2301      	movs	r3, #1
 8002288:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800228a:	4b82      	ldr	r3, [pc, #520]	@ (8002494 <HAL_RCC_OscConfig+0x4c8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002292:	2b00      	cmp	r3, #0
 8002294:	d118      	bne.n	80022c8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002296:	4b7f      	ldr	r3, [pc, #508]	@ (8002494 <HAL_RCC_OscConfig+0x4c8>)
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	4a7e      	ldr	r2, [pc, #504]	@ (8002494 <HAL_RCC_OscConfig+0x4c8>)
 800229c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022a0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022a2:	f7ff fb21 	bl	80018e8 <HAL_GetTick>
 80022a6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022a8:	e008      	b.n	80022bc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022aa:	f7ff fb1d 	bl	80018e8 <HAL_GetTick>
 80022ae:	4602      	mov	r2, r0
 80022b0:	693b      	ldr	r3, [r7, #16]
 80022b2:	1ad3      	subs	r3, r2, r3
 80022b4:	2b64      	cmp	r3, #100	@ 0x64
 80022b6:	d901      	bls.n	80022bc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80022b8:	2303      	movs	r3, #3
 80022ba:	e103      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022bc:	4b75      	ldr	r3, [pc, #468]	@ (8002494 <HAL_RCC_OscConfig+0x4c8>)
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d0f0      	beq.n	80022aa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	68db      	ldr	r3, [r3, #12]
 80022cc:	2b01      	cmp	r3, #1
 80022ce:	d106      	bne.n	80022de <HAL_RCC_OscConfig+0x312>
 80022d0:	4b6f      	ldr	r3, [pc, #444]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022d2:	6a1b      	ldr	r3, [r3, #32]
 80022d4:	4a6e      	ldr	r2, [pc, #440]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022d6:	f043 0301 	orr.w	r3, r3, #1
 80022da:	6213      	str	r3, [r2, #32]
 80022dc:	e02d      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	68db      	ldr	r3, [r3, #12]
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d10c      	bne.n	8002300 <HAL_RCC_OscConfig+0x334>
 80022e6:	4b6a      	ldr	r3, [pc, #424]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022e8:	6a1b      	ldr	r3, [r3, #32]
 80022ea:	4a69      	ldr	r2, [pc, #420]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022ec:	f023 0301 	bic.w	r3, r3, #1
 80022f0:	6213      	str	r3, [r2, #32]
 80022f2:	4b67      	ldr	r3, [pc, #412]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	4a66      	ldr	r2, [pc, #408]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80022f8:	f023 0304 	bic.w	r3, r3, #4
 80022fc:	6213      	str	r3, [r2, #32]
 80022fe:	e01c      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	68db      	ldr	r3, [r3, #12]
 8002304:	2b05      	cmp	r3, #5
 8002306:	d10c      	bne.n	8002322 <HAL_RCC_OscConfig+0x356>
 8002308:	4b61      	ldr	r3, [pc, #388]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800230a:	6a1b      	ldr	r3, [r3, #32]
 800230c:	4a60      	ldr	r2, [pc, #384]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800230e:	f043 0304 	orr.w	r3, r3, #4
 8002312:	6213      	str	r3, [r2, #32]
 8002314:	4b5e      	ldr	r3, [pc, #376]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002316:	6a1b      	ldr	r3, [r3, #32]
 8002318:	4a5d      	ldr	r2, [pc, #372]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800231a:	f043 0301 	orr.w	r3, r3, #1
 800231e:	6213      	str	r3, [r2, #32]
 8002320:	e00b      	b.n	800233a <HAL_RCC_OscConfig+0x36e>
 8002322:	4b5b      	ldr	r3, [pc, #364]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002324:	6a1b      	ldr	r3, [r3, #32]
 8002326:	4a5a      	ldr	r2, [pc, #360]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002328:	f023 0301 	bic.w	r3, r3, #1
 800232c:	6213      	str	r3, [r2, #32]
 800232e:	4b58      	ldr	r3, [pc, #352]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002330:	6a1b      	ldr	r3, [r3, #32]
 8002332:	4a57      	ldr	r2, [pc, #348]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002334:	f023 0304 	bic.w	r3, r3, #4
 8002338:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	68db      	ldr	r3, [r3, #12]
 800233e:	2b00      	cmp	r3, #0
 8002340:	d015      	beq.n	800236e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002342:	f7ff fad1 	bl	80018e8 <HAL_GetTick>
 8002346:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002348:	e00a      	b.n	8002360 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800234a:	f7ff facd 	bl	80018e8 <HAL_GetTick>
 800234e:	4602      	mov	r2, r0
 8002350:	693b      	ldr	r3, [r7, #16]
 8002352:	1ad3      	subs	r3, r2, r3
 8002354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002358:	4293      	cmp	r3, r2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e0b1      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002360:	4b4b      	ldr	r3, [pc, #300]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002362:	6a1b      	ldr	r3, [r3, #32]
 8002364:	f003 0302 	and.w	r3, r3, #2
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0ee      	beq.n	800234a <HAL_RCC_OscConfig+0x37e>
 800236c:	e014      	b.n	8002398 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800236e:	f7ff fabb 	bl	80018e8 <HAL_GetTick>
 8002372:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002374:	e00a      	b.n	800238c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002376:	f7ff fab7 	bl	80018e8 <HAL_GetTick>
 800237a:	4602      	mov	r2, r0
 800237c:	693b      	ldr	r3, [r7, #16]
 800237e:	1ad3      	subs	r3, r2, r3
 8002380:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002384:	4293      	cmp	r3, r2
 8002386:	d901      	bls.n	800238c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002388:	2303      	movs	r3, #3
 800238a:	e09b      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800238c:	4b40      	ldr	r3, [pc, #256]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	f003 0302 	and.w	r3, r3, #2
 8002394:	2b00      	cmp	r3, #0
 8002396:	d1ee      	bne.n	8002376 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002398:	7dfb      	ldrb	r3, [r7, #23]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d105      	bne.n	80023aa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800239e:	4b3c      	ldr	r3, [pc, #240]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	4a3b      	ldr	r2, [pc, #236]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80023a4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023a8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	69db      	ldr	r3, [r3, #28]
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	f000 8087 	beq.w	80024c2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80023b4:	4b36      	ldr	r3, [pc, #216]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	f003 030c 	and.w	r3, r3, #12
 80023bc:	2b08      	cmp	r3, #8
 80023be:	d061      	beq.n	8002484 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	69db      	ldr	r3, [r3, #28]
 80023c4:	2b02      	cmp	r3, #2
 80023c6:	d146      	bne.n	8002456 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023c8:	4b33      	ldr	r3, [pc, #204]	@ (8002498 <HAL_RCC_OscConfig+0x4cc>)
 80023ca:	2200      	movs	r2, #0
 80023cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023ce:	f7ff fa8b 	bl	80018e8 <HAL_GetTick>
 80023d2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023d4:	e008      	b.n	80023e8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80023d6:	f7ff fa87 	bl	80018e8 <HAL_GetTick>
 80023da:	4602      	mov	r2, r0
 80023dc:	693b      	ldr	r3, [r7, #16]
 80023de:	1ad3      	subs	r3, r2, r3
 80023e0:	2b02      	cmp	r3, #2
 80023e2:	d901      	bls.n	80023e8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80023e4:	2303      	movs	r3, #3
 80023e6:	e06d      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80023e8:	4b29      	ldr	r3, [pc, #164]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80023f0:	2b00      	cmp	r3, #0
 80023f2:	d1f0      	bne.n	80023d6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6a1b      	ldr	r3, [r3, #32]
 80023f8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023fc:	d108      	bne.n	8002410 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80023fe:	4b24      	ldr	r3, [pc, #144]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002400:	685b      	ldr	r3, [r3, #4]
 8002402:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	4921      	ldr	r1, [pc, #132]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800240c:	4313      	orrs	r3, r2
 800240e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002410:	4b1f      	ldr	r3, [pc, #124]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	6a19      	ldr	r1, [r3, #32]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002420:	430b      	orrs	r3, r1
 8002422:	491b      	ldr	r1, [pc, #108]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002424:	4313      	orrs	r3, r2
 8002426:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002428:	4b1b      	ldr	r3, [pc, #108]	@ (8002498 <HAL_RCC_OscConfig+0x4cc>)
 800242a:	2201      	movs	r2, #1
 800242c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800242e:	f7ff fa5b 	bl	80018e8 <HAL_GetTick>
 8002432:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002434:	e008      	b.n	8002448 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002436:	f7ff fa57 	bl	80018e8 <HAL_GetTick>
 800243a:	4602      	mov	r2, r0
 800243c:	693b      	ldr	r3, [r7, #16]
 800243e:	1ad3      	subs	r3, r2, r3
 8002440:	2b02      	cmp	r3, #2
 8002442:	d901      	bls.n	8002448 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002444:	2303      	movs	r3, #3
 8002446:	e03d      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002448:	4b11      	ldr	r3, [pc, #68]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002450:	2b00      	cmp	r3, #0
 8002452:	d0f0      	beq.n	8002436 <HAL_RCC_OscConfig+0x46a>
 8002454:	e035      	b.n	80024c2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002456:	4b10      	ldr	r3, [pc, #64]	@ (8002498 <HAL_RCC_OscConfig+0x4cc>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800245c:	f7ff fa44 	bl	80018e8 <HAL_GetTick>
 8002460:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002462:	e008      	b.n	8002476 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002464:	f7ff fa40 	bl	80018e8 <HAL_GetTick>
 8002468:	4602      	mov	r2, r0
 800246a:	693b      	ldr	r3, [r7, #16]
 800246c:	1ad3      	subs	r3, r2, r3
 800246e:	2b02      	cmp	r3, #2
 8002470:	d901      	bls.n	8002476 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002472:	2303      	movs	r3, #3
 8002474:	e026      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002476:	4b06      	ldr	r3, [pc, #24]	@ (8002490 <HAL_RCC_OscConfig+0x4c4>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d1f0      	bne.n	8002464 <HAL_RCC_OscConfig+0x498>
 8002482:	e01e      	b.n	80024c2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	69db      	ldr	r3, [r3, #28]
 8002488:	2b01      	cmp	r3, #1
 800248a:	d107      	bne.n	800249c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800248c:	2301      	movs	r3, #1
 800248e:	e019      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
 8002490:	40021000 	.word	0x40021000
 8002494:	40007000 	.word	0x40007000
 8002498:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_RCC_OscConfig+0x500>)
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6a1b      	ldr	r3, [r3, #32]
 80024ac:	429a      	cmp	r2, r3
 80024ae:	d106      	bne.n	80024be <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024ba:	429a      	cmp	r2, r3
 80024bc:	d001      	beq.n	80024c2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80024be:	2301      	movs	r3, #1
 80024c0:	e000      	b.n	80024c4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80024c2:	2300      	movs	r3, #0
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3718      	adds	r7, #24
 80024c8:	46bd      	mov	sp, r7
 80024ca:	bd80      	pop	{r7, pc}
 80024cc:	40021000 	.word	0x40021000

080024d0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b084      	sub	sp, #16
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
 80024d8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	2b00      	cmp	r3, #0
 80024de:	d101      	bne.n	80024e4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80024e0:	2301      	movs	r3, #1
 80024e2:	e0d0      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80024e4:	4b6a      	ldr	r3, [pc, #424]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d910      	bls.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b67      	ldr	r3, [pc, #412]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f023 0207 	bic.w	r2, r3, #7
 80024fa:	4965      	ldr	r1, [pc, #404]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	4313      	orrs	r3, r2
 8002500:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002502:	4b63      	ldr	r3, [pc, #396]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	683a      	ldr	r2, [r7, #0]
 800250c:	429a      	cmp	r2, r3
 800250e:	d001      	beq.n	8002514 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002510:	2301      	movs	r3, #1
 8002512:	e0b8      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f003 0302 	and.w	r3, r3, #2
 800251c:	2b00      	cmp	r3, #0
 800251e:	d020      	beq.n	8002562 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0304 	and.w	r3, r3, #4
 8002528:	2b00      	cmp	r3, #0
 800252a:	d005      	beq.n	8002538 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800252c:	4b59      	ldr	r3, [pc, #356]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800252e:	685b      	ldr	r3, [r3, #4]
 8002530:	4a58      	ldr	r2, [pc, #352]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002532:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002536:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f003 0308 	and.w	r3, r3, #8
 8002540:	2b00      	cmp	r3, #0
 8002542:	d005      	beq.n	8002550 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002544:	4b53      	ldr	r3, [pc, #332]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002546:	685b      	ldr	r3, [r3, #4]
 8002548:	4a52      	ldr	r2, [pc, #328]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800254e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002550:	4b50      	ldr	r3, [pc, #320]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	689b      	ldr	r3, [r3, #8]
 800255c:	494d      	ldr	r1, [pc, #308]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800255e:	4313      	orrs	r3, r2
 8002560:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f003 0301 	and.w	r3, r3, #1
 800256a:	2b00      	cmp	r3, #0
 800256c:	d040      	beq.n	80025f0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	685b      	ldr	r3, [r3, #4]
 8002572:	2b01      	cmp	r3, #1
 8002574:	d107      	bne.n	8002586 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002576:	4b47      	ldr	r3, [pc, #284]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002578:	681b      	ldr	r3, [r3, #0]
 800257a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800257e:	2b00      	cmp	r3, #0
 8002580:	d115      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002582:	2301      	movs	r3, #1
 8002584:	e07f      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002586:	687b      	ldr	r3, [r7, #4]
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	2b02      	cmp	r3, #2
 800258c:	d107      	bne.n	800259e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800258e:	4b41      	ldr	r3, [pc, #260]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002596:	2b00      	cmp	r3, #0
 8002598:	d109      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800259a:	2301      	movs	r3, #1
 800259c:	e073      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800259e:	4b3d      	ldr	r3, [pc, #244]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d101      	bne.n	80025ae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e06b      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025ae:	4b39      	ldr	r3, [pc, #228]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025b0:	685b      	ldr	r3, [r3, #4]
 80025b2:	f023 0203 	bic.w	r2, r3, #3
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	685b      	ldr	r3, [r3, #4]
 80025ba:	4936      	ldr	r1, [pc, #216]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025bc:	4313      	orrs	r3, r2
 80025be:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80025c0:	f7ff f992 	bl	80018e8 <HAL_GetTick>
 80025c4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025c6:	e00a      	b.n	80025de <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80025c8:	f7ff f98e 	bl	80018e8 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025d6:	4293      	cmp	r3, r2
 80025d8:	d901      	bls.n	80025de <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80025da:	2303      	movs	r3, #3
 80025dc:	e053      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80025de:	4b2d      	ldr	r3, [pc, #180]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	f003 020c 	and.w	r2, r3, #12
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	429a      	cmp	r2, r3
 80025ee:	d1eb      	bne.n	80025c8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80025f0:	4b27      	ldr	r3, [pc, #156]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 80025f2:	681b      	ldr	r3, [r3, #0]
 80025f4:	f003 0307 	and.w	r3, r3, #7
 80025f8:	683a      	ldr	r2, [r7, #0]
 80025fa:	429a      	cmp	r2, r3
 80025fc:	d210      	bcs.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80025fe:	4b24      	ldr	r3, [pc, #144]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f023 0207 	bic.w	r2, r3, #7
 8002606:	4922      	ldr	r1, [pc, #136]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	4313      	orrs	r3, r2
 800260c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800260e:	4b20      	ldr	r3, [pc, #128]	@ (8002690 <HAL_RCC_ClockConfig+0x1c0>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f003 0307 	and.w	r3, r3, #7
 8002616:	683a      	ldr	r2, [r7, #0]
 8002618:	429a      	cmp	r2, r3
 800261a:	d001      	beq.n	8002620 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800261c:	2301      	movs	r3, #1
 800261e:	e032      	b.n	8002686 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	f003 0304 	and.w	r3, r3, #4
 8002628:	2b00      	cmp	r3, #0
 800262a:	d008      	beq.n	800263e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800262c:	4b19      	ldr	r3, [pc, #100]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800262e:	685b      	ldr	r3, [r3, #4]
 8002630:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002634:	687b      	ldr	r3, [r7, #4]
 8002636:	68db      	ldr	r3, [r3, #12]
 8002638:	4916      	ldr	r1, [pc, #88]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800263a:	4313      	orrs	r3, r2
 800263c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f003 0308 	and.w	r3, r3, #8
 8002646:	2b00      	cmp	r3, #0
 8002648:	d009      	beq.n	800265e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800264a:	4b12      	ldr	r3, [pc, #72]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	691b      	ldr	r3, [r3, #16]
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	490e      	ldr	r1, [pc, #56]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 800265a:	4313      	orrs	r3, r2
 800265c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800265e:	f000 f821 	bl	80026a4 <HAL_RCC_GetSysClockFreq>
 8002662:	4602      	mov	r2, r0
 8002664:	4b0b      	ldr	r3, [pc, #44]	@ (8002694 <HAL_RCC_ClockConfig+0x1c4>)
 8002666:	685b      	ldr	r3, [r3, #4]
 8002668:	091b      	lsrs	r3, r3, #4
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	490a      	ldr	r1, [pc, #40]	@ (8002698 <HAL_RCC_ClockConfig+0x1c8>)
 8002670:	5ccb      	ldrb	r3, [r1, r3]
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	4a09      	ldr	r2, [pc, #36]	@ (800269c <HAL_RCC_ClockConfig+0x1cc>)
 8002678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800267a:	4b09      	ldr	r3, [pc, #36]	@ (80026a0 <HAL_RCC_ClockConfig+0x1d0>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	4618      	mov	r0, r3
 8002680:	f7ff f902 	bl	8001888 <HAL_InitTick>

  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3710      	adds	r7, #16
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40022000 	.word	0x40022000
 8002694:	40021000 	.word	0x40021000
 8002698:	0800af20 	.word	0x0800af20
 800269c:	20000000 	.word	0x20000000
 80026a0:	20000004 	.word	0x20000004

080026a4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026a4:	b480      	push	{r7}
 80026a6:	b087      	sub	sp, #28
 80026a8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026aa:	2300      	movs	r3, #0
 80026ac:	60fb      	str	r3, [r7, #12]
 80026ae:	2300      	movs	r3, #0
 80026b0:	60bb      	str	r3, [r7, #8]
 80026b2:	2300      	movs	r3, #0
 80026b4:	617b      	str	r3, [r7, #20]
 80026b6:	2300      	movs	r3, #0
 80026b8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80026ba:	2300      	movs	r3, #0
 80026bc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80026be:	4b1e      	ldr	r3, [pc, #120]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x94>)
 80026c0:	685b      	ldr	r3, [r3, #4]
 80026c2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	f003 030c 	and.w	r3, r3, #12
 80026ca:	2b04      	cmp	r3, #4
 80026cc:	d002      	beq.n	80026d4 <HAL_RCC_GetSysClockFreq+0x30>
 80026ce:	2b08      	cmp	r3, #8
 80026d0:	d003      	beq.n	80026da <HAL_RCC_GetSysClockFreq+0x36>
 80026d2:	e027      	b.n	8002724 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80026d4:	4b19      	ldr	r3, [pc, #100]	@ (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 80026d6:	613b      	str	r3, [r7, #16]
      break;
 80026d8:	e027      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	0c9b      	lsrs	r3, r3, #18
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	4a17      	ldr	r2, [pc, #92]	@ (8002740 <HAL_RCC_GetSysClockFreq+0x9c>)
 80026e4:	5cd3      	ldrb	r3, [r2, r3]
 80026e6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d010      	beq.n	8002714 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80026f2:	4b11      	ldr	r3, [pc, #68]	@ (8002738 <HAL_RCC_GetSysClockFreq+0x94>)
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	0c5b      	lsrs	r3, r3, #17
 80026f8:	f003 0301 	and.w	r3, r3, #1
 80026fc:	4a11      	ldr	r2, [pc, #68]	@ (8002744 <HAL_RCC_GetSysClockFreq+0xa0>)
 80026fe:	5cd3      	ldrb	r3, [r2, r3]
 8002700:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	4a0d      	ldr	r2, [pc, #52]	@ (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 8002706:	fb03 f202 	mul.w	r2, r3, r2
 800270a:	68bb      	ldr	r3, [r7, #8]
 800270c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002710:	617b      	str	r3, [r7, #20]
 8002712:	e004      	b.n	800271e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	4a0c      	ldr	r2, [pc, #48]	@ (8002748 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002718:	fb02 f303 	mul.w	r3, r2, r3
 800271c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	613b      	str	r3, [r7, #16]
      break;
 8002722:	e002      	b.n	800272a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002724:	4b05      	ldr	r3, [pc, #20]	@ (800273c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	613b      	str	r3, [r7, #16]
      break;
 8002728:	bf00      	nop
    }
  }
  return sysclockfreq;
 800272a:	693b      	ldr	r3, [r7, #16]
}
 800272c:	4618      	mov	r0, r3
 800272e:	371c      	adds	r7, #28
 8002730:	46bd      	mov	sp, r7
 8002732:	bc80      	pop	{r7}
 8002734:	4770      	bx	lr
 8002736:	bf00      	nop
 8002738:	40021000 	.word	0x40021000
 800273c:	007a1200 	.word	0x007a1200
 8002740:	0800af38 	.word	0x0800af38
 8002744:	0800af48 	.word	0x0800af48
 8002748:	003d0900 	.word	0x003d0900

0800274c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800274c:	b480      	push	{r7}
 800274e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002750:	4b02      	ldr	r3, [pc, #8]	@ (800275c <HAL_RCC_GetHCLKFreq+0x10>)
 8002752:	681b      	ldr	r3, [r3, #0]
}
 8002754:	4618      	mov	r0, r3
 8002756:	46bd      	mov	sp, r7
 8002758:	bc80      	pop	{r7}
 800275a:	4770      	bx	lr
 800275c:	20000000 	.word	0x20000000

08002760 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002764:	f7ff fff2 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002768:	4602      	mov	r2, r0
 800276a:	4b05      	ldr	r3, [pc, #20]	@ (8002780 <HAL_RCC_GetPCLK1Freq+0x20>)
 800276c:	685b      	ldr	r3, [r3, #4]
 800276e:	0a1b      	lsrs	r3, r3, #8
 8002770:	f003 0307 	and.w	r3, r3, #7
 8002774:	4903      	ldr	r1, [pc, #12]	@ (8002784 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002776:	5ccb      	ldrb	r3, [r1, r3]
 8002778:	fa22 f303 	lsr.w	r3, r2, r3
}
 800277c:	4618      	mov	r0, r3
 800277e:	bd80      	pop	{r7, pc}
 8002780:	40021000 	.word	0x40021000
 8002784:	0800af30 	.word	0x0800af30

08002788 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002788:	b580      	push	{r7, lr}
 800278a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800278c:	f7ff ffde 	bl	800274c <HAL_RCC_GetHCLKFreq>
 8002790:	4602      	mov	r2, r0
 8002792:	4b05      	ldr	r3, [pc, #20]	@ (80027a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002794:	685b      	ldr	r3, [r3, #4]
 8002796:	0adb      	lsrs	r3, r3, #11
 8002798:	f003 0307 	and.w	r3, r3, #7
 800279c:	4903      	ldr	r1, [pc, #12]	@ (80027ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800279e:	5ccb      	ldrb	r3, [r1, r3]
 80027a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80027a4:	4618      	mov	r0, r3
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40021000 	.word	0x40021000
 80027ac:	0800af30 	.word	0x0800af30

080027b0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80027b0:	b480      	push	{r7}
 80027b2:	b085      	sub	sp, #20
 80027b4:	af00      	add	r7, sp, #0
 80027b6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027b8:	4b0a      	ldr	r3, [pc, #40]	@ (80027e4 <RCC_Delay+0x34>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a0a      	ldr	r2, [pc, #40]	@ (80027e8 <RCC_Delay+0x38>)
 80027be:	fba2 2303 	umull	r2, r3, r2, r3
 80027c2:	0a5b      	lsrs	r3, r3, #9
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	fb02 f303 	mul.w	r3, r2, r3
 80027ca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027cc:	bf00      	nop
  }
  while (Delay --);
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	1e5a      	subs	r2, r3, #1
 80027d2:	60fa      	str	r2, [r7, #12]
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	d1f9      	bne.n	80027cc <RCC_Delay+0x1c>
}
 80027d8:	bf00      	nop
 80027da:	bf00      	nop
 80027dc:	3714      	adds	r7, #20
 80027de:	46bd      	mov	sp, r7
 80027e0:	bc80      	pop	{r7}
 80027e2:	4770      	bx	lr
 80027e4:	20000000 	.word	0x20000000
 80027e8:	10624dd3 	.word	0x10624dd3

080027ec <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80027ec:	b580      	push	{r7, lr}
 80027ee:	b088      	sub	sp, #32
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  static const uint8_t aPLLMULFactorTable[16U] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
  static const uint8_t aPredivFactorTable[2U] = {1, 2};

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 80027f4:	2300      	movs	r3, #0
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	2300      	movs	r3, #0
 80027fa:	61fb      	str	r3, [r7, #28]
 80027fc:	2300      	movs	r3, #0
 80027fe:	613b      	str	r3, [r7, #16]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 8002800:	2300      	movs	r3, #0
 8002802:	60fb      	str	r3, [r7, #12]
 8002804:	2300      	movs	r3, #0
 8002806:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	2b10      	cmp	r3, #16
 800280c:	d00a      	beq.n	8002824 <HAL_RCCEx_GetPeriphCLKFreq+0x38>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2b10      	cmp	r3, #16
 8002812:	f200 808a 	bhi.w	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	2b01      	cmp	r3, #1
 800281a:	d045      	beq.n	80028a8 <HAL_RCCEx_GetPeriphCLKFreq+0xbc>
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2b02      	cmp	r3, #2
 8002820:	d075      	beq.n	800290e <HAL_RCCEx_GetPeriphCLKFreq+0x122>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8002822:	e082      	b.n	800292a <HAL_RCCEx_GetPeriphCLKFreq+0x13e>
      temp_reg = RCC->CFGR;
 8002824:	4b46      	ldr	r3, [pc, #280]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	60fb      	str	r3, [r7, #12]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 800282a:	4b45      	ldr	r3, [pc, #276]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8002832:	2b00      	cmp	r3, #0
 8002834:	d07b      	beq.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002836:	68fb      	ldr	r3, [r7, #12]
 8002838:	0c9b      	lsrs	r3, r3, #18
 800283a:	f003 030f 	and.w	r3, r3, #15
 800283e:	4a41      	ldr	r2, [pc, #260]	@ (8002944 <HAL_RCCEx_GetPeriphCLKFreq+0x158>)
 8002840:	5cd3      	ldrb	r3, [r2, r3]
 8002842:	613b      	str	r3, [r7, #16]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800284a:	2b00      	cmp	r3, #0
 800284c:	d015      	beq.n	800287a <HAL_RCCEx_GetPeriphCLKFreq+0x8e>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800284e:	4b3c      	ldr	r3, [pc, #240]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	0c5b      	lsrs	r3, r3, #17
 8002854:	f003 0301 	and.w	r3, r3, #1
 8002858:	4a3b      	ldr	r2, [pc, #236]	@ (8002948 <HAL_RCCEx_GetPeriphCLKFreq+0x15c>)
 800285a:	5cd3      	ldrb	r3, [r2, r3]
 800285c:	617b      	str	r3, [r7, #20]
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d00d      	beq.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8002868:	4a38      	ldr	r2, [pc, #224]	@ (800294c <HAL_RCCEx_GetPeriphCLKFreq+0x160>)
 800286a:	697b      	ldr	r3, [r7, #20]
 800286c:	fbb2 f2f3 	udiv	r2, r2, r3
 8002870:	693b      	ldr	r3, [r7, #16]
 8002872:	fb02 f303 	mul.w	r3, r2, r3
 8002876:	61fb      	str	r3, [r7, #28]
 8002878:	e004      	b.n	8002884 <HAL_RCCEx_GetPeriphCLKFreq+0x98>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 800287a:	693b      	ldr	r3, [r7, #16]
 800287c:	4a34      	ldr	r2, [pc, #208]	@ (8002950 <HAL_RCCEx_GetPeriphCLKFreq+0x164>)
 800287e:	fb02 f303 	mul.w	r3, r2, r3
 8002882:	61fb      	str	r3, [r7, #28]
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 8002884:	4b2e      	ldr	r3, [pc, #184]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800288c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002890:	d102      	bne.n	8002898 <HAL_RCCEx_GetPeriphCLKFreq+0xac>
          frequency = pllclk;
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	61bb      	str	r3, [r7, #24]
      break;
 8002896:	e04a      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
          frequency = (pllclk * 2) / 3;
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	4a2d      	ldr	r2, [pc, #180]	@ (8002954 <HAL_RCCEx_GetPeriphCLKFreq+0x168>)
 800289e:	fba2 2303 	umull	r2, r3, r2, r3
 80028a2:	085b      	lsrs	r3, r3, #1
 80028a4:	61bb      	str	r3, [r7, #24]
      break;
 80028a6:	e042      	b.n	800292e <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      temp_reg = RCC->BDCR;
 80028a8:	4b25      	ldr	r3, [pc, #148]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028aa:	6a1b      	ldr	r3, [r3, #32]
 80028ac:	60fb      	str	r3, [r7, #12]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028b4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80028b8:	d108      	bne.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	f003 0302 	and.w	r3, r3, #2
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_RCCEx_GetPeriphCLKFreq+0xe0>
        frequency = LSE_VALUE;
 80028c4:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80028c8:	61bb      	str	r3, [r7, #24]
 80028ca:	e01f      	b.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028d2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80028d6:	d109      	bne.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80028d8:	4b19      	ldr	r3, [pc, #100]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80028dc:	f003 0302 	and.w	r3, r3, #2
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSI_VALUE;
 80028e4:	f649 4340 	movw	r3, #40000	@ 0x9c40
 80028e8:	61bb      	str	r3, [r7, #24]
 80028ea:	e00f      	b.n	800290c <HAL_RCCEx_GetPeriphCLKFreq+0x120>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80028f2:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80028f6:	d11c      	bne.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 80028f8:	4b11      	ldr	r3, [pc, #68]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002900:	2b00      	cmp	r3, #0
 8002902:	d016      	beq.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
        frequency = HSE_VALUE / 128U;
 8002904:	f24f 4324 	movw	r3, #62500	@ 0xf424
 8002908:	61bb      	str	r3, [r7, #24]
      break;
 800290a:	e012      	b.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
 800290c:	e011      	b.n	8002932 <HAL_RCCEx_GetPeriphCLKFreq+0x146>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800290e:	f7ff ff3b 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 8002912:	4602      	mov	r2, r0
 8002914:	4b0a      	ldr	r3, [pc, #40]	@ (8002940 <HAL_RCCEx_GetPeriphCLKFreq+0x154>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	0b9b      	lsrs	r3, r3, #14
 800291a:	f003 0303 	and.w	r3, r3, #3
 800291e:	3301      	adds	r3, #1
 8002920:	005b      	lsls	r3, r3, #1
 8002922:	fbb2 f3f3 	udiv	r3, r2, r3
 8002926:	61bb      	str	r3, [r7, #24]
      break;
 8002928:	e004      	b.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800292a:	bf00      	nop
 800292c:	e002      	b.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 800292e:	bf00      	nop
 8002930:	e000      	b.n	8002934 <HAL_RCCEx_GetPeriphCLKFreq+0x148>
      break;
 8002932:	bf00      	nop
    }
  }
  return (frequency);
 8002934:	69bb      	ldr	r3, [r7, #24]
}
 8002936:	4618      	mov	r0, r3
 8002938:	3720      	adds	r7, #32
 800293a:	46bd      	mov	sp, r7
 800293c:	bd80      	pop	{r7, pc}
 800293e:	bf00      	nop
 8002940:	40021000 	.word	0x40021000
 8002944:	0800af4c 	.word	0x0800af4c
 8002948:	0800af5c 	.word	0x0800af5c
 800294c:	007a1200 	.word	0x007a1200
 8002950:	003d0900 	.word	0x003d0900
 8002954:	aaaaaaab 	.word	0xaaaaaaab

08002958 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8002960:	2300      	movs	r3, #0
 8002962:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2b00      	cmp	r3, #0
 8002968:	d101      	bne.n	800296e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800296a:	2301      	movs	r3, #1
 800296c:	e07a      	b.n	8002a64 <HAL_RTC_Init+0x10c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	7c5b      	ldrb	r3, [r3, #17]
 8002972:	b2db      	uxtb	r3, r3
 8002974:	2b00      	cmp	r3, #0
 8002976:	d105      	bne.n	8002984 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	2200      	movs	r2, #0
 800297c:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800297e:	6878      	ldr	r0, [r7, #4]
 8002980:	f7fe fdbe 	bl	8001500 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800298a:	6878      	ldr	r0, [r7, #4]
 800298c:	f000 faea 	bl	8002f64 <HAL_RTC_WaitForSynchro>
 8002990:	4603      	mov	r3, r0
 8002992:	2b00      	cmp	r3, #0
 8002994:	d004      	beq.n	80029a0 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2204      	movs	r2, #4
 800299a:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e061      	b.n	8002a64 <HAL_RTC_Init+0x10c>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80029a0:	6878      	ldr	r0, [r7, #4]
 80029a2:	f000 fba3 	bl	80030ec <RTC_EnterInitMode>
 80029a6:	4603      	mov	r3, r0
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d004      	beq.n	80029b6 <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2204      	movs	r2, #4
 80029b0:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e056      	b.n	8002a64 <HAL_RTC_Init+0x10c>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	685a      	ldr	r2, [r3, #4]
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	f022 0207 	bic.w	r2, r2, #7
 80029c4:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d005      	beq.n	80029da <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80029ce:	4b27      	ldr	r3, [pc, #156]	@ (8002a6c <HAL_RTC_Init+0x114>)
 80029d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80029d2:	4a26      	ldr	r2, [pc, #152]	@ (8002a6c <HAL_RTC_Init+0x114>)
 80029d4:	f023 0301 	bic.w	r3, r3, #1
 80029d8:	6313      	str	r3, [r2, #48]	@ 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80029da:	4b24      	ldr	r3, [pc, #144]	@ (8002a6c <HAL_RTC_Init+0x114>)
 80029dc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029de:	f423 7260 	bic.w	r2, r3, #896	@ 0x380
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	4921      	ldr	r1, [pc, #132]	@ (8002a6c <HAL_RTC_Init+0x114>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	62cb      	str	r3, [r1, #44]	@ 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	685b      	ldr	r3, [r3, #4]
 80029f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029f4:	d003      	beq.n	80029fe <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	685b      	ldr	r3, [r3, #4]
 80029fa:	60fb      	str	r3, [r7, #12]
 80029fc:	e00e      	b.n	8002a1c <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 80029fe:	2001      	movs	r0, #1
 8002a00:	f7ff fef4 	bl	80027ec <HAL_RCCEx_GetPeriphCLKFreq>
 8002a04:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d104      	bne.n	8002a16 <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8002a0c:	687b      	ldr	r3, [r7, #4]
 8002a0e:	2204      	movs	r2, #4
 8002a10:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 8002a12:	2301      	movs	r3, #1
 8002a14:	e026      	b.n	8002a64 <HAL_RTC_Init+0x10c>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	3b01      	subs	r3, #1
 8002a1a:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    WRITE_REG(hrtc->Instance->PRLH, ((prescaler >> 16U) & RTC_PRLH_PRL));
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	0c1a      	lsrs	r2, r3, #16
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f002 020f 	and.w	r2, r2, #15
 8002a28:	609a      	str	r2, [r3, #8]
    WRITE_REG(hrtc->Instance->PRLL, (prescaler & RTC_PRLL_PRL));
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	68fa      	ldr	r2, [r7, #12]
 8002a30:	b292      	uxth	r2, r2
 8002a32:	60da      	str	r2, [r3, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f000 fb81 	bl	800313c <RTC_ExitInitMode>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d004      	beq.n	8002a4a <HAL_RTC_Init+0xf2>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	2204      	movs	r2, #4
 8002a44:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8002a46:	2301      	movs	r3, #1
 8002a48:	e00c      	b.n	8002a64 <HAL_RTC_Init+0x10c>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2200      	movs	r2, #0
 8002a4e:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2201      	movs	r2, #1
 8002a54:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	2201      	movs	r2, #1
 8002a5a:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	2201      	movs	r2, #1
 8002a60:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 8002a62:	2300      	movs	r3, #0
  }
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3710      	adds	r7, #16
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}
 8002a6c:	40006c00 	.word	0x40006c00

08002a70 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002a70:	b590      	push	{r4, r7, lr}
 8002a72:	b087      	sub	sp, #28
 8002a74:	af00      	add	r7, sp, #0
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	60b9      	str	r1, [r7, #8]
 8002a7a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]
 8002a80:	2300      	movs	r3, #0
 8002a82:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d002      	beq.n	8002a90 <HAL_RTC_SetTime+0x20>
 8002a8a:	68bb      	ldr	r3, [r7, #8]
 8002a8c:	2b00      	cmp	r3, #0
 8002a8e:	d101      	bne.n	8002a94 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e080      	b.n	8002b96 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	7c1b      	ldrb	r3, [r3, #16]
 8002a98:	2b01      	cmp	r3, #1
 8002a9a:	d101      	bne.n	8002aa0 <HAL_RTC_SetTime+0x30>
 8002a9c:	2302      	movs	r3, #2
 8002a9e:	e07a      	b.n	8002b96 <HAL_RTC_SetTime+0x126>
 8002aa0:	68fb      	ldr	r3, [r7, #12]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002aa6:	68fb      	ldr	r3, [r7, #12]
 8002aa8:	2202      	movs	r2, #2
 8002aaa:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d113      	bne.n	8002ada <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002ab2:	68bb      	ldr	r3, [r7, #8]
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	461a      	mov	r2, r3
 8002ab8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002abc:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 8002ac0:	68bb      	ldr	r3, [r7, #8]
 8002ac2:	785b      	ldrb	r3, [r3, #1]
 8002ac4:	4619      	mov	r1, r3
 8002ac6:	460b      	mov	r3, r1
 8002ac8:	011b      	lsls	r3, r3, #4
 8002aca:	1a5b      	subs	r3, r3, r1
 8002acc:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002ace:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 8002ad0:	68ba      	ldr	r2, [r7, #8]
 8002ad2:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8002ad4:	4413      	add	r3, r2
 8002ad6:	617b      	str	r3, [r7, #20]
 8002ad8:	e01e      	b.n	8002b18 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002ada:	68bb      	ldr	r3, [r7, #8]
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	4618      	mov	r0, r3
 8002ae0:	f000 fb71 	bl	80031c6 <RTC_Bcd2ToByte>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	461a      	mov	r2, r3
 8002ae8:	f44f 6361 	mov.w	r3, #3600	@ 0xe10
 8002aec:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	785b      	ldrb	r3, [r3, #1]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fb66 	bl	80031c6 <RTC_Bcd2ToByte>
 8002afa:	4603      	mov	r3, r0
 8002afc:	461a      	mov	r2, r3
 8002afe:	4613      	mov	r3, r2
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	1a9b      	subs	r3, r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002b06:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	789b      	ldrb	r3, [r3, #2]
 8002b0c:	4618      	mov	r0, r3
 8002b0e:	f000 fb5a 	bl	80031c6 <RTC_Bcd2ToByte>
 8002b12:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8002b14:	4423      	add	r3, r4
 8002b16:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002b18:	6979      	ldr	r1, [r7, #20]
 8002b1a:	68f8      	ldr	r0, [r7, #12]
 8002b1c:	f000 fa7f 	bl	800301e <RTC_WriteTimeCounter>
 8002b20:	4603      	mov	r3, r0
 8002b22:	2b00      	cmp	r3, #0
 8002b24:	d007      	beq.n	8002b36 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	2204      	movs	r2, #4
 8002b2a:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	2200      	movs	r2, #0
 8002b30:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8002b32:	2301      	movs	r3, #1
 8002b34:	e02f      	b.n	8002b96 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	685a      	ldr	r2, [r3, #4]
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	f022 0205 	bic.w	r2, r2, #5
 8002b44:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002b46:	68f8      	ldr	r0, [r7, #12]
 8002b48:	f000 fa90 	bl	800306c <RTC_ReadAlarmCounter>
 8002b4c:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002b4e:	693b      	ldr	r3, [r7, #16]
 8002b50:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b54:	d018      	beq.n	8002b88 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8002b56:	693a      	ldr	r2, [r7, #16]
 8002b58:	697b      	ldr	r3, [r7, #20]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d214      	bcs.n	8002b88 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002b5e:	693b      	ldr	r3, [r7, #16]
 8002b60:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002b64:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002b68:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002b6a:	6939      	ldr	r1, [r7, #16]
 8002b6c:	68f8      	ldr	r0, [r7, #12]
 8002b6e:	f000 fa96 	bl	800309e <RTC_WriteAlarmCounter>
 8002b72:	4603      	mov	r3, r0
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	2204      	movs	r2, #4
 8002b7c:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	2200      	movs	r2, #0
 8002b82:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002b84:	2301      	movs	r3, #1
 8002b86:	e006      	b.n	8002b96 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	2201      	movs	r2, #1
 8002b8c:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	2200      	movs	r2, #0
 8002b92:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 8002b94:	2300      	movs	r3, #0
  }
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	371c      	adds	r7, #28
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	bd90      	pop	{r4, r7, pc}
	...

08002ba0 <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8002ba0:	b580      	push	{r7, lr}
 8002ba2:	b088      	sub	sp, #32
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 8002bac:	2300      	movs	r3, #0
 8002bae:	61bb      	str	r3, [r7, #24]
 8002bb0:	2300      	movs	r3, #0
 8002bb2:	61fb      	str	r3, [r7, #28]
 8002bb4:	2300      	movs	r3, #0
 8002bb6:	617b      	str	r3, [r7, #20]
 8002bb8:	2300      	movs	r3, #0
 8002bba:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	2b00      	cmp	r3, #0
 8002bc0:	d002      	beq.n	8002bc8 <HAL_RTC_GetTime+0x28>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d101      	bne.n	8002bcc <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 8002bc8:	2301      	movs	r3, #1
 8002bca:	e0b5      	b.n	8002d38 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	f003 0304 	and.w	r3, r3, #4
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	e0ac      	b.n	8002d38 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002bde:	68f8      	ldr	r0, [r7, #12]
 8002be0:	f000 f9ed 	bl	8002fbe <RTC_ReadTimeCounter>
 8002be4:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002be6:	69bb      	ldr	r3, [r7, #24]
 8002be8:	4a55      	ldr	r2, [pc, #340]	@ (8002d40 <HAL_RTC_GetTime+0x1a0>)
 8002bea:	fba2 2303 	umull	r2, r3, r2, r3
 8002bee:	0adb      	lsrs	r3, r3, #11
 8002bf0:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	4b52      	ldr	r3, [pc, #328]	@ (8002d40 <HAL_RTC_GetTime+0x1a0>)
 8002bf6:	fba3 1302 	umull	r1, r3, r3, r2
 8002bfa:	0adb      	lsrs	r3, r3, #11
 8002bfc:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002c00:	fb01 f303 	mul.w	r3, r1, r3
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	4a4f      	ldr	r2, [pc, #316]	@ (8002d44 <HAL_RTC_GetTime+0x1a4>)
 8002c08:	fba2 2303 	umull	r2, r3, r2, r3
 8002c0c:	095b      	lsrs	r3, r3, #5
 8002c0e:	b2da      	uxtb	r2, r3
 8002c10:	68bb      	ldr	r3, [r7, #8]
 8002c12:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8002c14:	69bb      	ldr	r3, [r7, #24]
 8002c16:	4a4a      	ldr	r2, [pc, #296]	@ (8002d40 <HAL_RTC_GetTime+0x1a0>)
 8002c18:	fba2 1203 	umull	r1, r2, r2, r3
 8002c1c:	0ad2      	lsrs	r2, r2, #11
 8002c1e:	f44f 6161 	mov.w	r1, #3600	@ 0xe10
 8002c22:	fb01 f202 	mul.w	r2, r1, r2
 8002c26:	1a9a      	subs	r2, r3, r2
 8002c28:	4b46      	ldr	r3, [pc, #280]	@ (8002d44 <HAL_RTC_GetTime+0x1a4>)
 8002c2a:	fba3 1302 	umull	r1, r3, r3, r2
 8002c2e:	0959      	lsrs	r1, r3, #5
 8002c30:	460b      	mov	r3, r1
 8002c32:	011b      	lsls	r3, r3, #4
 8002c34:	1a5b      	subs	r3, r3, r1
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	1ad1      	subs	r1, r2, r3
 8002c3a:	b2ca      	uxtb	r2, r1
 8002c3c:	68bb      	ldr	r3, [r7, #8]
 8002c3e:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b17      	cmp	r3, #23
 8002c44:	d955      	bls.n	8002cf2 <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8002c46:	693b      	ldr	r3, [r7, #16]
 8002c48:	4a3f      	ldr	r2, [pc, #252]	@ (8002d48 <HAL_RTC_GetTime+0x1a8>)
 8002c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8002c4e:	091b      	lsrs	r3, r3, #4
 8002c50:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 8002c52:	6939      	ldr	r1, [r7, #16]
 8002c54:	4b3c      	ldr	r3, [pc, #240]	@ (8002d48 <HAL_RTC_GetTime+0x1a8>)
 8002c56:	fba3 2301 	umull	r2, r3, r3, r1
 8002c5a:	091a      	lsrs	r2, r3, #4
 8002c5c:	4613      	mov	r3, r2
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4413      	add	r3, r2
 8002c62:	00db      	lsls	r3, r3, #3
 8002c64:	1aca      	subs	r2, r1, r3
 8002c66:	b2d2      	uxtb	r2, r2
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002c6c:	68f8      	ldr	r0, [r7, #12]
 8002c6e:	f000 f9fd 	bl	800306c <RTC_ReadAlarmCounter>
 8002c72:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 8002c74:	69fb      	ldr	r3, [r7, #28]
 8002c76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002c7a:	d008      	beq.n	8002c8e <HAL_RTC_GetTime+0xee>
 8002c7c:	69fa      	ldr	r2, [r7, #28]
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	429a      	cmp	r2, r3
 8002c82:	d904      	bls.n	8002c8e <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 8002c84:	69fa      	ldr	r2, [r7, #28]
 8002c86:	69bb      	ldr	r3, [r7, #24]
 8002c88:	1ad3      	subs	r3, r2, r3
 8002c8a:	61fb      	str	r3, [r7, #28]
 8002c8c:	e002      	b.n	8002c94 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 8002c8e:	f04f 33ff 	mov.w	r3, #4294967295
 8002c92:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	4a2d      	ldr	r2, [pc, #180]	@ (8002d4c <HAL_RTC_GetTime+0x1ac>)
 8002c98:	fb02 f303 	mul.w	r3, r2, r3
 8002c9c:	69ba      	ldr	r2, [r7, #24]
 8002c9e:	1ad3      	subs	r3, r2, r3
 8002ca0:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002ca2:	69b9      	ldr	r1, [r7, #24]
 8002ca4:	68f8      	ldr	r0, [r7, #12]
 8002ca6:	f000 f9ba 	bl	800301e <RTC_WriteTimeCounter>
 8002caa:	4603      	mov	r3, r0
 8002cac:	2b00      	cmp	r3, #0
 8002cae:	d001      	beq.n	8002cb4 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e041      	b.n	8002d38 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002cb4:	69fb      	ldr	r3, [r7, #28]
 8002cb6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cba:	d00c      	beq.n	8002cd6 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 8002cbc:	69fa      	ldr	r2, [r7, #28]
 8002cbe:	69bb      	ldr	r3, [r7, #24]
 8002cc0:	4413      	add	r3, r2
 8002cc2:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cc4:	69f9      	ldr	r1, [r7, #28]
 8002cc6:	68f8      	ldr	r0, [r7, #12]
 8002cc8:	f000 f9e9 	bl	800309e <RTC_WriteAlarmCounter>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d00a      	beq.n	8002ce8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002cd2:	2301      	movs	r3, #1
 8002cd4:	e030      	b.n	8002d38 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002cd6:	69f9      	ldr	r1, [r7, #28]
 8002cd8:	68f8      	ldr	r0, [r7, #12]
 8002cda:	f000 f9e0 	bl	800309e <RTC_WriteAlarmCounter>
 8002cde:	4603      	mov	r3, r0
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d001      	beq.n	8002ce8 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	e027      	b.n	8002d38 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8002ce8:	6979      	ldr	r1, [r7, #20]
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f000 fa88 	bl	8003200 <RTC_DateUpdate>
 8002cf0:	e003      	b.n	8002cfa <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	b2da      	uxtb	r2, r3
 8002cf6:	68bb      	ldr	r3, [r7, #8]
 8002cf8:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d01a      	beq.n	8002d36 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 8002d00:	68bb      	ldr	r3, [r7, #8]
 8002d02:	781b      	ldrb	r3, [r3, #0]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f000 fa41 	bl	800318c <RTC_ByteToBcd2>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	68bb      	ldr	r3, [r7, #8]
 8002d10:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 8002d12:	68bb      	ldr	r3, [r7, #8]
 8002d14:	785b      	ldrb	r3, [r3, #1]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f000 fa38 	bl	800318c <RTC_ByteToBcd2>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	461a      	mov	r2, r3
 8002d20:	68bb      	ldr	r3, [r7, #8]
 8002d22:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8002d24:	68bb      	ldr	r3, [r7, #8]
 8002d26:	789b      	ldrb	r3, [r3, #2]
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f000 fa2f 	bl	800318c <RTC_ByteToBcd2>
 8002d2e:	4603      	mov	r3, r0
 8002d30:	461a      	mov	r2, r3
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8002d36:	2300      	movs	r3, #0
}
 8002d38:	4618      	mov	r0, r3
 8002d3a:	3720      	adds	r7, #32
 8002d3c:	46bd      	mov	sp, r7
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	91a2b3c5 	.word	0x91a2b3c5
 8002d44:	88888889 	.word	0x88888889
 8002d48:	aaaaaaab 	.word	0xaaaaaaab
 8002d4c:	00015180 	.word	0x00015180

08002d50 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b088      	sub	sp, #32
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	60f8      	str	r0, [r7, #12]
 8002d58:	60b9      	str	r1, [r7, #8]
 8002d5a:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8002d5c:	2300      	movs	r3, #0
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	2300      	movs	r3, #0
 8002d62:	61bb      	str	r3, [r7, #24]
 8002d64:	2300      	movs	r3, #0
 8002d66:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d002      	beq.n	8002d74 <HAL_RTC_SetDate+0x24>
 8002d6e:	68bb      	ldr	r3, [r7, #8]
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d101      	bne.n	8002d78 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 8002d74:	2301      	movs	r3, #1
 8002d76:	e097      	b.n	8002ea8 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	7c1b      	ldrb	r3, [r3, #16]
 8002d7c:	2b01      	cmp	r3, #1
 8002d7e:	d101      	bne.n	8002d84 <HAL_RTC_SetDate+0x34>
 8002d80:	2302      	movs	r3, #2
 8002d82:	e091      	b.n	8002ea8 <HAL_RTC_SetDate+0x158>
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	2201      	movs	r2, #1
 8002d88:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	2202      	movs	r2, #2
 8002d8e:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d10c      	bne.n	8002db0 <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	78da      	ldrb	r2, [r3, #3]
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	785a      	ldrb	r2, [r3, #1]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 8002da6:	68bb      	ldr	r3, [r7, #8]
 8002da8:	789a      	ldrb	r2, [r3, #2]
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	739a      	strb	r2, [r3, #14]
 8002dae:	e01a      	b.n	8002de6 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 8002db0:	68bb      	ldr	r3, [r7, #8]
 8002db2:	78db      	ldrb	r3, [r3, #3]
 8002db4:	4618      	mov	r0, r3
 8002db6:	f000 fa06 	bl	80031c6 <RTC_Bcd2ToByte>
 8002dba:	4603      	mov	r3, r0
 8002dbc:	461a      	mov	r2, r3
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 8002dc2:	68bb      	ldr	r3, [r7, #8]
 8002dc4:	785b      	ldrb	r3, [r3, #1]
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	f000 f9fd 	bl	80031c6 <RTC_Bcd2ToByte>
 8002dcc:	4603      	mov	r3, r0
 8002dce:	461a      	mov	r2, r3
 8002dd0:	68fb      	ldr	r3, [r7, #12]
 8002dd2:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8002dd4:	68bb      	ldr	r3, [r7, #8]
 8002dd6:	789b      	ldrb	r3, [r3, #2]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f000 f9f4 	bl	80031c6 <RTC_Bcd2ToByte>
 8002dde:	4603      	mov	r3, r0
 8002de0:	461a      	mov	r2, r3
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	7bdb      	ldrb	r3, [r3, #15]
 8002dea:	4618      	mov	r0, r3
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	7b59      	ldrb	r1, [r3, #13]
 8002df0:	68fb      	ldr	r3, [r7, #12]
 8002df2:	7b9b      	ldrb	r3, [r3, #14]
 8002df4:	461a      	mov	r2, r3
 8002df6:	f000 fadf 	bl	80033b8 <RTC_WeekDayNum>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	461a      	mov	r2, r3
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	7b1a      	ldrb	r2, [r3, #12]
 8002e06:	68bb      	ldr	r3, [r7, #8]
 8002e08:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8002e0a:	68f8      	ldr	r0, [r7, #12]
 8002e0c:	f000 f8d7 	bl	8002fbe <RTC_ReadTimeCounter>
 8002e10:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	4a26      	ldr	r2, [pc, #152]	@ (8002eb0 <HAL_RTC_SetDate+0x160>)
 8002e16:	fba2 2303 	umull	r2, r3, r2, r3
 8002e1a:	0adb      	lsrs	r3, r3, #11
 8002e1c:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 8002e1e:	697b      	ldr	r3, [r7, #20]
 8002e20:	2b18      	cmp	r3, #24
 8002e22:	d93a      	bls.n	8002e9a <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8002e24:	697b      	ldr	r3, [r7, #20]
 8002e26:	4a23      	ldr	r2, [pc, #140]	@ (8002eb4 <HAL_RTC_SetDate+0x164>)
 8002e28:	fba2 2303 	umull	r2, r3, r2, r3
 8002e2c:	091b      	lsrs	r3, r3, #4
 8002e2e:	4a22      	ldr	r2, [pc, #136]	@ (8002eb8 <HAL_RTC_SetDate+0x168>)
 8002e30:	fb02 f303 	mul.w	r3, r2, r3
 8002e34:	69fa      	ldr	r2, [r7, #28]
 8002e36:	1ad3      	subs	r3, r2, r3
 8002e38:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8002e3a:	69f9      	ldr	r1, [r7, #28]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 f8ee 	bl	800301e <RTC_WriteTimeCounter>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d007      	beq.n	8002e58 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2204      	movs	r2, #4
 8002e4c:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8002e54:	2301      	movs	r3, #1
 8002e56:	e027      	b.n	8002ea8 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 f907 	bl	800306c <RTC_ReadAlarmCounter>
 8002e5e:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 8002e60:	69bb      	ldr	r3, [r7, #24]
 8002e62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e66:	d018      	beq.n	8002e9a <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	429a      	cmp	r2, r3
 8002e6e:	d214      	bcs.n	8002e9a <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 8002e70:	69bb      	ldr	r3, [r7, #24]
 8002e72:	f503 33a8 	add.w	r3, r3, #86016	@ 0x15000
 8002e76:	f503 73c0 	add.w	r3, r3, #384	@ 0x180
 8002e7a:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8002e7c:	69b9      	ldr	r1, [r7, #24]
 8002e7e:	68f8      	ldr	r0, [r7, #12]
 8002e80:	f000 f90d 	bl	800309e <RTC_WriteAlarmCounter>
 8002e84:	4603      	mov	r3, r0
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d007      	beq.n	8002e9a <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	2204      	movs	r2, #4
 8002e8e:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	2200      	movs	r2, #0
 8002e94:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 8002e96:	2301      	movs	r3, #1
 8002e98:	e006      	b.n	8002ea8 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	2200      	movs	r2, #0
 8002ea4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8002ea6:	2300      	movs	r3, #0
}
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	3720      	adds	r7, #32
 8002eac:	46bd      	mov	sp, r7
 8002eae:	bd80      	pop	{r7, pc}
 8002eb0:	91a2b3c5 	.word	0x91a2b3c5
 8002eb4:	aaaaaaab 	.word	0xaaaaaaab
 8002eb8:	00015180 	.word	0x00015180

08002ebc <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002ebc:	b580      	push	{r7, lr}
 8002ebe:	b086      	sub	sp, #24
 8002ec0:	af00      	add	r7, sp, #0
 8002ec2:	60f8      	str	r0, [r7, #12]
 8002ec4:	60b9      	str	r1, [r7, #8]
 8002ec6:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 8002ec8:	f107 0314 	add.w	r3, r7, #20
 8002ecc:	2100      	movs	r1, #0
 8002ece:	460a      	mov	r2, r1
 8002ed0:	801a      	strh	r2, [r3, #0]
 8002ed2:	460a      	mov	r2, r1
 8002ed4:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2b00      	cmp	r3, #0
 8002eda:	d002      	beq.n	8002ee2 <HAL_RTC_GetDate+0x26>
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d101      	bne.n	8002ee6 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 8002ee2:	2301      	movs	r3, #1
 8002ee4:	e03a      	b.n	8002f5c <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8002ee6:	f107 0314 	add.w	r3, r7, #20
 8002eea:	2200      	movs	r2, #0
 8002eec:	4619      	mov	r1, r3
 8002eee:	68f8      	ldr	r0, [r7, #12]
 8002ef0:	f7ff fe56 	bl	8002ba0 <HAL_RTC_GetTime>
 8002ef4:	4603      	mov	r3, r0
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d001      	beq.n	8002efe <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8002efa:	2301      	movs	r3, #1
 8002efc:	e02e      	b.n	8002f5c <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 8002efe:	68fb      	ldr	r3, [r7, #12]
 8002f00:	7b1a      	ldrb	r2, [r3, #12]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	7bda      	ldrb	r2, [r3, #15]
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	7b5a      	ldrb	r2, [r3, #13]
 8002f12:	68bb      	ldr	r3, [r7, #8]
 8002f14:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8002f16:	68fb      	ldr	r3, [r7, #12]
 8002f18:	7b9a      	ldrb	r2, [r3, #14]
 8002f1a:	68bb      	ldr	r3, [r7, #8]
 8002f1c:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2b00      	cmp	r3, #0
 8002f22:	d01a      	beq.n	8002f5a <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8002f24:	68bb      	ldr	r3, [r7, #8]
 8002f26:	78db      	ldrb	r3, [r3, #3]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f000 f92f 	bl	800318c <RTC_ByteToBcd2>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	461a      	mov	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	785b      	ldrb	r3, [r3, #1]
 8002f3a:	4618      	mov	r0, r3
 8002f3c:	f000 f926 	bl	800318c <RTC_ByteToBcd2>
 8002f40:	4603      	mov	r3, r0
 8002f42:	461a      	mov	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8002f48:	68bb      	ldr	r3, [r7, #8]
 8002f4a:	789b      	ldrb	r3, [r3, #2]
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	f000 f91d 	bl	800318c <RTC_ByteToBcd2>
 8002f52:	4603      	mov	r3, r0
 8002f54:	461a      	mov	r2, r3
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8002f5a:	2300      	movs	r3, #0
}
 8002f5c:	4618      	mov	r0, r3
 8002f5e:	3718      	adds	r7, #24
 8002f60:	46bd      	mov	sp, r7
 8002f62:	bd80      	pop	{r7, pc}

08002f64 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8002f64:	b580      	push	{r7, lr}
 8002f66:	b084      	sub	sp, #16
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002f6c:	2300      	movs	r3, #0
 8002f6e:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d101      	bne.n	8002f7a <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 8002f76:	2301      	movs	r3, #1
 8002f78:	e01d      	b.n	8002fb6 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	685a      	ldr	r2, [r3, #4]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	f022 0208 	bic.w	r2, r2, #8
 8002f88:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8002f8a:	f7fe fcad 	bl	80018e8 <HAL_GetTick>
 8002f8e:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002f90:	e009      	b.n	8002fa6 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8002f92:	f7fe fca9 	bl	80018e8 <HAL_GetTick>
 8002f96:	4602      	mov	r2, r0
 8002f98:	68fb      	ldr	r3, [r7, #12]
 8002f9a:	1ad3      	subs	r3, r2, r3
 8002f9c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8002fa0:	d901      	bls.n	8002fa6 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 8002fa2:	2303      	movs	r3, #3
 8002fa4:	e007      	b.n	8002fb6 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	685b      	ldr	r3, [r3, #4]
 8002fac:	f003 0308 	and.w	r3, r3, #8
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d0ee      	beq.n	8002f92 <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 8002fb4:	2300      	movs	r3, #0
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}

08002fbe <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 8002fbe:	b480      	push	{r7}
 8002fc0:	b087      	sub	sp, #28
 8002fc2:	af00      	add	r7, sp, #0
 8002fc4:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 8002fc6:	2300      	movs	r3, #0
 8002fc8:	827b      	strh	r3, [r7, #18]
 8002fca:	2300      	movs	r3, #0
 8002fcc:	823b      	strh	r3, [r7, #16]
 8002fce:	2300      	movs	r3, #0
 8002fd0:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	699b      	ldr	r3, [r3, #24]
 8002fdc:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	69db      	ldr	r3, [r3, #28]
 8002fe4:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	699b      	ldr	r3, [r3, #24]
 8002fec:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 8002fee:	8a7a      	ldrh	r2, [r7, #18]
 8002ff0:	8a3b      	ldrh	r3, [r7, #16]
 8002ff2:	429a      	cmp	r2, r3
 8002ff4:	d008      	beq.n	8003008 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8002ff6:	8a3b      	ldrh	r3, [r7, #16]
 8002ff8:	041a      	lsls	r2, r3, #16
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	69db      	ldr	r3, [r3, #28]
 8003000:	b29b      	uxth	r3, r3
 8003002:	4313      	orrs	r3, r2
 8003004:	617b      	str	r3, [r7, #20]
 8003006:	e004      	b.n	8003012 <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003008:	8a7b      	ldrh	r3, [r7, #18]
 800300a:	041a      	lsls	r2, r3, #16
 800300c:	89fb      	ldrh	r3, [r7, #14]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 8003012:	697b      	ldr	r3, [r7, #20]
}
 8003014:	4618      	mov	r0, r3
 8003016:	371c      	adds	r7, #28
 8003018:	46bd      	mov	sp, r7
 800301a:	bc80      	pop	{r7}
 800301c:	4770      	bx	lr

0800301e <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800301e:	b580      	push	{r7, lr}
 8003020:	b084      	sub	sp, #16
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003028:	2300      	movs	r3, #0
 800302a:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 800302c:	6878      	ldr	r0, [r7, #4]
 800302e:	f000 f85d 	bl	80030ec <RTC_EnterInitMode>
 8003032:	4603      	mov	r3, r0
 8003034:	2b00      	cmp	r3, #0
 8003036:	d002      	beq.n	800303e <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003038:	2301      	movs	r3, #1
 800303a:	73fb      	strb	r3, [r7, #15]
 800303c:	e011      	b.n	8003062 <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	683a      	ldr	r2, [r7, #0]
 8003044:	0c12      	lsrs	r2, r2, #16
 8003046:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	683a      	ldr	r2, [r7, #0]
 800304e:	b292      	uxth	r2, r2
 8003050:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f000 f872 	bl	800313c <RTC_ExitInitMode>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d001      	beq.n	8003062 <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800305e:	2301      	movs	r3, #1
 8003060:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003062:	7bfb      	ldrb	r3, [r7, #15]
}
 8003064:	4618      	mov	r0, r3
 8003066:	3710      	adds	r7, #16
 8003068:	46bd      	mov	sp, r7
 800306a:	bd80      	pop	{r7, pc}

0800306c <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 800306c:	b480      	push	{r7}
 800306e:	b085      	sub	sp, #20
 8003070:	af00      	add	r7, sp, #0
 8003072:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 8003074:	2300      	movs	r3, #0
 8003076:	81fb      	strh	r3, [r7, #14]
 8003078:	2300      	movs	r3, #0
 800307a:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	6a1b      	ldr	r3, [r3, #32]
 8003082:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800308a:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 800308c:	89fb      	ldrh	r3, [r7, #14]
 800308e:	041a      	lsls	r2, r3, #16
 8003090:	89bb      	ldrh	r3, [r7, #12]
 8003092:	4313      	orrs	r3, r2
}
 8003094:	4618      	mov	r0, r3
 8003096:	3714      	adds	r7, #20
 8003098:	46bd      	mov	sp, r7
 800309a:	bc80      	pop	{r7}
 800309c:	4770      	bx	lr

0800309e <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 800309e:	b580      	push	{r7, lr}
 80030a0:	b084      	sub	sp, #16
 80030a2:	af00      	add	r7, sp, #0
 80030a4:	6078      	str	r0, [r7, #4]
 80030a6:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80030a8:	2300      	movs	r3, #0
 80030aa:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80030ac:	6878      	ldr	r0, [r7, #4]
 80030ae:	f000 f81d 	bl	80030ec <RTC_EnterInitMode>
 80030b2:	4603      	mov	r3, r0
 80030b4:	2b00      	cmp	r3, #0
 80030b6:	d002      	beq.n	80030be <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80030b8:	2301      	movs	r3, #1
 80030ba:	73fb      	strb	r3, [r7, #15]
 80030bc:	e011      	b.n	80030e2 <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	683a      	ldr	r2, [r7, #0]
 80030c4:	0c12      	lsrs	r2, r2, #16
 80030c6:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	683a      	ldr	r2, [r7, #0]
 80030ce:	b292      	uxth	r2, r2
 80030d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 f832 	bl	800313c <RTC_ExitInitMode>
 80030d8:	4603      	mov	r3, r0
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d001      	beq.n	80030e2 <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 80030de:	2301      	movs	r3, #1
 80030e0:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80030e2:	7bfb      	ldrb	r3, [r7, #15]
}
 80030e4:	4618      	mov	r0, r3
 80030e6:	3710      	adds	r7, #16
 80030e8:	46bd      	mov	sp, r7
 80030ea:	bd80      	pop	{r7, pc}

080030ec <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80030ec:	b580      	push	{r7, lr}
 80030ee:	b084      	sub	sp, #16
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80030f4:	2300      	movs	r3, #0
 80030f6:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 80030f8:	f7fe fbf6 	bl	80018e8 <HAL_GetTick>
 80030fc:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 80030fe:	e009      	b.n	8003114 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003100:	f7fe fbf2 	bl	80018e8 <HAL_GetTick>
 8003104:	4602      	mov	r2, r0
 8003106:	68fb      	ldr	r3, [r7, #12]
 8003108:	1ad3      	subs	r3, r2, r3
 800310a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800310e:	d901      	bls.n	8003114 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003110:	2303      	movs	r3, #3
 8003112:	e00f      	b.n	8003134 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	685b      	ldr	r3, [r3, #4]
 800311a:	f003 0320 	and.w	r3, r3, #32
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0ee      	beq.n	8003100 <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	685a      	ldr	r2, [r3, #4]
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f042 0210 	orr.w	r2, r2, #16
 8003130:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3710      	adds	r7, #16
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003144:	2300      	movs	r3, #0
 8003146:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f022 0210 	bic.w	r2, r2, #16
 8003156:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003158:	f7fe fbc6 	bl	80018e8 <HAL_GetTick>
 800315c:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 800315e:	e009      	b.n	8003174 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003160:	f7fe fbc2 	bl	80018e8 <HAL_GetTick>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	1ad3      	subs	r3, r2, r3
 800316a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800316e:	d901      	bls.n	8003174 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003170:	2303      	movs	r3, #3
 8003172:	e007      	b.n	8003184 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	685b      	ldr	r3, [r3, #4]
 800317a:	f003 0320 	and.w	r3, r3, #32
 800317e:	2b00      	cmp	r3, #0
 8003180:	d0ee      	beq.n	8003160 <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003182:	2300      	movs	r3, #0
}
 8003184:	4618      	mov	r0, r3
 8003186:	3710      	adds	r7, #16
 8003188:	46bd      	mov	sp, r7
 800318a:	bd80      	pop	{r7, pc}

0800318c <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 800318c:	b480      	push	{r7}
 800318e:	b085      	sub	sp, #20
 8003190:	af00      	add	r7, sp, #0
 8003192:	4603      	mov	r3, r0
 8003194:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003196:	2300      	movs	r3, #0
 8003198:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 800319a:	e005      	b.n	80031a8 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	3301      	adds	r3, #1
 80031a0:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 80031a2:	79fb      	ldrb	r3, [r7, #7]
 80031a4:	3b0a      	subs	r3, #10
 80031a6:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 80031a8:	79fb      	ldrb	r3, [r7, #7]
 80031aa:	2b09      	cmp	r3, #9
 80031ac:	d8f6      	bhi.n	800319c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	b2db      	uxtb	r3, r3
 80031b2:	011b      	lsls	r3, r3, #4
 80031b4:	b2da      	uxtb	r2, r3
 80031b6:	79fb      	ldrb	r3, [r7, #7]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	b2db      	uxtb	r3, r3
}
 80031bc:	4618      	mov	r0, r3
 80031be:	3714      	adds	r7, #20
 80031c0:	46bd      	mov	sp, r7
 80031c2:	bc80      	pop	{r7}
 80031c4:	4770      	bx	lr

080031c6 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 80031c6:	b480      	push	{r7}
 80031c8:	b085      	sub	sp, #20
 80031ca:	af00      	add	r7, sp, #0
 80031cc:	4603      	mov	r3, r0
 80031ce:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 80031d0:	2300      	movs	r3, #0
 80031d2:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 80031d4:	79fb      	ldrb	r3, [r7, #7]
 80031d6:	091b      	lsrs	r3, r3, #4
 80031d8:	b2db      	uxtb	r3, r3
 80031da:	461a      	mov	r2, r3
 80031dc:	4613      	mov	r3, r2
 80031de:	009b      	lsls	r3, r3, #2
 80031e0:	4413      	add	r3, r2
 80031e2:	005b      	lsls	r3, r3, #1
 80031e4:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 80031e6:	79fb      	ldrb	r3, [r7, #7]
 80031e8:	f003 030f 	and.w	r3, r3, #15
 80031ec:	b2da      	uxtb	r2, r3
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	4413      	add	r3, r2
 80031f4:	b2db      	uxtb	r3, r3
}
 80031f6:	4618      	mov	r0, r3
 80031f8:	3714      	adds	r7, #20
 80031fa:	46bd      	mov	sp, r7
 80031fc:	bc80      	pop	{r7}
 80031fe:	4770      	bx	lr

08003200 <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b086      	sub	sp, #24
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 800320a:	2300      	movs	r3, #0
 800320c:	617b      	str	r3, [r7, #20]
 800320e:	2300      	movs	r3, #0
 8003210:	613b      	str	r3, [r7, #16]
 8003212:	2300      	movs	r3, #0
 8003214:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003216:	2300      	movs	r3, #0
 8003218:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	7bdb      	ldrb	r3, [r3, #15]
 800321e:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	7b5b      	ldrb	r3, [r3, #13]
 8003224:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	7b9b      	ldrb	r3, [r3, #14]
 800322a:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 800322c:	2300      	movs	r3, #0
 800322e:	60bb      	str	r3, [r7, #8]
 8003230:	e06f      	b.n	8003312 <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003232:	693b      	ldr	r3, [r7, #16]
 8003234:	2b01      	cmp	r3, #1
 8003236:	d011      	beq.n	800325c <RTC_DateUpdate+0x5c>
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	2b03      	cmp	r3, #3
 800323c:	d00e      	beq.n	800325c <RTC_DateUpdate+0x5c>
 800323e:	693b      	ldr	r3, [r7, #16]
 8003240:	2b05      	cmp	r3, #5
 8003242:	d00b      	beq.n	800325c <RTC_DateUpdate+0x5c>
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	2b07      	cmp	r3, #7
 8003248:	d008      	beq.n	800325c <RTC_DateUpdate+0x5c>
 800324a:	693b      	ldr	r3, [r7, #16]
 800324c:	2b08      	cmp	r3, #8
 800324e:	d005      	beq.n	800325c <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003250:	693b      	ldr	r3, [r7, #16]
 8003252:	2b0a      	cmp	r3, #10
 8003254:	d002      	beq.n	800325c <RTC_DateUpdate+0x5c>
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	2b0c      	cmp	r3, #12
 800325a:	d117      	bne.n	800328c <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	2b1e      	cmp	r3, #30
 8003260:	d803      	bhi.n	800326a <RTC_DateUpdate+0x6a>
      {
        day++;
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	3301      	adds	r3, #1
 8003266:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003268:	e050      	b.n	800330c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	2b0c      	cmp	r3, #12
 800326e:	d005      	beq.n	800327c <RTC_DateUpdate+0x7c>
        {
          month++;
 8003270:	693b      	ldr	r3, [r7, #16]
 8003272:	3301      	adds	r3, #1
 8003274:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003276:	2301      	movs	r3, #1
 8003278:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 800327a:	e047      	b.n	800330c <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 800327c:	2301      	movs	r3, #1
 800327e:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003280:	2301      	movs	r3, #1
 8003282:	60fb      	str	r3, [r7, #12]
          year++;
 8003284:	697b      	ldr	r3, [r7, #20]
 8003286:	3301      	adds	r3, #1
 8003288:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 800328a:	e03f      	b.n	800330c <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	2b04      	cmp	r3, #4
 8003290:	d008      	beq.n	80032a4 <RTC_DateUpdate+0xa4>
 8003292:	693b      	ldr	r3, [r7, #16]
 8003294:	2b06      	cmp	r3, #6
 8003296:	d005      	beq.n	80032a4 <RTC_DateUpdate+0xa4>
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	2b09      	cmp	r3, #9
 800329c:	d002      	beq.n	80032a4 <RTC_DateUpdate+0xa4>
 800329e:	693b      	ldr	r3, [r7, #16]
 80032a0:	2b0b      	cmp	r3, #11
 80032a2:	d10c      	bne.n	80032be <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2b1d      	cmp	r3, #29
 80032a8:	d803      	bhi.n	80032b2 <RTC_DateUpdate+0xb2>
      {
        day++;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	3301      	adds	r3, #1
 80032ae:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80032b0:	e02c      	b.n	800330c <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	3301      	adds	r3, #1
 80032b6:	613b      	str	r3, [r7, #16]
        day = 1U;
 80032b8:	2301      	movs	r3, #1
 80032ba:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 80032bc:	e026      	b.n	800330c <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	2b02      	cmp	r3, #2
 80032c2:	d123      	bne.n	800330c <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	2b1b      	cmp	r3, #27
 80032c8:	d803      	bhi.n	80032d2 <RTC_DateUpdate+0xd2>
      {
        day++;
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	3301      	adds	r3, #1
 80032ce:	60fb      	str	r3, [r7, #12]
 80032d0:	e01c      	b.n	800330c <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	2b1c      	cmp	r3, #28
 80032d6:	d111      	bne.n	80032fc <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 80032d8:	697b      	ldr	r3, [r7, #20]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	4618      	mov	r0, r3
 80032de:	f000 f839 	bl	8003354 <RTC_IsLeapYear>
 80032e2:	4603      	mov	r3, r0
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d003      	beq.n	80032f0 <RTC_DateUpdate+0xf0>
        {
          day++;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	3301      	adds	r3, #1
 80032ec:	60fb      	str	r3, [r7, #12]
 80032ee:	e00d      	b.n	800330c <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	3301      	adds	r3, #1
 80032f4:	613b      	str	r3, [r7, #16]
          day = 1U;
 80032f6:	2301      	movs	r3, #1
 80032f8:	60fb      	str	r3, [r7, #12]
 80032fa:	e007      	b.n	800330c <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	2b1d      	cmp	r3, #29
 8003300:	d104      	bne.n	800330c <RTC_DateUpdate+0x10c>
      {
        month++;
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	3301      	adds	r3, #1
 8003306:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003308:	2301      	movs	r3, #1
 800330a:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 800330c:	68bb      	ldr	r3, [r7, #8]
 800330e:	3301      	adds	r3, #1
 8003310:	60bb      	str	r3, [r7, #8]
 8003312:	68ba      	ldr	r2, [r7, #8]
 8003314:	683b      	ldr	r3, [r7, #0]
 8003316:	429a      	cmp	r2, r3
 8003318:	d38b      	bcc.n	8003232 <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 800331a:	697b      	ldr	r3, [r7, #20]
 800331c:	b2da      	uxtb	r2, r3
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	b2da      	uxtb	r2, r3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 800332a:	68fb      	ldr	r3, [r7, #12]
 800332c:	b2da      	uxtb	r2, r3
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	b2db      	uxtb	r3, r3
 8003336:	68fa      	ldr	r2, [r7, #12]
 8003338:	b2d2      	uxtb	r2, r2
 800333a:	4619      	mov	r1, r3
 800333c:	6978      	ldr	r0, [r7, #20]
 800333e:	f000 f83b 	bl	80033b8 <RTC_WeekDayNum>
 8003342:	4603      	mov	r3, r0
 8003344:	461a      	mov	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	731a      	strb	r2, [r3, #12]
}
 800334a:	bf00      	nop
 800334c:	3718      	adds	r7, #24
 800334e:	46bd      	mov	sp, r7
 8003350:	bd80      	pop	{r7, pc}
	...

08003354 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 800335e:	88fb      	ldrh	r3, [r7, #6]
 8003360:	f003 0303 	and.w	r3, r3, #3
 8003364:	b29b      	uxth	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d001      	beq.n	800336e <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 800336a:	2300      	movs	r3, #0
 800336c:	e01d      	b.n	80033aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 800336e:	88fb      	ldrh	r3, [r7, #6]
 8003370:	4a10      	ldr	r2, [pc, #64]	@ (80033b4 <RTC_IsLeapYear+0x60>)
 8003372:	fba2 1203 	umull	r1, r2, r2, r3
 8003376:	0952      	lsrs	r2, r2, #5
 8003378:	2164      	movs	r1, #100	@ 0x64
 800337a:	fb01 f202 	mul.w	r2, r1, r2
 800337e:	1a9b      	subs	r3, r3, r2
 8003380:	b29b      	uxth	r3, r3
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003386:	2301      	movs	r3, #1
 8003388:	e00f      	b.n	80033aa <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 800338a:	88fb      	ldrh	r3, [r7, #6]
 800338c:	4a09      	ldr	r2, [pc, #36]	@ (80033b4 <RTC_IsLeapYear+0x60>)
 800338e:	fba2 1203 	umull	r1, r2, r2, r3
 8003392:	09d2      	lsrs	r2, r2, #7
 8003394:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8003398:	fb01 f202 	mul.w	r2, r1, r2
 800339c:	1a9b      	subs	r3, r3, r2
 800339e:	b29b      	uxth	r3, r3
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d101      	bne.n	80033a8 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 80033a4:	2301      	movs	r3, #1
 80033a6:	e000      	b.n	80033aa <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 80033a8:	2300      	movs	r3, #0
  }
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bc80      	pop	{r7}
 80033b2:	4770      	bx	lr
 80033b4:	51eb851f 	.word	0x51eb851f

080033b8 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 80033b8:	b480      	push	{r7}
 80033ba:	b085      	sub	sp, #20
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
 80033c0:	460b      	mov	r3, r1
 80033c2:	70fb      	strb	r3, [r7, #3]
 80033c4:	4613      	mov	r3, r2
 80033c6:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 80033c8:	2300      	movs	r3, #0
 80033ca:	60bb      	str	r3, [r7, #8]
 80033cc:	2300      	movs	r3, #0
 80033ce:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f503 63fa 	add.w	r3, r3, #2000	@ 0x7d0
 80033d6:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 80033d8:	78fb      	ldrb	r3, [r7, #3]
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d82d      	bhi.n	800343a <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 80033de:	78fa      	ldrb	r2, [r7, #3]
 80033e0:	4613      	mov	r3, r2
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	4413      	add	r3, r2
 80033e6:	00db      	lsls	r3, r3, #3
 80033e8:	1a9b      	subs	r3, r3, r2
 80033ea:	4a2c      	ldr	r2, [pc, #176]	@ (800349c <RTC_WeekDayNum+0xe4>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	085a      	lsrs	r2, r3, #1
 80033f2:	78bb      	ldrb	r3, [r7, #2]
 80033f4:	441a      	add	r2, r3
 80033f6:	68bb      	ldr	r3, [r7, #8]
 80033f8:	441a      	add	r2, r3
 80033fa:	68bb      	ldr	r3, [r7, #8]
 80033fc:	3b01      	subs	r3, #1
 80033fe:	089b      	lsrs	r3, r3, #2
 8003400:	441a      	add	r2, r3
 8003402:	68bb      	ldr	r3, [r7, #8]
 8003404:	3b01      	subs	r3, #1
 8003406:	4926      	ldr	r1, [pc, #152]	@ (80034a0 <RTC_WeekDayNum+0xe8>)
 8003408:	fba1 1303 	umull	r1, r3, r1, r3
 800340c:	095b      	lsrs	r3, r3, #5
 800340e:	1ad2      	subs	r2, r2, r3
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	3b01      	subs	r3, #1
 8003414:	4922      	ldr	r1, [pc, #136]	@ (80034a0 <RTC_WeekDayNum+0xe8>)
 8003416:	fba1 1303 	umull	r1, r3, r1, r3
 800341a:	09db      	lsrs	r3, r3, #7
 800341c:	4413      	add	r3, r2
 800341e:	1d1a      	adds	r2, r3, #4
 8003420:	4b20      	ldr	r3, [pc, #128]	@ (80034a4 <RTC_WeekDayNum+0xec>)
 8003422:	fba3 1302 	umull	r1, r3, r3, r2
 8003426:	1ad1      	subs	r1, r2, r3
 8003428:	0849      	lsrs	r1, r1, #1
 800342a:	440b      	add	r3, r1
 800342c:	0899      	lsrs	r1, r3, #2
 800342e:	460b      	mov	r3, r1
 8003430:	00db      	lsls	r3, r3, #3
 8003432:	1a5b      	subs	r3, r3, r1
 8003434:	1ad3      	subs	r3, r2, r3
 8003436:	60fb      	str	r3, [r7, #12]
 8003438:	e029      	b.n	800348e <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 800343a:	78fa      	ldrb	r2, [r7, #3]
 800343c:	4613      	mov	r3, r2
 800343e:	005b      	lsls	r3, r3, #1
 8003440:	4413      	add	r3, r2
 8003442:	00db      	lsls	r3, r3, #3
 8003444:	1a9b      	subs	r3, r3, r2
 8003446:	4a15      	ldr	r2, [pc, #84]	@ (800349c <RTC_WeekDayNum+0xe4>)
 8003448:	fba2 2303 	umull	r2, r3, r2, r3
 800344c:	085a      	lsrs	r2, r3, #1
 800344e:	78bb      	ldrb	r3, [r7, #2]
 8003450:	441a      	add	r2, r3
 8003452:	68bb      	ldr	r3, [r7, #8]
 8003454:	441a      	add	r2, r3
 8003456:	68bb      	ldr	r3, [r7, #8]
 8003458:	089b      	lsrs	r3, r3, #2
 800345a:	441a      	add	r2, r3
 800345c:	68bb      	ldr	r3, [r7, #8]
 800345e:	4910      	ldr	r1, [pc, #64]	@ (80034a0 <RTC_WeekDayNum+0xe8>)
 8003460:	fba1 1303 	umull	r1, r3, r1, r3
 8003464:	095b      	lsrs	r3, r3, #5
 8003466:	1ad2      	subs	r2, r2, r3
 8003468:	68bb      	ldr	r3, [r7, #8]
 800346a:	490d      	ldr	r1, [pc, #52]	@ (80034a0 <RTC_WeekDayNum+0xe8>)
 800346c:	fba1 1303 	umull	r1, r3, r1, r3
 8003470:	09db      	lsrs	r3, r3, #7
 8003472:	4413      	add	r3, r2
 8003474:	1c9a      	adds	r2, r3, #2
 8003476:	4b0b      	ldr	r3, [pc, #44]	@ (80034a4 <RTC_WeekDayNum+0xec>)
 8003478:	fba3 1302 	umull	r1, r3, r3, r2
 800347c:	1ad1      	subs	r1, r2, r3
 800347e:	0849      	lsrs	r1, r1, #1
 8003480:	440b      	add	r3, r1
 8003482:	0899      	lsrs	r1, r3, #2
 8003484:	460b      	mov	r3, r1
 8003486:	00db      	lsls	r3, r3, #3
 8003488:	1a5b      	subs	r3, r3, r1
 800348a:	1ad3      	subs	r3, r2, r3
 800348c:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	b2db      	uxtb	r3, r3
}
 8003492:	4618      	mov	r0, r3
 8003494:	3714      	adds	r7, #20
 8003496:	46bd      	mov	sp, r7
 8003498:	bc80      	pop	{r7}
 800349a:	4770      	bx	lr
 800349c:	38e38e39 	.word	0x38e38e39
 80034a0:	51eb851f 	.word	0x51eb851f
 80034a4:	24924925 	.word	0x24924925

080034a8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80034a8:	b580      	push	{r7, lr}
 80034aa:	b082      	sub	sp, #8
 80034ac:	af00      	add	r7, sp, #0
 80034ae:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d101      	bne.n	80034ba <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80034b6:	2301      	movs	r3, #1
 80034b8:	e042      	b.n	8003540 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe f83a 	bl	8001548 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2224      	movs	r2, #36	@ 0x24
 80034d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	68da      	ldr	r2, [r3, #12]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80034ea:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f000 fdb7 	bl	8004060 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	691a      	ldr	r2, [r3, #16]
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003500:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	695a      	ldr	r2, [r3, #20]
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003510:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	68da      	ldr	r2, [r3, #12]
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003520:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2200      	movs	r2, #0
 8003526:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	2220      	movs	r2, #32
 800352c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2220      	movs	r2, #32
 8003534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800353e:	2300      	movs	r3, #0
}
 8003540:	4618      	mov	r0, r3
 8003542:	3708      	adds	r7, #8
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b08a      	sub	sp, #40	@ 0x28
 800354c:	af02      	add	r7, sp, #8
 800354e:	60f8      	str	r0, [r7, #12]
 8003550:	60b9      	str	r1, [r7, #8]
 8003552:	603b      	str	r3, [r7, #0]
 8003554:	4613      	mov	r3, r2
 8003556:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003558:	2300      	movs	r3, #0
 800355a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003562:	b2db      	uxtb	r3, r3
 8003564:	2b20      	cmp	r3, #32
 8003566:	d175      	bne.n	8003654 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	2b00      	cmp	r3, #0
 800356c:	d002      	beq.n	8003574 <HAL_UART_Transmit+0x2c>
 800356e:	88fb      	ldrh	r3, [r7, #6]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d101      	bne.n	8003578 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003574:	2301      	movs	r3, #1
 8003576:	e06e      	b.n	8003656 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	2200      	movs	r2, #0
 800357c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2221      	movs	r2, #33	@ 0x21
 8003582:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003586:	f7fe f9af 	bl	80018e8 <HAL_GetTick>
 800358a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	88fa      	ldrh	r2, [r7, #6]
 8003590:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	88fa      	ldrh	r2, [r7, #6]
 8003596:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80035a0:	d108      	bne.n	80035b4 <HAL_UART_Transmit+0x6c>
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	691b      	ldr	r3, [r3, #16]
 80035a6:	2b00      	cmp	r3, #0
 80035a8:	d104      	bne.n	80035b4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80035aa:	2300      	movs	r3, #0
 80035ac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80035ae:	68bb      	ldr	r3, [r7, #8]
 80035b0:	61bb      	str	r3, [r7, #24]
 80035b2:	e003      	b.n	80035bc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80035b8:	2300      	movs	r3, #0
 80035ba:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80035bc:	e02e      	b.n	800361c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	9300      	str	r3, [sp, #0]
 80035c2:	697b      	ldr	r3, [r7, #20]
 80035c4:	2200      	movs	r2, #0
 80035c6:	2180      	movs	r1, #128	@ 0x80
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f000 fb1c 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 80035ce:	4603      	mov	r3, r0
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d005      	beq.n	80035e0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	2220      	movs	r2, #32
 80035d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80035dc:	2303      	movs	r3, #3
 80035de:	e03a      	b.n	8003656 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d10b      	bne.n	80035fe <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80035e6:	69bb      	ldr	r3, [r7, #24]
 80035e8:	881b      	ldrh	r3, [r3, #0]
 80035ea:	461a      	mov	r2, r3
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80035f4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80035f6:	69bb      	ldr	r3, [r7, #24]
 80035f8:	3302      	adds	r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]
 80035fc:	e007      	b.n	800360e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80035fe:	69fb      	ldr	r3, [r7, #28]
 8003600:	781a      	ldrb	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003608:	69fb      	ldr	r3, [r7, #28]
 800360a:	3301      	adds	r3, #1
 800360c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003612:	b29b      	uxth	r3, r3
 8003614:	3b01      	subs	r3, #1
 8003616:	b29a      	uxth	r2, r3
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003620:	b29b      	uxth	r3, r3
 8003622:	2b00      	cmp	r3, #0
 8003624:	d1cb      	bne.n	80035be <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	697b      	ldr	r3, [r7, #20]
 800362c:	2200      	movs	r2, #0
 800362e:	2140      	movs	r1, #64	@ 0x40
 8003630:	68f8      	ldr	r0, [r7, #12]
 8003632:	f000 fae8 	bl	8003c06 <UART_WaitOnFlagUntilTimeout>
 8003636:	4603      	mov	r3, r0
 8003638:	2b00      	cmp	r3, #0
 800363a:	d005      	beq.n	8003648 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	2220      	movs	r2, #32
 8003640:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8003644:	2303      	movs	r3, #3
 8003646:	e006      	b.n	8003656 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2220      	movs	r2, #32
 800364c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8003650:	2300      	movs	r3, #0
 8003652:	e000      	b.n	8003656 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8003654:	2302      	movs	r3, #2
  }
}
 8003656:	4618      	mov	r0, r3
 8003658:	3720      	adds	r7, #32
 800365a:	46bd      	mov	sp, r7
 800365c:	bd80      	pop	{r7, pc}

0800365e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800365e:	b580      	push	{r7, lr}
 8003660:	b084      	sub	sp, #16
 8003662:	af00      	add	r7, sp, #0
 8003664:	60f8      	str	r0, [r7, #12]
 8003666:	60b9      	str	r1, [r7, #8]
 8003668:	4613      	mov	r3, r2
 800366a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003672:	b2db      	uxtb	r3, r3
 8003674:	2b20      	cmp	r3, #32
 8003676:	d112      	bne.n	800369e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_UART_Receive_IT+0x26>
 800367e:	88fb      	ldrh	r3, [r7, #6]
 8003680:	2b00      	cmp	r3, #0
 8003682:	d101      	bne.n	8003688 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003684:	2301      	movs	r3, #1
 8003686:	e00b      	b.n	80036a0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	2200      	movs	r2, #0
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800368e:	88fb      	ldrh	r3, [r7, #6]
 8003690:	461a      	mov	r2, r3
 8003692:	68b9      	ldr	r1, [r7, #8]
 8003694:	68f8      	ldr	r0, [r7, #12]
 8003696:	f000 fb0f 	bl	8003cb8 <UART_Start_Receive_IT>
 800369a:	4603      	mov	r3, r0
 800369c:	e000      	b.n	80036a0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800369e:	2302      	movs	r3, #2
  }
}
 80036a0:	4618      	mov	r0, r3
 80036a2:	3710      	adds	r7, #16
 80036a4:	46bd      	mov	sp, r7
 80036a6:	bd80      	pop	{r7, pc}

080036a8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b0ba      	sub	sp, #232	@ 0xe8
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	68db      	ldr	r3, [r3, #12]
 80036c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	695b      	ldr	r3, [r3, #20]
 80036ca:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80036ce:	2300      	movs	r3, #0
 80036d0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80036da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036de:	f003 030f 	and.w	r3, r3, #15
 80036e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80036e6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80036ea:	2b00      	cmp	r3, #0
 80036ec:	d10f      	bne.n	800370e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80036ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80036f2:	f003 0320 	and.w	r3, r3, #32
 80036f6:	2b00      	cmp	r3, #0
 80036f8:	d009      	beq.n	800370e <HAL_UART_IRQHandler+0x66>
 80036fa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80036fe:	f003 0320 	and.w	r3, r3, #32
 8003702:	2b00      	cmp	r3, #0
 8003704:	d003      	beq.n	800370e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8003706:	6878      	ldr	r0, [r7, #4]
 8003708:	f000 fbec 	bl	8003ee4 <UART_Receive_IT>
      return;
 800370c:	e25b      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800370e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 80de 	beq.w	80038d4 <HAL_UART_IRQHandler+0x22c>
 8003718:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800371c:	f003 0301 	and.w	r3, r3, #1
 8003720:	2b00      	cmp	r3, #0
 8003722:	d106      	bne.n	8003732 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8003724:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003728:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 800372c:	2b00      	cmp	r3, #0
 800372e:	f000 80d1 	beq.w	80038d4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8003732:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	2b00      	cmp	r3, #0
 800373c:	d00b      	beq.n	8003756 <HAL_UART_IRQHandler+0xae>
 800373e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003742:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003746:	2b00      	cmp	r3, #0
 8003748:	d005      	beq.n	8003756 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800374e:	f043 0201 	orr.w	r2, r3, #1
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8003756:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800375a:	f003 0304 	and.w	r3, r3, #4
 800375e:	2b00      	cmp	r3, #0
 8003760:	d00b      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
 8003762:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8003766:	f003 0301 	and.w	r3, r3, #1
 800376a:	2b00      	cmp	r3, #0
 800376c:	d005      	beq.n	800377a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003772:	f043 0202 	orr.w	r2, r3, #2
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800377a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d00b      	beq.n	800379e <HAL_UART_IRQHandler+0xf6>
 8003786:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800378a:	f003 0301 	and.w	r3, r3, #1
 800378e:	2b00      	cmp	r3, #0
 8003790:	d005      	beq.n	800379e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003796:	f043 0204 	orr.w	r2, r3, #4
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800379e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037a2:	f003 0308 	and.w	r3, r3, #8
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d011      	beq.n	80037ce <HAL_UART_IRQHandler+0x126>
 80037aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037ae:	f003 0320 	and.w	r3, r3, #32
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d105      	bne.n	80037c2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80037b6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d005      	beq.n	80037ce <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037c6:	f043 0208 	orr.w	r2, r3, #8
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	f000 81f2 	beq.w	8003bbc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80037d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80037dc:	f003 0320 	and.w	r3, r3, #32
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d008      	beq.n	80037f6 <HAL_UART_IRQHandler+0x14e>
 80037e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80037e8:	f003 0320 	and.w	r3, r3, #32
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d002      	beq.n	80037f6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80037f0:	6878      	ldr	r0, [r7, #4]
 80037f2:	f000 fb77 	bl	8003ee4 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003800:	2b00      	cmp	r3, #0
 8003802:	bf14      	ite	ne
 8003804:	2301      	movne	r3, #1
 8003806:	2300      	moveq	r3, #0
 8003808:	b2db      	uxtb	r3, r3
 800380a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003812:	f003 0308 	and.w	r3, r3, #8
 8003816:	2b00      	cmp	r3, #0
 8003818:	d103      	bne.n	8003822 <HAL_UART_IRQHandler+0x17a>
 800381a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800381e:	2b00      	cmp	r3, #0
 8003820:	d04f      	beq.n	80038c2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa81 	bl	8003d2a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	695b      	ldr	r3, [r3, #20]
 800382e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003832:	2b00      	cmp	r3, #0
 8003834:	d041      	beq.n	80038ba <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	3314      	adds	r3, #20
 800383c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003840:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003844:	e853 3f00 	ldrex	r3, [r3]
 8003848:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800384c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003854:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	3314      	adds	r3, #20
 800385e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8003862:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8003866:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800386a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800386e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8003872:	e841 2300 	strex	r3, r2, [r1]
 8003876:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800387a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800387e:	2b00      	cmp	r3, #0
 8003880:	d1d9      	bne.n	8003836 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d013      	beq.n	80038b2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800388e:	4a7e      	ldr	r2, [pc, #504]	@ (8003a88 <HAL_UART_IRQHandler+0x3e0>)
 8003890:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003896:	4618      	mov	r0, r3
 8003898:	f7fe f978 	bl	8001b8c <HAL_DMA_Abort_IT>
 800389c:	4603      	mov	r3, r0
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d016      	beq.n	80038d0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80038a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80038a8:	687a      	ldr	r2, [r7, #4]
 80038aa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80038ac:	4610      	mov	r0, r2
 80038ae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b0:	e00e      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80038b2:	6878      	ldr	r0, [r7, #4]
 80038b4:	f000 f993 	bl	8003bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038b8:	e00a      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80038ba:	6878      	ldr	r0, [r7, #4]
 80038bc:	f000 f98f 	bl	8003bde <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038c0:	e006      	b.n	80038d0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80038c2:	6878      	ldr	r0, [r7, #4]
 80038c4:	f000 f98b 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2200      	movs	r2, #0
 80038cc:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80038ce:	e175      	b.n	8003bbc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80038d0:	bf00      	nop
    return;
 80038d2:	e173      	b.n	8003bbc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038d8:	2b01      	cmp	r3, #1
 80038da:	f040 814f 	bne.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80038de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80038e2:	f003 0310 	and.w	r3, r3, #16
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	f000 8148 	beq.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80038ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80038f0:	f003 0310 	and.w	r3, r3, #16
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	f000 8141 	beq.w	8003b7c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80038fa:	2300      	movs	r3, #0
 80038fc:	60bb      	str	r3, [r7, #8]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	681b      	ldr	r3, [r3, #0]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	60bb      	str	r3, [r7, #8]
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	60bb      	str	r3, [r7, #8]
 800390e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	695b      	ldr	r3, [r3, #20]
 8003916:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800391a:	2b00      	cmp	r3, #0
 800391c:	f000 80b6 	beq.w	8003a8c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800392c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003930:	2b00      	cmp	r3, #0
 8003932:	f000 8145 	beq.w	8003bc0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800393a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800393e:	429a      	cmp	r2, r3
 8003940:	f080 813e 	bcs.w	8003bc0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800394a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003950:	699b      	ldr	r3, [r3, #24]
 8003952:	2b20      	cmp	r3, #32
 8003954:	f000 8088 	beq.w	8003a68 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	330c      	adds	r3, #12
 800395e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003962:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8003966:	e853 3f00 	ldrex	r3, [r3]
 800396a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800396e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8003972:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003976:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	330c      	adds	r3, #12
 8003980:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8003984:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8003988:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800398c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8003990:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8003994:	e841 2300 	strex	r3, r2, [r1]
 8003998:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800399c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80039a0:	2b00      	cmp	r3, #0
 80039a2:	d1d9      	bne.n	8003958 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	3314      	adds	r3, #20
 80039aa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039ac:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80039ae:	e853 3f00 	ldrex	r3, [r3]
 80039b2:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80039b4:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80039b6:	f023 0301 	bic.w	r3, r3, #1
 80039ba:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	3314      	adds	r3, #20
 80039c4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80039c8:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80039cc:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80039ce:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80039d0:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80039d4:	e841 2300 	strex	r3, r2, [r1]
 80039d8:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80039da:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d1e1      	bne.n	80039a4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	3314      	adds	r3, #20
 80039e6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80039e8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80039ea:	e853 3f00 	ldrex	r3, [r3]
 80039ee:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80039f0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80039f2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80039f6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	3314      	adds	r3, #20
 8003a00:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003a04:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003a06:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a08:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8003a0a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8003a0c:	e841 2300 	strex	r3, r2, [r1]
 8003a10:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003a12:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d1e3      	bne.n	80039e0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	2220      	movs	r2, #32
 8003a1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2200      	movs	r2, #0
 8003a24:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	330c      	adds	r3, #12
 8003a2c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003a2e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003a30:	e853 3f00 	ldrex	r3, [r3]
 8003a34:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003a36:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003a38:	f023 0310 	bic.w	r3, r3, #16
 8003a3c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	330c      	adds	r3, #12
 8003a46:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8003a4a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8003a4c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003a4e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8003a50:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8003a52:	e841 2300 	strex	r3, r2, [r1]
 8003a56:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8003a58:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d1e3      	bne.n	8003a26 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003a62:	4618      	mov	r0, r3
 8003a64:	f7fe f857 	bl	8001b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	2202      	movs	r2, #2
 8003a6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a76:	b29b      	uxth	r3, r3
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	b29b      	uxth	r3, r3
 8003a7c:	4619      	mov	r1, r3
 8003a7e:	6878      	ldr	r0, [r7, #4]
 8003a80:	f000 f8b6 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003a84:	e09c      	b.n	8003bc0 <HAL_UART_IRQHandler+0x518>
 8003a86:	bf00      	nop
 8003a88:	08003def 	.word	0x08003def
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003a94:	b29b      	uxth	r3, r3
 8003a96:	1ad3      	subs	r3, r2, r3
 8003a98:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003aa0:	b29b      	uxth	r3, r3
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	f000 808e 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8003aa8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003aac:	2b00      	cmp	r3, #0
 8003aae:	f000 8089 	beq.w	8003bc4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	330c      	adds	r3, #12
 8003ab8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003aba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003abc:	e853 3f00 	ldrex	r3, [r3]
 8003ac0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003ac2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003ac4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003ac8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	330c      	adds	r3, #12
 8003ad2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003ad6:	647a      	str	r2, [r7, #68]	@ 0x44
 8003ad8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003ada:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8003adc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003ade:	e841 2300 	strex	r3, r2, [r1]
 8003ae2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003ae4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d1e3      	bne.n	8003ab2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	3314      	adds	r3, #20
 8003af0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003af2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003af4:	e853 3f00 	ldrex	r3, [r3]
 8003af8:	623b      	str	r3, [r7, #32]
   return(result);
 8003afa:	6a3b      	ldr	r3, [r7, #32]
 8003afc:	f023 0301 	bic.w	r3, r3, #1
 8003b00:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	3314      	adds	r3, #20
 8003b0a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8003b0e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003b10:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b12:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003b14:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b16:	e841 2300 	strex	r3, r2, [r1]
 8003b1a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8003b1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d1e3      	bne.n	8003aea <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2220      	movs	r2, #32
 8003b26:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	330c      	adds	r3, #12
 8003b36:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003b38:	693b      	ldr	r3, [r7, #16]
 8003b3a:	e853 3f00 	ldrex	r3, [r3]
 8003b3e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	f023 0310 	bic.w	r3, r3, #16
 8003b46:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	330c      	adds	r3, #12
 8003b50:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8003b54:	61fa      	str	r2, [r7, #28]
 8003b56:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003b58:	69b9      	ldr	r1, [r7, #24]
 8003b5a:	69fa      	ldr	r2, [r7, #28]
 8003b5c:	e841 2300 	strex	r3, r2, [r1]
 8003b60:	617b      	str	r3, [r7, #20]
   return(result);
 8003b62:	697b      	ldr	r3, [r7, #20]
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1e3      	bne.n	8003b30 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	2202      	movs	r2, #2
 8003b6c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8003b6e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8003b72:	4619      	mov	r1, r3
 8003b74:	6878      	ldr	r0, [r7, #4]
 8003b76:	f000 f83b 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8003b7a:	e023      	b.n	8003bc4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8003b7c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003b80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d009      	beq.n	8003b9c <HAL_UART_IRQHandler+0x4f4>
 8003b88:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d003      	beq.n	8003b9c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8003b94:	6878      	ldr	r0, [r7, #4]
 8003b96:	f000 f93e 	bl	8003e16 <UART_Transmit_IT>
    return;
 8003b9a:	e014      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8003b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003ba0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d00e      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
 8003ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003bac:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003bb0:	2b00      	cmp	r3, #0
 8003bb2:	d008      	beq.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f000 f97d 	bl	8003eb4 <UART_EndTransmit_IT>
    return;
 8003bba:	e004      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
    return;
 8003bbc:	bf00      	nop
 8003bbe:	e002      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc0:	bf00      	nop
 8003bc2:	e000      	b.n	8003bc6 <HAL_UART_IRQHandler+0x51e>
      return;
 8003bc4:	bf00      	nop
  }
}
 8003bc6:	37e8      	adds	r7, #232	@ 0xe8
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bd80      	pop	{r7, pc}

08003bcc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8003bcc:	b480      	push	{r7}
 8003bce:	b083      	sub	sp, #12
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003bd4:	bf00      	nop
 8003bd6:	370c      	adds	r7, #12
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bc80      	pop	{r7}
 8003bdc:	4770      	bx	lr

08003bde <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003bde:	b480      	push	{r7}
 8003be0:	b083      	sub	sp, #12
 8003be2:	af00      	add	r7, sp, #0
 8003be4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003be6:	bf00      	nop
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	bc80      	pop	{r7}
 8003bee:	4770      	bx	lr

08003bf0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8003bfc:	bf00      	nop
 8003bfe:	370c      	adds	r7, #12
 8003c00:	46bd      	mov	sp, r7
 8003c02:	bc80      	pop	{r7}
 8003c04:	4770      	bx	lr

08003c06 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003c06:	b580      	push	{r7, lr}
 8003c08:	b086      	sub	sp, #24
 8003c0a:	af00      	add	r7, sp, #0
 8003c0c:	60f8      	str	r0, [r7, #12]
 8003c0e:	60b9      	str	r1, [r7, #8]
 8003c10:	603b      	str	r3, [r7, #0]
 8003c12:	4613      	mov	r3, r2
 8003c14:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c16:	e03b      	b.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c18:	6a3b      	ldr	r3, [r7, #32]
 8003c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c1e:	d037      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c20:	f7fd fe62 	bl	80018e8 <HAL_GetTick>
 8003c24:	4602      	mov	r2, r0
 8003c26:	683b      	ldr	r3, [r7, #0]
 8003c28:	1ad3      	subs	r3, r2, r3
 8003c2a:	6a3a      	ldr	r2, [r7, #32]
 8003c2c:	429a      	cmp	r2, r3
 8003c2e:	d302      	bcc.n	8003c36 <UART_WaitOnFlagUntilTimeout+0x30>
 8003c30:	6a3b      	ldr	r3, [r7, #32]
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d101      	bne.n	8003c3a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8003c36:	2303      	movs	r3, #3
 8003c38:	e03a      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	68db      	ldr	r3, [r3, #12]
 8003c40:	f003 0304 	and.w	r3, r3, #4
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d023      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	2b80      	cmp	r3, #128	@ 0x80
 8003c4c:	d020      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	2b40      	cmp	r3, #64	@ 0x40
 8003c52:	d01d      	beq.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f003 0308 	and.w	r3, r3, #8
 8003c5e:	2b08      	cmp	r3, #8
 8003c60:	d116      	bne.n	8003c90 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8003c62:	2300      	movs	r3, #0
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	617b      	str	r3, [r7, #20]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	685b      	ldr	r3, [r3, #4]
 8003c74:	617b      	str	r3, [r7, #20]
 8003c76:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8003c78:	68f8      	ldr	r0, [r7, #12]
 8003c7a:	f000 f856 	bl	8003d2a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	2208      	movs	r2, #8
 8003c82:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8003c8c:	2301      	movs	r3, #1
 8003c8e:	e00f      	b.n	8003cb0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	681a      	ldr	r2, [r3, #0]
 8003c96:	68bb      	ldr	r3, [r7, #8]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	68ba      	ldr	r2, [r7, #8]
 8003c9c:	429a      	cmp	r2, r3
 8003c9e:	bf0c      	ite	eq
 8003ca0:	2301      	moveq	r3, #1
 8003ca2:	2300      	movne	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	461a      	mov	r2, r3
 8003ca8:	79fb      	ldrb	r3, [r7, #7]
 8003caa:	429a      	cmp	r2, r3
 8003cac:	d0b4      	beq.n	8003c18 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003cae:	2300      	movs	r3, #0
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3718      	adds	r7, #24
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	60f8      	str	r0, [r7, #12]
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	4613      	mov	r3, r2
 8003cc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	88fa      	ldrh	r2, [r7, #6]
 8003cd0:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	88fa      	ldrh	r2, [r7, #6]
 8003cd6:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	2200      	movs	r2, #0
 8003cdc:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2222      	movs	r2, #34	@ 0x22
 8003ce2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	691b      	ldr	r3, [r3, #16]
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d007      	beq.n	8003cfe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68da      	ldr	r2, [r3, #12]
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003cfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	695a      	ldr	r2, [r3, #20]
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68da      	ldr	r2, [r3, #12]
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f042 0220 	orr.w	r2, r2, #32
 8003d1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003d1e:	2300      	movs	r3, #0
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3714      	adds	r7, #20
 8003d24:	46bd      	mov	sp, r7
 8003d26:	bc80      	pop	{r7}
 8003d28:	4770      	bx	lr

08003d2a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003d2a:	b480      	push	{r7}
 8003d2c:	b095      	sub	sp, #84	@ 0x54
 8003d2e:	af00      	add	r7, sp, #0
 8003d30:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	330c      	adds	r3, #12
 8003d38:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d3a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003d3c:	e853 3f00 	ldrex	r3, [r3]
 8003d40:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8003d42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d44:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003d48:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	330c      	adds	r3, #12
 8003d50:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003d52:	643a      	str	r2, [r7, #64]	@ 0x40
 8003d54:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d56:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003d58:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003d5a:	e841 2300 	strex	r3, r2, [r1]
 8003d5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8003d60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d1e5      	bne.n	8003d32 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	3314      	adds	r3, #20
 8003d6c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003d6e:	6a3b      	ldr	r3, [r7, #32]
 8003d70:	e853 3f00 	ldrex	r3, [r3]
 8003d74:	61fb      	str	r3, [r7, #28]
   return(result);
 8003d76:	69fb      	ldr	r3, [r7, #28]
 8003d78:	f023 0301 	bic.w	r3, r3, #1
 8003d7c:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	3314      	adds	r3, #20
 8003d84:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003d86:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d88:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003d8a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003d8c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8003d8e:	e841 2300 	strex	r3, r2, [r1]
 8003d92:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8003d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d1e5      	bne.n	8003d66 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d9e:	2b01      	cmp	r3, #1
 8003da0:	d119      	bne.n	8003dd6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	330c      	adds	r3, #12
 8003da8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	e853 3f00 	ldrex	r3, [r3]
 8003db0:	60bb      	str	r3, [r7, #8]
   return(result);
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	f023 0310 	bic.w	r3, r3, #16
 8003db8:	647b      	str	r3, [r7, #68]	@ 0x44
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	330c      	adds	r3, #12
 8003dc0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003dc2:	61ba      	str	r2, [r7, #24]
 8003dc4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003dc6:	6979      	ldr	r1, [r7, #20]
 8003dc8:	69ba      	ldr	r2, [r7, #24]
 8003dca:	e841 2300 	strex	r3, r2, [r1]
 8003dce:	613b      	str	r3, [r7, #16]
   return(result);
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	2b00      	cmp	r3, #0
 8003dd4:	d1e5      	bne.n	8003da2 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	2220      	movs	r2, #32
 8003dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003de4:	bf00      	nop
 8003de6:	3754      	adds	r7, #84	@ 0x54
 8003de8:	46bd      	mov	sp, r7
 8003dea:	bc80      	pop	{r7}
 8003dec:	4770      	bx	lr

08003dee <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	2200      	movs	r2, #0
 8003e06:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003e08:	68f8      	ldr	r0, [r7, #12]
 8003e0a:	f7ff fee8 	bl	8003bde <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003e0e:	bf00      	nop
 8003e10:	3710      	adds	r7, #16
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003e16:	b480      	push	{r7}
 8003e18:	b085      	sub	sp, #20
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	2b21      	cmp	r3, #33	@ 0x21
 8003e28:	d13e      	bne.n	8003ea8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e32:	d114      	bne.n	8003e5e <UART_Transmit_IT+0x48>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	691b      	ldr	r3, [r3, #16]
 8003e38:	2b00      	cmp	r3, #0
 8003e3a:	d110      	bne.n	8003e5e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	6a1b      	ldr	r3, [r3, #32]
 8003e40:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	881b      	ldrh	r3, [r3, #0]
 8003e46:	461a      	mov	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e50:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6a1b      	ldr	r3, [r3, #32]
 8003e56:	1c9a      	adds	r2, r3, #2
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	621a      	str	r2, [r3, #32]
 8003e5c:	e008      	b.n	8003e70 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	6a1b      	ldr	r3, [r3, #32]
 8003e62:	1c59      	adds	r1, r3, #1
 8003e64:	687a      	ldr	r2, [r7, #4]
 8003e66:	6211      	str	r1, [r2, #32]
 8003e68:	781a      	ldrb	r2, [r3, #0]
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8003e74:	b29b      	uxth	r3, r3
 8003e76:	3b01      	subs	r3, #1
 8003e78:	b29b      	uxth	r3, r3
 8003e7a:	687a      	ldr	r2, [r7, #4]
 8003e7c:	4619      	mov	r1, r3
 8003e7e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d10f      	bne.n	8003ea4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	68da      	ldr	r2, [r3, #12]
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003e92:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	68da      	ldr	r2, [r3, #12]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003ea2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8003ea4:	2300      	movs	r3, #0
 8003ea6:	e000      	b.n	8003eaa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8003ea8:	2302      	movs	r3, #2
  }
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bc80      	pop	{r7}
 8003eb2:	4770      	bx	lr

08003eb4 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003eb4:	b580      	push	{r7, lr}
 8003eb6:	b082      	sub	sp, #8
 8003eb8:	af00      	add	r7, sp, #0
 8003eba:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003eca:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2220      	movs	r2, #32
 8003ed0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003ed4:	6878      	ldr	r0, [r7, #4]
 8003ed6:	f7ff fe79 	bl	8003bcc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003eda:	2300      	movs	r3, #0
}
 8003edc:	4618      	mov	r0, r3
 8003ede:	3708      	adds	r7, #8
 8003ee0:	46bd      	mov	sp, r7
 8003ee2:	bd80      	pop	{r7, pc}

08003ee4 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003ee4:	b580      	push	{r7, lr}
 8003ee6:	b08c      	sub	sp, #48	@ 0x30
 8003ee8:	af00      	add	r7, sp, #0
 8003eea:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003ef2:	b2db      	uxtb	r3, r3
 8003ef4:	2b22      	cmp	r3, #34	@ 0x22
 8003ef6:	f040 80ae 	bne.w	8004056 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	689b      	ldr	r3, [r3, #8]
 8003efe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f02:	d117      	bne.n	8003f34 <UART_Receive_IT+0x50>
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	691b      	ldr	r3, [r3, #16]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d113      	bne.n	8003f34 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003f0c:	2300      	movs	r3, #0
 8003f0e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f14:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	685b      	ldr	r3, [r3, #4]
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f22:	b29a      	uxth	r2, r3
 8003f24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003f26:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f2c:	1c9a      	adds	r2, r3, #2
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	629a      	str	r2, [r3, #40]	@ 0x28
 8003f32:	e026      	b.n	8003f82 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f38:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	689b      	ldr	r3, [r3, #8]
 8003f42:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003f46:	d007      	beq.n	8003f58 <UART_Receive_IT+0x74>
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	2b00      	cmp	r3, #0
 8003f4e:	d10a      	bne.n	8003f66 <UART_Receive_IT+0x82>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	691b      	ldr	r3, [r3, #16]
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d106      	bne.n	8003f66 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	b2da      	uxtb	r2, r3
 8003f60:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f62:	701a      	strb	r2, [r3, #0]
 8003f64:	e008      	b.n	8003f78 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	b2db      	uxtb	r3, r3
 8003f6e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f72:	b2da      	uxtb	r2, r3
 8003f74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003f76:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f7c:	1c5a      	adds	r2, r3, #1
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8003f86:	b29b      	uxth	r3, r3
 8003f88:	3b01      	subs	r3, #1
 8003f8a:	b29b      	uxth	r3, r3
 8003f8c:	687a      	ldr	r2, [r7, #4]
 8003f8e:	4619      	mov	r1, r3
 8003f90:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d15d      	bne.n	8004052 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68da      	ldr	r2, [r3, #12]
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f022 0220 	bic.w	r2, r2, #32
 8003fa4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68da      	ldr	r2, [r3, #12]
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003fb4:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	695a      	ldr	r2, [r3, #20]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f022 0201 	bic.w	r2, r2, #1
 8003fc4:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	2220      	movs	r2, #32
 8003fca:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fd8:	2b01      	cmp	r3, #1
 8003fda:	d135      	bne.n	8004048 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2200      	movs	r2, #0
 8003fe0:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	330c      	adds	r3, #12
 8003fe8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003fea:	697b      	ldr	r3, [r7, #20]
 8003fec:	e853 3f00 	ldrex	r3, [r3]
 8003ff0:	613b      	str	r3, [r7, #16]
   return(result);
 8003ff2:	693b      	ldr	r3, [r7, #16]
 8003ff4:	f023 0310 	bic.w	r3, r3, #16
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	330c      	adds	r3, #12
 8004000:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004002:	623a      	str	r2, [r7, #32]
 8004004:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004006:	69f9      	ldr	r1, [r7, #28]
 8004008:	6a3a      	ldr	r2, [r7, #32]
 800400a:	e841 2300 	strex	r3, r2, [r1]
 800400e:	61bb      	str	r3, [r7, #24]
   return(result);
 8004010:	69bb      	ldr	r3, [r7, #24]
 8004012:	2b00      	cmp	r3, #0
 8004014:	d1e5      	bne.n	8003fe2 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0310 	and.w	r3, r3, #16
 8004020:	2b10      	cmp	r3, #16
 8004022:	d10a      	bne.n	800403a <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004024:	2300      	movs	r3, #0
 8004026:	60fb      	str	r3, [r7, #12]
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	60fb      	str	r3, [r7, #12]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	60fb      	str	r3, [r7, #12]
 8004038:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800403e:	4619      	mov	r1, r3
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f7ff fdd5 	bl	8003bf0 <HAL_UARTEx_RxEventCallback>
 8004046:	e002      	b.n	800404e <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004048:	6878      	ldr	r0, [r7, #4]
 800404a:	f7fd fae7 	bl	800161c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800404e:	2300      	movs	r3, #0
 8004050:	e002      	b.n	8004058 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004052:	2300      	movs	r3, #0
 8004054:	e000      	b.n	8004058 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004056:	2302      	movs	r3, #2
  }
}
 8004058:	4618      	mov	r0, r3
 800405a:	3730      	adds	r7, #48	@ 0x30
 800405c:	46bd      	mov	sp, r7
 800405e:	bd80      	pop	{r7, pc}

08004060 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004060:	b580      	push	{r7, lr}
 8004062:	b084      	sub	sp, #16
 8004064:	af00      	add	r7, sp, #0
 8004066:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	68da      	ldr	r2, [r3, #12]
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	430a      	orrs	r2, r1
 800407c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	689a      	ldr	r2, [r3, #8]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	431a      	orrs	r2, r3
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	695b      	ldr	r3, [r3, #20]
 800408c:	4313      	orrs	r3, r2
 800408e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
 8004096:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 800409a:	f023 030c 	bic.w	r3, r3, #12
 800409e:	687a      	ldr	r2, [r7, #4]
 80040a0:	6812      	ldr	r2, [r2, #0]
 80040a2:	68b9      	ldr	r1, [r7, #8]
 80040a4:	430b      	orrs	r3, r1
 80040a6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	695b      	ldr	r3, [r3, #20]
 80040ae:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	699a      	ldr	r2, [r3, #24]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	430a      	orrs	r2, r1
 80040bc:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	4a2c      	ldr	r2, [pc, #176]	@ (8004174 <UART_SetConfig+0x114>)
 80040c4:	4293      	cmp	r3, r2
 80040c6:	d103      	bne.n	80040d0 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80040c8:	f7fe fb5e 	bl	8002788 <HAL_RCC_GetPCLK2Freq>
 80040cc:	60f8      	str	r0, [r7, #12]
 80040ce:	e002      	b.n	80040d6 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80040d0:	f7fe fb46 	bl	8002760 <HAL_RCC_GetPCLK1Freq>
 80040d4:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80040d6:	68fa      	ldr	r2, [r7, #12]
 80040d8:	4613      	mov	r3, r2
 80040da:	009b      	lsls	r3, r3, #2
 80040dc:	4413      	add	r3, r2
 80040de:	009a      	lsls	r2, r3, #2
 80040e0:	441a      	add	r2, r3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
 80040e6:	009b      	lsls	r3, r3, #2
 80040e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ec:	4a22      	ldr	r2, [pc, #136]	@ (8004178 <UART_SetConfig+0x118>)
 80040ee:	fba2 2303 	umull	r2, r3, r2, r3
 80040f2:	095b      	lsrs	r3, r3, #5
 80040f4:	0119      	lsls	r1, r3, #4
 80040f6:	68fa      	ldr	r2, [r7, #12]
 80040f8:	4613      	mov	r3, r2
 80040fa:	009b      	lsls	r3, r3, #2
 80040fc:	4413      	add	r3, r2
 80040fe:	009a      	lsls	r2, r3, #2
 8004100:	441a      	add	r2, r3
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	685b      	ldr	r3, [r3, #4]
 8004106:	009b      	lsls	r3, r3, #2
 8004108:	fbb2 f2f3 	udiv	r2, r2, r3
 800410c:	4b1a      	ldr	r3, [pc, #104]	@ (8004178 <UART_SetConfig+0x118>)
 800410e:	fba3 0302 	umull	r0, r3, r3, r2
 8004112:	095b      	lsrs	r3, r3, #5
 8004114:	2064      	movs	r0, #100	@ 0x64
 8004116:	fb00 f303 	mul.w	r3, r0, r3
 800411a:	1ad3      	subs	r3, r2, r3
 800411c:	011b      	lsls	r3, r3, #4
 800411e:	3332      	adds	r3, #50	@ 0x32
 8004120:	4a15      	ldr	r2, [pc, #84]	@ (8004178 <UART_SetConfig+0x118>)
 8004122:	fba2 2303 	umull	r2, r3, r2, r3
 8004126:	095b      	lsrs	r3, r3, #5
 8004128:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800412c:	4419      	add	r1, r3
 800412e:	68fa      	ldr	r2, [r7, #12]
 8004130:	4613      	mov	r3, r2
 8004132:	009b      	lsls	r3, r3, #2
 8004134:	4413      	add	r3, r2
 8004136:	009a      	lsls	r2, r3, #2
 8004138:	441a      	add	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	685b      	ldr	r3, [r3, #4]
 800413e:	009b      	lsls	r3, r3, #2
 8004140:	fbb2 f2f3 	udiv	r2, r2, r3
 8004144:	4b0c      	ldr	r3, [pc, #48]	@ (8004178 <UART_SetConfig+0x118>)
 8004146:	fba3 0302 	umull	r0, r3, r3, r2
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	2064      	movs	r0, #100	@ 0x64
 800414e:	fb00 f303 	mul.w	r3, r0, r3
 8004152:	1ad3      	subs	r3, r2, r3
 8004154:	011b      	lsls	r3, r3, #4
 8004156:	3332      	adds	r3, #50	@ 0x32
 8004158:	4a07      	ldr	r2, [pc, #28]	@ (8004178 <UART_SetConfig+0x118>)
 800415a:	fba2 2303 	umull	r2, r3, r2, r3
 800415e:	095b      	lsrs	r3, r3, #5
 8004160:	f003 020f 	and.w	r2, r3, #15
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	440a      	add	r2, r1
 800416a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800416c:	bf00      	nop
 800416e:	3710      	adds	r7, #16
 8004170:	46bd      	mov	sp, r7
 8004172:	bd80      	pop	{r7, pc}
 8004174:	40013800 	.word	0x40013800
 8004178:	51eb851f 	.word	0x51eb851f

0800417c <__NVIC_SetPriority>:
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	4603      	mov	r3, r0
 8004184:	6039      	str	r1, [r7, #0]
 8004186:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004188:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800418c:	2b00      	cmp	r3, #0
 800418e:	db0a      	blt.n	80041a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004190:	683b      	ldr	r3, [r7, #0]
 8004192:	b2da      	uxtb	r2, r3
 8004194:	490c      	ldr	r1, [pc, #48]	@ (80041c8 <__NVIC_SetPriority+0x4c>)
 8004196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800419a:	0112      	lsls	r2, r2, #4
 800419c:	b2d2      	uxtb	r2, r2
 800419e:	440b      	add	r3, r1
 80041a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80041a4:	e00a      	b.n	80041bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4908      	ldr	r1, [pc, #32]	@ (80041cc <__NVIC_SetPriority+0x50>)
 80041ac:	79fb      	ldrb	r3, [r7, #7]
 80041ae:	f003 030f 	and.w	r3, r3, #15
 80041b2:	3b04      	subs	r3, #4
 80041b4:	0112      	lsls	r2, r2, #4
 80041b6:	b2d2      	uxtb	r2, r2
 80041b8:	440b      	add	r3, r1
 80041ba:	761a      	strb	r2, [r3, #24]
}
 80041bc:	bf00      	nop
 80041be:	370c      	adds	r7, #12
 80041c0:	46bd      	mov	sp, r7
 80041c2:	bc80      	pop	{r7}
 80041c4:	4770      	bx	lr
 80041c6:	bf00      	nop
 80041c8:	e000e100 	.word	0xe000e100
 80041cc:	e000ed00 	.word	0xe000ed00

080041d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80041d0:	b580      	push	{r7, lr}
 80041d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80041d4:	4b05      	ldr	r3, [pc, #20]	@ (80041ec <SysTick_Handler+0x1c>)
 80041d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80041d8:	f002 f818 	bl	800620c <xTaskGetSchedulerState>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b01      	cmp	r3, #1
 80041e0:	d001      	beq.n	80041e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80041e2:	f002 ffd9 	bl	8007198 <xPortSysTickHandler>
  }
}
 80041e6:	bf00      	nop
 80041e8:	bd80      	pop	{r7, pc}
 80041ea:	bf00      	nop
 80041ec:	e000e010 	.word	0xe000e010

080041f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80041f0:	b580      	push	{r7, lr}
 80041f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80041f4:	2100      	movs	r1, #0
 80041f6:	f06f 0004 	mvn.w	r0, #4
 80041fa:	f7ff ffbf 	bl	800417c <__NVIC_SetPriority>
#endif
}
 80041fe:	bf00      	nop
 8004200:	bd80      	pop	{r7, pc}
	...

08004204 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004204:	b480      	push	{r7}
 8004206:	b083      	sub	sp, #12
 8004208:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800420a:	f3ef 8305 	mrs	r3, IPSR
 800420e:	603b      	str	r3, [r7, #0]
  return(result);
 8004210:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004212:	2b00      	cmp	r3, #0
 8004214:	d003      	beq.n	800421e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004216:	f06f 0305 	mvn.w	r3, #5
 800421a:	607b      	str	r3, [r7, #4]
 800421c:	e00c      	b.n	8004238 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800421e:	4b09      	ldr	r3, [pc, #36]	@ (8004244 <osKernelInitialize+0x40>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d105      	bne.n	8004232 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004226:	4b07      	ldr	r3, [pc, #28]	@ (8004244 <osKernelInitialize+0x40>)
 8004228:	2201      	movs	r2, #1
 800422a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800422c:	2300      	movs	r3, #0
 800422e:	607b      	str	r3, [r7, #4]
 8004230:	e002      	b.n	8004238 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004232:	f04f 33ff 	mov.w	r3, #4294967295
 8004236:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004238:	687b      	ldr	r3, [r7, #4]
}
 800423a:	4618      	mov	r0, r3
 800423c:	370c      	adds	r7, #12
 800423e:	46bd      	mov	sp, r7
 8004240:	bc80      	pop	{r7}
 8004242:	4770      	bx	lr
 8004244:	20000260 	.word	0x20000260

08004248 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004248:	b580      	push	{r7, lr}
 800424a:	b082      	sub	sp, #8
 800424c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800424e:	f3ef 8305 	mrs	r3, IPSR
 8004252:	603b      	str	r3, [r7, #0]
  return(result);
 8004254:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004256:	2b00      	cmp	r3, #0
 8004258:	d003      	beq.n	8004262 <osKernelStart+0x1a>
    stat = osErrorISR;
 800425a:	f06f 0305 	mvn.w	r3, #5
 800425e:	607b      	str	r3, [r7, #4]
 8004260:	e010      	b.n	8004284 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004262:	4b0b      	ldr	r3, [pc, #44]	@ (8004290 <osKernelStart+0x48>)
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	2b01      	cmp	r3, #1
 8004268:	d109      	bne.n	800427e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800426a:	f7ff ffc1 	bl	80041f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800426e:	4b08      	ldr	r3, [pc, #32]	@ (8004290 <osKernelStart+0x48>)
 8004270:	2202      	movs	r2, #2
 8004272:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004274:	f001 fb70 	bl	8005958 <vTaskStartScheduler>
      stat = osOK;
 8004278:	2300      	movs	r3, #0
 800427a:	607b      	str	r3, [r7, #4]
 800427c:	e002      	b.n	8004284 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800427e:	f04f 33ff 	mov.w	r3, #4294967295
 8004282:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004284:	687b      	ldr	r3, [r7, #4]
}
 8004286:	4618      	mov	r0, r3
 8004288:	3708      	adds	r7, #8
 800428a:	46bd      	mov	sp, r7
 800428c:	bd80      	pop	{r7, pc}
 800428e:	bf00      	nop
 8004290:	20000260 	.word	0x20000260

08004294 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004294:	b580      	push	{r7, lr}
 8004296:	b08e      	sub	sp, #56	@ 0x38
 8004298:	af04      	add	r7, sp, #16
 800429a:	60f8      	str	r0, [r7, #12]
 800429c:	60b9      	str	r1, [r7, #8]
 800429e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80042a0:	2300      	movs	r3, #0
 80042a2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80042a4:	f3ef 8305 	mrs	r3, IPSR
 80042a8:	617b      	str	r3, [r7, #20]
  return(result);
 80042aa:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d17e      	bne.n	80043ae <osThreadNew+0x11a>
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d07b      	beq.n	80043ae <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80042b6:	2380      	movs	r3, #128	@ 0x80
 80042b8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80042ba:	2318      	movs	r3, #24
 80042bc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80042be:	2300      	movs	r3, #0
 80042c0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80042c2:	f04f 33ff 	mov.w	r3, #4294967295
 80042c6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d045      	beq.n	800435a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d002      	beq.n	80042dc <osThreadNew+0x48>
        name = attr->name;
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	699b      	ldr	r3, [r3, #24]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d002      	beq.n	80042ea <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	699b      	ldr	r3, [r3, #24]
 80042e8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80042ea:	69fb      	ldr	r3, [r7, #28]
 80042ec:	2b00      	cmp	r3, #0
 80042ee:	d008      	beq.n	8004302 <osThreadNew+0x6e>
 80042f0:	69fb      	ldr	r3, [r7, #28]
 80042f2:	2b38      	cmp	r3, #56	@ 0x38
 80042f4:	d805      	bhi.n	8004302 <osThreadNew+0x6e>
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	685b      	ldr	r3, [r3, #4]
 80042fa:	f003 0301 	and.w	r3, r3, #1
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d001      	beq.n	8004306 <osThreadNew+0x72>
        return (NULL);
 8004302:	2300      	movs	r3, #0
 8004304:	e054      	b.n	80043b0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d003      	beq.n	8004316 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	695b      	ldr	r3, [r3, #20]
 8004312:	089b      	lsrs	r3, r3, #2
 8004314:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	689b      	ldr	r3, [r3, #8]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d00e      	beq.n	800433c <osThreadNew+0xa8>
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	68db      	ldr	r3, [r3, #12]
 8004322:	2b5b      	cmp	r3, #91	@ 0x5b
 8004324:	d90a      	bls.n	800433c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800432a:	2b00      	cmp	r3, #0
 800432c:	d006      	beq.n	800433c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	695b      	ldr	r3, [r3, #20]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d002      	beq.n	800433c <osThreadNew+0xa8>
        mem = 1;
 8004336:	2301      	movs	r3, #1
 8004338:	61bb      	str	r3, [r7, #24]
 800433a:	e010      	b.n	800435e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	689b      	ldr	r3, [r3, #8]
 8004340:	2b00      	cmp	r3, #0
 8004342:	d10c      	bne.n	800435e <osThreadNew+0xca>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	68db      	ldr	r3, [r3, #12]
 8004348:	2b00      	cmp	r3, #0
 800434a:	d108      	bne.n	800435e <osThreadNew+0xca>
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	691b      	ldr	r3, [r3, #16]
 8004350:	2b00      	cmp	r3, #0
 8004352:	d104      	bne.n	800435e <osThreadNew+0xca>
          mem = 0;
 8004354:	2300      	movs	r3, #0
 8004356:	61bb      	str	r3, [r7, #24]
 8004358:	e001      	b.n	800435e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800435a:	2300      	movs	r3, #0
 800435c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800435e:	69bb      	ldr	r3, [r7, #24]
 8004360:	2b01      	cmp	r3, #1
 8004362:	d110      	bne.n	8004386 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004368:	687a      	ldr	r2, [r7, #4]
 800436a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800436c:	9202      	str	r2, [sp, #8]
 800436e:	9301      	str	r3, [sp, #4]
 8004370:	69fb      	ldr	r3, [r7, #28]
 8004372:	9300      	str	r3, [sp, #0]
 8004374:	68bb      	ldr	r3, [r7, #8]
 8004376:	6a3a      	ldr	r2, [r7, #32]
 8004378:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800437a:	68f8      	ldr	r0, [r7, #12]
 800437c:	f001 f946 	bl	800560c <xTaskCreateStatic>
 8004380:	4603      	mov	r3, r0
 8004382:	613b      	str	r3, [r7, #16]
 8004384:	e013      	b.n	80043ae <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	2b00      	cmp	r3, #0
 800438a:	d110      	bne.n	80043ae <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800438c:	6a3b      	ldr	r3, [r7, #32]
 800438e:	b29a      	uxth	r2, r3
 8004390:	f107 0310 	add.w	r3, r7, #16
 8004394:	9301      	str	r3, [sp, #4]
 8004396:	69fb      	ldr	r3, [r7, #28]
 8004398:	9300      	str	r3, [sp, #0]
 800439a:	68bb      	ldr	r3, [r7, #8]
 800439c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800439e:	68f8      	ldr	r0, [r7, #12]
 80043a0:	f001 f994 	bl	80056cc <xTaskCreate>
 80043a4:	4603      	mov	r3, r0
 80043a6:	2b01      	cmp	r3, #1
 80043a8:	d001      	beq.n	80043ae <osThreadNew+0x11a>
            hTask = NULL;
 80043aa:	2300      	movs	r3, #0
 80043ac:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80043ae:	693b      	ldr	r3, [r7, #16]
}
 80043b0:	4618      	mov	r0, r3
 80043b2:	3728      	adds	r7, #40	@ 0x28
 80043b4:	46bd      	mov	sp, r7
 80043b6:	bd80      	pop	{r7, pc}

080043b8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80043b8:	b480      	push	{r7}
 80043ba:	b085      	sub	sp, #20
 80043bc:	af00      	add	r7, sp, #0
 80043be:	60f8      	str	r0, [r7, #12]
 80043c0:	60b9      	str	r1, [r7, #8]
 80043c2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	4a06      	ldr	r2, [pc, #24]	@ (80043e0 <vApplicationGetIdleTaskMemory+0x28>)
 80043c8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80043ca:	68bb      	ldr	r3, [r7, #8]
 80043cc:	4a05      	ldr	r2, [pc, #20]	@ (80043e4 <vApplicationGetIdleTaskMemory+0x2c>)
 80043ce:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2280      	movs	r2, #128	@ 0x80
 80043d4:	601a      	str	r2, [r3, #0]
}
 80043d6:	bf00      	nop
 80043d8:	3714      	adds	r7, #20
 80043da:	46bd      	mov	sp, r7
 80043dc:	bc80      	pop	{r7}
 80043de:	4770      	bx	lr
 80043e0:	20000264 	.word	0x20000264
 80043e4:	200002c0 	.word	0x200002c0

080043e8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	4a07      	ldr	r2, [pc, #28]	@ (8004414 <vApplicationGetTimerTaskMemory+0x2c>)
 80043f8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80043fa:	68bb      	ldr	r3, [r7, #8]
 80043fc:	4a06      	ldr	r2, [pc, #24]	@ (8004418 <vApplicationGetTimerTaskMemory+0x30>)
 80043fe:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004406:	601a      	str	r2, [r3, #0]
}
 8004408:	bf00      	nop
 800440a:	3714      	adds	r7, #20
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr
 8004412:	bf00      	nop
 8004414:	200004c0 	.word	0x200004c0
 8004418:	2000051c 	.word	0x2000051c

0800441c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800441c:	b480      	push	{r7}
 800441e:	b083      	sub	sp, #12
 8004420:	af00      	add	r7, sp, #0
 8004422:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	f103 0208 	add.w	r2, r3, #8
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	f04f 32ff 	mov.w	r2, #4294967295
 8004434:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f103 0208 	add.w	r2, r3, #8
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	f103 0208 	add.w	r2, r3, #8
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004472:	b480      	push	{r7}
 8004474:	b085      	sub	sp, #20
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
 800447a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	685b      	ldr	r3, [r3, #4]
 8004480:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004482:	683b      	ldr	r3, [r7, #0]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	683b      	ldr	r3, [r7, #0]
 800448e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	683a      	ldr	r2, [r7, #0]
 800449c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	1c5a      	adds	r2, r3, #1
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	601a      	str	r2, [r3, #0]
}
 80044ae:	bf00      	nop
 80044b0:	3714      	adds	r7, #20
 80044b2:	46bd      	mov	sp, r7
 80044b4:	bc80      	pop	{r7}
 80044b6:	4770      	bx	lr

080044b8 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80044b8:	b480      	push	{r7}
 80044ba:	b085      	sub	sp, #20
 80044bc:	af00      	add	r7, sp, #0
 80044be:	6078      	str	r0, [r7, #4]
 80044c0:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ce:	d103      	bne.n	80044d8 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	691b      	ldr	r3, [r3, #16]
 80044d4:	60fb      	str	r3, [r7, #12]
 80044d6:	e00c      	b.n	80044f2 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	3308      	adds	r3, #8
 80044dc:	60fb      	str	r3, [r7, #12]
 80044de:	e002      	b.n	80044e6 <vListInsert+0x2e>
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	60fb      	str	r3, [r7, #12]
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	68ba      	ldr	r2, [r7, #8]
 80044ee:	429a      	cmp	r2, r3
 80044f0:	d2f6      	bcs.n	80044e0 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	685a      	ldr	r2, [r3, #4]
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	685b      	ldr	r3, [r3, #4]
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004502:	683b      	ldr	r3, [r7, #0]
 8004504:	68fa      	ldr	r2, [r7, #12]
 8004506:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	683a      	ldr	r2, [r7, #0]
 800450c:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800450e:	683b      	ldr	r3, [r7, #0]
 8004510:	687a      	ldr	r2, [r7, #4]
 8004512:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	1c5a      	adds	r2, r3, #1
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	601a      	str	r2, [r3, #0]
}
 800451e:	bf00      	nop
 8004520:	3714      	adds	r7, #20
 8004522:	46bd      	mov	sp, r7
 8004524:	bc80      	pop	{r7}
 8004526:	4770      	bx	lr

08004528 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004528:	b480      	push	{r7}
 800452a:	b085      	sub	sp, #20
 800452c:	af00      	add	r7, sp, #0
 800452e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	691b      	ldr	r3, [r3, #16]
 8004534:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	687a      	ldr	r2, [r7, #4]
 800453c:	6892      	ldr	r2, [r2, #8]
 800453e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	689b      	ldr	r3, [r3, #8]
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	6852      	ldr	r2, [r2, #4]
 8004548:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800454a:	68fb      	ldr	r3, [r7, #12]
 800454c:	685b      	ldr	r3, [r3, #4]
 800454e:	687a      	ldr	r2, [r7, #4]
 8004550:	429a      	cmp	r2, r3
 8004552:	d103      	bne.n	800455c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	689a      	ldr	r2, [r3, #8]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	1e5a      	subs	r2, r3, #1
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800456c:	68fb      	ldr	r3, [r7, #12]
 800456e:	681b      	ldr	r3, [r3, #0]
}
 8004570:	4618      	mov	r0, r3
 8004572:	3714      	adds	r7, #20
 8004574:	46bd      	mov	sp, r7
 8004576:	bc80      	pop	{r7}
 8004578:	4770      	bx	lr
	...

0800457c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800457c:	b580      	push	{r7, lr}
 800457e:	b084      	sub	sp, #16
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	2b00      	cmp	r3, #0
 800458e:	d10b      	bne.n	80045a8 <xQueueGenericReset+0x2c>
	__asm volatile
 8004590:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004594:	f383 8811 	msr	BASEPRI, r3
 8004598:	f3bf 8f6f 	isb	sy
 800459c:	f3bf 8f4f 	dsb	sy
 80045a0:	60bb      	str	r3, [r7, #8]
}
 80045a2:	bf00      	nop
 80045a4:	bf00      	nop
 80045a6:	e7fd      	b.n	80045a4 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80045a8:	f002 fd78 	bl	800709c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b4:	68f9      	ldr	r1, [r7, #12]
 80045b6:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045b8:	fb01 f303 	mul.w	r3, r1, r3
 80045bc:	441a      	add	r2, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	681a      	ldr	r2, [r3, #0]
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045d8:	3b01      	subs	r3, #1
 80045da:	68f9      	ldr	r1, [r7, #12]
 80045dc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80045de:	fb01 f303 	mul.w	r3, r1, r3
 80045e2:	441a      	add	r2, r3
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	22ff      	movs	r2, #255	@ 0xff
 80045ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	22ff      	movs	r2, #255	@ 0xff
 80045f4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80045f8:	683b      	ldr	r3, [r7, #0]
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d114      	bne.n	8004628 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80045fe:	68fb      	ldr	r3, [r7, #12]
 8004600:	691b      	ldr	r3, [r3, #16]
 8004602:	2b00      	cmp	r3, #0
 8004604:	d01a      	beq.n	800463c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	3310      	adds	r3, #16
 800460a:	4618      	mov	r0, r3
 800460c:	f001 fc30 	bl	8005e70 <xTaskRemoveFromEventList>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d012      	beq.n	800463c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004616:	4b0d      	ldr	r3, [pc, #52]	@ (800464c <xQueueGenericReset+0xd0>)
 8004618:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800461c:	601a      	str	r2, [r3, #0]
 800461e:	f3bf 8f4f 	dsb	sy
 8004622:	f3bf 8f6f 	isb	sy
 8004626:	e009      	b.n	800463c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	3310      	adds	r3, #16
 800462c:	4618      	mov	r0, r3
 800462e:	f7ff fef5 	bl	800441c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	3324      	adds	r3, #36	@ 0x24
 8004636:	4618      	mov	r0, r3
 8004638:	f7ff fef0 	bl	800441c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800463c:	f002 fd5e 	bl	80070fc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004640:	2301      	movs	r3, #1
}
 8004642:	4618      	mov	r0, r3
 8004644:	3710      	adds	r7, #16
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
 800464a:	bf00      	nop
 800464c:	e000ed04 	.word	0xe000ed04

08004650 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004650:	b580      	push	{r7, lr}
 8004652:	b08e      	sub	sp, #56	@ 0x38
 8004654:	af02      	add	r7, sp, #8
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	2b00      	cmp	r3, #0
 8004662:	d10b      	bne.n	800467c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004668:	f383 8811 	msr	BASEPRI, r3
 800466c:	f3bf 8f6f 	isb	sy
 8004670:	f3bf 8f4f 	dsb	sy
 8004674:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004676:	bf00      	nop
 8004678:	bf00      	nop
 800467a:	e7fd      	b.n	8004678 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	2b00      	cmp	r3, #0
 8004680:	d10b      	bne.n	800469a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004686:	f383 8811 	msr	BASEPRI, r3
 800468a:	f3bf 8f6f 	isb	sy
 800468e:	f3bf 8f4f 	dsb	sy
 8004692:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004694:	bf00      	nop
 8004696:	bf00      	nop
 8004698:	e7fd      	b.n	8004696 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	2b00      	cmp	r3, #0
 800469e:	d002      	beq.n	80046a6 <xQueueGenericCreateStatic+0x56>
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d001      	beq.n	80046aa <xQueueGenericCreateStatic+0x5a>
 80046a6:	2301      	movs	r3, #1
 80046a8:	e000      	b.n	80046ac <xQueueGenericCreateStatic+0x5c>
 80046aa:	2300      	movs	r3, #0
 80046ac:	2b00      	cmp	r3, #0
 80046ae:	d10b      	bne.n	80046c8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80046b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046b4:	f383 8811 	msr	BASEPRI, r3
 80046b8:	f3bf 8f6f 	isb	sy
 80046bc:	f3bf 8f4f 	dsb	sy
 80046c0:	623b      	str	r3, [r7, #32]
}
 80046c2:	bf00      	nop
 80046c4:	bf00      	nop
 80046c6:	e7fd      	b.n	80046c4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <xQueueGenericCreateStatic+0x84>
 80046ce:	68bb      	ldr	r3, [r7, #8]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d101      	bne.n	80046d8 <xQueueGenericCreateStatic+0x88>
 80046d4:	2301      	movs	r3, #1
 80046d6:	e000      	b.n	80046da <xQueueGenericCreateStatic+0x8a>
 80046d8:	2300      	movs	r3, #0
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d10b      	bne.n	80046f6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80046de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80046e2:	f383 8811 	msr	BASEPRI, r3
 80046e6:	f3bf 8f6f 	isb	sy
 80046ea:	f3bf 8f4f 	dsb	sy
 80046ee:	61fb      	str	r3, [r7, #28]
}
 80046f0:	bf00      	nop
 80046f2:	bf00      	nop
 80046f4:	e7fd      	b.n	80046f2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80046f6:	2350      	movs	r3, #80	@ 0x50
 80046f8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80046fa:	697b      	ldr	r3, [r7, #20]
 80046fc:	2b50      	cmp	r3, #80	@ 0x50
 80046fe:	d00b      	beq.n	8004718 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004700:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004704:	f383 8811 	msr	BASEPRI, r3
 8004708:	f3bf 8f6f 	isb	sy
 800470c:	f3bf 8f4f 	dsb	sy
 8004710:	61bb      	str	r3, [r7, #24]
}
 8004712:	bf00      	nop
 8004714:	bf00      	nop
 8004716:	e7fd      	b.n	8004714 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004718:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800471e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004720:	2b00      	cmp	r3, #0
 8004722:	d00d      	beq.n	8004740 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004726:	2201      	movs	r2, #1
 8004728:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800472c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004732:	9300      	str	r3, [sp, #0]
 8004734:	4613      	mov	r3, r2
 8004736:	687a      	ldr	r2, [r7, #4]
 8004738:	68b9      	ldr	r1, [r7, #8]
 800473a:	68f8      	ldr	r0, [r7, #12]
 800473c:	f000 f805 	bl	800474a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004742:	4618      	mov	r0, r3
 8004744:	3730      	adds	r7, #48	@ 0x30
 8004746:	46bd      	mov	sp, r7
 8004748:	bd80      	pop	{r7, pc}

0800474a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800474a:	b580      	push	{r7, lr}
 800474c:	b084      	sub	sp, #16
 800474e:	af00      	add	r7, sp, #0
 8004750:	60f8      	str	r0, [r7, #12]
 8004752:	60b9      	str	r1, [r7, #8]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	2b00      	cmp	r3, #0
 800475c:	d103      	bne.n	8004766 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800475e:	69bb      	ldr	r3, [r7, #24]
 8004760:	69ba      	ldr	r2, [r7, #24]
 8004762:	601a      	str	r2, [r3, #0]
 8004764:	e002      	b.n	800476c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8004766:	69bb      	ldr	r3, [r7, #24]
 8004768:	687a      	ldr	r2, [r7, #4]
 800476a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800476c:	69bb      	ldr	r3, [r7, #24]
 800476e:	68fa      	ldr	r2, [r7, #12]
 8004770:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8004772:	69bb      	ldr	r3, [r7, #24]
 8004774:	68ba      	ldr	r2, [r7, #8]
 8004776:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8004778:	2101      	movs	r1, #1
 800477a:	69b8      	ldr	r0, [r7, #24]
 800477c:	f7ff fefe 	bl	800457c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8004780:	69bb      	ldr	r3, [r7, #24]
 8004782:	78fa      	ldrb	r2, [r7, #3]
 8004784:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8004788:	bf00      	nop
 800478a:	3710      	adds	r7, #16
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}

08004790 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8004790:	b580      	push	{r7, lr}
 8004792:	b08e      	sub	sp, #56	@ 0x38
 8004794:	af00      	add	r7, sp, #0
 8004796:	60f8      	str	r0, [r7, #12]
 8004798:	60b9      	str	r1, [r7, #8]
 800479a:	607a      	str	r2, [r7, #4]
 800479c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800479e:	2300      	movs	r3, #0
 80047a0:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80047a2:	68fb      	ldr	r3, [r7, #12]
 80047a4:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80047a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d10b      	bne.n	80047c4 <xQueueGenericSend+0x34>
	__asm volatile
 80047ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047b0:	f383 8811 	msr	BASEPRI, r3
 80047b4:	f3bf 8f6f 	isb	sy
 80047b8:	f3bf 8f4f 	dsb	sy
 80047bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80047be:	bf00      	nop
 80047c0:	bf00      	nop
 80047c2:	e7fd      	b.n	80047c0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d103      	bne.n	80047d2 <xQueueGenericSend+0x42>
 80047ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d101      	bne.n	80047d6 <xQueueGenericSend+0x46>
 80047d2:	2301      	movs	r3, #1
 80047d4:	e000      	b.n	80047d8 <xQueueGenericSend+0x48>
 80047d6:	2300      	movs	r3, #0
 80047d8:	2b00      	cmp	r3, #0
 80047da:	d10b      	bne.n	80047f4 <xQueueGenericSend+0x64>
	__asm volatile
 80047dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80047e0:	f383 8811 	msr	BASEPRI, r3
 80047e4:	f3bf 8f6f 	isb	sy
 80047e8:	f3bf 8f4f 	dsb	sy
 80047ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80047ee:	bf00      	nop
 80047f0:	bf00      	nop
 80047f2:	e7fd      	b.n	80047f0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	2b02      	cmp	r3, #2
 80047f8:	d103      	bne.n	8004802 <xQueueGenericSend+0x72>
 80047fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80047fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80047fe:	2b01      	cmp	r3, #1
 8004800:	d101      	bne.n	8004806 <xQueueGenericSend+0x76>
 8004802:	2301      	movs	r3, #1
 8004804:	e000      	b.n	8004808 <xQueueGenericSend+0x78>
 8004806:	2300      	movs	r3, #0
 8004808:	2b00      	cmp	r3, #0
 800480a:	d10b      	bne.n	8004824 <xQueueGenericSend+0x94>
	__asm volatile
 800480c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004810:	f383 8811 	msr	BASEPRI, r3
 8004814:	f3bf 8f6f 	isb	sy
 8004818:	f3bf 8f4f 	dsb	sy
 800481c:	623b      	str	r3, [r7, #32]
}
 800481e:	bf00      	nop
 8004820:	bf00      	nop
 8004822:	e7fd      	b.n	8004820 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004824:	f001 fcf2 	bl	800620c <xTaskGetSchedulerState>
 8004828:	4603      	mov	r3, r0
 800482a:	2b00      	cmp	r3, #0
 800482c:	d102      	bne.n	8004834 <xQueueGenericSend+0xa4>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d101      	bne.n	8004838 <xQueueGenericSend+0xa8>
 8004834:	2301      	movs	r3, #1
 8004836:	e000      	b.n	800483a <xQueueGenericSend+0xaa>
 8004838:	2300      	movs	r3, #0
 800483a:	2b00      	cmp	r3, #0
 800483c:	d10b      	bne.n	8004856 <xQueueGenericSend+0xc6>
	__asm volatile
 800483e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004842:	f383 8811 	msr	BASEPRI, r3
 8004846:	f3bf 8f6f 	isb	sy
 800484a:	f3bf 8f4f 	dsb	sy
 800484e:	61fb      	str	r3, [r7, #28]
}
 8004850:	bf00      	nop
 8004852:	bf00      	nop
 8004854:	e7fd      	b.n	8004852 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004856:	f002 fc21 	bl	800709c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800485a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800485c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800485e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004860:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004862:	429a      	cmp	r2, r3
 8004864:	d302      	bcc.n	800486c <xQueueGenericSend+0xdc>
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	2b02      	cmp	r3, #2
 800486a:	d129      	bne.n	80048c0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800486c:	683a      	ldr	r2, [r7, #0]
 800486e:	68b9      	ldr	r1, [r7, #8]
 8004870:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004872:	f000 fa0f 	bl	8004c94 <prvCopyDataToQueue>
 8004876:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800487a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800487c:	2b00      	cmp	r3, #0
 800487e:	d010      	beq.n	80048a2 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004880:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004882:	3324      	adds	r3, #36	@ 0x24
 8004884:	4618      	mov	r0, r3
 8004886:	f001 faf3 	bl	8005e70 <xTaskRemoveFromEventList>
 800488a:	4603      	mov	r3, r0
 800488c:	2b00      	cmp	r3, #0
 800488e:	d013      	beq.n	80048b8 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8004890:	4b3f      	ldr	r3, [pc, #252]	@ (8004990 <xQueueGenericSend+0x200>)
 8004892:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004896:	601a      	str	r2, [r3, #0]
 8004898:	f3bf 8f4f 	dsb	sy
 800489c:	f3bf 8f6f 	isb	sy
 80048a0:	e00a      	b.n	80048b8 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80048a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d007      	beq.n	80048b8 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80048a8:	4b39      	ldr	r3, [pc, #228]	@ (8004990 <xQueueGenericSend+0x200>)
 80048aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80048ae:	601a      	str	r2, [r3, #0]
 80048b0:	f3bf 8f4f 	dsb	sy
 80048b4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80048b8:	f002 fc20 	bl	80070fc <vPortExitCritical>
				return pdPASS;
 80048bc:	2301      	movs	r3, #1
 80048be:	e063      	b.n	8004988 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d103      	bne.n	80048ce <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80048c6:	f002 fc19 	bl	80070fc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80048ca:	2300      	movs	r3, #0
 80048cc:	e05c      	b.n	8004988 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80048ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80048d0:	2b00      	cmp	r3, #0
 80048d2:	d106      	bne.n	80048e2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80048d4:	f107 0314 	add.w	r3, r7, #20
 80048d8:	4618      	mov	r0, r3
 80048da:	f001 fb2d 	bl	8005f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80048de:	2301      	movs	r3, #1
 80048e0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80048e2:	f002 fc0b 	bl	80070fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80048e6:	f001 f89f 	bl	8005a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80048ea:	f002 fbd7 	bl	800709c <vPortEnterCritical>
 80048ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048f0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80048f4:	b25b      	sxtb	r3, r3
 80048f6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048fa:	d103      	bne.n	8004904 <xQueueGenericSend+0x174>
 80048fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80048fe:	2200      	movs	r2, #0
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004904:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004906:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800490a:	b25b      	sxtb	r3, r3
 800490c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004910:	d103      	bne.n	800491a <xQueueGenericSend+0x18a>
 8004912:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004914:	2200      	movs	r2, #0
 8004916:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800491a:	f002 fbef 	bl	80070fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800491e:	1d3a      	adds	r2, r7, #4
 8004920:	f107 0314 	add.w	r3, r7, #20
 8004924:	4611      	mov	r1, r2
 8004926:	4618      	mov	r0, r3
 8004928:	f001 fb1c 	bl	8005f64 <xTaskCheckForTimeOut>
 800492c:	4603      	mov	r3, r0
 800492e:	2b00      	cmp	r3, #0
 8004930:	d124      	bne.n	800497c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8004932:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004934:	f000 faa6 	bl	8004e84 <prvIsQueueFull>
 8004938:	4603      	mov	r3, r0
 800493a:	2b00      	cmp	r3, #0
 800493c:	d018      	beq.n	8004970 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800493e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004940:	3310      	adds	r3, #16
 8004942:	687a      	ldr	r2, [r7, #4]
 8004944:	4611      	mov	r1, r2
 8004946:	4618      	mov	r0, r3
 8004948:	f001 fa40 	bl	8005dcc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800494c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800494e:	f000 fa31 	bl	8004db4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8004952:	f001 f877 	bl	8005a44 <xTaskResumeAll>
 8004956:	4603      	mov	r3, r0
 8004958:	2b00      	cmp	r3, #0
 800495a:	f47f af7c 	bne.w	8004856 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800495e:	4b0c      	ldr	r3, [pc, #48]	@ (8004990 <xQueueGenericSend+0x200>)
 8004960:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004964:	601a      	str	r2, [r3, #0]
 8004966:	f3bf 8f4f 	dsb	sy
 800496a:	f3bf 8f6f 	isb	sy
 800496e:	e772      	b.n	8004856 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8004970:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8004972:	f000 fa1f 	bl	8004db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004976:	f001 f865 	bl	8005a44 <xTaskResumeAll>
 800497a:	e76c      	b.n	8004856 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800497c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800497e:	f000 fa19 	bl	8004db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004982:	f001 f85f 	bl	8005a44 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8004986:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8004988:	4618      	mov	r0, r3
 800498a:	3738      	adds	r7, #56	@ 0x38
 800498c:	46bd      	mov	sp, r7
 800498e:	bd80      	pop	{r7, pc}
 8004990:	e000ed04 	.word	0xe000ed04

08004994 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b090      	sub	sp, #64	@ 0x40
 8004998:	af00      	add	r7, sp, #0
 800499a:	60f8      	str	r0, [r7, #12]
 800499c:	60b9      	str	r1, [r7, #8]
 800499e:	607a      	str	r2, [r7, #4]
 80049a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80049a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049a8:	2b00      	cmp	r3, #0
 80049aa:	d10b      	bne.n	80049c4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80049ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049b0:	f383 8811 	msr	BASEPRI, r3
 80049b4:	f3bf 8f6f 	isb	sy
 80049b8:	f3bf 8f4f 	dsb	sy
 80049bc:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80049be:	bf00      	nop
 80049c0:	bf00      	nop
 80049c2:	e7fd      	b.n	80049c0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d103      	bne.n	80049d2 <xQueueGenericSendFromISR+0x3e>
 80049ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d101      	bne.n	80049d6 <xQueueGenericSendFromISR+0x42>
 80049d2:	2301      	movs	r3, #1
 80049d4:	e000      	b.n	80049d8 <xQueueGenericSendFromISR+0x44>
 80049d6:	2300      	movs	r3, #0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d10b      	bne.n	80049f4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80049dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80049e0:	f383 8811 	msr	BASEPRI, r3
 80049e4:	f3bf 8f6f 	isb	sy
 80049e8:	f3bf 8f4f 	dsb	sy
 80049ec:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80049ee:	bf00      	nop
 80049f0:	bf00      	nop
 80049f2:	e7fd      	b.n	80049f0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	2b02      	cmp	r3, #2
 80049f8:	d103      	bne.n	8004a02 <xQueueGenericSendFromISR+0x6e>
 80049fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80049fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d101      	bne.n	8004a06 <xQueueGenericSendFromISR+0x72>
 8004a02:	2301      	movs	r3, #1
 8004a04:	e000      	b.n	8004a08 <xQueueGenericSendFromISR+0x74>
 8004a06:	2300      	movs	r3, #0
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d10b      	bne.n	8004a24 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8004a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a10:	f383 8811 	msr	BASEPRI, r3
 8004a14:	f3bf 8f6f 	isb	sy
 8004a18:	f3bf 8f4f 	dsb	sy
 8004a1c:	623b      	str	r3, [r7, #32]
}
 8004a1e:	bf00      	nop
 8004a20:	bf00      	nop
 8004a22:	e7fd      	b.n	8004a20 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8004a24:	f002 fbfc 	bl	8007220 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8004a28:	f3ef 8211 	mrs	r2, BASEPRI
 8004a2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004a30:	f383 8811 	msr	BASEPRI, r3
 8004a34:	f3bf 8f6f 	isb	sy
 8004a38:	f3bf 8f4f 	dsb	sy
 8004a3c:	61fa      	str	r2, [r7, #28]
 8004a3e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8004a40:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8004a42:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8004a44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a46:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004a48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a4a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d302      	bcc.n	8004a56 <xQueueGenericSendFromISR+0xc2>
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d12f      	bne.n	8004ab6 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8004a56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a58:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004a5c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004a60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a64:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8004a66:	683a      	ldr	r2, [r7, #0]
 8004a68:	68b9      	ldr	r1, [r7, #8]
 8004a6a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8004a6c:	f000 f912 	bl	8004c94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8004a70:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8004a74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a78:	d112      	bne.n	8004aa0 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004a7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d016      	beq.n	8004ab0 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004a82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a84:	3324      	adds	r3, #36	@ 0x24
 8004a86:	4618      	mov	r0, r3
 8004a88:	f001 f9f2 	bl	8005e70 <xTaskRemoveFromEventList>
 8004a8c:	4603      	mov	r3, r0
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d00e      	beq.n	8004ab0 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d00b      	beq.n	8004ab0 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
 8004a9e:	e007      	b.n	8004ab0 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8004aa0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8004aa4:	3301      	adds	r3, #1
 8004aa6:	b2db      	uxtb	r3, r3
 8004aa8:	b25a      	sxtb	r2, r3
 8004aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8004ab0:	2301      	movs	r3, #1
 8004ab2:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8004ab4:	e001      	b.n	8004aba <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004aba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004abc:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8004abe:	697b      	ldr	r3, [r7, #20]
 8004ac0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8004ac4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8004ac6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8004ac8:	4618      	mov	r0, r3
 8004aca:	3740      	adds	r7, #64	@ 0x40
 8004acc:	46bd      	mov	sp, r7
 8004ace:	bd80      	pop	{r7, pc}

08004ad0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8004ad0:	b580      	push	{r7, lr}
 8004ad2:	b08c      	sub	sp, #48	@ 0x30
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	60f8      	str	r0, [r7, #12]
 8004ad8:	60b9      	str	r1, [r7, #8]
 8004ada:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8004adc:	2300      	movs	r3, #0
 8004ade:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8004ae4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d10b      	bne.n	8004b02 <xQueueReceive+0x32>
	__asm volatile
 8004aea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004aee:	f383 8811 	msr	BASEPRI, r3
 8004af2:	f3bf 8f6f 	isb	sy
 8004af6:	f3bf 8f4f 	dsb	sy
 8004afa:	623b      	str	r3, [r7, #32]
}
 8004afc:	bf00      	nop
 8004afe:	bf00      	nop
 8004b00:	e7fd      	b.n	8004afe <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8004b02:	68bb      	ldr	r3, [r7, #8]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d103      	bne.n	8004b10 <xQueueReceive+0x40>
 8004b08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b0c:	2b00      	cmp	r3, #0
 8004b0e:	d101      	bne.n	8004b14 <xQueueReceive+0x44>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e000      	b.n	8004b16 <xQueueReceive+0x46>
 8004b14:	2300      	movs	r3, #0
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d10b      	bne.n	8004b32 <xQueueReceive+0x62>
	__asm volatile
 8004b1a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b1e:	f383 8811 	msr	BASEPRI, r3
 8004b22:	f3bf 8f6f 	isb	sy
 8004b26:	f3bf 8f4f 	dsb	sy
 8004b2a:	61fb      	str	r3, [r7, #28]
}
 8004b2c:	bf00      	nop
 8004b2e:	bf00      	nop
 8004b30:	e7fd      	b.n	8004b2e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8004b32:	f001 fb6b 	bl	800620c <xTaskGetSchedulerState>
 8004b36:	4603      	mov	r3, r0
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d102      	bne.n	8004b42 <xQueueReceive+0x72>
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d101      	bne.n	8004b46 <xQueueReceive+0x76>
 8004b42:	2301      	movs	r3, #1
 8004b44:	e000      	b.n	8004b48 <xQueueReceive+0x78>
 8004b46:	2300      	movs	r3, #0
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d10b      	bne.n	8004b64 <xQueueReceive+0x94>
	__asm volatile
 8004b4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004b50:	f383 8811 	msr	BASEPRI, r3
 8004b54:	f3bf 8f6f 	isb	sy
 8004b58:	f3bf 8f4f 	dsb	sy
 8004b5c:	61bb      	str	r3, [r7, #24]
}
 8004b5e:	bf00      	nop
 8004b60:	bf00      	nop
 8004b62:	e7fd      	b.n	8004b60 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8004b64:	f002 fa9a 	bl	800709c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004b68:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b6a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004b6c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d01f      	beq.n	8004bb4 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8004b74:	68b9      	ldr	r1, [r7, #8]
 8004b76:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004b78:	f000 f8f6 	bl	8004d68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8004b7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b7e:	1e5a      	subs	r2, r3, #1
 8004b80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b82:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004b84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b86:	691b      	ldr	r3, [r3, #16]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d00f      	beq.n	8004bac <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004b8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004b8e:	3310      	adds	r3, #16
 8004b90:	4618      	mov	r0, r3
 8004b92:	f001 f96d 	bl	8005e70 <xTaskRemoveFromEventList>
 8004b96:	4603      	mov	r3, r0
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d007      	beq.n	8004bac <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8004b9c:	4b3c      	ldr	r3, [pc, #240]	@ (8004c90 <xQueueReceive+0x1c0>)
 8004b9e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004ba2:	601a      	str	r2, [r3, #0]
 8004ba4:	f3bf 8f4f 	dsb	sy
 8004ba8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8004bac:	f002 faa6 	bl	80070fc <vPortExitCritical>
				return pdPASS;
 8004bb0:	2301      	movs	r3, #1
 8004bb2:	e069      	b.n	8004c88 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d103      	bne.n	8004bc2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8004bba:	f002 fa9f 	bl	80070fc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	e062      	b.n	8004c88 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8004bc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d106      	bne.n	8004bd6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8004bc8:	f107 0310 	add.w	r3, r7, #16
 8004bcc:	4618      	mov	r0, r3
 8004bce:	f001 f9b3 	bl	8005f38 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8004bd2:	2301      	movs	r3, #1
 8004bd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8004bd6:	f002 fa91 	bl	80070fc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8004bda:	f000 ff25 	bl	8005a28 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8004bde:	f002 fa5d 	bl	800709c <vPortEnterCritical>
 8004be2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004be4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004be8:	b25b      	sxtb	r3, r3
 8004bea:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004bee:	d103      	bne.n	8004bf8 <xQueueReceive+0x128>
 8004bf0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bf2:	2200      	movs	r2, #0
 8004bf4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004bf8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bfa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004bfe:	b25b      	sxtb	r3, r3
 8004c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c04:	d103      	bne.n	8004c0e <xQueueReceive+0x13e>
 8004c06:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c08:	2200      	movs	r2, #0
 8004c0a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004c0e:	f002 fa75 	bl	80070fc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8004c12:	1d3a      	adds	r2, r7, #4
 8004c14:	f107 0310 	add.w	r3, r7, #16
 8004c18:	4611      	mov	r1, r2
 8004c1a:	4618      	mov	r0, r3
 8004c1c:	f001 f9a2 	bl	8005f64 <xTaskCheckForTimeOut>
 8004c20:	4603      	mov	r3, r0
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d123      	bne.n	8004c6e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c28:	f000 f916 	bl	8004e58 <prvIsQueueEmpty>
 8004c2c:	4603      	mov	r3, r0
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d017      	beq.n	8004c62 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8004c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004c34:	3324      	adds	r3, #36	@ 0x24
 8004c36:	687a      	ldr	r2, [r7, #4]
 8004c38:	4611      	mov	r1, r2
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	f001 f8c6 	bl	8005dcc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8004c40:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c42:	f000 f8b7 	bl	8004db4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8004c46:	f000 fefd 	bl	8005a44 <xTaskResumeAll>
 8004c4a:	4603      	mov	r3, r0
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d189      	bne.n	8004b64 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8004c50:	4b0f      	ldr	r3, [pc, #60]	@ (8004c90 <xQueueReceive+0x1c0>)
 8004c52:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004c56:	601a      	str	r2, [r3, #0]
 8004c58:	f3bf 8f4f 	dsb	sy
 8004c5c:	f3bf 8f6f 	isb	sy
 8004c60:	e780      	b.n	8004b64 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8004c62:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c64:	f000 f8a6 	bl	8004db4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8004c68:	f000 feec 	bl	8005a44 <xTaskResumeAll>
 8004c6c:	e77a      	b.n	8004b64 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8004c6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c70:	f000 f8a0 	bl	8004db4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8004c74:	f000 fee6 	bl	8005a44 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8004c78:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8004c7a:	f000 f8ed 	bl	8004e58 <prvIsQueueEmpty>
 8004c7e:	4603      	mov	r3, r0
 8004c80:	2b00      	cmp	r3, #0
 8004c82:	f43f af6f 	beq.w	8004b64 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8004c86:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8004c88:	4618      	mov	r0, r3
 8004c8a:	3730      	adds	r7, #48	@ 0x30
 8004c8c:	46bd      	mov	sp, r7
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	e000ed04 	.word	0xe000ed04

08004c94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8004c94:	b580      	push	{r7, lr}
 8004c96:	b086      	sub	sp, #24
 8004c98:	af00      	add	r7, sp, #0
 8004c9a:	60f8      	str	r0, [r7, #12]
 8004c9c:	60b9      	str	r1, [r7, #8]
 8004c9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8004ca0:	2300      	movs	r3, #0
 8004ca2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ca8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8004caa:	68fb      	ldr	r3, [r7, #12]
 8004cac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cae:	2b00      	cmp	r3, #0
 8004cb0:	d10d      	bne.n	8004cce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d14d      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8004cba:	68fb      	ldr	r3, [r7, #12]
 8004cbc:	689b      	ldr	r3, [r3, #8]
 8004cbe:	4618      	mov	r0, r3
 8004cc0:	f001 fac2 	bl	8006248 <xTaskPriorityDisinherit>
 8004cc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	2200      	movs	r2, #0
 8004cca:	609a      	str	r2, [r3, #8]
 8004ccc:	e043      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d119      	bne.n	8004d08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	6858      	ldr	r0, [r3, #4]
 8004cd8:	68fb      	ldr	r3, [r7, #12]
 8004cda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cdc:	461a      	mov	r2, r3
 8004cde:	68b9      	ldr	r1, [r7, #8]
 8004ce0:	f003 fb79 	bl	80083d6 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	685a      	ldr	r2, [r3, #4]
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004cec:	441a      	add	r2, r3
 8004cee:	68fb      	ldr	r3, [r7, #12]
 8004cf0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004cf2:	68fb      	ldr	r3, [r7, #12]
 8004cf4:	685a      	ldr	r2, [r3, #4]
 8004cf6:	68fb      	ldr	r3, [r7, #12]
 8004cf8:	689b      	ldr	r3, [r3, #8]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d32b      	bcc.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681a      	ldr	r2, [r3, #0]
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	605a      	str	r2, [r3, #4]
 8004d06:	e026      	b.n	8004d56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	68d8      	ldr	r0, [r3, #12]
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d10:	461a      	mov	r2, r3
 8004d12:	68b9      	ldr	r1, [r7, #8]
 8004d14:	f003 fb5f 	bl	80083d6 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	68da      	ldr	r2, [r3, #12]
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d20:	425b      	negs	r3, r3
 8004d22:	441a      	add	r2, r3
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	429a      	cmp	r2, r3
 8004d32:	d207      	bcs.n	8004d44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	689a      	ldr	r2, [r3, #8]
 8004d38:	68fb      	ldr	r3, [r7, #12]
 8004d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d3c:	425b      	negs	r3, r3
 8004d3e:	441a      	add	r2, r3
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b02      	cmp	r3, #2
 8004d48:	d105      	bne.n	8004d56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8004d4a:	693b      	ldr	r3, [r7, #16]
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d002      	beq.n	8004d56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	3b01      	subs	r3, #1
 8004d54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1c5a      	adds	r2, r3, #1
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8004d5e:	697b      	ldr	r3, [r7, #20]
}
 8004d60:	4618      	mov	r0, r3
 8004d62:	3718      	adds	r7, #24
 8004d64:	46bd      	mov	sp, r7
 8004d66:	bd80      	pop	{r7, pc}

08004d68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8004d68:	b580      	push	{r7, lr}
 8004d6a:	b082      	sub	sp, #8
 8004d6c:	af00      	add	r7, sp, #0
 8004d6e:	6078      	str	r0, [r7, #4]
 8004d70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d76:	2b00      	cmp	r3, #0
 8004d78:	d018      	beq.n	8004dac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	68da      	ldr	r2, [r3, #12]
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d82:	441a      	add	r2, r3
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	68da      	ldr	r2, [r3, #12]
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	429a      	cmp	r2, r3
 8004d92:	d303      	bcc.n	8004d9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	681a      	ldr	r2, [r3, #0]
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	68d9      	ldr	r1, [r3, #12]
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004da4:	461a      	mov	r2, r3
 8004da6:	6838      	ldr	r0, [r7, #0]
 8004da8:	f003 fb15 	bl	80083d6 <memcpy>
	}
}
 8004dac:	bf00      	nop
 8004dae:	3708      	adds	r7, #8
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}

08004db4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8004db4:	b580      	push	{r7, lr}
 8004db6:	b084      	sub	sp, #16
 8004db8:	af00      	add	r7, sp, #0
 8004dba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8004dbc:	f002 f96e 	bl	800709c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004dc6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dc8:	e011      	b.n	8004dee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004dce:	2b00      	cmp	r3, #0
 8004dd0:	d012      	beq.n	8004df8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	3324      	adds	r3, #36	@ 0x24
 8004dd6:	4618      	mov	r0, r3
 8004dd8:	f001 f84a 	bl	8005e70 <xTaskRemoveFromEventList>
 8004ddc:	4603      	mov	r3, r0
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d001      	beq.n	8004de6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8004de2:	f001 f923 	bl	800602c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004de6:	7bfb      	ldrb	r3, [r7, #15]
 8004de8:	3b01      	subs	r3, #1
 8004dea:	b2db      	uxtb	r3, r3
 8004dec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	dce9      	bgt.n	8004dca <prvUnlockQueue+0x16>
 8004df6:	e000      	b.n	8004dfa <prvUnlockQueue+0x46>
					break;
 8004df8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	22ff      	movs	r2, #255	@ 0xff
 8004dfe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8004e02:	f002 f97b 	bl	80070fc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004e06:	f002 f949 	bl	800709c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004e10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e12:	e011      	b.n	8004e38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	691b      	ldr	r3, [r3, #16]
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d012      	beq.n	8004e42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	3310      	adds	r3, #16
 8004e20:	4618      	mov	r0, r3
 8004e22:	f001 f825 	bl	8005e70 <xTaskRemoveFromEventList>
 8004e26:	4603      	mov	r3, r0
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004e2c:	f001 f8fe 	bl	800602c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8004e30:	7bbb      	ldrb	r3, [r7, #14]
 8004e32:	3b01      	subs	r3, #1
 8004e34:	b2db      	uxtb	r3, r3
 8004e36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004e38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	dce9      	bgt.n	8004e14 <prvUnlockQueue+0x60>
 8004e40:	e000      	b.n	8004e44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8004e42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	22ff      	movs	r2, #255	@ 0xff
 8004e48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8004e4c:	f002 f956 	bl	80070fc <vPortExitCritical>
}
 8004e50:	bf00      	nop
 8004e52:	3710      	adds	r7, #16
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}

08004e58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004e58:	b580      	push	{r7, lr}
 8004e5a:	b084      	sub	sp, #16
 8004e5c:	af00      	add	r7, sp, #0
 8004e5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e60:	f002 f91c 	bl	800709c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	d102      	bne.n	8004e72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004e6c:	2301      	movs	r3, #1
 8004e6e:	60fb      	str	r3, [r7, #12]
 8004e70:	e001      	b.n	8004e76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8004e72:	2300      	movs	r3, #0
 8004e74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004e76:	f002 f941 	bl	80070fc <vPortExitCritical>

	return xReturn;
 8004e7a:	68fb      	ldr	r3, [r7, #12]
}
 8004e7c:	4618      	mov	r0, r3
 8004e7e:	3710      	adds	r7, #16
 8004e80:	46bd      	mov	sp, r7
 8004e82:	bd80      	pop	{r7, pc}

08004e84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8004e84:	b580      	push	{r7, lr}
 8004e86:	b084      	sub	sp, #16
 8004e88:	af00      	add	r7, sp, #0
 8004e8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8004e8c:	f002 f906 	bl	800709c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	d102      	bne.n	8004ea2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8004e9c:	2301      	movs	r3, #1
 8004e9e:	60fb      	str	r3, [r7, #12]
 8004ea0:	e001      	b.n	8004ea6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8004ea2:	2300      	movs	r3, #0
 8004ea4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004ea6:	f002 f929 	bl	80070fc <vPortExitCritical>

	return xReturn;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
}
 8004eac:	4618      	mov	r0, r3
 8004eae:	3710      	adds	r7, #16
 8004eb0:	46bd      	mov	sp, r7
 8004eb2:	bd80      	pop	{r7, pc}

08004eb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8004eb4:	b480      	push	{r7}
 8004eb6:	b085      	sub	sp, #20
 8004eb8:	af00      	add	r7, sp, #0
 8004eba:	6078      	str	r0, [r7, #4]
 8004ebc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ebe:	2300      	movs	r3, #0
 8004ec0:	60fb      	str	r3, [r7, #12]
 8004ec2:	e014      	b.n	8004eee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8004ec4:	4a0e      	ldr	r2, [pc, #56]	@ (8004f00 <vQueueAddToRegistry+0x4c>)
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8004ed0:	490b      	ldr	r1, [pc, #44]	@ (8004f00 <vQueueAddToRegistry+0x4c>)
 8004ed2:	68fb      	ldr	r3, [r7, #12]
 8004ed4:	683a      	ldr	r2, [r7, #0]
 8004ed6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8004eda:	4a09      	ldr	r2, [pc, #36]	@ (8004f00 <vQueueAddToRegistry+0x4c>)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	4413      	add	r3, r2
 8004ee2:	687a      	ldr	r2, [r7, #4]
 8004ee4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8004ee6:	e006      	b.n	8004ef6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	3301      	adds	r3, #1
 8004eec:	60fb      	str	r3, [r7, #12]
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	2b07      	cmp	r3, #7
 8004ef2:	d9e7      	bls.n	8004ec4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8004ef4:	bf00      	nop
 8004ef6:	bf00      	nop
 8004ef8:	3714      	adds	r7, #20
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bc80      	pop	{r7}
 8004efe:	4770      	bx	lr
 8004f00:	2000091c 	.word	0x2000091c

08004f04 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8004f10:	68fb      	ldr	r3, [r7, #12]
 8004f12:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8004f14:	f002 f8c2 	bl	800709c <vPortEnterCritical>
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8004f1e:	b25b      	sxtb	r3, r3
 8004f20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f24:	d103      	bne.n	8004f2e <vQueueWaitForMessageRestricted+0x2a>
 8004f26:	697b      	ldr	r3, [r7, #20]
 8004f28:	2200      	movs	r2, #0
 8004f2a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004f2e:	697b      	ldr	r3, [r7, #20]
 8004f30:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8004f34:	b25b      	sxtb	r3, r3
 8004f36:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f3a:	d103      	bne.n	8004f44 <vQueueWaitForMessageRestricted+0x40>
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8004f44:	f002 f8da 	bl	80070fc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8004f48:	697b      	ldr	r3, [r7, #20]
 8004f4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d106      	bne.n	8004f5e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8004f50:	697b      	ldr	r3, [r7, #20]
 8004f52:	3324      	adds	r3, #36	@ 0x24
 8004f54:	687a      	ldr	r2, [r7, #4]
 8004f56:	68b9      	ldr	r1, [r7, #8]
 8004f58:	4618      	mov	r0, r3
 8004f5a:	f000 ff5d 	bl	8005e18 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8004f5e:	6978      	ldr	r0, [r7, #20]
 8004f60:	f7ff ff28 	bl	8004db4 <prvUnlockQueue>
	}
 8004f64:	bf00      	nop
 8004f66:	3718      	adds	r7, #24
 8004f68:	46bd      	mov	sp, r7
 8004f6a:	bd80      	pop	{r7, pc}

08004f6c <xStreamBufferGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	StreamBufferHandle_t xStreamBufferGenericCreate( size_t xBufferSizeBytes, size_t xTriggerLevelBytes, BaseType_t xIsMessageBuffer )
	{
 8004f6c:	b580      	push	{r7, lr}
 8004f6e:	b08c      	sub	sp, #48	@ 0x30
 8004f70:	af02      	add	r7, sp, #8
 8004f72:	60f8      	str	r0, [r7, #12]
 8004f74:	60b9      	str	r1, [r7, #8]
 8004f76:	607a      	str	r2, [r7, #4]

		/* In case the stream buffer is going to be used as a message buffer
		(that is, it will hold discrete messages with a little meta data that
		says how big the next message is) check the buffer will be large enough
		to hold at least one message. */
		if( xIsMessageBuffer == pdTRUE )
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2b01      	cmp	r3, #1
 8004f7c:	d111      	bne.n	8004fa2 <xStreamBufferGenericCreate+0x36>
		{
			/* Is a message buffer but not statically allocated. */
			ucFlags = sbFLAGS_IS_MESSAGE_BUFFER;
 8004f7e:	2301      	movs	r3, #1
 8004f80:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > sbBYTES_TO_STORE_MESSAGE_LENGTH );
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	2b04      	cmp	r3, #4
 8004f88:	d81d      	bhi.n	8004fc6 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004f8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f8e:	f383 8811 	msr	BASEPRI, r3
 8004f92:	f3bf 8f6f 	isb	sy
 8004f96:	f3bf 8f4f 	dsb	sy
 8004f9a:	61fb      	str	r3, [r7, #28]
}
 8004f9c:	bf00      	nop
 8004f9e:	bf00      	nop
 8004fa0:	e7fd      	b.n	8004f9e <xStreamBufferGenericCreate+0x32>
		}
		else
		{
			/* Not a message buffer and not statically allocated. */
			ucFlags = 0;
 8004fa2:	2300      	movs	r3, #0
 8004fa4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			configASSERT( xBufferSizeBytes > 0 );
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d10b      	bne.n	8004fc6 <xStreamBufferGenericCreate+0x5a>
	__asm volatile
 8004fae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fb2:	f383 8811 	msr	BASEPRI, r3
 8004fb6:	f3bf 8f6f 	isb	sy
 8004fba:	f3bf 8f4f 	dsb	sy
 8004fbe:	61bb      	str	r3, [r7, #24]
}
 8004fc0:	bf00      	nop
 8004fc2:	bf00      	nop
 8004fc4:	e7fd      	b.n	8004fc2 <xStreamBufferGenericCreate+0x56>
		}
		configASSERT( xTriggerLevelBytes <= xBufferSizeBytes );
 8004fc6:	68ba      	ldr	r2, [r7, #8]
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	429a      	cmp	r2, r3
 8004fcc:	d90b      	bls.n	8004fe6 <xStreamBufferGenericCreate+0x7a>
	__asm volatile
 8004fce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fd2:	f383 8811 	msr	BASEPRI, r3
 8004fd6:	f3bf 8f6f 	isb	sy
 8004fda:	f3bf 8f4f 	dsb	sy
 8004fde:	617b      	str	r3, [r7, #20]
}
 8004fe0:	bf00      	nop
 8004fe2:	bf00      	nop
 8004fe4:	e7fd      	b.n	8004fe2 <xStreamBufferGenericCreate+0x76>

		/* A trigger level of 0 would cause a waiting task to unblock even when
		the buffer was empty. */
		if( xTriggerLevelBytes == ( size_t ) 0 )
 8004fe6:	68bb      	ldr	r3, [r7, #8]
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d101      	bne.n	8004ff0 <xStreamBufferGenericCreate+0x84>
		{
			xTriggerLevelBytes = ( size_t ) 1;
 8004fec:	2301      	movs	r3, #1
 8004fee:	60bb      	str	r3, [r7, #8]
		and the buffer follows immediately after.  The requested size is
		incremented so the free space is returned as the user would expect -
		this is a quirk of the implementation that means otherwise the free
		space would be reported as one byte smaller than would be logically
		expected. */
		xBufferSizeBytes++;
 8004ff0:	68fb      	ldr	r3, [r7, #12]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	60fb      	str	r3, [r7, #12]
		pucAllocatedMemory = ( uint8_t * ) pvPortMalloc( xBufferSizeBytes + sizeof( StreamBuffer_t ) ); /*lint !e9079 malloc() only returns void*. */
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	3324      	adds	r3, #36	@ 0x24
 8004ffa:	4618      	mov	r0, r3
 8004ffc:	f002 f950 	bl	80072a0 <pvPortMalloc>
 8005000:	6238      	str	r0, [r7, #32]

		if( pucAllocatedMemory != NULL )
 8005002:	6a3b      	ldr	r3, [r7, #32]
 8005004:	2b00      	cmp	r3, #0
 8005006:	d00a      	beq.n	800501e <xStreamBufferGenericCreate+0xb2>
		{
			prvInitialiseNewStreamBuffer( ( StreamBuffer_t * ) pucAllocatedMemory, /* Structure at the start of the allocated memory. */ /*lint !e9087 Safe cast as allocated memory is aligned. */ /*lint !e826 Area is not too small and alignment is guaranteed provided malloc() behaves as expected and returns aligned buffer. */
 8005008:	6a3b      	ldr	r3, [r7, #32]
 800500a:	f103 0124 	add.w	r1, r3, #36	@ 0x24
 800500e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005012:	9300      	str	r3, [sp, #0]
 8005014:	68bb      	ldr	r3, [r7, #8]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	6a38      	ldr	r0, [r7, #32]
 800501a:	f000 fac3 	bl	80055a4 <prvInitialiseNewStreamBuffer>
		else
		{
			traceSTREAM_BUFFER_CREATE_FAILED( xIsMessageBuffer );
		}

		return ( StreamBufferHandle_t ) pucAllocatedMemory; /*lint !e9087 !e826 Safe cast as allocated memory is aligned. */
 800501e:	6a3b      	ldr	r3, [r7, #32]
	}
 8005020:	4618      	mov	r0, r3
 8005022:	3728      	adds	r7, #40	@ 0x28
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <xStreamBufferSpacesAvailable>:
	return xReturn;
}
/*-----------------------------------------------------------*/

size_t xStreamBufferSpacesAvailable( StreamBufferHandle_t xStreamBuffer )
{
 8005028:	b480      	push	{r7}
 800502a:	b087      	sub	sp, #28
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
const StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	613b      	str	r3, [r7, #16]
size_t xSpace;

	configASSERT( pxStreamBuffer );
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d10b      	bne.n	8005052 <xStreamBufferSpacesAvailable+0x2a>
	__asm volatile
 800503a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800503e:	f383 8811 	msr	BASEPRI, r3
 8005042:	f3bf 8f6f 	isb	sy
 8005046:	f3bf 8f4f 	dsb	sy
 800504a:	60fb      	str	r3, [r7, #12]
}
 800504c:	bf00      	nop
 800504e:	bf00      	nop
 8005050:	e7fd      	b.n	800504e <xStreamBufferSpacesAvailable+0x26>

	xSpace = pxStreamBuffer->xLength + pxStreamBuffer->xTail;
 8005052:	693b      	ldr	r3, [r7, #16]
 8005054:	689a      	ldr	r2, [r3, #8]
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4413      	add	r3, r2
 800505c:	617b      	str	r3, [r7, #20]
	xSpace -= pxStreamBuffer->xHead;
 800505e:	693b      	ldr	r3, [r7, #16]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	697a      	ldr	r2, [r7, #20]
 8005064:	1ad3      	subs	r3, r2, r3
 8005066:	617b      	str	r3, [r7, #20]
	xSpace -= ( size_t ) 1;
 8005068:	697b      	ldr	r3, [r7, #20]
 800506a:	3b01      	subs	r3, #1
 800506c:	617b      	str	r3, [r7, #20]

	if( xSpace >= pxStreamBuffer->xLength )
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	697a      	ldr	r2, [r7, #20]
 8005074:	429a      	cmp	r2, r3
 8005076:	d304      	bcc.n	8005082 <xStreamBufferSpacesAvailable+0x5a>
	{
		xSpace -= pxStreamBuffer->xLength;
 8005078:	693b      	ldr	r3, [r7, #16]
 800507a:	689b      	ldr	r3, [r3, #8]
 800507c:	697a      	ldr	r2, [r7, #20]
 800507e:	1ad3      	subs	r3, r2, r3
 8005080:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xSpace;
 8005082:	697b      	ldr	r3, [r7, #20]
}
 8005084:	4618      	mov	r0, r3
 8005086:	371c      	adds	r7, #28
 8005088:	46bd      	mov	sp, r7
 800508a:	bc80      	pop	{r7}
 800508c:	4770      	bx	lr

0800508e <xStreamBufferSendFromISR>:

size_t xStreamBufferSendFromISR( StreamBufferHandle_t xStreamBuffer,
								 const void *pvTxData,
								 size_t xDataLengthBytes,
								 BaseType_t * const pxHigherPriorityTaskWoken )
{
 800508e:	b580      	push	{r7, lr}
 8005090:	b090      	sub	sp, #64	@ 0x40
 8005092:	af02      	add	r7, sp, #8
 8005094:	60f8      	str	r0, [r7, #12]
 8005096:	60b9      	str	r1, [r7, #8]
 8005098:	607a      	str	r2, [r7, #4]
 800509a:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 800509c:	68fb      	ldr	r3, [r7, #12]
 800509e:	633b      	str	r3, [r7, #48]	@ 0x30
size_t xReturn, xSpace;
size_t xRequiredSpace = xDataLengthBytes;
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	637b      	str	r3, [r7, #52]	@ 0x34

	configASSERT( pvTxData );
 80050a4:	68bb      	ldr	r3, [r7, #8]
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d10b      	bne.n	80050c2 <xStreamBufferSendFromISR+0x34>
	__asm volatile
 80050aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050ae:	f383 8811 	msr	BASEPRI, r3
 80050b2:	f3bf 8f6f 	isb	sy
 80050b6:	f3bf 8f4f 	dsb	sy
 80050ba:	623b      	str	r3, [r7, #32]
}
 80050bc:	bf00      	nop
 80050be:	bf00      	nop
 80050c0:	e7fd      	b.n	80050be <xStreamBufferSendFromISR+0x30>
	configASSERT( pxStreamBuffer );
 80050c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d10b      	bne.n	80050e0 <xStreamBufferSendFromISR+0x52>
	__asm volatile
 80050c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050cc:	f383 8811 	msr	BASEPRI, r3
 80050d0:	f3bf 8f6f 	isb	sy
 80050d4:	f3bf 8f4f 	dsb	sy
 80050d8:	61fb      	str	r3, [r7, #28]
}
 80050da:	bf00      	nop
 80050dc:	bf00      	nop
 80050de:	e7fd      	b.n	80050dc <xStreamBufferSendFromISR+0x4e>

	/* This send function is used to write to both message buffers and stream
	buffers.  If this is a message buffer then the space needed must be
	increased by the amount of bytes needed to store the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 80050e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e2:	7f1b      	ldrb	r3, [r3, #28]
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	d002      	beq.n	80050f2 <xStreamBufferSendFromISR+0x64>
	{
		xRequiredSpace += sbBYTES_TO_STORE_MESSAGE_LENGTH;
 80050ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ee:	3304      	adds	r3, #4
 80050f0:	637b      	str	r3, [r7, #52]	@ 0x34
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xSpace = xStreamBufferSpacesAvailable( pxStreamBuffer );
 80050f2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80050f4:	f7ff ff98 	bl	8005028 <xStreamBufferSpacesAvailable>
 80050f8:	62f8      	str	r0, [r7, #44]	@ 0x2c
	xReturn = prvWriteMessageToBuffer( pxStreamBuffer, pvTxData, xDataLengthBytes, xSpace, xRequiredSpace );
 80050fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050fc:	9300      	str	r3, [sp, #0]
 80050fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005100:	687a      	ldr	r2, [r7, #4]
 8005102:	68b9      	ldr	r1, [r7, #8]
 8005104:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005106:	f000 f835 	bl	8005174 <prvWriteMessageToBuffer>
 800510a:	62b8      	str	r0, [r7, #40]	@ 0x28

	if( xReturn > ( size_t ) 0 )
 800510c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800510e:	2b00      	cmp	r3, #0
 8005110:	d02b      	beq.n	800516a <xStreamBufferSendFromISR+0xdc>
	{
		/* Was a task waiting for the data? */
		if( prvBytesInBuffer( pxStreamBuffer ) >= pxStreamBuffer->xTriggerLevelBytes )
 8005112:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005114:	f000 fa27 	bl	8005566 <prvBytesInBuffer>
 8005118:	4602      	mov	r2, r0
 800511a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800511c:	68db      	ldr	r3, [r3, #12]
 800511e:	429a      	cmp	r2, r3
 8005120:	d323      	bcc.n	800516a <xStreamBufferSendFromISR+0xdc>
	__asm volatile
 8005122:	f3ef 8211 	mrs	r2, BASEPRI
 8005126:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800512a:	f383 8811 	msr	BASEPRI, r3
 800512e:	f3bf 8f6f 	isb	sy
 8005132:	f3bf 8f4f 	dsb	sy
 8005136:	61ba      	str	r2, [r7, #24]
 8005138:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800513a:	69bb      	ldr	r3, [r7, #24]
		{
			sbSEND_COMPLETE_FROM_ISR( pxStreamBuffer, pxHigherPriorityTaskWoken );
 800513c:	627b      	str	r3, [r7, #36]	@ 0x24
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	2b00      	cmp	r3, #0
 8005144:	d00b      	beq.n	800515e <xStreamBufferSendFromISR+0xd0>
 8005146:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005148:	6918      	ldr	r0, [r3, #16]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	9300      	str	r3, [sp, #0]
 800514e:	2300      	movs	r3, #0
 8005150:	2200      	movs	r2, #0
 8005152:	2100      	movs	r1, #0
 8005154:	f001 f9fc 	bl	8006550 <xTaskGenericNotifyFromISR>
 8005158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515a:	2200      	movs	r2, #0
 800515c:	611a      	str	r2, [r3, #16]
 800515e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005160:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	f383 8811 	msr	BASEPRI, r3
}
 8005168:	bf00      	nop
		mtCOVERAGE_TEST_MARKER();
	}

	traceSTREAM_BUFFER_SEND_FROM_ISR( xStreamBuffer, xReturn );

	return xReturn;
 800516a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
}
 800516c:	4618      	mov	r0, r3
 800516e:	3738      	adds	r7, #56	@ 0x38
 8005170:	46bd      	mov	sp, r7
 8005172:	bd80      	pop	{r7, pc}

08005174 <prvWriteMessageToBuffer>:
static size_t prvWriteMessageToBuffer( StreamBuffer_t * const pxStreamBuffer,
									   const void * pvTxData,
									   size_t xDataLengthBytes,
									   size_t xSpace,
									   size_t xRequiredSpace )
{
 8005174:	b580      	push	{r7, lr}
 8005176:	b086      	sub	sp, #24
 8005178:	af00      	add	r7, sp, #0
 800517a:	60f8      	str	r0, [r7, #12]
 800517c:	60b9      	str	r1, [r7, #8]
 800517e:	607a      	str	r2, [r7, #4]
 8005180:	603b      	str	r3, [r7, #0]
	BaseType_t xShouldWrite;
	size_t xReturn;

	if( xSpace == ( size_t ) 0 )
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	2b00      	cmp	r3, #0
 8005186:	d102      	bne.n	800518e <prvWriteMessageToBuffer+0x1a>
	{
		/* Doesn't matter if this is a stream buffer or a message buffer, there
		is no space to write. */
		xShouldWrite = pdFALSE;
 8005188:	2300      	movs	r3, #0
 800518a:	617b      	str	r3, [r7, #20]
 800518c:	e01d      	b.n	80051ca <prvWriteMessageToBuffer+0x56>
	}
	else if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) == ( uint8_t ) 0 )
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	7f1b      	ldrb	r3, [r3, #28]
 8005192:	f003 0301 	and.w	r3, r3, #1
 8005196:	2b00      	cmp	r3, #0
 8005198:	d108      	bne.n	80051ac <prvWriteMessageToBuffer+0x38>
	{
		/* This is a stream buffer, as opposed to a message buffer, so writing a
		stream of bytes rather than discrete messages.  Write as many bytes as
		possible. */
		xShouldWrite = pdTRUE;
 800519a:	2301      	movs	r3, #1
 800519c:	617b      	str	r3, [r7, #20]
		xDataLengthBytes = configMIN( xDataLengthBytes, xSpace );
 800519e:	687a      	ldr	r2, [r7, #4]
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	4293      	cmp	r3, r2
 80051a4:	bf28      	it	cs
 80051a6:	4613      	movcs	r3, r2
 80051a8:	607b      	str	r3, [r7, #4]
 80051aa:	e00e      	b.n	80051ca <prvWriteMessageToBuffer+0x56>
	}
	else if( xSpace >= xRequiredSpace )
 80051ac:	683a      	ldr	r2, [r7, #0]
 80051ae:	6a3b      	ldr	r3, [r7, #32]
 80051b0:	429a      	cmp	r2, r3
 80051b2:	d308      	bcc.n	80051c6 <prvWriteMessageToBuffer+0x52>
	{
		/* This is a message buffer, as opposed to a stream buffer, and there
		is enough space to write both the message length and the message itself
		into the buffer.  Start by writing the length of the data, the data
		itself will be written later in this function. */
		xShouldWrite = pdTRUE;
 80051b4:	2301      	movs	r3, #1
 80051b6:	617b      	str	r3, [r7, #20]
		( void ) prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) &( xDataLengthBytes ), sbBYTES_TO_STORE_MESSAGE_LENGTH );
 80051b8:	1d3b      	adds	r3, r7, #4
 80051ba:	2204      	movs	r2, #4
 80051bc:	4619      	mov	r1, r3
 80051be:	68f8      	ldr	r0, [r7, #12]
 80051c0:	f000 f8df 	bl	8005382 <prvWriteBytesToBuffer>
 80051c4:	e001      	b.n	80051ca <prvWriteMessageToBuffer+0x56>
	}
	else
	{
		/* There is space available, but not enough space. */
		xShouldWrite = pdFALSE;
 80051c6:	2300      	movs	r3, #0
 80051c8:	617b      	str	r3, [r7, #20]
	}

	if( xShouldWrite != pdFALSE )
 80051ca:	697b      	ldr	r3, [r7, #20]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d007      	beq.n	80051e0 <prvWriteMessageToBuffer+0x6c>
	{
		/* Writes the data itself. */
		xReturn = prvWriteBytesToBuffer( pxStreamBuffer, ( const uint8_t * ) pvTxData, xDataLengthBytes ); /*lint !e9079 Storage buffer is implemented as uint8_t for ease of sizing, alighment and access. */
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	461a      	mov	r2, r3
 80051d4:	68b9      	ldr	r1, [r7, #8]
 80051d6:	68f8      	ldr	r0, [r7, #12]
 80051d8:	f000 f8d3 	bl	8005382 <prvWriteBytesToBuffer>
 80051dc:	6138      	str	r0, [r7, #16]
 80051de:	e001      	b.n	80051e4 <prvWriteMessageToBuffer+0x70>
	}
	else
	{
		xReturn = 0;
 80051e0:	2300      	movs	r3, #0
 80051e2:	613b      	str	r3, [r7, #16]
	}

	return xReturn;
 80051e4:	693b      	ldr	r3, [r7, #16]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3718      	adds	r7, #24
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <xStreamBufferReceive>:

size_t xStreamBufferReceive( StreamBufferHandle_t xStreamBuffer,
							 void *pvRxData,
							 size_t xBufferLengthBytes,
							 TickType_t xTicksToWait )
{
 80051ee:	b580      	push	{r7, lr}
 80051f0:	b08e      	sub	sp, #56	@ 0x38
 80051f2:	af02      	add	r7, sp, #8
 80051f4:	60f8      	str	r0, [r7, #12]
 80051f6:	60b9      	str	r1, [r7, #8]
 80051f8:	607a      	str	r2, [r7, #4]
 80051fa:	603b      	str	r3, [r7, #0]
StreamBuffer_t * const pxStreamBuffer = xStreamBuffer;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	623b      	str	r3, [r7, #32]
size_t xReceivedLength = 0, xBytesAvailable, xBytesToStoreMessageLength;
 8005200:	2300      	movs	r3, #0
 8005202:	62fb      	str	r3, [r7, #44]	@ 0x2c

	configASSERT( pvRxData );
 8005204:	68bb      	ldr	r3, [r7, #8]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d10b      	bne.n	8005222 <xStreamBufferReceive+0x34>
	__asm volatile
 800520a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520e:	f383 8811 	msr	BASEPRI, r3
 8005212:	f3bf 8f6f 	isb	sy
 8005216:	f3bf 8f4f 	dsb	sy
 800521a:	61fb      	str	r3, [r7, #28]
}
 800521c:	bf00      	nop
 800521e:	bf00      	nop
 8005220:	e7fd      	b.n	800521e <xStreamBufferReceive+0x30>
	configASSERT( pxStreamBuffer );
 8005222:	6a3b      	ldr	r3, [r7, #32]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d10b      	bne.n	8005240 <xStreamBufferReceive+0x52>
	__asm volatile
 8005228:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522c:	f383 8811 	msr	BASEPRI, r3
 8005230:	f3bf 8f6f 	isb	sy
 8005234:	f3bf 8f4f 	dsb	sy
 8005238:	61bb      	str	r3, [r7, #24]
}
 800523a:	bf00      	nop
 800523c:	bf00      	nop
 800523e:	e7fd      	b.n	800523c <xStreamBufferReceive+0x4e>
	/* This receive function is used by both message buffers, which store
	discrete messages, and stream buffers, which store a continuous stream of
	bytes.  Discrete messages include an additional
	sbBYTES_TO_STORE_MESSAGE_LENGTH bytes that hold the length of the
	message. */
	if( ( pxStreamBuffer->ucFlags & sbFLAGS_IS_MESSAGE_BUFFER ) != ( uint8_t ) 0 )
 8005240:	6a3b      	ldr	r3, [r7, #32]
 8005242:	7f1b      	ldrb	r3, [r3, #28]
 8005244:	f003 0301 	and.w	r3, r3, #1
 8005248:	2b00      	cmp	r3, #0
 800524a:	d002      	beq.n	8005252 <xStreamBufferReceive+0x64>
	{
		xBytesToStoreMessageLength = sbBYTES_TO_STORE_MESSAGE_LENGTH;
 800524c:	2304      	movs	r3, #4
 800524e:	627b      	str	r3, [r7, #36]	@ 0x24
 8005250:	e001      	b.n	8005256 <xStreamBufferReceive+0x68>
	}
	else
	{
		xBytesToStoreMessageLength = 0;
 8005252:	2300      	movs	r3, #0
 8005254:	627b      	str	r3, [r7, #36]	@ 0x24
	}

	if( xTicksToWait != ( TickType_t ) 0 )
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	2b00      	cmp	r3, #0
 800525a:	d035      	beq.n	80052c8 <xStreamBufferReceive+0xda>
	{
		/* Checking if there is data and clearing the notification state must be
		performed atomically. */
		taskENTER_CRITICAL();
 800525c:	f001 ff1e 	bl	800709c <vPortEnterCritical>
		{
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 8005260:	6a38      	ldr	r0, [r7, #32]
 8005262:	f000 f980 	bl	8005566 <prvBytesInBuffer>
 8005266:	62b8      	str	r0, [r7, #40]	@ 0x28
			/* If this function was invoked by a message buffer read then
			xBytesToStoreMessageLength holds the number of bytes used to hold
			the length of the next discrete message.  If this function was
			invoked by a stream buffer read then xBytesToStoreMessageLength will
			be 0. */
			if( xBytesAvailable <= xBytesToStoreMessageLength )
 8005268:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800526a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800526c:	429a      	cmp	r2, r3
 800526e:	d817      	bhi.n	80052a0 <xStreamBufferReceive+0xb2>
			{
				/* Clear notification state as going to wait for data. */
				( void ) xTaskNotifyStateClear( NULL );
 8005270:	2000      	movs	r0, #0
 8005272:	f001 fa4d 	bl	8006710 <xTaskNotifyStateClear>

				/* Should only be one reader. */
				configASSERT( pxStreamBuffer->xTaskWaitingToReceive == NULL );
 8005276:	6a3b      	ldr	r3, [r7, #32]
 8005278:	691b      	ldr	r3, [r3, #16]
 800527a:	2b00      	cmp	r3, #0
 800527c:	d00b      	beq.n	8005296 <xStreamBufferReceive+0xa8>
	__asm volatile
 800527e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005282:	f383 8811 	msr	BASEPRI, r3
 8005286:	f3bf 8f6f 	isb	sy
 800528a:	f3bf 8f4f 	dsb	sy
 800528e:	617b      	str	r3, [r7, #20]
}
 8005290:	bf00      	nop
 8005292:	bf00      	nop
 8005294:	e7fd      	b.n	8005292 <xStreamBufferReceive+0xa4>
				pxStreamBuffer->xTaskWaitingToReceive = xTaskGetCurrentTaskHandle();
 8005296:	f000 ffab 	bl	80061f0 <xTaskGetCurrentTaskHandle>
 800529a:	4602      	mov	r2, r0
 800529c:	6a3b      	ldr	r3, [r7, #32]
 800529e:	611a      	str	r2, [r3, #16]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 80052a0:	f001 ff2c 	bl	80070fc <vPortExitCritical>

		if( xBytesAvailable <= xBytesToStoreMessageLength )
 80052a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052a8:	429a      	cmp	r2, r3
 80052aa:	d811      	bhi.n	80052d0 <xStreamBufferReceive+0xe2>
		{
			/* Wait for data to be available. */
			traceBLOCKING_ON_STREAM_BUFFER_RECEIVE( xStreamBuffer );
			( void ) xTaskNotifyWait( ( uint32_t ) 0, ( uint32_t ) 0, NULL, xTicksToWait );
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	2200      	movs	r2, #0
 80052b0:	2100      	movs	r1, #0
 80052b2:	2000      	movs	r0, #0
 80052b4:	f001 f838 	bl	8006328 <xTaskNotifyWait>
			pxStreamBuffer->xTaskWaitingToReceive = NULL;
 80052b8:	6a3b      	ldr	r3, [r7, #32]
 80052ba:	2200      	movs	r2, #0
 80052bc:	611a      	str	r2, [r3, #16]

			/* Recheck the data available after blocking. */
			xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80052be:	6a38      	ldr	r0, [r7, #32]
 80052c0:	f000 f951 	bl	8005566 <prvBytesInBuffer>
 80052c4:	62b8      	str	r0, [r7, #40]	@ 0x28
 80052c6:	e003      	b.n	80052d0 <xStreamBufferReceive+0xe2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		xBytesAvailable = prvBytesInBuffer( pxStreamBuffer );
 80052c8:	6a38      	ldr	r0, [r7, #32]
 80052ca:	f000 f94c 	bl	8005566 <prvBytesInBuffer>
 80052ce:	62b8      	str	r0, [r7, #40]	@ 0x28
	/* Whether receiving a discrete message (where xBytesToStoreMessageLength
	holds the number of bytes used to store the message length) or a stream of
	bytes (where xBytesToStoreMessageLength is zero), the number of bytes
	available must be greater than xBytesToStoreMessageLength to be able to
	read bytes from the buffer. */
	if( xBytesAvailable > xBytesToStoreMessageLength )
 80052d0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80052d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052d4:	429a      	cmp	r2, r3
 80052d6:	d91d      	bls.n	8005314 <xStreamBufferReceive+0x126>
	{
		xReceivedLength = prvReadMessageFromBuffer( pxStreamBuffer, pvRxData, xBufferLengthBytes, xBytesAvailable, xBytesToStoreMessageLength );
 80052d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052da:	9300      	str	r3, [sp, #0]
 80052dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052de:	687a      	ldr	r2, [r7, #4]
 80052e0:	68b9      	ldr	r1, [r7, #8]
 80052e2:	6a38      	ldr	r0, [r7, #32]
 80052e4:	f000 f81b 	bl	800531e <prvReadMessageFromBuffer>
 80052e8:	62f8      	str	r0, [r7, #44]	@ 0x2c

		/* Was a task waiting for space in the buffer? */
		if( xReceivedLength != ( size_t ) 0 )
 80052ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d011      	beq.n	8005314 <xStreamBufferReceive+0x126>
		{
			traceSTREAM_BUFFER_RECEIVE( xStreamBuffer, xReceivedLength );
			sbRECEIVE_COMPLETED( pxStreamBuffer );
 80052f0:	f000 fb9a 	bl	8005a28 <vTaskSuspendAll>
 80052f4:	6a3b      	ldr	r3, [r7, #32]
 80052f6:	695b      	ldr	r3, [r3, #20]
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d009      	beq.n	8005310 <xStreamBufferReceive+0x122>
 80052fc:	6a3b      	ldr	r3, [r7, #32]
 80052fe:	6958      	ldr	r0, [r3, #20]
 8005300:	2300      	movs	r3, #0
 8005302:	2200      	movs	r2, #0
 8005304:	2100      	movs	r1, #0
 8005306:	f001 f869 	bl	80063dc <xTaskGenericNotify>
 800530a:	6a3b      	ldr	r3, [r7, #32]
 800530c:	2200      	movs	r2, #0
 800530e:	615a      	str	r2, [r3, #20]
 8005310:	f000 fb98 	bl	8005a44 <xTaskResumeAll>
	{
		traceSTREAM_BUFFER_RECEIVE_FAILED( xStreamBuffer );
		mtCOVERAGE_TEST_MARKER();
	}

	return xReceivedLength;
 8005314:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
}
 8005316:	4618      	mov	r0, r3
 8005318:	3730      	adds	r7, #48	@ 0x30
 800531a:	46bd      	mov	sp, r7
 800531c:	bd80      	pop	{r7, pc}

0800531e <prvReadMessageFromBuffer>:
static size_t prvReadMessageFromBuffer( StreamBuffer_t *pxStreamBuffer,
										void *pvRxData,
										size_t xBufferLengthBytes,
										size_t xBytesAvailable,
										size_t xBytesToStoreMessageLength )
{
 800531e:	b580      	push	{r7, lr}
 8005320:	b088      	sub	sp, #32
 8005322:	af00      	add	r7, sp, #0
 8005324:	60f8      	str	r0, [r7, #12]
 8005326:	60b9      	str	r1, [r7, #8]
 8005328:	607a      	str	r2, [r7, #4]
 800532a:	603b      	str	r3, [r7, #0]
size_t xOriginalTail, xReceivedLength, xNextMessageLength;
configMESSAGE_BUFFER_LENGTH_TYPE xTempNextMessageLength;

	if( xBytesToStoreMessageLength != ( size_t ) 0 )
 800532c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800532e:	2b00      	cmp	r3, #0
 8005330:	d019      	beq.n	8005366 <prvReadMessageFromBuffer+0x48>
	{
		/* A discrete message is being received.  First receive the length
		of the message.  A copy of the tail is stored so the buffer can be
		returned to its prior state if the length of the message is too
		large for the provided buffer. */
		xOriginalTail = pxStreamBuffer->xTail;
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	61bb      	str	r3, [r7, #24]
		( void ) prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) &xTempNextMessageLength, xBytesToStoreMessageLength, xBytesAvailable );
 8005338:	f107 0110 	add.w	r1, r7, #16
 800533c:	683b      	ldr	r3, [r7, #0]
 800533e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005340:	68f8      	ldr	r0, [r7, #12]
 8005342:	f000 f893 	bl	800546c <prvReadBytesFromBuffer>
		xNextMessageLength = ( size_t ) xTempNextMessageLength;
 8005346:	693b      	ldr	r3, [r7, #16]
 8005348:	61fb      	str	r3, [r7, #28]

		/* Reduce the number of bytes available by the number of bytes just
		read out. */
		xBytesAvailable -= xBytesToStoreMessageLength;
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800534e:	1ad3      	subs	r3, r2, r3
 8005350:	603b      	str	r3, [r7, #0]

		/* Check there is enough space in the buffer provided by the
		user. */
		if( xNextMessageLength > xBufferLengthBytes )
 8005352:	69fa      	ldr	r2, [r7, #28]
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	429a      	cmp	r2, r3
 8005358:	d907      	bls.n	800536a <prvReadMessageFromBuffer+0x4c>
		{
			/* The user has provided insufficient space to read the message
			so return the buffer to its previous state (so the length of
			the message is in the buffer again). */
			pxStreamBuffer->xTail = xOriginalTail;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	69ba      	ldr	r2, [r7, #24]
 800535e:	601a      	str	r2, [r3, #0]
			xNextMessageLength = 0;
 8005360:	2300      	movs	r3, #0
 8005362:	61fb      	str	r3, [r7, #28]
 8005364:	e001      	b.n	800536a <prvReadMessageFromBuffer+0x4c>
	}
	else
	{
		/* A stream of bytes is being received (as opposed to a discrete
		message), so read as many bytes as possible. */
		xNextMessageLength = xBufferLengthBytes;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	61fb      	str	r3, [r7, #28]
	}

	/* Read the actual data. */
	xReceivedLength = prvReadBytesFromBuffer( pxStreamBuffer, ( uint8_t * ) pvRxData, xNextMessageLength, xBytesAvailable ); /*lint !e9079 Data storage area is implemented as uint8_t array for ease of sizing, indexing and alignment. */
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	68b9      	ldr	r1, [r7, #8]
 8005370:	68f8      	ldr	r0, [r7, #12]
 8005372:	f000 f87b 	bl	800546c <prvReadBytesFromBuffer>
 8005376:	6178      	str	r0, [r7, #20]

	return xReceivedLength;
 8005378:	697b      	ldr	r3, [r7, #20]
}
 800537a:	4618      	mov	r0, r3
 800537c:	3720      	adds	r7, #32
 800537e:	46bd      	mov	sp, r7
 8005380:	bd80      	pop	{r7, pc}

08005382 <prvWriteBytesToBuffer>:
	return xReturn;
}
/*-----------------------------------------------------------*/

static size_t prvWriteBytesToBuffer( StreamBuffer_t * const pxStreamBuffer, const uint8_t *pucData, size_t xCount )
{
 8005382:	b580      	push	{r7, lr}
 8005384:	b08a      	sub	sp, #40	@ 0x28
 8005386:	af00      	add	r7, sp, #0
 8005388:	60f8      	str	r0, [r7, #12]
 800538a:	60b9      	str	r1, [r7, #8]
 800538c:	607a      	str	r2, [r7, #4]
size_t xNextHead, xFirstLength;

	configASSERT( xCount > ( size_t ) 0 );
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2b00      	cmp	r3, #0
 8005392:	d10b      	bne.n	80053ac <prvWriteBytesToBuffer+0x2a>
	__asm volatile
 8005394:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005398:	f383 8811 	msr	BASEPRI, r3
 800539c:	f3bf 8f6f 	isb	sy
 80053a0:	f3bf 8f4f 	dsb	sy
 80053a4:	61fb      	str	r3, [r7, #28]
}
 80053a6:	bf00      	nop
 80053a8:	bf00      	nop
 80053aa:	e7fd      	b.n	80053a8 <prvWriteBytesToBuffer+0x26>

	xNextHead = pxStreamBuffer->xHead;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	685b      	ldr	r3, [r3, #4]
 80053b0:	627b      	str	r3, [r7, #36]	@ 0x24

	/* Calculate the number of bytes that can be added in the first write -
	which may be less than the total number of bytes that need to be added if
	the buffer will wrap back to the beginning. */
	xFirstLength = configMIN( pxStreamBuffer->xLength - xNextHead, xCount );
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	689a      	ldr	r2, [r3, #8]
 80053b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053b8:	1ad3      	subs	r3, r2, r3
 80053ba:	687a      	ldr	r2, [r7, #4]
 80053bc:	4293      	cmp	r3, r2
 80053be:	bf28      	it	cs
 80053c0:	4613      	movcs	r3, r2
 80053c2:	623b      	str	r3, [r7, #32]

	/* Write as many bytes as can be written in the first write. */
	configASSERT( ( xNextHead + xFirstLength ) <= pxStreamBuffer->xLength );
 80053c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053c6:	6a3b      	ldr	r3, [r7, #32]
 80053c8:	441a      	add	r2, r3
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	429a      	cmp	r2, r3
 80053d0:	d90b      	bls.n	80053ea <prvWriteBytesToBuffer+0x68>
	__asm volatile
 80053d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d6:	f383 8811 	msr	BASEPRI, r3
 80053da:	f3bf 8f6f 	isb	sy
 80053de:	f3bf 8f4f 	dsb	sy
 80053e2:	61bb      	str	r3, [r7, #24]
}
 80053e4:	bf00      	nop
 80053e6:	bf00      	nop
 80053e8:	e7fd      	b.n	80053e6 <prvWriteBytesToBuffer+0x64>
	( void ) memcpy( ( void* ) ( &( pxStreamBuffer->pucBuffer[ xNextHead ] ) ), ( const void * ) pucData, xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	699a      	ldr	r2, [r3, #24]
 80053ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80053f0:	4413      	add	r3, r2
 80053f2:	6a3a      	ldr	r2, [r7, #32]
 80053f4:	68b9      	ldr	r1, [r7, #8]
 80053f6:	4618      	mov	r0, r3
 80053f8:	f002 ffed 	bl	80083d6 <memcpy>

	/* If the number of bytes written was less than the number that could be
	written in the first write... */
	if( xCount > xFirstLength )
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6a3b      	ldr	r3, [r7, #32]
 8005400:	429a      	cmp	r2, r3
 8005402:	d91d      	bls.n	8005440 <prvWriteBytesToBuffer+0xbe>
	{
		/* ...then write the remaining bytes to the start of the buffer. */
		configASSERT( ( xCount - xFirstLength ) <= pxStreamBuffer->xLength );
 8005404:	687a      	ldr	r2, [r7, #4]
 8005406:	6a3b      	ldr	r3, [r7, #32]
 8005408:	1ad2      	subs	r2, r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	689b      	ldr	r3, [r3, #8]
 800540e:	429a      	cmp	r2, r3
 8005410:	d90b      	bls.n	800542a <prvWriteBytesToBuffer+0xa8>
	__asm volatile
 8005412:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005416:	f383 8811 	msr	BASEPRI, r3
 800541a:	f3bf 8f6f 	isb	sy
 800541e:	f3bf 8f4f 	dsb	sy
 8005422:	617b      	str	r3, [r7, #20]
}
 8005424:	bf00      	nop
 8005426:	bf00      	nop
 8005428:	e7fd      	b.n	8005426 <prvWriteBytesToBuffer+0xa4>
		( void ) memcpy( ( void * ) pxStreamBuffer->pucBuffer, ( const void * ) &( pucData[ xFirstLength ] ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6998      	ldr	r0, [r3, #24]
 800542e:	68ba      	ldr	r2, [r7, #8]
 8005430:	6a3b      	ldr	r3, [r7, #32]
 8005432:	18d1      	adds	r1, r2, r3
 8005434:	687a      	ldr	r2, [r7, #4]
 8005436:	6a3b      	ldr	r3, [r7, #32]
 8005438:	1ad3      	subs	r3, r2, r3
 800543a:	461a      	mov	r2, r3
 800543c:	f002 ffcb 	bl	80083d6 <memcpy>
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	xNextHead += xCount;
 8005440:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	4413      	add	r3, r2
 8005446:	627b      	str	r3, [r7, #36]	@ 0x24
	if( xNextHead >= pxStreamBuffer->xLength )
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	689b      	ldr	r3, [r3, #8]
 800544c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800544e:	429a      	cmp	r2, r3
 8005450:	d304      	bcc.n	800545c <prvWriteBytesToBuffer+0xda>
	{
		xNextHead -= pxStreamBuffer->xLength;
 8005452:	68fb      	ldr	r3, [r7, #12]
 8005454:	689b      	ldr	r3, [r3, #8]
 8005456:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005458:	1ad3      	subs	r3, r2, r3
 800545a:	627b      	str	r3, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxStreamBuffer->xHead = xNextHead;
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005460:	605a      	str	r2, [r3, #4]

	return xCount;
 8005462:	687b      	ldr	r3, [r7, #4]
}
 8005464:	4618      	mov	r0, r3
 8005466:	3728      	adds	r7, #40	@ 0x28
 8005468:	46bd      	mov	sp, r7
 800546a:	bd80      	pop	{r7, pc}

0800546c <prvReadBytesFromBuffer>:
/*-----------------------------------------------------------*/

static size_t prvReadBytesFromBuffer( StreamBuffer_t *pxStreamBuffer, uint8_t *pucData, size_t xMaxCount, size_t xBytesAvailable )
{
 800546c:	b580      	push	{r7, lr}
 800546e:	b08a      	sub	sp, #40	@ 0x28
 8005470:	af00      	add	r7, sp, #0
 8005472:	60f8      	str	r0, [r7, #12]
 8005474:	60b9      	str	r1, [r7, #8]
 8005476:	607a      	str	r2, [r7, #4]
 8005478:	603b      	str	r3, [r7, #0]
size_t xCount, xFirstLength, xNextTail;

	/* Use the minimum of the wanted bytes and the available bytes. */
	xCount = configMIN( xBytesAvailable, xMaxCount );
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	683b      	ldr	r3, [r7, #0]
 800547e:	4293      	cmp	r3, r2
 8005480:	bf28      	it	cs
 8005482:	4613      	movcs	r3, r2
 8005484:	623b      	str	r3, [r7, #32]

	if( xCount > ( size_t ) 0 )
 8005486:	6a3b      	ldr	r3, [r7, #32]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d067      	beq.n	800555c <prvReadBytesFromBuffer+0xf0>
	{
		xNextTail = pxStreamBuffer->xTail;
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	627b      	str	r3, [r7, #36]	@ 0x24

		/* Calculate the number of bytes that can be read - which may be
		less than the number wanted if the data wraps around to the start of
		the buffer. */
		xFirstLength = configMIN( pxStreamBuffer->xLength - xNextTail, xCount );
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	689a      	ldr	r2, [r3, #8]
 8005496:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	6a3a      	ldr	r2, [r7, #32]
 800549c:	4293      	cmp	r3, r2
 800549e:	bf28      	it	cs
 80054a0:	4613      	movcs	r3, r2
 80054a2:	61fb      	str	r3, [r7, #28]

		/* Obtain the number of bytes it is possible to obtain in the first
		read.  Asserts check bounds of read and write. */
		configASSERT( xFirstLength <= xMaxCount );
 80054a4:	69fa      	ldr	r2, [r7, #28]
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	429a      	cmp	r2, r3
 80054aa:	d90b      	bls.n	80054c4 <prvReadBytesFromBuffer+0x58>
	__asm volatile
 80054ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054b0:	f383 8811 	msr	BASEPRI, r3
 80054b4:	f3bf 8f6f 	isb	sy
 80054b8:	f3bf 8f4f 	dsb	sy
 80054bc:	61bb      	str	r3, [r7, #24]
}
 80054be:	bf00      	nop
 80054c0:	bf00      	nop
 80054c2:	e7fd      	b.n	80054c0 <prvReadBytesFromBuffer+0x54>
		configASSERT( ( xNextTail + xFirstLength ) <= pxStreamBuffer->xLength );
 80054c4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80054c6:	69fb      	ldr	r3, [r7, #28]
 80054c8:	441a      	add	r2, r3
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	689b      	ldr	r3, [r3, #8]
 80054ce:	429a      	cmp	r2, r3
 80054d0:	d90b      	bls.n	80054ea <prvReadBytesFromBuffer+0x7e>
	__asm volatile
 80054d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80054d6:	f383 8811 	msr	BASEPRI, r3
 80054da:	f3bf 8f6f 	isb	sy
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	617b      	str	r3, [r7, #20]
}
 80054e4:	bf00      	nop
 80054e6:	bf00      	nop
 80054e8:	e7fd      	b.n	80054e6 <prvReadBytesFromBuffer+0x7a>
		( void ) memcpy( ( void * ) pucData, ( const void * ) &( pxStreamBuffer->pucBuffer[ xNextTail ] ), xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	699a      	ldr	r2, [r3, #24]
 80054ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80054f0:	4413      	add	r3, r2
 80054f2:	69fa      	ldr	r2, [r7, #28]
 80054f4:	4619      	mov	r1, r3
 80054f6:	68b8      	ldr	r0, [r7, #8]
 80054f8:	f002 ff6d 	bl	80083d6 <memcpy>

		/* If the total number of wanted bytes is greater than the number
		that could be read in the first read... */
		if( xCount > xFirstLength )
 80054fc:	6a3a      	ldr	r2, [r7, #32]
 80054fe:	69fb      	ldr	r3, [r7, #28]
 8005500:	429a      	cmp	r2, r3
 8005502:	d91a      	bls.n	800553a <prvReadBytesFromBuffer+0xce>
		{
			/*...then read the remaining bytes from the start of the buffer. */
			configASSERT( xCount <= xMaxCount );
 8005504:	6a3a      	ldr	r2, [r7, #32]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	429a      	cmp	r2, r3
 800550a:	d90b      	bls.n	8005524 <prvReadBytesFromBuffer+0xb8>
	__asm volatile
 800550c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005510:	f383 8811 	msr	BASEPRI, r3
 8005514:	f3bf 8f6f 	isb	sy
 8005518:	f3bf 8f4f 	dsb	sy
 800551c:	613b      	str	r3, [r7, #16]
}
 800551e:	bf00      	nop
 8005520:	bf00      	nop
 8005522:	e7fd      	b.n	8005520 <prvReadBytesFromBuffer+0xb4>
			( void ) memcpy( ( void * ) &( pucData[ xFirstLength ] ), ( void * ) ( pxStreamBuffer->pucBuffer ), xCount - xFirstLength ); /*lint !e9087 memcpy() requires void *. */
 8005524:	68ba      	ldr	r2, [r7, #8]
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	18d0      	adds	r0, r2, r3
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6999      	ldr	r1, [r3, #24]
 800552e:	6a3a      	ldr	r2, [r7, #32]
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	1ad3      	subs	r3, r2, r3
 8005534:	461a      	mov	r2, r3
 8005536:	f002 ff4e 	bl	80083d6 <memcpy>
			mtCOVERAGE_TEST_MARKER();
		}

		/* Move the tail pointer to effectively remove the data read from
		the buffer. */
		xNextTail += xCount;
 800553a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800553c:	6a3b      	ldr	r3, [r7, #32]
 800553e:	4413      	add	r3, r2
 8005540:	627b      	str	r3, [r7, #36]	@ 0x24

		if( xNextTail >= pxStreamBuffer->xLength )
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	689b      	ldr	r3, [r3, #8]
 8005546:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005548:	429a      	cmp	r2, r3
 800554a:	d304      	bcc.n	8005556 <prvReadBytesFromBuffer+0xea>
		{
			xNextTail -= pxStreamBuffer->xLength;
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	689b      	ldr	r3, [r3, #8]
 8005550:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005552:	1ad3      	subs	r3, r2, r3
 8005554:	627b      	str	r3, [r7, #36]	@ 0x24
		}

		pxStreamBuffer->xTail = xNextTail;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800555a:	601a      	str	r2, [r3, #0]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 800555c:	6a3b      	ldr	r3, [r7, #32]
}
 800555e:	4618      	mov	r0, r3
 8005560:	3728      	adds	r7, #40	@ 0x28
 8005562:	46bd      	mov	sp, r7
 8005564:	bd80      	pop	{r7, pc}

08005566 <prvBytesInBuffer>:
/*-----------------------------------------------------------*/

static size_t prvBytesInBuffer( const StreamBuffer_t * const pxStreamBuffer )
{
 8005566:	b480      	push	{r7}
 8005568:	b085      	sub	sp, #20
 800556a:	af00      	add	r7, sp, #0
 800556c:	6078      	str	r0, [r7, #4]
/* Returns the distance between xTail and xHead. */
size_t xCount;

	xCount = pxStreamBuffer->xLength + pxStreamBuffer->xHead;
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	689a      	ldr	r2, [r3, #8]
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	685b      	ldr	r3, [r3, #4]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
	xCount -= pxStreamBuffer->xTail;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	681b      	ldr	r3, [r3, #0]
 800557e:	68fa      	ldr	r2, [r7, #12]
 8005580:	1ad3      	subs	r3, r2, r3
 8005582:	60fb      	str	r3, [r7, #12]
	if ( xCount >= pxStreamBuffer->xLength )
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	689b      	ldr	r3, [r3, #8]
 8005588:	68fa      	ldr	r2, [r7, #12]
 800558a:	429a      	cmp	r2, r3
 800558c:	d304      	bcc.n	8005598 <prvBytesInBuffer+0x32>
	{
		xCount -= pxStreamBuffer->xLength;
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	689b      	ldr	r3, [r3, #8]
 8005592:	68fa      	ldr	r2, [r7, #12]
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	60fb      	str	r3, [r7, #12]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xCount;
 8005598:	68fb      	ldr	r3, [r7, #12]
}
 800559a:	4618      	mov	r0, r3
 800559c:	3714      	adds	r7, #20
 800559e:	46bd      	mov	sp, r7
 80055a0:	bc80      	pop	{r7}
 80055a2:	4770      	bx	lr

080055a4 <prvInitialiseNewStreamBuffer>:
static void prvInitialiseNewStreamBuffer( StreamBuffer_t * const pxStreamBuffer,
										  uint8_t * const pucBuffer,
										  size_t xBufferSizeBytes,
										  size_t xTriggerLevelBytes,
										  uint8_t ucFlags )
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b086      	sub	sp, #24
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	60b9      	str	r1, [r7, #8]
 80055ae:	607a      	str	r2, [r7, #4]
 80055b0:	603b      	str	r3, [r7, #0]
	#if( configASSERT_DEFINED == 1 )
	{
		/* The value written just has to be identifiable when looking at the
		memory.  Don't use 0xA5 as that is the stack fill value and could
		result in confusion as to what is actually being observed. */
		const BaseType_t xWriteValue = 0x55;
 80055b2:	2355      	movs	r3, #85	@ 0x55
 80055b4:	617b      	str	r3, [r7, #20]
		configASSERT( memset( pucBuffer, ( int ) xWriteValue, xBufferSizeBytes ) == pucBuffer );
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6979      	ldr	r1, [r7, #20]
 80055ba:	68b8      	ldr	r0, [r7, #8]
 80055bc:	f002 fe5b 	bl	8008276 <memset>
 80055c0:	4602      	mov	r2, r0
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d00b      	beq.n	80055e0 <prvInitialiseNewStreamBuffer+0x3c>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	613b      	str	r3, [r7, #16]
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <prvInitialiseNewStreamBuffer+0x38>
	} /*lint !e529 !e438 xWriteValue is only used if configASSERT() is defined. */
	#endif

	( void ) memset( ( void * ) pxStreamBuffer, 0x00, sizeof( StreamBuffer_t ) ); /*lint !e9087 memset() requires void *. */
 80055e0:	2224      	movs	r2, #36	@ 0x24
 80055e2:	2100      	movs	r1, #0
 80055e4:	68f8      	ldr	r0, [r7, #12]
 80055e6:	f002 fe46 	bl	8008276 <memset>
	pxStreamBuffer->pucBuffer = pucBuffer;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	68ba      	ldr	r2, [r7, #8]
 80055ee:	619a      	str	r2, [r3, #24]
	pxStreamBuffer->xLength = xBufferSizeBytes;
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	687a      	ldr	r2, [r7, #4]
 80055f4:	609a      	str	r2, [r3, #8]
	pxStreamBuffer->xTriggerLevelBytes = xTriggerLevelBytes;
 80055f6:	68fb      	ldr	r3, [r7, #12]
 80055f8:	683a      	ldr	r2, [r7, #0]
 80055fa:	60da      	str	r2, [r3, #12]
	pxStreamBuffer->ucFlags = ucFlags;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	f897 2020 	ldrb.w	r2, [r7, #32]
 8005602:	771a      	strb	r2, [r3, #28]
}
 8005604:	bf00      	nop
 8005606:	3718      	adds	r7, #24
 8005608:	46bd      	mov	sp, r7
 800560a:	bd80      	pop	{r7, pc}

0800560c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800560c:	b580      	push	{r7, lr}
 800560e:	b08e      	sub	sp, #56	@ 0x38
 8005610:	af04      	add	r7, sp, #16
 8005612:	60f8      	str	r0, [r7, #12]
 8005614:	60b9      	str	r1, [r7, #8]
 8005616:	607a      	str	r2, [r7, #4]
 8005618:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800561a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800561c:	2b00      	cmp	r3, #0
 800561e:	d10b      	bne.n	8005638 <xTaskCreateStatic+0x2c>
	__asm volatile
 8005620:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005624:	f383 8811 	msr	BASEPRI, r3
 8005628:	f3bf 8f6f 	isb	sy
 800562c:	f3bf 8f4f 	dsb	sy
 8005630:	623b      	str	r3, [r7, #32]
}
 8005632:	bf00      	nop
 8005634:	bf00      	nop
 8005636:	e7fd      	b.n	8005634 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005638:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800563a:	2b00      	cmp	r3, #0
 800563c:	d10b      	bne.n	8005656 <xTaskCreateStatic+0x4a>
	__asm volatile
 800563e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005642:	f383 8811 	msr	BASEPRI, r3
 8005646:	f3bf 8f6f 	isb	sy
 800564a:	f3bf 8f4f 	dsb	sy
 800564e:	61fb      	str	r3, [r7, #28]
}
 8005650:	bf00      	nop
 8005652:	bf00      	nop
 8005654:	e7fd      	b.n	8005652 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005656:	235c      	movs	r3, #92	@ 0x5c
 8005658:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800565a:	693b      	ldr	r3, [r7, #16]
 800565c:	2b5c      	cmp	r3, #92	@ 0x5c
 800565e:	d00b      	beq.n	8005678 <xTaskCreateStatic+0x6c>
	__asm volatile
 8005660:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005664:	f383 8811 	msr	BASEPRI, r3
 8005668:	f3bf 8f6f 	isb	sy
 800566c:	f3bf 8f4f 	dsb	sy
 8005670:	61bb      	str	r3, [r7, #24]
}
 8005672:	bf00      	nop
 8005674:	bf00      	nop
 8005676:	e7fd      	b.n	8005674 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005678:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800567a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567c:	2b00      	cmp	r3, #0
 800567e:	d01e      	beq.n	80056be <xTaskCreateStatic+0xb2>
 8005680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005682:	2b00      	cmp	r3, #0
 8005684:	d01b      	beq.n	80056be <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005686:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005688:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800568a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800568c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800568e:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005690:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005692:	2202      	movs	r2, #2
 8005694:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005698:	2300      	movs	r3, #0
 800569a:	9303      	str	r3, [sp, #12]
 800569c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800569e:	9302      	str	r3, [sp, #8]
 80056a0:	f107 0314 	add.w	r3, r7, #20
 80056a4:	9301      	str	r3, [sp, #4]
 80056a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80056a8:	9300      	str	r3, [sp, #0]
 80056aa:	683b      	ldr	r3, [r7, #0]
 80056ac:	687a      	ldr	r2, [r7, #4]
 80056ae:	68b9      	ldr	r1, [r7, #8]
 80056b0:	68f8      	ldr	r0, [r7, #12]
 80056b2:	f000 f850 	bl	8005756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80056b6:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80056b8:	f000 f8de 	bl	8005878 <prvAddNewTaskToReadyList>
 80056bc:	e001      	b.n	80056c2 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80056be:	2300      	movs	r3, #0
 80056c0:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80056c2:	697b      	ldr	r3, [r7, #20]
	}
 80056c4:	4618      	mov	r0, r3
 80056c6:	3728      	adds	r7, #40	@ 0x28
 80056c8:	46bd      	mov	sp, r7
 80056ca:	bd80      	pop	{r7, pc}

080056cc <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80056cc:	b580      	push	{r7, lr}
 80056ce:	b08c      	sub	sp, #48	@ 0x30
 80056d0:	af04      	add	r7, sp, #16
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	603b      	str	r3, [r7, #0]
 80056d8:	4613      	mov	r3, r2
 80056da:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80056dc:	88fb      	ldrh	r3, [r7, #6]
 80056de:	009b      	lsls	r3, r3, #2
 80056e0:	4618      	mov	r0, r3
 80056e2:	f001 fddd 	bl	80072a0 <pvPortMalloc>
 80056e6:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80056e8:	697b      	ldr	r3, [r7, #20]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d00e      	beq.n	800570c <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80056ee:	205c      	movs	r0, #92	@ 0x5c
 80056f0:	f001 fdd6 	bl	80072a0 <pvPortMalloc>
 80056f4:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80056f6:	69fb      	ldr	r3, [r7, #28]
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d003      	beq.n	8005704 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80056fc:	69fb      	ldr	r3, [r7, #28]
 80056fe:	697a      	ldr	r2, [r7, #20]
 8005700:	631a      	str	r2, [r3, #48]	@ 0x30
 8005702:	e005      	b.n	8005710 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005704:	6978      	ldr	r0, [r7, #20]
 8005706:	f001 fe99 	bl	800743c <vPortFree>
 800570a:	e001      	b.n	8005710 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800570c:	2300      	movs	r3, #0
 800570e:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005710:	69fb      	ldr	r3, [r7, #28]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d017      	beq.n	8005746 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005716:	69fb      	ldr	r3, [r7, #28]
 8005718:	2200      	movs	r2, #0
 800571a:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800571e:	88fa      	ldrh	r2, [r7, #6]
 8005720:	2300      	movs	r3, #0
 8005722:	9303      	str	r3, [sp, #12]
 8005724:	69fb      	ldr	r3, [r7, #28]
 8005726:	9302      	str	r3, [sp, #8]
 8005728:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800572a:	9301      	str	r3, [sp, #4]
 800572c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800572e:	9300      	str	r3, [sp, #0]
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	68b9      	ldr	r1, [r7, #8]
 8005734:	68f8      	ldr	r0, [r7, #12]
 8005736:	f000 f80e 	bl	8005756 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800573a:	69f8      	ldr	r0, [r7, #28]
 800573c:	f000 f89c 	bl	8005878 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005740:	2301      	movs	r3, #1
 8005742:	61bb      	str	r3, [r7, #24]
 8005744:	e002      	b.n	800574c <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005746:	f04f 33ff 	mov.w	r3, #4294967295
 800574a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800574c:	69bb      	ldr	r3, [r7, #24]
	}
 800574e:	4618      	mov	r0, r3
 8005750:	3720      	adds	r7, #32
 8005752:	46bd      	mov	sp, r7
 8005754:	bd80      	pop	{r7, pc}

08005756 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005756:	b580      	push	{r7, lr}
 8005758:	b088      	sub	sp, #32
 800575a:	af00      	add	r7, sp, #0
 800575c:	60f8      	str	r0, [r7, #12]
 800575e:	60b9      	str	r1, [r7, #8]
 8005760:	607a      	str	r2, [r7, #4]
 8005762:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005764:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005766:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	009b      	lsls	r3, r3, #2
 800576c:	461a      	mov	r2, r3
 800576e:	21a5      	movs	r1, #165	@ 0xa5
 8005770:	f002 fd81 	bl	8008276 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005774:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005776:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800577e:	3b01      	subs	r3, #1
 8005780:	009b      	lsls	r3, r3, #2
 8005782:	4413      	add	r3, r2
 8005784:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005786:	69bb      	ldr	r3, [r7, #24]
 8005788:	f023 0307 	bic.w	r3, r3, #7
 800578c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800578e:	69bb      	ldr	r3, [r7, #24]
 8005790:	f003 0307 	and.w	r3, r3, #7
 8005794:	2b00      	cmp	r3, #0
 8005796:	d00b      	beq.n	80057b0 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005798:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800579c:	f383 8811 	msr	BASEPRI, r3
 80057a0:	f3bf 8f6f 	isb	sy
 80057a4:	f3bf 8f4f 	dsb	sy
 80057a8:	617b      	str	r3, [r7, #20]
}
 80057aa:	bf00      	nop
 80057ac:	bf00      	nop
 80057ae:	e7fd      	b.n	80057ac <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d01f      	beq.n	80057f6 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057b6:	2300      	movs	r3, #0
 80057b8:	61fb      	str	r3, [r7, #28]
 80057ba:	e012      	b.n	80057e2 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80057bc:	68ba      	ldr	r2, [r7, #8]
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	4413      	add	r3, r2
 80057c2:	7819      	ldrb	r1, [r3, #0]
 80057c4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	4413      	add	r3, r2
 80057ca:	3334      	adds	r3, #52	@ 0x34
 80057cc:	460a      	mov	r2, r1
 80057ce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80057d0:	68ba      	ldr	r2, [r7, #8]
 80057d2:	69fb      	ldr	r3, [r7, #28]
 80057d4:	4413      	add	r3, r2
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	2b00      	cmp	r3, #0
 80057da:	d006      	beq.n	80057ea <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80057dc:	69fb      	ldr	r3, [r7, #28]
 80057de:	3301      	adds	r3, #1
 80057e0:	61fb      	str	r3, [r7, #28]
 80057e2:	69fb      	ldr	r3, [r7, #28]
 80057e4:	2b0f      	cmp	r3, #15
 80057e6:	d9e9      	bls.n	80057bc <prvInitialiseNewTask+0x66>
 80057e8:	e000      	b.n	80057ec <prvInitialiseNewTask+0x96>
			{
				break;
 80057ea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80057ec:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057ee:	2200      	movs	r2, #0
 80057f0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80057f4:	e003      	b.n	80057fe <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80057f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80057f8:	2200      	movs	r2, #0
 80057fa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	2b37      	cmp	r3, #55	@ 0x37
 8005802:	d901      	bls.n	8005808 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005804:	2337      	movs	r3, #55	@ 0x37
 8005806:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005808:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800580a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800580c:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800580e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005810:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005812:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005814:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005816:	2200      	movs	r2, #0
 8005818:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800581a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800581c:	3304      	adds	r3, #4
 800581e:	4618      	mov	r0, r3
 8005820:	f7fe fe1b 	bl	800445a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005826:	3318      	adds	r3, #24
 8005828:	4618      	mov	r0, r3
 800582a:	f7fe fe16 	bl	800445a <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800582e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005830:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005832:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005834:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005836:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800583a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800583c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800583e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005840:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005842:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005846:	2200      	movs	r2, #0
 8005848:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800584a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800584c:	2200      	movs	r2, #0
 800584e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005852:	683a      	ldr	r2, [r7, #0]
 8005854:	68f9      	ldr	r1, [r7, #12]
 8005856:	69b8      	ldr	r0, [r7, #24]
 8005858:	f001 fb2c 	bl	8006eb4 <pxPortInitialiseStack>
 800585c:	4602      	mov	r2, r0
 800585e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005860:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005864:	2b00      	cmp	r3, #0
 8005866:	d002      	beq.n	800586e <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005868:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800586a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800586c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800586e:	bf00      	nop
 8005870:	3720      	adds	r7, #32
 8005872:	46bd      	mov	sp, r7
 8005874:	bd80      	pop	{r7, pc}
	...

08005878 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005878:	b580      	push	{r7, lr}
 800587a:	b082      	sub	sp, #8
 800587c:	af00      	add	r7, sp, #0
 800587e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005880:	f001 fc0c 	bl	800709c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005884:	4b2d      	ldr	r3, [pc, #180]	@ (800593c <prvAddNewTaskToReadyList+0xc4>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	3301      	adds	r3, #1
 800588a:	4a2c      	ldr	r2, [pc, #176]	@ (800593c <prvAddNewTaskToReadyList+0xc4>)
 800588c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800588e:	4b2c      	ldr	r3, [pc, #176]	@ (8005940 <prvAddNewTaskToReadyList+0xc8>)
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	2b00      	cmp	r3, #0
 8005894:	d109      	bne.n	80058aa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005896:	4a2a      	ldr	r2, [pc, #168]	@ (8005940 <prvAddNewTaskToReadyList+0xc8>)
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800589c:	4b27      	ldr	r3, [pc, #156]	@ (800593c <prvAddNewTaskToReadyList+0xc4>)
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	2b01      	cmp	r3, #1
 80058a2:	d110      	bne.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80058a4:	f000 fbe6 	bl	8006074 <prvInitialiseTaskLists>
 80058a8:	e00d      	b.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80058aa:	4b26      	ldr	r3, [pc, #152]	@ (8005944 <prvAddNewTaskToReadyList+0xcc>)
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	2b00      	cmp	r3, #0
 80058b0:	d109      	bne.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80058b2:	4b23      	ldr	r3, [pc, #140]	@ (8005940 <prvAddNewTaskToReadyList+0xc8>)
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058bc:	429a      	cmp	r2, r3
 80058be:	d802      	bhi.n	80058c6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80058c0:	4a1f      	ldr	r2, [pc, #124]	@ (8005940 <prvAddNewTaskToReadyList+0xc8>)
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80058c6:	4b20      	ldr	r3, [pc, #128]	@ (8005948 <prvAddNewTaskToReadyList+0xd0>)
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	3301      	adds	r3, #1
 80058cc:	4a1e      	ldr	r2, [pc, #120]	@ (8005948 <prvAddNewTaskToReadyList+0xd0>)
 80058ce:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 80058d0:	4b1d      	ldr	r3, [pc, #116]	@ (8005948 <prvAddNewTaskToReadyList+0xd0>)
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058dc:	4b1b      	ldr	r3, [pc, #108]	@ (800594c <prvAddNewTaskToReadyList+0xd4>)
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	429a      	cmp	r2, r3
 80058e2:	d903      	bls.n	80058ec <prvAddNewTaskToReadyList+0x74>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80058e8:	4a18      	ldr	r2, [pc, #96]	@ (800594c <prvAddNewTaskToReadyList+0xd4>)
 80058ea:	6013      	str	r3, [r2, #0]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80058f0:	4613      	mov	r3, r2
 80058f2:	009b      	lsls	r3, r3, #2
 80058f4:	4413      	add	r3, r2
 80058f6:	009b      	lsls	r3, r3, #2
 80058f8:	4a15      	ldr	r2, [pc, #84]	@ (8005950 <prvAddNewTaskToReadyList+0xd8>)
 80058fa:	441a      	add	r2, r3
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	3304      	adds	r3, #4
 8005900:	4619      	mov	r1, r3
 8005902:	4610      	mov	r0, r2
 8005904:	f7fe fdb5 	bl	8004472 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005908:	f001 fbf8 	bl	80070fc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800590c:	4b0d      	ldr	r3, [pc, #52]	@ (8005944 <prvAddNewTaskToReadyList+0xcc>)
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d00e      	beq.n	8005932 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005914:	4b0a      	ldr	r3, [pc, #40]	@ (8005940 <prvAddNewTaskToReadyList+0xc8>)
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800591e:	429a      	cmp	r2, r3
 8005920:	d207      	bcs.n	8005932 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005922:	4b0c      	ldr	r3, [pc, #48]	@ (8005954 <prvAddNewTaskToReadyList+0xdc>)
 8005924:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	f3bf 8f4f 	dsb	sy
 800592e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005932:	bf00      	nop
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}
 800593a:	bf00      	nop
 800593c:	20000e30 	.word	0x20000e30
 8005940:	2000095c 	.word	0x2000095c
 8005944:	20000e3c 	.word	0x20000e3c
 8005948:	20000e4c 	.word	0x20000e4c
 800594c:	20000e38 	.word	0x20000e38
 8005950:	20000960 	.word	0x20000960
 8005954:	e000ed04 	.word	0xe000ed04

08005958 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08a      	sub	sp, #40	@ 0x28
 800595c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800595e:	2300      	movs	r3, #0
 8005960:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005962:	2300      	movs	r3, #0
 8005964:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005966:	463a      	mov	r2, r7
 8005968:	1d39      	adds	r1, r7, #4
 800596a:	f107 0308 	add.w	r3, r7, #8
 800596e:	4618      	mov	r0, r3
 8005970:	f7fe fd22 	bl	80043b8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005974:	6839      	ldr	r1, [r7, #0]
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	68ba      	ldr	r2, [r7, #8]
 800597a:	9202      	str	r2, [sp, #8]
 800597c:	9301      	str	r3, [sp, #4]
 800597e:	2300      	movs	r3, #0
 8005980:	9300      	str	r3, [sp, #0]
 8005982:	2300      	movs	r3, #0
 8005984:	460a      	mov	r2, r1
 8005986:	4922      	ldr	r1, [pc, #136]	@ (8005a10 <vTaskStartScheduler+0xb8>)
 8005988:	4822      	ldr	r0, [pc, #136]	@ (8005a14 <vTaskStartScheduler+0xbc>)
 800598a:	f7ff fe3f 	bl	800560c <xTaskCreateStatic>
 800598e:	4603      	mov	r3, r0
 8005990:	4a21      	ldr	r2, [pc, #132]	@ (8005a18 <vTaskStartScheduler+0xc0>)
 8005992:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005994:	4b20      	ldr	r3, [pc, #128]	@ (8005a18 <vTaskStartScheduler+0xc0>)
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	2b00      	cmp	r3, #0
 800599a:	d002      	beq.n	80059a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800599c:	2301      	movs	r3, #1
 800599e:	617b      	str	r3, [r7, #20]
 80059a0:	e001      	b.n	80059a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80059a2:	2300      	movs	r3, #0
 80059a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	2b01      	cmp	r3, #1
 80059aa:	d102      	bne.n	80059b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80059ac:	f000 ff2a 	bl	8006804 <xTimerCreateTimerTask>
 80059b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2b01      	cmp	r3, #1
 80059b6:	d116      	bne.n	80059e6 <vTaskStartScheduler+0x8e>
	__asm volatile
 80059b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059bc:	f383 8811 	msr	BASEPRI, r3
 80059c0:	f3bf 8f6f 	isb	sy
 80059c4:	f3bf 8f4f 	dsb	sy
 80059c8:	613b      	str	r3, [r7, #16]
}
 80059ca:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80059cc:	4b13      	ldr	r3, [pc, #76]	@ (8005a1c <vTaskStartScheduler+0xc4>)
 80059ce:	f04f 32ff 	mov.w	r2, #4294967295
 80059d2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80059d4:	4b12      	ldr	r3, [pc, #72]	@ (8005a20 <vTaskStartScheduler+0xc8>)
 80059d6:	2201      	movs	r2, #1
 80059d8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80059da:	4b12      	ldr	r3, [pc, #72]	@ (8005a24 <vTaskStartScheduler+0xcc>)
 80059dc:	2200      	movs	r2, #0
 80059de:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80059e0:	f001 faea 	bl	8006fb8 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80059e4:	e00f      	b.n	8005a06 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059ec:	d10b      	bne.n	8005a06 <vTaskStartScheduler+0xae>
	__asm volatile
 80059ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059f2:	f383 8811 	msr	BASEPRI, r3
 80059f6:	f3bf 8f6f 	isb	sy
 80059fa:	f3bf 8f4f 	dsb	sy
 80059fe:	60fb      	str	r3, [r7, #12]
}
 8005a00:	bf00      	nop
 8005a02:	bf00      	nop
 8005a04:	e7fd      	b.n	8005a02 <vTaskStartScheduler+0xaa>
}
 8005a06:	bf00      	nop
 8005a08:	3718      	adds	r7, #24
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	bd80      	pop	{r7, pc}
 8005a0e:	bf00      	nop
 8005a10:	0800aefc 	.word	0x0800aefc
 8005a14:	08006045 	.word	0x08006045
 8005a18:	20000e54 	.word	0x20000e54
 8005a1c:	20000e50 	.word	0x20000e50
 8005a20:	20000e3c 	.word	0x20000e3c
 8005a24:	20000e34 	.word	0x20000e34

08005a28 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005a28:	b480      	push	{r7}
 8005a2a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005a2c:	4b04      	ldr	r3, [pc, #16]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	3301      	adds	r3, #1
 8005a32:	4a03      	ldr	r2, [pc, #12]	@ (8005a40 <vTaskSuspendAll+0x18>)
 8005a34:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005a36:	bf00      	nop
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bc80      	pop	{r7}
 8005a3c:	4770      	bx	lr
 8005a3e:	bf00      	nop
 8005a40:	20000e58 	.word	0x20000e58

08005a44 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005a44:	b580      	push	{r7, lr}
 8005a46:	b084      	sub	sp, #16
 8005a48:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005a4a:	2300      	movs	r3, #0
 8005a4c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005a4e:	2300      	movs	r3, #0
 8005a50:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005a52:	4b42      	ldr	r3, [pc, #264]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d10b      	bne.n	8005a72 <xTaskResumeAll+0x2e>
	__asm volatile
 8005a5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a5e:	f383 8811 	msr	BASEPRI, r3
 8005a62:	f3bf 8f6f 	isb	sy
 8005a66:	f3bf 8f4f 	dsb	sy
 8005a6a:	603b      	str	r3, [r7, #0]
}
 8005a6c:	bf00      	nop
 8005a6e:	bf00      	nop
 8005a70:	e7fd      	b.n	8005a6e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005a72:	f001 fb13 	bl	800709c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005a76:	4b39      	ldr	r3, [pc, #228]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	3b01      	subs	r3, #1
 8005a7c:	4a37      	ldr	r2, [pc, #220]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a7e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005a80:	4b36      	ldr	r3, [pc, #216]	@ (8005b5c <xTaskResumeAll+0x118>)
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d162      	bne.n	8005b4e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005a88:	4b35      	ldr	r3, [pc, #212]	@ (8005b60 <xTaskResumeAll+0x11c>)
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d05e      	beq.n	8005b4e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005a90:	e02f      	b.n	8005af2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005a92:	4b34      	ldr	r3, [pc, #208]	@ (8005b64 <xTaskResumeAll+0x120>)
 8005a94:	68db      	ldr	r3, [r3, #12]
 8005a96:	68db      	ldr	r3, [r3, #12]
 8005a98:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	3318      	adds	r3, #24
 8005a9e:	4618      	mov	r0, r3
 8005aa0:	f7fe fd42 	bl	8004528 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	3304      	adds	r3, #4
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f7fe fd3d 	bl	8004528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ab2:	4b2d      	ldr	r3, [pc, #180]	@ (8005b68 <xTaskResumeAll+0x124>)
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	429a      	cmp	r2, r3
 8005ab8:	d903      	bls.n	8005ac2 <xTaskResumeAll+0x7e>
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005abe:	4a2a      	ldr	r2, [pc, #168]	@ (8005b68 <xTaskResumeAll+0x124>)
 8005ac0:	6013      	str	r3, [r2, #0]
 8005ac2:	68fb      	ldr	r3, [r7, #12]
 8005ac4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ac6:	4613      	mov	r3, r2
 8005ac8:	009b      	lsls	r3, r3, #2
 8005aca:	4413      	add	r3, r2
 8005acc:	009b      	lsls	r3, r3, #2
 8005ace:	4a27      	ldr	r2, [pc, #156]	@ (8005b6c <xTaskResumeAll+0x128>)
 8005ad0:	441a      	add	r2, r3
 8005ad2:	68fb      	ldr	r3, [r7, #12]
 8005ad4:	3304      	adds	r3, #4
 8005ad6:	4619      	mov	r1, r3
 8005ad8:	4610      	mov	r0, r2
 8005ada:	f7fe fcca 	bl	8004472 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ae2:	4b23      	ldr	r3, [pc, #140]	@ (8005b70 <xTaskResumeAll+0x12c>)
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ae8:	429a      	cmp	r2, r3
 8005aea:	d302      	bcc.n	8005af2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005aec:	4b21      	ldr	r3, [pc, #132]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005aee:	2201      	movs	r2, #1
 8005af0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005af2:	4b1c      	ldr	r3, [pc, #112]	@ (8005b64 <xTaskResumeAll+0x120>)
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d1cb      	bne.n	8005a92 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2b00      	cmp	r3, #0
 8005afe:	d001      	beq.n	8005b04 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005b00:	f000 fb56 	bl	80061b0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005b04:	4b1c      	ldr	r3, [pc, #112]	@ (8005b78 <xTaskResumeAll+0x134>)
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d010      	beq.n	8005b32 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005b10:	f000 f844 	bl	8005b9c <xTaskIncrementTick>
 8005b14:	4603      	mov	r3, r0
 8005b16:	2b00      	cmp	r3, #0
 8005b18:	d002      	beq.n	8005b20 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005b1a:	4b16      	ldr	r3, [pc, #88]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005b1c:	2201      	movs	r2, #1
 8005b1e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	3b01      	subs	r3, #1
 8005b24:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	2b00      	cmp	r3, #0
 8005b2a:	d1f1      	bne.n	8005b10 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005b2c:	4b12      	ldr	r3, [pc, #72]	@ (8005b78 <xTaskResumeAll+0x134>)
 8005b2e:	2200      	movs	r2, #0
 8005b30:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005b32:	4b10      	ldr	r3, [pc, #64]	@ (8005b74 <xTaskResumeAll+0x130>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d009      	beq.n	8005b4e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005b3a:	2301      	movs	r3, #1
 8005b3c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005b3e:	4b0f      	ldr	r3, [pc, #60]	@ (8005b7c <xTaskResumeAll+0x138>)
 8005b40:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b44:	601a      	str	r2, [r3, #0]
 8005b46:	f3bf 8f4f 	dsb	sy
 8005b4a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005b4e:	f001 fad5 	bl	80070fc <vPortExitCritical>

	return xAlreadyYielded;
 8005b52:	68bb      	ldr	r3, [r7, #8]
}
 8005b54:	4618      	mov	r0, r3
 8005b56:	3710      	adds	r7, #16
 8005b58:	46bd      	mov	sp, r7
 8005b5a:	bd80      	pop	{r7, pc}
 8005b5c:	20000e58 	.word	0x20000e58
 8005b60:	20000e30 	.word	0x20000e30
 8005b64:	20000df0 	.word	0x20000df0
 8005b68:	20000e38 	.word	0x20000e38
 8005b6c:	20000960 	.word	0x20000960
 8005b70:	2000095c 	.word	0x2000095c
 8005b74:	20000e44 	.word	0x20000e44
 8005b78:	20000e40 	.word	0x20000e40
 8005b7c:	e000ed04 	.word	0xe000ed04

08005b80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005b86:	4b04      	ldr	r3, [pc, #16]	@ (8005b98 <xTaskGetTickCount+0x18>)
 8005b88:	681b      	ldr	r3, [r3, #0]
 8005b8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005b8c:	687b      	ldr	r3, [r7, #4]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bc80      	pop	{r7}
 8005b96:	4770      	bx	lr
 8005b98:	20000e34 	.word	0x20000e34

08005b9c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b086      	sub	sp, #24
 8005ba0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ba6:	4b4f      	ldr	r3, [pc, #316]	@ (8005ce4 <xTaskIncrementTick+0x148>)
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	f040 8090 	bne.w	8005cd0 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005bb0:	4b4d      	ldr	r3, [pc, #308]	@ (8005ce8 <xTaskIncrementTick+0x14c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	3301      	adds	r3, #1
 8005bb6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005bb8:	4a4b      	ldr	r2, [pc, #300]	@ (8005ce8 <xTaskIncrementTick+0x14c>)
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005bbe:	693b      	ldr	r3, [r7, #16]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d121      	bne.n	8005c08 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005bc4:	4b49      	ldr	r3, [pc, #292]	@ (8005cec <xTaskIncrementTick+0x150>)
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d00b      	beq.n	8005be6 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bd2:	f383 8811 	msr	BASEPRI, r3
 8005bd6:	f3bf 8f6f 	isb	sy
 8005bda:	f3bf 8f4f 	dsb	sy
 8005bde:	603b      	str	r3, [r7, #0]
}
 8005be0:	bf00      	nop
 8005be2:	bf00      	nop
 8005be4:	e7fd      	b.n	8005be2 <xTaskIncrementTick+0x46>
 8005be6:	4b41      	ldr	r3, [pc, #260]	@ (8005cec <xTaskIncrementTick+0x150>)
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	60fb      	str	r3, [r7, #12]
 8005bec:	4b40      	ldr	r3, [pc, #256]	@ (8005cf0 <xTaskIncrementTick+0x154>)
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	4a3e      	ldr	r2, [pc, #248]	@ (8005cec <xTaskIncrementTick+0x150>)
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	4a3e      	ldr	r2, [pc, #248]	@ (8005cf0 <xTaskIncrementTick+0x154>)
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	6013      	str	r3, [r2, #0]
 8005bfa:	4b3e      	ldr	r3, [pc, #248]	@ (8005cf4 <xTaskIncrementTick+0x158>)
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	4a3c      	ldr	r2, [pc, #240]	@ (8005cf4 <xTaskIncrementTick+0x158>)
 8005c02:	6013      	str	r3, [r2, #0]
 8005c04:	f000 fad4 	bl	80061b0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8005c08:	4b3b      	ldr	r3, [pc, #236]	@ (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	693a      	ldr	r2, [r7, #16]
 8005c0e:	429a      	cmp	r2, r3
 8005c10:	d349      	bcc.n	8005ca6 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005c12:	4b36      	ldr	r3, [pc, #216]	@ (8005cec <xTaskIncrementTick+0x150>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	681b      	ldr	r3, [r3, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005c1c:	4b36      	ldr	r3, [pc, #216]	@ (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c1e:	f04f 32ff 	mov.w	r2, #4294967295
 8005c22:	601a      	str	r2, [r3, #0]
					break;
 8005c24:	e03f      	b.n	8005ca6 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005c26:	4b31      	ldr	r3, [pc, #196]	@ (8005cec <xTaskIncrementTick+0x150>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	68db      	ldr	r3, [r3, #12]
 8005c2c:	68db      	ldr	r3, [r3, #12]
 8005c2e:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	685b      	ldr	r3, [r3, #4]
 8005c34:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8005c36:	693a      	ldr	r2, [r7, #16]
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	429a      	cmp	r2, r3
 8005c3c:	d203      	bcs.n	8005c46 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8005c3e:	4a2e      	ldr	r2, [pc, #184]	@ (8005cf8 <xTaskIncrementTick+0x15c>)
 8005c40:	687b      	ldr	r3, [r7, #4]
 8005c42:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8005c44:	e02f      	b.n	8005ca6 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005c46:	68bb      	ldr	r3, [r7, #8]
 8005c48:	3304      	adds	r3, #4
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f7fe fc6c 	bl	8004528 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d004      	beq.n	8005c62 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	3318      	adds	r3, #24
 8005c5c:	4618      	mov	r0, r3
 8005c5e:	f7fe fc63 	bl	8004528 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c66:	4b25      	ldr	r3, [pc, #148]	@ (8005cfc <xTaskIncrementTick+0x160>)
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	429a      	cmp	r2, r3
 8005c6c:	d903      	bls.n	8005c76 <xTaskIncrementTick+0xda>
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c72:	4a22      	ldr	r2, [pc, #136]	@ (8005cfc <xTaskIncrementTick+0x160>)
 8005c74:	6013      	str	r3, [r2, #0]
 8005c76:	68bb      	ldr	r3, [r7, #8]
 8005c78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c7a:	4613      	mov	r3, r2
 8005c7c:	009b      	lsls	r3, r3, #2
 8005c7e:	4413      	add	r3, r2
 8005c80:	009b      	lsls	r3, r3, #2
 8005c82:	4a1f      	ldr	r2, [pc, #124]	@ (8005d00 <xTaskIncrementTick+0x164>)
 8005c84:	441a      	add	r2, r3
 8005c86:	68bb      	ldr	r3, [r7, #8]
 8005c88:	3304      	adds	r3, #4
 8005c8a:	4619      	mov	r1, r3
 8005c8c:	4610      	mov	r0, r2
 8005c8e:	f7fe fbf0 	bl	8004472 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005c92:	68bb      	ldr	r3, [r7, #8]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	4b1b      	ldr	r3, [pc, #108]	@ (8005d04 <xTaskIncrementTick+0x168>)
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9c:	429a      	cmp	r2, r3
 8005c9e:	d3b8      	bcc.n	8005c12 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8005ca4:	e7b5      	b.n	8005c12 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8005ca6:	4b17      	ldr	r3, [pc, #92]	@ (8005d04 <xTaskIncrementTick+0x168>)
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005cac:	4914      	ldr	r1, [pc, #80]	@ (8005d00 <xTaskIncrementTick+0x164>)
 8005cae:	4613      	mov	r3, r2
 8005cb0:	009b      	lsls	r3, r3, #2
 8005cb2:	4413      	add	r3, r2
 8005cb4:	009b      	lsls	r3, r3, #2
 8005cb6:	440b      	add	r3, r1
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	2b01      	cmp	r3, #1
 8005cbc:	d901      	bls.n	8005cc2 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8005cc2:	4b11      	ldr	r3, [pc, #68]	@ (8005d08 <xTaskIncrementTick+0x16c>)
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d007      	beq.n	8005cda <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8005cca:	2301      	movs	r3, #1
 8005ccc:	617b      	str	r3, [r7, #20]
 8005cce:	e004      	b.n	8005cda <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	@ (8005d0c <xTaskIncrementTick+0x170>)
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	3301      	adds	r3, #1
 8005cd6:	4a0d      	ldr	r2, [pc, #52]	@ (8005d0c <xTaskIncrementTick+0x170>)
 8005cd8:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8005cda:	697b      	ldr	r3, [r7, #20]
}
 8005cdc:	4618      	mov	r0, r3
 8005cde:	3718      	adds	r7, #24
 8005ce0:	46bd      	mov	sp, r7
 8005ce2:	bd80      	pop	{r7, pc}
 8005ce4:	20000e58 	.word	0x20000e58
 8005ce8:	20000e34 	.word	0x20000e34
 8005cec:	20000de8 	.word	0x20000de8
 8005cf0:	20000dec 	.word	0x20000dec
 8005cf4:	20000e48 	.word	0x20000e48
 8005cf8:	20000e50 	.word	0x20000e50
 8005cfc:	20000e38 	.word	0x20000e38
 8005d00:	20000960 	.word	0x20000960
 8005d04:	2000095c 	.word	0x2000095c
 8005d08:	20000e44 	.word	0x20000e44
 8005d0c:	20000e40 	.word	0x20000e40

08005d10 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8005d10:	b480      	push	{r7}
 8005d12:	b085      	sub	sp, #20
 8005d14:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8005d16:	4b28      	ldr	r3, [pc, #160]	@ (8005db8 <vTaskSwitchContext+0xa8>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d003      	beq.n	8005d26 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8005d1e:	4b27      	ldr	r3, [pc, #156]	@ (8005dbc <vTaskSwitchContext+0xac>)
 8005d20:	2201      	movs	r2, #1
 8005d22:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8005d24:	e042      	b.n	8005dac <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 8005d26:	4b25      	ldr	r3, [pc, #148]	@ (8005dbc <vTaskSwitchContext+0xac>)
 8005d28:	2200      	movs	r2, #0
 8005d2a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005d2c:	4b24      	ldr	r3, [pc, #144]	@ (8005dc0 <vTaskSwitchContext+0xb0>)
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	60fb      	str	r3, [r7, #12]
 8005d32:	e011      	b.n	8005d58 <vTaskSwitchContext+0x48>
 8005d34:	68fb      	ldr	r3, [r7, #12]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d10b      	bne.n	8005d52 <vTaskSwitchContext+0x42>
	__asm volatile
 8005d3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d3e:	f383 8811 	msr	BASEPRI, r3
 8005d42:	f3bf 8f6f 	isb	sy
 8005d46:	f3bf 8f4f 	dsb	sy
 8005d4a:	607b      	str	r3, [r7, #4]
}
 8005d4c:	bf00      	nop
 8005d4e:	bf00      	nop
 8005d50:	e7fd      	b.n	8005d4e <vTaskSwitchContext+0x3e>
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	3b01      	subs	r3, #1
 8005d56:	60fb      	str	r3, [r7, #12]
 8005d58:	491a      	ldr	r1, [pc, #104]	@ (8005dc4 <vTaskSwitchContext+0xb4>)
 8005d5a:	68fa      	ldr	r2, [r7, #12]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	009b      	lsls	r3, r3, #2
 8005d60:	4413      	add	r3, r2
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	440b      	add	r3, r1
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d0e3      	beq.n	8005d34 <vTaskSwitchContext+0x24>
 8005d6c:	68fa      	ldr	r2, [r7, #12]
 8005d6e:	4613      	mov	r3, r2
 8005d70:	009b      	lsls	r3, r3, #2
 8005d72:	4413      	add	r3, r2
 8005d74:	009b      	lsls	r3, r3, #2
 8005d76:	4a13      	ldr	r2, [pc, #76]	@ (8005dc4 <vTaskSwitchContext+0xb4>)
 8005d78:	4413      	add	r3, r2
 8005d7a:	60bb      	str	r3, [r7, #8]
 8005d7c:	68bb      	ldr	r3, [r7, #8]
 8005d7e:	685b      	ldr	r3, [r3, #4]
 8005d80:	685a      	ldr	r2, [r3, #4]
 8005d82:	68bb      	ldr	r3, [r7, #8]
 8005d84:	605a      	str	r2, [r3, #4]
 8005d86:	68bb      	ldr	r3, [r7, #8]
 8005d88:	685a      	ldr	r2, [r3, #4]
 8005d8a:	68bb      	ldr	r3, [r7, #8]
 8005d8c:	3308      	adds	r3, #8
 8005d8e:	429a      	cmp	r2, r3
 8005d90:	d104      	bne.n	8005d9c <vTaskSwitchContext+0x8c>
 8005d92:	68bb      	ldr	r3, [r7, #8]
 8005d94:	685b      	ldr	r3, [r3, #4]
 8005d96:	685a      	ldr	r2, [r3, #4]
 8005d98:	68bb      	ldr	r3, [r7, #8]
 8005d9a:	605a      	str	r2, [r3, #4]
 8005d9c:	68bb      	ldr	r3, [r7, #8]
 8005d9e:	685b      	ldr	r3, [r3, #4]
 8005da0:	68db      	ldr	r3, [r3, #12]
 8005da2:	4a09      	ldr	r2, [pc, #36]	@ (8005dc8 <vTaskSwitchContext+0xb8>)
 8005da4:	6013      	str	r3, [r2, #0]
 8005da6:	4a06      	ldr	r2, [pc, #24]	@ (8005dc0 <vTaskSwitchContext+0xb0>)
 8005da8:	68fb      	ldr	r3, [r7, #12]
 8005daa:	6013      	str	r3, [r2, #0]
}
 8005dac:	bf00      	nop
 8005dae:	3714      	adds	r7, #20
 8005db0:	46bd      	mov	sp, r7
 8005db2:	bc80      	pop	{r7}
 8005db4:	4770      	bx	lr
 8005db6:	bf00      	nop
 8005db8:	20000e58 	.word	0x20000e58
 8005dbc:	20000e44 	.word	0x20000e44
 8005dc0:	20000e38 	.word	0x20000e38
 8005dc4:	20000960 	.word	0x20000960
 8005dc8:	2000095c 	.word	0x2000095c

08005dcc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b084      	sub	sp, #16
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
 8005dd4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d10b      	bne.n	8005df4 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8005ddc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de0:	f383 8811 	msr	BASEPRI, r3
 8005de4:	f3bf 8f6f 	isb	sy
 8005de8:	f3bf 8f4f 	dsb	sy
 8005dec:	60fb      	str	r3, [r7, #12]
}
 8005dee:	bf00      	nop
 8005df0:	bf00      	nop
 8005df2:	e7fd      	b.n	8005df0 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005df4:	4b07      	ldr	r3, [pc, #28]	@ (8005e14 <vTaskPlaceOnEventList+0x48>)
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	3318      	adds	r3, #24
 8005dfa:	4619      	mov	r1, r3
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f7fe fb5b 	bl	80044b8 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8005e02:	2101      	movs	r1, #1
 8005e04:	6838      	ldr	r0, [r7, #0]
 8005e06:	f000 fca9 	bl	800675c <prvAddCurrentTaskToDelayedList>
}
 8005e0a:	bf00      	nop
 8005e0c:	3710      	adds	r7, #16
 8005e0e:	46bd      	mov	sp, r7
 8005e10:	bd80      	pop	{r7, pc}
 8005e12:	bf00      	nop
 8005e14:	2000095c 	.word	0x2000095c

08005e18 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b086      	sub	sp, #24
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8005e24:	68fb      	ldr	r3, [r7, #12]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d10b      	bne.n	8005e42 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8005e2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e2e:	f383 8811 	msr	BASEPRI, r3
 8005e32:	f3bf 8f6f 	isb	sy
 8005e36:	f3bf 8f4f 	dsb	sy
 8005e3a:	617b      	str	r3, [r7, #20]
}
 8005e3c:	bf00      	nop
 8005e3e:	bf00      	nop
 8005e40:	e7fd      	b.n	8005e3e <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8005e42:	4b0a      	ldr	r3, [pc, #40]	@ (8005e6c <vTaskPlaceOnEventListRestricted+0x54>)
 8005e44:	681b      	ldr	r3, [r3, #0]
 8005e46:	3318      	adds	r3, #24
 8005e48:	4619      	mov	r1, r3
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	f7fe fb11 	bl	8004472 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d002      	beq.n	8005e5c <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8005e56:	f04f 33ff 	mov.w	r3, #4294967295
 8005e5a:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8005e5c:	6879      	ldr	r1, [r7, #4]
 8005e5e:	68b8      	ldr	r0, [r7, #8]
 8005e60:	f000 fc7c 	bl	800675c <prvAddCurrentTaskToDelayedList>
	}
 8005e64:	bf00      	nop
 8005e66:	3718      	adds	r7, #24
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}
 8005e6c:	2000095c 	.word	0x2000095c

08005e70 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b086      	sub	sp, #24
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	68db      	ldr	r3, [r3, #12]
 8005e7c:	68db      	ldr	r3, [r3, #12]
 8005e7e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	60fb      	str	r3, [r7, #12]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8005e9e:	693b      	ldr	r3, [r7, #16]
 8005ea0:	3318      	adds	r3, #24
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	f7fe fb40 	bl	8004528 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005ea8:	4b1d      	ldr	r3, [pc, #116]	@ (8005f20 <xTaskRemoveFromEventList+0xb0>)
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d11d      	bne.n	8005eec <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8005eb0:	693b      	ldr	r3, [r7, #16]
 8005eb2:	3304      	adds	r3, #4
 8005eb4:	4618      	mov	r0, r3
 8005eb6:	f7fe fb37 	bl	8004528 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8005eba:	693b      	ldr	r3, [r7, #16]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4b19      	ldr	r3, [pc, #100]	@ (8005f24 <xTaskRemoveFromEventList+0xb4>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	429a      	cmp	r2, r3
 8005ec4:	d903      	bls.n	8005ece <xTaskRemoveFromEventList+0x5e>
 8005ec6:	693b      	ldr	r3, [r7, #16]
 8005ec8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eca:	4a16      	ldr	r2, [pc, #88]	@ (8005f24 <xTaskRemoveFromEventList+0xb4>)
 8005ecc:	6013      	str	r3, [r2, #0]
 8005ece:	693b      	ldr	r3, [r7, #16]
 8005ed0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ed2:	4613      	mov	r3, r2
 8005ed4:	009b      	lsls	r3, r3, #2
 8005ed6:	4413      	add	r3, r2
 8005ed8:	009b      	lsls	r3, r3, #2
 8005eda:	4a13      	ldr	r2, [pc, #76]	@ (8005f28 <xTaskRemoveFromEventList+0xb8>)
 8005edc:	441a      	add	r2, r3
 8005ede:	693b      	ldr	r3, [r7, #16]
 8005ee0:	3304      	adds	r3, #4
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f7fe fac4 	bl	8004472 <vListInsertEnd>
 8005eea:	e005      	b.n	8005ef8 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8005eec:	693b      	ldr	r3, [r7, #16]
 8005eee:	3318      	adds	r3, #24
 8005ef0:	4619      	mov	r1, r3
 8005ef2:	480e      	ldr	r0, [pc, #56]	@ (8005f2c <xTaskRemoveFromEventList+0xbc>)
 8005ef4:	f7fe fabd 	bl	8004472 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8005ef8:	693b      	ldr	r3, [r7, #16]
 8005efa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005efc:	4b0c      	ldr	r3, [pc, #48]	@ (8005f30 <xTaskRemoveFromEventList+0xc0>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f02:	429a      	cmp	r2, r3
 8005f04:	d905      	bls.n	8005f12 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8005f06:	2301      	movs	r3, #1
 8005f08:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8005f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8005f34 <xTaskRemoveFromEventList+0xc4>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	601a      	str	r2, [r3, #0]
 8005f10:	e001      	b.n	8005f16 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8005f12:	2300      	movs	r3, #0
 8005f14:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8005f16:	697b      	ldr	r3, [r7, #20]
}
 8005f18:	4618      	mov	r0, r3
 8005f1a:	3718      	adds	r7, #24
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	bd80      	pop	{r7, pc}
 8005f20:	20000e58 	.word	0x20000e58
 8005f24:	20000e38 	.word	0x20000e38
 8005f28:	20000960 	.word	0x20000960
 8005f2c:	20000df0 	.word	0x20000df0
 8005f30:	2000095c 	.word	0x2000095c
 8005f34:	20000e44 	.word	0x20000e44

08005f38 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8005f38:	b480      	push	{r7}
 8005f3a:	b083      	sub	sp, #12
 8005f3c:	af00      	add	r7, sp, #0
 8005f3e:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8005f40:	4b06      	ldr	r3, [pc, #24]	@ (8005f5c <vTaskInternalSetTimeOutState+0x24>)
 8005f42:	681a      	ldr	r2, [r3, #0]
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8005f48:	4b05      	ldr	r3, [pc, #20]	@ (8005f60 <vTaskInternalSetTimeOutState+0x28>)
 8005f4a:	681a      	ldr	r2, [r3, #0]
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	605a      	str	r2, [r3, #4]
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	bc80      	pop	{r7}
 8005f58:	4770      	bx	lr
 8005f5a:	bf00      	nop
 8005f5c:	20000e48 	.word	0x20000e48
 8005f60:	20000e34 	.word	0x20000e34

08005f64 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8005f64:	b580      	push	{r7, lr}
 8005f66:	b088      	sub	sp, #32
 8005f68:	af00      	add	r7, sp, #0
 8005f6a:	6078      	str	r0, [r7, #4]
 8005f6c:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	2b00      	cmp	r3, #0
 8005f72:	d10b      	bne.n	8005f8c <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8005f74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f78:	f383 8811 	msr	BASEPRI, r3
 8005f7c:	f3bf 8f6f 	isb	sy
 8005f80:	f3bf 8f4f 	dsb	sy
 8005f84:	613b      	str	r3, [r7, #16]
}
 8005f86:	bf00      	nop
 8005f88:	bf00      	nop
 8005f8a:	e7fd      	b.n	8005f88 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8005f8c:	683b      	ldr	r3, [r7, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d10b      	bne.n	8005faa <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60fb      	str	r3, [r7, #12]
}
 8005fa4:	bf00      	nop
 8005fa6:	bf00      	nop
 8005fa8:	e7fd      	b.n	8005fa6 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8005faa:	f001 f877 	bl	800709c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8005fae:	4b1d      	ldr	r3, [pc, #116]	@ (8006024 <xTaskCheckForTimeOut+0xc0>)
 8005fb0:	681b      	ldr	r3, [r3, #0]
 8005fb2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	685b      	ldr	r3, [r3, #4]
 8005fb8:	69ba      	ldr	r2, [r7, #24]
 8005fba:	1ad3      	subs	r3, r2, r3
 8005fbc:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fc6:	d102      	bne.n	8005fce <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8005fc8:	2300      	movs	r3, #0
 8005fca:	61fb      	str	r3, [r7, #28]
 8005fcc:	e023      	b.n	8006016 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	681a      	ldr	r2, [r3, #0]
 8005fd2:	4b15      	ldr	r3, [pc, #84]	@ (8006028 <xTaskCheckForTimeOut+0xc4>)
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d007      	beq.n	8005fea <xTaskCheckForTimeOut+0x86>
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	685b      	ldr	r3, [r3, #4]
 8005fde:	69ba      	ldr	r2, [r7, #24]
 8005fe0:	429a      	cmp	r2, r3
 8005fe2:	d302      	bcc.n	8005fea <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8005fe4:	2301      	movs	r3, #1
 8005fe6:	61fb      	str	r3, [r7, #28]
 8005fe8:	e015      	b.n	8006016 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8005fea:	683b      	ldr	r3, [r7, #0]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	697a      	ldr	r2, [r7, #20]
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d20b      	bcs.n	800600c <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8005ff4:	683b      	ldr	r3, [r7, #0]
 8005ff6:	681a      	ldr	r2, [r3, #0]
 8005ff8:	697b      	ldr	r3, [r7, #20]
 8005ffa:	1ad2      	subs	r2, r2, r3
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f7ff ff99 	bl	8005f38 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006006:	2300      	movs	r3, #0
 8006008:	61fb      	str	r3, [r7, #28]
 800600a:	e004      	b.n	8006016 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	2200      	movs	r2, #0
 8006010:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006012:	2301      	movs	r3, #1
 8006014:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006016:	f001 f871 	bl	80070fc <vPortExitCritical>

	return xReturn;
 800601a:	69fb      	ldr	r3, [r7, #28]
}
 800601c:	4618      	mov	r0, r3
 800601e:	3720      	adds	r7, #32
 8006020:	46bd      	mov	sp, r7
 8006022:	bd80      	pop	{r7, pc}
 8006024:	20000e34 	.word	0x20000e34
 8006028:	20000e48 	.word	0x20000e48

0800602c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800602c:	b480      	push	{r7}
 800602e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006030:	4b03      	ldr	r3, [pc, #12]	@ (8006040 <vTaskMissedYield+0x14>)
 8006032:	2201      	movs	r2, #1
 8006034:	601a      	str	r2, [r3, #0]
}
 8006036:	bf00      	nop
 8006038:	46bd      	mov	sp, r7
 800603a:	bc80      	pop	{r7}
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	20000e44 	.word	0x20000e44

08006044 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006044:	b580      	push	{r7, lr}
 8006046:	b082      	sub	sp, #8
 8006048:	af00      	add	r7, sp, #0
 800604a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800604c:	f000 f852 	bl	80060f4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006050:	4b06      	ldr	r3, [pc, #24]	@ (800606c <prvIdleTask+0x28>)
 8006052:	681b      	ldr	r3, [r3, #0]
 8006054:	2b01      	cmp	r3, #1
 8006056:	d9f9      	bls.n	800604c <prvIdleTask+0x8>
			{
				taskYIELD();
 8006058:	4b05      	ldr	r3, [pc, #20]	@ (8006070 <prvIdleTask+0x2c>)
 800605a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605e:	601a      	str	r2, [r3, #0]
 8006060:	f3bf 8f4f 	dsb	sy
 8006064:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006068:	e7f0      	b.n	800604c <prvIdleTask+0x8>
 800606a:	bf00      	nop
 800606c:	20000960 	.word	0x20000960
 8006070:	e000ed04 	.word	0xe000ed04

08006074 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800607a:	2300      	movs	r3, #0
 800607c:	607b      	str	r3, [r7, #4]
 800607e:	e00c      	b.n	800609a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006080:	687a      	ldr	r2, [r7, #4]
 8006082:	4613      	mov	r3, r2
 8006084:	009b      	lsls	r3, r3, #2
 8006086:	4413      	add	r3, r2
 8006088:	009b      	lsls	r3, r3, #2
 800608a:	4a12      	ldr	r2, [pc, #72]	@ (80060d4 <prvInitialiseTaskLists+0x60>)
 800608c:	4413      	add	r3, r2
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe f9c4 	bl	800441c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	3301      	adds	r3, #1
 8006098:	607b      	str	r3, [r7, #4]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	2b37      	cmp	r3, #55	@ 0x37
 800609e:	d9ef      	bls.n	8006080 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80060a0:	480d      	ldr	r0, [pc, #52]	@ (80060d8 <prvInitialiseTaskLists+0x64>)
 80060a2:	f7fe f9bb 	bl	800441c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80060a6:	480d      	ldr	r0, [pc, #52]	@ (80060dc <prvInitialiseTaskLists+0x68>)
 80060a8:	f7fe f9b8 	bl	800441c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80060ac:	480c      	ldr	r0, [pc, #48]	@ (80060e0 <prvInitialiseTaskLists+0x6c>)
 80060ae:	f7fe f9b5 	bl	800441c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80060b2:	480c      	ldr	r0, [pc, #48]	@ (80060e4 <prvInitialiseTaskLists+0x70>)
 80060b4:	f7fe f9b2 	bl	800441c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80060b8:	480b      	ldr	r0, [pc, #44]	@ (80060e8 <prvInitialiseTaskLists+0x74>)
 80060ba:	f7fe f9af 	bl	800441c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80060be:	4b0b      	ldr	r3, [pc, #44]	@ (80060ec <prvInitialiseTaskLists+0x78>)
 80060c0:	4a05      	ldr	r2, [pc, #20]	@ (80060d8 <prvInitialiseTaskLists+0x64>)
 80060c2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80060c4:	4b0a      	ldr	r3, [pc, #40]	@ (80060f0 <prvInitialiseTaskLists+0x7c>)
 80060c6:	4a05      	ldr	r2, [pc, #20]	@ (80060dc <prvInitialiseTaskLists+0x68>)
 80060c8:	601a      	str	r2, [r3, #0]
}
 80060ca:	bf00      	nop
 80060cc:	3708      	adds	r7, #8
 80060ce:	46bd      	mov	sp, r7
 80060d0:	bd80      	pop	{r7, pc}
 80060d2:	bf00      	nop
 80060d4:	20000960 	.word	0x20000960
 80060d8:	20000dc0 	.word	0x20000dc0
 80060dc:	20000dd4 	.word	0x20000dd4
 80060e0:	20000df0 	.word	0x20000df0
 80060e4:	20000e04 	.word	0x20000e04
 80060e8:	20000e1c 	.word	0x20000e1c
 80060ec:	20000de8 	.word	0x20000de8
 80060f0:	20000dec 	.word	0x20000dec

080060f4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	b082      	sub	sp, #8
 80060f8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80060fa:	e019      	b.n	8006130 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80060fc:	f000 ffce 	bl	800709c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006100:	4b10      	ldr	r3, [pc, #64]	@ (8006144 <prvCheckTasksWaitingTermination+0x50>)
 8006102:	68db      	ldr	r3, [r3, #12]
 8006104:	68db      	ldr	r3, [r3, #12]
 8006106:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	3304      	adds	r3, #4
 800610c:	4618      	mov	r0, r3
 800610e:	f7fe fa0b 	bl	8004528 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006112:	4b0d      	ldr	r3, [pc, #52]	@ (8006148 <prvCheckTasksWaitingTermination+0x54>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	3b01      	subs	r3, #1
 8006118:	4a0b      	ldr	r2, [pc, #44]	@ (8006148 <prvCheckTasksWaitingTermination+0x54>)
 800611a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800611c:	4b0b      	ldr	r3, [pc, #44]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	3b01      	subs	r3, #1
 8006122:	4a0a      	ldr	r2, [pc, #40]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006124:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006126:	f000 ffe9 	bl	80070fc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f000 f810 	bl	8006150 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006130:	4b06      	ldr	r3, [pc, #24]	@ (800614c <prvCheckTasksWaitingTermination+0x58>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	d1e1      	bne.n	80060fc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006138:	bf00      	nop
 800613a:	bf00      	nop
 800613c:	3708      	adds	r7, #8
 800613e:	46bd      	mov	sp, r7
 8006140:	bd80      	pop	{r7, pc}
 8006142:	bf00      	nop
 8006144:	20000e04 	.word	0x20000e04
 8006148:	20000e30 	.word	0x20000e30
 800614c:	20000e18 	.word	0x20000e18

08006150 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006150:	b580      	push	{r7, lr}
 8006152:	b084      	sub	sp, #16
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800615e:	2b00      	cmp	r3, #0
 8006160:	d108      	bne.n	8006174 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006166:	4618      	mov	r0, r3
 8006168:	f001 f968 	bl	800743c <vPortFree>
				vPortFree( pxTCB );
 800616c:	6878      	ldr	r0, [r7, #4]
 800616e:	f001 f965 	bl	800743c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006172:	e019      	b.n	80061a8 <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800617a:	2b01      	cmp	r3, #1
 800617c:	d103      	bne.n	8006186 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800617e:	6878      	ldr	r0, [r7, #4]
 8006180:	f001 f95c 	bl	800743c <vPortFree>
	}
 8006184:	e010      	b.n	80061a8 <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 800618c:	2b02      	cmp	r3, #2
 800618e:	d00b      	beq.n	80061a8 <prvDeleteTCB+0x58>
	__asm volatile
 8006190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006194:	f383 8811 	msr	BASEPRI, r3
 8006198:	f3bf 8f6f 	isb	sy
 800619c:	f3bf 8f4f 	dsb	sy
 80061a0:	60fb      	str	r3, [r7, #12]
}
 80061a2:	bf00      	nop
 80061a4:	bf00      	nop
 80061a6:	e7fd      	b.n	80061a4 <prvDeleteTCB+0x54>
	}
 80061a8:	bf00      	nop
 80061aa:	3710      	adds	r7, #16
 80061ac:	46bd      	mov	sp, r7
 80061ae:	bd80      	pop	{r7, pc}

080061b0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80061b0:	b480      	push	{r7}
 80061b2:	b083      	sub	sp, #12
 80061b4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80061b6:	4b0c      	ldr	r3, [pc, #48]	@ (80061e8 <prvResetNextTaskUnblockTime+0x38>)
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d104      	bne.n	80061ca <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80061c0:	4b0a      	ldr	r3, [pc, #40]	@ (80061ec <prvResetNextTaskUnblockTime+0x3c>)
 80061c2:	f04f 32ff 	mov.w	r2, #4294967295
 80061c6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80061c8:	e008      	b.n	80061dc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061ca:	4b07      	ldr	r3, [pc, #28]	@ (80061e8 <prvResetNextTaskUnblockTime+0x38>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	68db      	ldr	r3, [r3, #12]
 80061d0:	68db      	ldr	r3, [r3, #12]
 80061d2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	685b      	ldr	r3, [r3, #4]
 80061d8:	4a04      	ldr	r2, [pc, #16]	@ (80061ec <prvResetNextTaskUnblockTime+0x3c>)
 80061da:	6013      	str	r3, [r2, #0]
}
 80061dc:	bf00      	nop
 80061de:	370c      	adds	r7, #12
 80061e0:	46bd      	mov	sp, r7
 80061e2:	bc80      	pop	{r7}
 80061e4:	4770      	bx	lr
 80061e6:	bf00      	nop
 80061e8:	20000de8 	.word	0x20000de8
 80061ec:	20000e50 	.word	0x20000e50

080061f0 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 80061f0:	b480      	push	{r7}
 80061f2:	b083      	sub	sp, #12
 80061f4:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 80061f6:	4b04      	ldr	r3, [pc, #16]	@ (8006208 <xTaskGetCurrentTaskHandle+0x18>)
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	607b      	str	r3, [r7, #4]

		return xReturn;
 80061fc:	687b      	ldr	r3, [r7, #4]
	}
 80061fe:	4618      	mov	r0, r3
 8006200:	370c      	adds	r7, #12
 8006202:	46bd      	mov	sp, r7
 8006204:	bc80      	pop	{r7}
 8006206:	4770      	bx	lr
 8006208:	2000095c 	.word	0x2000095c

0800620c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800620c:	b480      	push	{r7}
 800620e:	b083      	sub	sp, #12
 8006210:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006212:	4b0b      	ldr	r3, [pc, #44]	@ (8006240 <xTaskGetSchedulerState+0x34>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	2b00      	cmp	r3, #0
 8006218:	d102      	bne.n	8006220 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800621a:	2301      	movs	r3, #1
 800621c:	607b      	str	r3, [r7, #4]
 800621e:	e008      	b.n	8006232 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006220:	4b08      	ldr	r3, [pc, #32]	@ (8006244 <xTaskGetSchedulerState+0x38>)
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d102      	bne.n	800622e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006228:	2302      	movs	r3, #2
 800622a:	607b      	str	r3, [r7, #4]
 800622c:	e001      	b.n	8006232 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800622e:	2300      	movs	r3, #0
 8006230:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006232:	687b      	ldr	r3, [r7, #4]
	}
 8006234:	4618      	mov	r0, r3
 8006236:	370c      	adds	r7, #12
 8006238:	46bd      	mov	sp, r7
 800623a:	bc80      	pop	{r7}
 800623c:	4770      	bx	lr
 800623e:	bf00      	nop
 8006240:	20000e3c 	.word	0x20000e3c
 8006244:	20000e58 	.word	0x20000e58

08006248 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006248:	b580      	push	{r7, lr}
 800624a:	b086      	sub	sp, #24
 800624c:	af00      	add	r7, sp, #0
 800624e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006254:	2300      	movs	r3, #0
 8006256:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d058      	beq.n	8006310 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800625e:	4b2f      	ldr	r3, [pc, #188]	@ (800631c <xTaskPriorityDisinherit+0xd4>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	693a      	ldr	r2, [r7, #16]
 8006264:	429a      	cmp	r2, r3
 8006266:	d00b      	beq.n	8006280 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006268:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800626c:	f383 8811 	msr	BASEPRI, r3
 8006270:	f3bf 8f6f 	isb	sy
 8006274:	f3bf 8f4f 	dsb	sy
 8006278:	60fb      	str	r3, [r7, #12]
}
 800627a:	bf00      	nop
 800627c:	bf00      	nop
 800627e:	e7fd      	b.n	800627c <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006280:	693b      	ldr	r3, [r7, #16]
 8006282:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006284:	2b00      	cmp	r3, #0
 8006286:	d10b      	bne.n	80062a0 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006288:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800628c:	f383 8811 	msr	BASEPRI, r3
 8006290:	f3bf 8f6f 	isb	sy
 8006294:	f3bf 8f4f 	dsb	sy
 8006298:	60bb      	str	r3, [r7, #8]
}
 800629a:	bf00      	nop
 800629c:	bf00      	nop
 800629e:	e7fd      	b.n	800629c <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062a4:	1e5a      	subs	r2, r3, #1
 80062a6:	693b      	ldr	r3, [r7, #16]
 80062a8:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ae:	693b      	ldr	r3, [r7, #16]
 80062b0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80062b2:	429a      	cmp	r2, r3
 80062b4:	d02c      	beq.n	8006310 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80062b6:	693b      	ldr	r3, [r7, #16]
 80062b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d128      	bne.n	8006310 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	3304      	adds	r3, #4
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fe f930 	bl	8004528 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80062c8:	693b      	ldr	r3, [r7, #16]
 80062ca:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80062cc:	693b      	ldr	r3, [r7, #16]
 80062ce:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062d0:	693b      	ldr	r3, [r7, #16]
 80062d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d4:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80062dc:	693b      	ldr	r3, [r7, #16]
 80062de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062e0:	4b0f      	ldr	r3, [pc, #60]	@ (8006320 <xTaskPriorityDisinherit+0xd8>)
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	429a      	cmp	r2, r3
 80062e6:	d903      	bls.n	80062f0 <xTaskPriorityDisinherit+0xa8>
 80062e8:	693b      	ldr	r3, [r7, #16]
 80062ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062ec:	4a0c      	ldr	r2, [pc, #48]	@ (8006320 <xTaskPriorityDisinherit+0xd8>)
 80062ee:	6013      	str	r3, [r2, #0]
 80062f0:	693b      	ldr	r3, [r7, #16]
 80062f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062f4:	4613      	mov	r3, r2
 80062f6:	009b      	lsls	r3, r3, #2
 80062f8:	4413      	add	r3, r2
 80062fa:	009b      	lsls	r3, r3, #2
 80062fc:	4a09      	ldr	r2, [pc, #36]	@ (8006324 <xTaskPriorityDisinherit+0xdc>)
 80062fe:	441a      	add	r2, r3
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	3304      	adds	r3, #4
 8006304:	4619      	mov	r1, r3
 8006306:	4610      	mov	r0, r2
 8006308:	f7fe f8b3 	bl	8004472 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006310:	697b      	ldr	r3, [r7, #20]
	}
 8006312:	4618      	mov	r0, r3
 8006314:	3718      	adds	r7, #24
 8006316:	46bd      	mov	sp, r7
 8006318:	bd80      	pop	{r7, pc}
 800631a:	bf00      	nop
 800631c:	2000095c 	.word	0x2000095c
 8006320:	20000e38 	.word	0x20000e38
 8006324:	20000960 	.word	0x20000960

08006328 <xTaskNotifyWait>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyWait( uint32_t ulBitsToClearOnEntry, uint32_t ulBitsToClearOnExit, uint32_t *pulNotificationValue, TickType_t xTicksToWait )
	{
 8006328:	b580      	push	{r7, lr}
 800632a:	b086      	sub	sp, #24
 800632c:	af00      	add	r7, sp, #0
 800632e:	60f8      	str	r0, [r7, #12]
 8006330:	60b9      	str	r1, [r7, #8]
 8006332:	607a      	str	r2, [r7, #4]
 8006334:	603b      	str	r3, [r7, #0]
	BaseType_t xReturn;

		taskENTER_CRITICAL();
 8006336:	f000 feb1 	bl	800709c <vPortEnterCritical>
		{
			/* Only block if a notification is not already pending. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 800633a:	4b26      	ldr	r3, [pc, #152]	@ (80063d4 <xTaskNotifyWait+0xac>)
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006342:	b2db      	uxtb	r3, r3
 8006344:	2b02      	cmp	r3, #2
 8006346:	d01a      	beq.n	800637e <xTaskNotifyWait+0x56>
			{
				/* Clear bits in the task's notification value as bits may get
				set	by the notifying task or interrupt.  This can be used to
				clear the value to zero. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnEntry;
 8006348:	4b22      	ldr	r3, [pc, #136]	@ (80063d4 <xTaskNotifyWait+0xac>)
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800634e:	68fa      	ldr	r2, [r7, #12]
 8006350:	43d2      	mvns	r2, r2
 8006352:	400a      	ands	r2, r1
 8006354:	655a      	str	r2, [r3, #84]	@ 0x54

				/* Mark this task as waiting for a notification. */
				pxCurrentTCB->ucNotifyState = taskWAITING_NOTIFICATION;
 8006356:	4b1f      	ldr	r3, [pc, #124]	@ (80063d4 <xTaskNotifyWait+0xac>)
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2201      	movs	r2, #1
 800635c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

				if( xTicksToWait > ( TickType_t ) 0 )
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	2b00      	cmp	r3, #0
 8006364:	d00b      	beq.n	800637e <xTaskNotifyWait+0x56>
				{
					prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006366:	2101      	movs	r1, #1
 8006368:	6838      	ldr	r0, [r7, #0]
 800636a:	f000 f9f7 	bl	800675c <prvAddCurrentTaskToDelayedList>

					/* All ports are written to allow a yield in a critical
					section (some will yield immediately, others wait until the
					critical section exits) - but it is not something that
					application code should ever do. */
					portYIELD_WITHIN_API();
 800636e:	4b1a      	ldr	r3, [pc, #104]	@ (80063d8 <xTaskNotifyWait+0xb0>)
 8006370:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006374:	601a      	str	r2, [r3, #0]
 8006376:	f3bf 8f4f 	dsb	sy
 800637a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 800637e:	f000 febd 	bl	80070fc <vPortExitCritical>

		taskENTER_CRITICAL();
 8006382:	f000 fe8b 	bl	800709c <vPortEnterCritical>
		{
			traceTASK_NOTIFY_WAIT();

			if( pulNotificationValue != NULL )
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <xTaskNotifyWait+0x6e>
			{
				/* Output the current notification value, which may or may not
				have changed. */
				*pulNotificationValue = pxCurrentTCB->ulNotifiedValue;
 800638c:	4b11      	ldr	r3, [pc, #68]	@ (80063d4 <xTaskNotifyWait+0xac>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	601a      	str	r2, [r3, #0]

			/* If ucNotifyValue is set then either the task never entered the
			blocked state (because a notification was already pending) or the
			task unblocked because of a notification.  Otherwise the task
			unblocked because of a timeout. */
			if( pxCurrentTCB->ucNotifyState != taskNOTIFICATION_RECEIVED )
 8006396:	4b0f      	ldr	r3, [pc, #60]	@ (80063d4 <xTaskNotifyWait+0xac>)
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800639e:	b2db      	uxtb	r3, r3
 80063a0:	2b02      	cmp	r3, #2
 80063a2:	d002      	beq.n	80063aa <xTaskNotifyWait+0x82>
			{
				/* A notification was not received. */
				xReturn = pdFALSE;
 80063a4:	2300      	movs	r3, #0
 80063a6:	617b      	str	r3, [r7, #20]
 80063a8:	e008      	b.n	80063bc <xTaskNotifyWait+0x94>
			}
			else
			{
				/* A notification was already pending or a notification was
				received while the task was waiting. */
				pxCurrentTCB->ulNotifiedValue &= ~ulBitsToClearOnExit;
 80063aa:	4b0a      	ldr	r3, [pc, #40]	@ (80063d4 <xTaskNotifyWait+0xac>)
 80063ac:	681b      	ldr	r3, [r3, #0]
 80063ae:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 80063b0:	68ba      	ldr	r2, [r7, #8]
 80063b2:	43d2      	mvns	r2, r2
 80063b4:	400a      	ands	r2, r1
 80063b6:	655a      	str	r2, [r3, #84]	@ 0x54
				xReturn = pdTRUE;
 80063b8:	2301      	movs	r3, #1
 80063ba:	617b      	str	r3, [r7, #20]
			}

			pxCurrentTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063bc:	4b05      	ldr	r3, [pc, #20]	@ (80063d4 <xTaskNotifyWait+0xac>)
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	2200      	movs	r2, #0
 80063c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
		}
		taskEXIT_CRITICAL();
 80063c6:	f000 fe99 	bl	80070fc <vPortExitCritical>

		return xReturn;
 80063ca:	697b      	ldr	r3, [r7, #20]
	}
 80063cc:	4618      	mov	r0, r3
 80063ce:	3718      	adds	r7, #24
 80063d0:	46bd      	mov	sp, r7
 80063d2:	bd80      	pop	{r7, pc}
 80063d4:	2000095c 	.word	0x2000095c
 80063d8:	e000ed04 	.word	0xe000ed04

080063dc <xTaskGenericNotify>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotify( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue )
	{
 80063dc:	b580      	push	{r7, lr}
 80063de:	b08a      	sub	sp, #40	@ 0x28
 80063e0:	af00      	add	r7, sp, #0
 80063e2:	60f8      	str	r0, [r7, #12]
 80063e4:	60b9      	str	r1, [r7, #8]
 80063e6:	603b      	str	r3, [r7, #0]
 80063e8:	4613      	mov	r3, r2
 80063ea:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	BaseType_t xReturn = pdPASS;
 80063ec:	2301      	movs	r3, #1
 80063ee:	627b      	str	r3, [r7, #36]	@ 0x24
	uint8_t ucOriginalNotifyState;

		configASSERT( xTaskToNotify );
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	d10b      	bne.n	800640e <xTaskGenericNotify+0x32>
	__asm volatile
 80063f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063fa:	f383 8811 	msr	BASEPRI, r3
 80063fe:	f3bf 8f6f 	isb	sy
 8006402:	f3bf 8f4f 	dsb	sy
 8006406:	61bb      	str	r3, [r7, #24]
}
 8006408:	bf00      	nop
 800640a:	bf00      	nop
 800640c:	e7fd      	b.n	800640a <xTaskGenericNotify+0x2e>
		pxTCB = xTaskToNotify;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	623b      	str	r3, [r7, #32]

		taskENTER_CRITICAL();
 8006412:	f000 fe43 	bl	800709c <vPortEnterCritical>
		{
			if( pulPreviousNotificationValue != NULL )
 8006416:	683b      	ldr	r3, [r7, #0]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d003      	beq.n	8006424 <xTaskGenericNotify+0x48>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 800641c:	6a3b      	ldr	r3, [r7, #32]
 800641e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006420:	683b      	ldr	r3, [r7, #0]
 8006422:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 8006424:	6a3b      	ldr	r3, [r7, #32]
 8006426:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800642a:	77fb      	strb	r3, [r7, #31]

			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 800642c:	6a3b      	ldr	r3, [r7, #32]
 800642e:	2202      	movs	r2, #2
 8006430:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 8006434:	79fb      	ldrb	r3, [r7, #7]
 8006436:	2b04      	cmp	r3, #4
 8006438:	d827      	bhi.n	800648a <xTaskGenericNotify+0xae>
 800643a:	a201      	add	r2, pc, #4	@ (adr r2, 8006440 <xTaskGenericNotify+0x64>)
 800643c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006440:	080064ad 	.word	0x080064ad
 8006444:	08006455 	.word	0x08006455
 8006448:	08006463 	.word	0x08006463
 800644c:	0800646f 	.word	0x0800646f
 8006450:	08006477 	.word	0x08006477
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 8006454:	6a3b      	ldr	r3, [r7, #32]
 8006456:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	431a      	orrs	r2, r3
 800645c:	6a3b      	ldr	r3, [r7, #32]
 800645e:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006460:	e027      	b.n	80064b2 <xTaskGenericNotify+0xd6>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 8006462:	6a3b      	ldr	r3, [r7, #32]
 8006464:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006466:	1c5a      	adds	r2, r3, #1
 8006468:	6a3b      	ldr	r3, [r7, #32]
 800646a:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 800646c:	e021      	b.n	80064b2 <xTaskGenericNotify+0xd6>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 800646e:	6a3b      	ldr	r3, [r7, #32]
 8006470:	68ba      	ldr	r2, [r7, #8]
 8006472:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006474:	e01d      	b.n	80064b2 <xTaskGenericNotify+0xd6>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 8006476:	7ffb      	ldrb	r3, [r7, #31]
 8006478:	2b02      	cmp	r3, #2
 800647a:	d003      	beq.n	8006484 <xTaskGenericNotify+0xa8>
					{
						pxTCB->ulNotifiedValue = ulValue;
 800647c:	6a3b      	ldr	r3, [r7, #32]
 800647e:	68ba      	ldr	r2, [r7, #8]
 8006480:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006482:	e016      	b.n	80064b2 <xTaskGenericNotify+0xd6>
						xReturn = pdFAIL;
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
					break;
 8006488:	e013      	b.n	80064b2 <xTaskGenericNotify+0xd6>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 800648a:	6a3b      	ldr	r3, [r7, #32]
 800648c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800648e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006492:	d00d      	beq.n	80064b0 <xTaskGenericNotify+0xd4>
	__asm volatile
 8006494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006498:	f383 8811 	msr	BASEPRI, r3
 800649c:	f3bf 8f6f 	isb	sy
 80064a0:	f3bf 8f4f 	dsb	sy
 80064a4:	617b      	str	r3, [r7, #20]
}
 80064a6:	bf00      	nop
 80064a8:	bf00      	nop
 80064aa:	e7fd      	b.n	80064a8 <xTaskGenericNotify+0xcc>
					break;
 80064ac:	bf00      	nop
 80064ae:	e000      	b.n	80064b2 <xTaskGenericNotify+0xd6>

					break;
 80064b0:	bf00      	nop

			traceTASK_NOTIFY();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 80064b2:	7ffb      	ldrb	r3, [r7, #31]
 80064b4:	2b01      	cmp	r3, #1
 80064b6:	d13b      	bne.n	8006530 <xTaskGenericNotify+0x154>
			{
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80064b8:	6a3b      	ldr	r3, [r7, #32]
 80064ba:	3304      	adds	r3, #4
 80064bc:	4618      	mov	r0, r3
 80064be:	f7fe f833 	bl	8004528 <uxListRemove>
				prvAddTaskToReadyList( pxTCB );
 80064c2:	6a3b      	ldr	r3, [r7, #32]
 80064c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064c6:	4b1e      	ldr	r3, [pc, #120]	@ (8006540 <xTaskGenericNotify+0x164>)
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	429a      	cmp	r2, r3
 80064cc:	d903      	bls.n	80064d6 <xTaskGenericNotify+0xfa>
 80064ce:	6a3b      	ldr	r3, [r7, #32]
 80064d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d2:	4a1b      	ldr	r2, [pc, #108]	@ (8006540 <xTaskGenericNotify+0x164>)
 80064d4:	6013      	str	r3, [r2, #0]
 80064d6:	6a3b      	ldr	r3, [r7, #32]
 80064d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064da:	4613      	mov	r3, r2
 80064dc:	009b      	lsls	r3, r3, #2
 80064de:	4413      	add	r3, r2
 80064e0:	009b      	lsls	r3, r3, #2
 80064e2:	4a18      	ldr	r2, [pc, #96]	@ (8006544 <xTaskGenericNotify+0x168>)
 80064e4:	441a      	add	r2, r3
 80064e6:	6a3b      	ldr	r3, [r7, #32]
 80064e8:	3304      	adds	r3, #4
 80064ea:	4619      	mov	r1, r3
 80064ec:	4610      	mov	r0, r2
 80064ee:	f7fd ffc0 	bl	8004472 <vListInsertEnd>

				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 80064f2:	6a3b      	ldr	r3, [r7, #32]
 80064f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d00b      	beq.n	8006512 <xTaskGenericNotify+0x136>
	__asm volatile
 80064fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80064fe:	f383 8811 	msr	BASEPRI, r3
 8006502:	f3bf 8f6f 	isb	sy
 8006506:	f3bf 8f4f 	dsb	sy
 800650a:	613b      	str	r3, [r7, #16]
}
 800650c:	bf00      	nop
 800650e:	bf00      	nop
 8006510:	e7fd      	b.n	800650e <xTaskGenericNotify+0x132>
					earliest possible time. */
					prvResetNextTaskUnblockTime();
				}
				#endif

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006512:	6a3b      	ldr	r3, [r7, #32]
 8006514:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006516:	4b0c      	ldr	r3, [pc, #48]	@ (8006548 <xTaskGenericNotify+0x16c>)
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800651c:	429a      	cmp	r2, r3
 800651e:	d907      	bls.n	8006530 <xTaskGenericNotify+0x154>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					taskYIELD_IF_USING_PREEMPTION();
 8006520:	4b0a      	ldr	r3, [pc, #40]	@ (800654c <xTaskGenericNotify+0x170>)
 8006522:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006526:	601a      	str	r2, [r3, #0]
 8006528:	f3bf 8f4f 	dsb	sy
 800652c:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
		taskEXIT_CRITICAL();
 8006530:	f000 fde4 	bl	80070fc <vPortExitCritical>

		return xReturn;
 8006534:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
	}
 8006536:	4618      	mov	r0, r3
 8006538:	3728      	adds	r7, #40	@ 0x28
 800653a:	46bd      	mov	sp, r7
 800653c:	bd80      	pop	{r7, pc}
 800653e:	bf00      	nop
 8006540:	20000e38 	.word	0x20000e38
 8006544:	20000960 	.word	0x20000960
 8006548:	2000095c 	.word	0x2000095c
 800654c:	e000ed04 	.word	0xe000ed04

08006550 <xTaskGenericNotifyFromISR>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskGenericNotifyFromISR( TaskHandle_t xTaskToNotify, uint32_t ulValue, eNotifyAction eAction, uint32_t *pulPreviousNotificationValue, BaseType_t *pxHigherPriorityTaskWoken )
	{
 8006550:	b580      	push	{r7, lr}
 8006552:	b08e      	sub	sp, #56	@ 0x38
 8006554:	af00      	add	r7, sp, #0
 8006556:	60f8      	str	r0, [r7, #12]
 8006558:	60b9      	str	r1, [r7, #8]
 800655a:	603b      	str	r3, [r7, #0]
 800655c:	4613      	mov	r3, r2
 800655e:	71fb      	strb	r3, [r7, #7]
	TCB_t * pxTCB;
	uint8_t ucOriginalNotifyState;
	BaseType_t xReturn = pdPASS;
 8006560:	2301      	movs	r3, #1
 8006562:	637b      	str	r3, [r7, #52]	@ 0x34
	UBaseType_t uxSavedInterruptStatus;

		configASSERT( xTaskToNotify );
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d10b      	bne.n	8006582 <xTaskGenericNotifyFromISR+0x32>
	__asm volatile
 800656a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800656e:	f383 8811 	msr	BASEPRI, r3
 8006572:	f3bf 8f6f 	isb	sy
 8006576:	f3bf 8f4f 	dsb	sy
 800657a:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800657c:	bf00      	nop
 800657e:	bf00      	nop
 8006580:	e7fd      	b.n	800657e <xTaskGenericNotifyFromISR+0x2e>
		below the maximum system call interrupt priority.  FreeRTOS maintains a
		separate interrupt safe API to ensure interrupt entry is as fast and as
		simple as possible.  More information (albeit Cortex-M specific) is
		provided on the following link:
		http://www.freertos.org/RTOS-Cortex-M3-M4.html */
		portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006582:	f000 fe4d 	bl	8007220 <vPortValidateInterruptPriority>

		pxTCB = xTaskToNotify;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	633b      	str	r3, [r7, #48]	@ 0x30
	__asm volatile
 800658a:	f3ef 8211 	mrs	r2, BASEPRI
 800658e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006592:	f383 8811 	msr	BASEPRI, r3
 8006596:	f3bf 8f6f 	isb	sy
 800659a:	f3bf 8f4f 	dsb	sy
 800659e:	623a      	str	r2, [r7, #32]
 80065a0:	61fb      	str	r3, [r7, #28]
	return ulOriginalBASEPRI;
 80065a2:	6a3b      	ldr	r3, [r7, #32]

		uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80065a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{
			if( pulPreviousNotificationValue != NULL )
 80065a6:	683b      	ldr	r3, [r7, #0]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d003      	beq.n	80065b4 <xTaskGenericNotifyFromISR+0x64>
			{
				*pulPreviousNotificationValue = pxTCB->ulNotifiedValue;
 80065ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ae:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	601a      	str	r2, [r3, #0]
			}

			ucOriginalNotifyState = pxTCB->ucNotifyState;
 80065b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065b6:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
			pxTCB->ucNotifyState = taskNOTIFICATION_RECEIVED;
 80065be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065c0:	2202      	movs	r2, #2
 80065c2:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

			switch( eAction )
 80065c6:	79fb      	ldrb	r3, [r7, #7]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d829      	bhi.n	8006620 <xTaskGenericNotifyFromISR+0xd0>
 80065cc:	a201      	add	r2, pc, #4	@ (adr r2, 80065d4 <xTaskGenericNotifyFromISR+0x84>)
 80065ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065d2:	bf00      	nop
 80065d4:	08006643 	.word	0x08006643
 80065d8:	080065e9 	.word	0x080065e9
 80065dc:	080065f7 	.word	0x080065f7
 80065e0:	08006603 	.word	0x08006603
 80065e4:	0800660b 	.word	0x0800660b
			{
				case eSetBits	:
					pxTCB->ulNotifiedValue |= ulValue;
 80065e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065ea:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80065ec:	68bb      	ldr	r3, [r7, #8]
 80065ee:	431a      	orrs	r2, r3
 80065f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f2:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 80065f4:	e028      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>

				case eIncrement	:
					( pxTCB->ulNotifiedValue )++;
 80065f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80065fa:	1c5a      	adds	r2, r3, #1
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006600:	e022      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithOverwrite	:
					pxTCB->ulNotifiedValue = ulValue;
 8006602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006604:	68ba      	ldr	r2, [r7, #8]
 8006606:	655a      	str	r2, [r3, #84]	@ 0x54
					break;
 8006608:	e01e      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>

				case eSetValueWithoutOverwrite :
					if( ucOriginalNotifyState != taskNOTIFICATION_RECEIVED )
 800660a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800660e:	2b02      	cmp	r3, #2
 8006610:	d003      	beq.n	800661a <xTaskGenericNotifyFromISR+0xca>
					{
						pxTCB->ulNotifiedValue = ulValue;
 8006612:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	655a      	str	r2, [r3, #84]	@ 0x54
					else
					{
						/* The value could not be written to the task. */
						xReturn = pdFAIL;
					}
					break;
 8006618:	e016      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>
						xReturn = pdFAIL;
 800661a:	2300      	movs	r3, #0
 800661c:	637b      	str	r3, [r7, #52]	@ 0x34
					break;
 800661e:	e013      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>

				default:
					/* Should not get here if all enums are handled.
					Artificially force an assert by testing a value the
					compiler can't assume is const. */
					configASSERT( pxTCB->ulNotifiedValue == ~0UL );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8006624:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006628:	d00d      	beq.n	8006646 <xTaskGenericNotifyFromISR+0xf6>
	__asm volatile
 800662a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662e:	f383 8811 	msr	BASEPRI, r3
 8006632:	f3bf 8f6f 	isb	sy
 8006636:	f3bf 8f4f 	dsb	sy
 800663a:	61bb      	str	r3, [r7, #24]
}
 800663c:	bf00      	nop
 800663e:	bf00      	nop
 8006640:	e7fd      	b.n	800663e <xTaskGenericNotifyFromISR+0xee>
					break;
 8006642:	bf00      	nop
 8006644:	e000      	b.n	8006648 <xTaskGenericNotifyFromISR+0xf8>
					break;
 8006646:	bf00      	nop

			traceTASK_NOTIFY_FROM_ISR();

			/* If the task is in the blocked state specifically to wait for a
			notification then unblock it now. */
			if( ucOriginalNotifyState == taskWAITING_NOTIFICATION )
 8006648:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800664c:	2b01      	cmp	r3, #1
 800664e:	d147      	bne.n	80066e0 <xTaskGenericNotifyFromISR+0x190>
			{
				/* The task should not have been on an event list. */
				configASSERT( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) == NULL );
 8006650:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006652:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006654:	2b00      	cmp	r3, #0
 8006656:	d00b      	beq.n	8006670 <xTaskGenericNotifyFromISR+0x120>
	__asm volatile
 8006658:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800665c:	f383 8811 	msr	BASEPRI, r3
 8006660:	f3bf 8f6f 	isb	sy
 8006664:	f3bf 8f4f 	dsb	sy
 8006668:	617b      	str	r3, [r7, #20]
}
 800666a:	bf00      	nop
 800666c:	bf00      	nop
 800666e:	e7fd      	b.n	800666c <xTaskGenericNotifyFromISR+0x11c>

				if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006670:	4b21      	ldr	r3, [pc, #132]	@ (80066f8 <xTaskGenericNotifyFromISR+0x1a8>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	2b00      	cmp	r3, #0
 8006676:	d11d      	bne.n	80066b4 <xTaskGenericNotifyFromISR+0x164>
				{
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006678:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800667a:	3304      	adds	r3, #4
 800667c:	4618      	mov	r0, r3
 800667e:	f7fd ff53 	bl	8004528 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006682:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006684:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006686:	4b1d      	ldr	r3, [pc, #116]	@ (80066fc <xTaskGenericNotifyFromISR+0x1ac>)
 8006688:	681b      	ldr	r3, [r3, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	d903      	bls.n	8006696 <xTaskGenericNotifyFromISR+0x146>
 800668e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006690:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006692:	4a1a      	ldr	r2, [pc, #104]	@ (80066fc <xTaskGenericNotifyFromISR+0x1ac>)
 8006694:	6013      	str	r3, [r2, #0]
 8006696:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006698:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800669a:	4613      	mov	r3, r2
 800669c:	009b      	lsls	r3, r3, #2
 800669e:	4413      	add	r3, r2
 80066a0:	009b      	lsls	r3, r3, #2
 80066a2:	4a17      	ldr	r2, [pc, #92]	@ (8006700 <xTaskGenericNotifyFromISR+0x1b0>)
 80066a4:	441a      	add	r2, r3
 80066a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066a8:	3304      	adds	r3, #4
 80066aa:	4619      	mov	r1, r3
 80066ac:	4610      	mov	r0, r2
 80066ae:	f7fd fee0 	bl	8004472 <vListInsertEnd>
 80066b2:	e005      	b.n	80066c0 <xTaskGenericNotifyFromISR+0x170>
				}
				else
				{
					/* The delayed and ready lists cannot be accessed, so hold
					this task pending until the scheduler is resumed. */
					vListInsertEnd( &( xPendingReadyList ), &( pxTCB->xEventListItem ) );
 80066b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b6:	3318      	adds	r3, #24
 80066b8:	4619      	mov	r1, r3
 80066ba:	4812      	ldr	r0, [pc, #72]	@ (8006704 <xTaskGenericNotifyFromISR+0x1b4>)
 80066bc:	f7fd fed9 	bl	8004472 <vListInsertEnd>
				}

				if( pxTCB->uxPriority > pxCurrentTCB->uxPriority )
 80066c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066c4:	4b10      	ldr	r3, [pc, #64]	@ (8006708 <xTaskGenericNotifyFromISR+0x1b8>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066ca:	429a      	cmp	r2, r3
 80066cc:	d908      	bls.n	80066e0 <xTaskGenericNotifyFromISR+0x190>
				{
					/* The notified task has a priority above the currently
					executing task so a yield is required. */
					if( pxHigherPriorityTaskWoken != NULL )
 80066ce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d002      	beq.n	80066da <xTaskGenericNotifyFromISR+0x18a>
					{
						*pxHigherPriorityTaskWoken = pdTRUE;
 80066d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80066d6:	2201      	movs	r2, #1
 80066d8:	601a      	str	r2, [r3, #0]
					}

					/* Mark that a yield is pending in case the user is not
					using the "xHigherPriorityTaskWoken" parameter to an ISR
					safe FreeRTOS function. */
					xYieldPending = pdTRUE;
 80066da:	4b0c      	ldr	r3, [pc, #48]	@ (800670c <xTaskGenericNotifyFromISR+0x1bc>)
 80066dc:	2201      	movs	r2, #1
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066e2:	613b      	str	r3, [r7, #16]
	__asm volatile
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	f383 8811 	msr	BASEPRI, r3
}
 80066ea:	bf00      	nop
				}
			}
		}
		portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

		return xReturn;
 80066ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
	}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3738      	adds	r7, #56	@ 0x38
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	20000e58 	.word	0x20000e58
 80066fc:	20000e38 	.word	0x20000e38
 8006700:	20000960 	.word	0x20000960
 8006704:	20000df0 	.word	0x20000df0
 8006708:	2000095c 	.word	0x2000095c
 800670c:	20000e44 	.word	0x20000e44

08006710 <xTaskNotifyStateClear>:
/*-----------------------------------------------------------*/

#if( configUSE_TASK_NOTIFICATIONS == 1 )

	BaseType_t xTaskNotifyStateClear( TaskHandle_t xTask )
	{
 8006710:	b580      	push	{r7, lr}
 8006712:	b084      	sub	sp, #16
 8006714:	af00      	add	r7, sp, #0
 8006716:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;
	BaseType_t xReturn;

		/* If null is passed in here then it is the calling task that is having
		its notification state cleared. */
		pxTCB = prvGetTCBFromHandle( xTask );
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d102      	bne.n	8006724 <xTaskNotifyStateClear+0x14>
 800671e:	4b0e      	ldr	r3, [pc, #56]	@ (8006758 <xTaskNotifyStateClear+0x48>)
 8006720:	681b      	ldr	r3, [r3, #0]
 8006722:	e000      	b.n	8006726 <xTaskNotifyStateClear+0x16>
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	60bb      	str	r3, [r7, #8]

		taskENTER_CRITICAL();
 8006728:	f000 fcb8 	bl	800709c <vPortEnterCritical>
		{
			if( pxTCB->ucNotifyState == taskNOTIFICATION_RECEIVED )
 800672c:	68bb      	ldr	r3, [r7, #8]
 800672e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8006732:	b2db      	uxtb	r3, r3
 8006734:	2b02      	cmp	r3, #2
 8006736:	d106      	bne.n	8006746 <xTaskNotifyStateClear+0x36>
			{
				pxTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006738:	68bb      	ldr	r3, [r7, #8]
 800673a:	2200      	movs	r2, #0
 800673c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
				xReturn = pdPASS;
 8006740:	2301      	movs	r3, #1
 8006742:	60fb      	str	r3, [r7, #12]
 8006744:	e001      	b.n	800674a <xTaskNotifyStateClear+0x3a>
			}
			else
			{
				xReturn = pdFAIL;
 8006746:	2300      	movs	r3, #0
 8006748:	60fb      	str	r3, [r7, #12]
			}
		}
		taskEXIT_CRITICAL();
 800674a:	f000 fcd7 	bl	80070fc <vPortExitCritical>

		return xReturn;
 800674e:	68fb      	ldr	r3, [r7, #12]
	}
 8006750:	4618      	mov	r0, r3
 8006752:	3710      	adds	r7, #16
 8006754:	46bd      	mov	sp, r7
 8006756:	bd80      	pop	{r7, pc}
 8006758:	2000095c 	.word	0x2000095c

0800675c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800675c:	b580      	push	{r7, lr}
 800675e:	b084      	sub	sp, #16
 8006760:	af00      	add	r7, sp, #0
 8006762:	6078      	str	r0, [r7, #4]
 8006764:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006766:	4b21      	ldr	r3, [pc, #132]	@ (80067ec <prvAddCurrentTaskToDelayedList+0x90>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800676c:	4b20      	ldr	r3, [pc, #128]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	3304      	adds	r3, #4
 8006772:	4618      	mov	r0, r3
 8006774:	f7fd fed8 	bl	8004528 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800677e:	d10a      	bne.n	8006796 <prvAddCurrentTaskToDelayedList+0x3a>
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	2b00      	cmp	r3, #0
 8006784:	d007      	beq.n	8006796 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006786:	4b1a      	ldr	r3, [pc, #104]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3304      	adds	r3, #4
 800678c:	4619      	mov	r1, r3
 800678e:	4819      	ldr	r0, [pc, #100]	@ (80067f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006790:	f7fd fe6f 	bl	8004472 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006794:	e026      	b.n	80067e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006796:	68fa      	ldr	r2, [r7, #12]
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4413      	add	r3, r2
 800679c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800679e:	4b14      	ldr	r3, [pc, #80]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	68ba      	ldr	r2, [r7, #8]
 80067a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80067a6:	68ba      	ldr	r2, [r7, #8]
 80067a8:	68fb      	ldr	r3, [r7, #12]
 80067aa:	429a      	cmp	r2, r3
 80067ac:	d209      	bcs.n	80067c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067ae:	4b12      	ldr	r3, [pc, #72]	@ (80067f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80067b0:	681a      	ldr	r2, [r3, #0]
 80067b2:	4b0f      	ldr	r3, [pc, #60]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4619      	mov	r1, r3
 80067ba:	4610      	mov	r0, r2
 80067bc:	f7fd fe7c 	bl	80044b8 <vListInsert>
}
 80067c0:	e010      	b.n	80067e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80067c2:	4b0e      	ldr	r3, [pc, #56]	@ (80067fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80067c4:	681a      	ldr	r2, [r3, #0]
 80067c6:	4b0a      	ldr	r3, [pc, #40]	@ (80067f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	3304      	adds	r3, #4
 80067cc:	4619      	mov	r1, r3
 80067ce:	4610      	mov	r0, r2
 80067d0:	f7fd fe72 	bl	80044b8 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80067d4:	4b0a      	ldr	r3, [pc, #40]	@ (8006800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	68ba      	ldr	r2, [r7, #8]
 80067da:	429a      	cmp	r2, r3
 80067dc:	d202      	bcs.n	80067e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067de:	4a08      	ldr	r2, [pc, #32]	@ (8006800 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067e0:	68bb      	ldr	r3, [r7, #8]
 80067e2:	6013      	str	r3, [r2, #0]
}
 80067e4:	bf00      	nop
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000e34 	.word	0x20000e34
 80067f0:	2000095c 	.word	0x2000095c
 80067f4:	20000e1c 	.word	0x20000e1c
 80067f8:	20000dec 	.word	0x20000dec
 80067fc:	20000de8 	.word	0x20000de8
 8006800:	20000e50 	.word	0x20000e50

08006804 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006804:	b580      	push	{r7, lr}
 8006806:	b08a      	sub	sp, #40	@ 0x28
 8006808:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800680a:	2300      	movs	r3, #0
 800680c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800680e:	f000 fb11 	bl	8006e34 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006812:	4b1d      	ldr	r3, [pc, #116]	@ (8006888 <xTimerCreateTimerTask+0x84>)
 8006814:	681b      	ldr	r3, [r3, #0]
 8006816:	2b00      	cmp	r3, #0
 8006818:	d021      	beq.n	800685e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800681a:	2300      	movs	r3, #0
 800681c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800681e:	2300      	movs	r3, #0
 8006820:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006822:	1d3a      	adds	r2, r7, #4
 8006824:	f107 0108 	add.w	r1, r7, #8
 8006828:	f107 030c 	add.w	r3, r7, #12
 800682c:	4618      	mov	r0, r3
 800682e:	f7fd fddb 	bl	80043e8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006832:	6879      	ldr	r1, [r7, #4]
 8006834:	68bb      	ldr	r3, [r7, #8]
 8006836:	68fa      	ldr	r2, [r7, #12]
 8006838:	9202      	str	r2, [sp, #8]
 800683a:	9301      	str	r3, [sp, #4]
 800683c:	2302      	movs	r3, #2
 800683e:	9300      	str	r3, [sp, #0]
 8006840:	2300      	movs	r3, #0
 8006842:	460a      	mov	r2, r1
 8006844:	4911      	ldr	r1, [pc, #68]	@ (800688c <xTimerCreateTimerTask+0x88>)
 8006846:	4812      	ldr	r0, [pc, #72]	@ (8006890 <xTimerCreateTimerTask+0x8c>)
 8006848:	f7fe fee0 	bl	800560c <xTaskCreateStatic>
 800684c:	4603      	mov	r3, r0
 800684e:	4a11      	ldr	r2, [pc, #68]	@ (8006894 <xTimerCreateTimerTask+0x90>)
 8006850:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006852:	4b10      	ldr	r3, [pc, #64]	@ (8006894 <xTimerCreateTimerTask+0x90>)
 8006854:	681b      	ldr	r3, [r3, #0]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d001      	beq.n	800685e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800685a:	2301      	movs	r3, #1
 800685c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d10b      	bne.n	800687c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006868:	f383 8811 	msr	BASEPRI, r3
 800686c:	f3bf 8f6f 	isb	sy
 8006870:	f3bf 8f4f 	dsb	sy
 8006874:	613b      	str	r3, [r7, #16]
}
 8006876:	bf00      	nop
 8006878:	bf00      	nop
 800687a:	e7fd      	b.n	8006878 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800687c:	697b      	ldr	r3, [r7, #20]
}
 800687e:	4618      	mov	r0, r3
 8006880:	3718      	adds	r7, #24
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000e8c 	.word	0x20000e8c
 800688c:	0800af04 	.word	0x0800af04
 8006890:	080069d1 	.word	0x080069d1
 8006894:	20000e90 	.word	0x20000e90

08006898 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b08a      	sub	sp, #40	@ 0x28
 800689c:	af00      	add	r7, sp, #0
 800689e:	60f8      	str	r0, [r7, #12]
 80068a0:	60b9      	str	r1, [r7, #8]
 80068a2:	607a      	str	r2, [r7, #4]
 80068a4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80068a6:	2300      	movs	r3, #0
 80068a8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d10b      	bne.n	80068c8 <xTimerGenericCommand+0x30>
	__asm volatile
 80068b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068b4:	f383 8811 	msr	BASEPRI, r3
 80068b8:	f3bf 8f6f 	isb	sy
 80068bc:	f3bf 8f4f 	dsb	sy
 80068c0:	623b      	str	r3, [r7, #32]
}
 80068c2:	bf00      	nop
 80068c4:	bf00      	nop
 80068c6:	e7fd      	b.n	80068c4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80068c8:	4b19      	ldr	r3, [pc, #100]	@ (8006930 <xTimerGenericCommand+0x98>)
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	2b00      	cmp	r3, #0
 80068ce:	d02a      	beq.n	8006926 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80068d0:	68bb      	ldr	r3, [r7, #8]
 80068d2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068dc:	68bb      	ldr	r3, [r7, #8]
 80068de:	2b05      	cmp	r3, #5
 80068e0:	dc18      	bgt.n	8006914 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068e2:	f7ff fc93 	bl	800620c <xTaskGetSchedulerState>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b02      	cmp	r3, #2
 80068ea:	d109      	bne.n	8006900 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068ec:	4b10      	ldr	r3, [pc, #64]	@ (8006930 <xTimerGenericCommand+0x98>)
 80068ee:	6818      	ldr	r0, [r3, #0]
 80068f0:	f107 0110 	add.w	r1, r7, #16
 80068f4:	2300      	movs	r3, #0
 80068f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068f8:	f7fd ff4a 	bl	8004790 <xQueueGenericSend>
 80068fc:	6278      	str	r0, [r7, #36]	@ 0x24
 80068fe:	e012      	b.n	8006926 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006900:	4b0b      	ldr	r3, [pc, #44]	@ (8006930 <xTimerGenericCommand+0x98>)
 8006902:	6818      	ldr	r0, [r3, #0]
 8006904:	f107 0110 	add.w	r1, r7, #16
 8006908:	2300      	movs	r3, #0
 800690a:	2200      	movs	r2, #0
 800690c:	f7fd ff40 	bl	8004790 <xQueueGenericSend>
 8006910:	6278      	str	r0, [r7, #36]	@ 0x24
 8006912:	e008      	b.n	8006926 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006914:	4b06      	ldr	r3, [pc, #24]	@ (8006930 <xTimerGenericCommand+0x98>)
 8006916:	6818      	ldr	r0, [r3, #0]
 8006918:	f107 0110 	add.w	r1, r7, #16
 800691c:	2300      	movs	r3, #0
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	f7fe f838 	bl	8004994 <xQueueGenericSendFromISR>
 8006924:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006928:	4618      	mov	r0, r3
 800692a:	3728      	adds	r7, #40	@ 0x28
 800692c:	46bd      	mov	sp, r7
 800692e:	bd80      	pop	{r7, pc}
 8006930:	20000e8c 	.word	0x20000e8c

08006934 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006934:	b580      	push	{r7, lr}
 8006936:	b088      	sub	sp, #32
 8006938:	af02      	add	r7, sp, #8
 800693a:	6078      	str	r0, [r7, #4]
 800693c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693e:	4b23      	ldr	r3, [pc, #140]	@ (80069cc <prvProcessExpiredTimer+0x98>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006948:	697b      	ldr	r3, [r7, #20]
 800694a:	3304      	adds	r3, #4
 800694c:	4618      	mov	r0, r3
 800694e:	f7fd fdeb 	bl	8004528 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006958:	f003 0304 	and.w	r3, r3, #4
 800695c:	2b00      	cmp	r3, #0
 800695e:	d023      	beq.n	80069a8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006960:	697b      	ldr	r3, [r7, #20]
 8006962:	699a      	ldr	r2, [r3, #24]
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	18d1      	adds	r1, r2, r3
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	683a      	ldr	r2, [r7, #0]
 800696c:	6978      	ldr	r0, [r7, #20]
 800696e:	f000 f8d3 	bl	8006b18 <prvInsertTimerInActiveList>
 8006972:	4603      	mov	r3, r0
 8006974:	2b00      	cmp	r3, #0
 8006976:	d020      	beq.n	80069ba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006978:	2300      	movs	r3, #0
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	2300      	movs	r3, #0
 800697e:	687a      	ldr	r2, [r7, #4]
 8006980:	2100      	movs	r1, #0
 8006982:	6978      	ldr	r0, [r7, #20]
 8006984:	f7ff ff88 	bl	8006898 <xTimerGenericCommand>
 8006988:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	2b00      	cmp	r3, #0
 800698e:	d114      	bne.n	80069ba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006990:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006994:	f383 8811 	msr	BASEPRI, r3
 8006998:	f3bf 8f6f 	isb	sy
 800699c:	f3bf 8f4f 	dsb	sy
 80069a0:	60fb      	str	r3, [r7, #12]
}
 80069a2:	bf00      	nop
 80069a4:	bf00      	nop
 80069a6:	e7fd      	b.n	80069a4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80069a8:	697b      	ldr	r3, [r7, #20]
 80069aa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80069ae:	f023 0301 	bic.w	r3, r3, #1
 80069b2:	b2da      	uxtb	r2, r3
 80069b4:	697b      	ldr	r3, [r7, #20]
 80069b6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	6a1b      	ldr	r3, [r3, #32]
 80069be:	6978      	ldr	r0, [r7, #20]
 80069c0:	4798      	blx	r3
}
 80069c2:	bf00      	nop
 80069c4:	3718      	adds	r7, #24
 80069c6:	46bd      	mov	sp, r7
 80069c8:	bd80      	pop	{r7, pc}
 80069ca:	bf00      	nop
 80069cc:	20000e84 	.word	0x20000e84

080069d0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80069d0:	b580      	push	{r7, lr}
 80069d2:	b084      	sub	sp, #16
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069d8:	f107 0308 	add.w	r3, r7, #8
 80069dc:	4618      	mov	r0, r3
 80069de:	f000 f859 	bl	8006a94 <prvGetNextExpireTime>
 80069e2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	4619      	mov	r1, r3
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 f805 	bl	80069f8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069ee:	f000 f8d5 	bl	8006b9c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069f2:	bf00      	nop
 80069f4:	e7f0      	b.n	80069d8 <prvTimerTask+0x8>
	...

080069f8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b084      	sub	sp, #16
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	6078      	str	r0, [r7, #4]
 8006a00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006a02:	f7ff f811 	bl	8005a28 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006a06:	f107 0308 	add.w	r3, r7, #8
 8006a0a:	4618      	mov	r0, r3
 8006a0c:	f000 f864 	bl	8006ad8 <prvSampleTimeNow>
 8006a10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006a12:	68bb      	ldr	r3, [r7, #8]
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d130      	bne.n	8006a7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d10a      	bne.n	8006a34 <prvProcessTimerOrBlockTask+0x3c>
 8006a1e:	687a      	ldr	r2, [r7, #4]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	429a      	cmp	r2, r3
 8006a24:	d806      	bhi.n	8006a34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006a26:	f7ff f80d 	bl	8005a44 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006a2a:	68f9      	ldr	r1, [r7, #12]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f7ff ff81 	bl	8006934 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006a32:	e024      	b.n	8006a7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	2b00      	cmp	r3, #0
 8006a38:	d008      	beq.n	8006a4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a3a:	4b13      	ldr	r3, [pc, #76]	@ (8006a88 <prvProcessTimerOrBlockTask+0x90>)
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d101      	bne.n	8006a48 <prvProcessTimerOrBlockTask+0x50>
 8006a44:	2301      	movs	r3, #1
 8006a46:	e000      	b.n	8006a4a <prvProcessTimerOrBlockTask+0x52>
 8006a48:	2300      	movs	r3, #0
 8006a4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006a8c <prvProcessTimerOrBlockTask+0x94>)
 8006a4e:	6818      	ldr	r0, [r3, #0]
 8006a50:	687a      	ldr	r2, [r7, #4]
 8006a52:	68fb      	ldr	r3, [r7, #12]
 8006a54:	1ad3      	subs	r3, r2, r3
 8006a56:	683a      	ldr	r2, [r7, #0]
 8006a58:	4619      	mov	r1, r3
 8006a5a:	f7fe fa53 	bl	8004f04 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a5e:	f7fe fff1 	bl	8005a44 <xTaskResumeAll>
 8006a62:	4603      	mov	r3, r0
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d10a      	bne.n	8006a7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a68:	4b09      	ldr	r3, [pc, #36]	@ (8006a90 <prvProcessTimerOrBlockTask+0x98>)
 8006a6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a6e:	601a      	str	r2, [r3, #0]
 8006a70:	f3bf 8f4f 	dsb	sy
 8006a74:	f3bf 8f6f 	isb	sy
}
 8006a78:	e001      	b.n	8006a7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a7a:	f7fe ffe3 	bl	8005a44 <xTaskResumeAll>
}
 8006a7e:	bf00      	nop
 8006a80:	3710      	adds	r7, #16
 8006a82:	46bd      	mov	sp, r7
 8006a84:	bd80      	pop	{r7, pc}
 8006a86:	bf00      	nop
 8006a88:	20000e88 	.word	0x20000e88
 8006a8c:	20000e8c 	.word	0x20000e8c
 8006a90:	e000ed04 	.word	0xe000ed04

08006a94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a94:	b480      	push	{r7}
 8006a96:	b085      	sub	sp, #20
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a9c:	4b0d      	ldr	r3, [pc, #52]	@ (8006ad4 <prvGetNextExpireTime+0x40>)
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	2b00      	cmp	r3, #0
 8006aa4:	d101      	bne.n	8006aaa <prvGetNextExpireTime+0x16>
 8006aa6:	2201      	movs	r2, #1
 8006aa8:	e000      	b.n	8006aac <prvGetNextExpireTime+0x18>
 8006aaa:	2200      	movs	r2, #0
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006ab0:	687b      	ldr	r3, [r7, #4]
 8006ab2:	681b      	ldr	r3, [r3, #0]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d105      	bne.n	8006ac4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006ab8:	4b06      	ldr	r3, [pc, #24]	@ (8006ad4 <prvGetNextExpireTime+0x40>)
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	68db      	ldr	r3, [r3, #12]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	60fb      	str	r3, [r7, #12]
 8006ac2:	e001      	b.n	8006ac8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006ac4:	2300      	movs	r3, #0
 8006ac6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bc80      	pop	{r7}
 8006ad2:	4770      	bx	lr
 8006ad4:	20000e84 	.word	0x20000e84

08006ad8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ad8:	b580      	push	{r7, lr}
 8006ada:	b084      	sub	sp, #16
 8006adc:	af00      	add	r7, sp, #0
 8006ade:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006ae0:	f7ff f84e 	bl	8005b80 <xTaskGetTickCount>
 8006ae4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ae6:	4b0b      	ldr	r3, [pc, #44]	@ (8006b14 <prvSampleTimeNow+0x3c>)
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	429a      	cmp	r2, r3
 8006aee:	d205      	bcs.n	8006afc <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006af0:	f000 f93a 	bl	8006d68 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	2201      	movs	r2, #1
 8006af8:	601a      	str	r2, [r3, #0]
 8006afa:	e002      	b.n	8006b02 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	2200      	movs	r2, #0
 8006b00:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006b02:	4a04      	ldr	r2, [pc, #16]	@ (8006b14 <prvSampleTimeNow+0x3c>)
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006b08:	68fb      	ldr	r3, [r7, #12]
}
 8006b0a:	4618      	mov	r0, r3
 8006b0c:	3710      	adds	r7, #16
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	20000e94 	.word	0x20000e94

08006b18 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b086      	sub	sp, #24
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	60f8      	str	r0, [r7, #12]
 8006b20:	60b9      	str	r1, [r7, #8]
 8006b22:	607a      	str	r2, [r7, #4]
 8006b24:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006b26:	2300      	movs	r3, #0
 8006b28:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006b2a:	68fb      	ldr	r3, [r7, #12]
 8006b2c:	68ba      	ldr	r2, [r7, #8]
 8006b2e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006b30:	68fb      	ldr	r3, [r7, #12]
 8006b32:	68fa      	ldr	r2, [r7, #12]
 8006b34:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b36:	68ba      	ldr	r2, [r7, #8]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	429a      	cmp	r2, r3
 8006b3c:	d812      	bhi.n	8006b64 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b3e:	687a      	ldr	r2, [r7, #4]
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	1ad2      	subs	r2, r2, r3
 8006b44:	68fb      	ldr	r3, [r7, #12]
 8006b46:	699b      	ldr	r3, [r3, #24]
 8006b48:	429a      	cmp	r2, r3
 8006b4a:	d302      	bcc.n	8006b52 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	617b      	str	r3, [r7, #20]
 8006b50:	e01b      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <prvInsertTimerInActiveList+0x7c>)
 8006b54:	681a      	ldr	r2, [r3, #0]
 8006b56:	68fb      	ldr	r3, [r7, #12]
 8006b58:	3304      	adds	r3, #4
 8006b5a:	4619      	mov	r1, r3
 8006b5c:	4610      	mov	r0, r2
 8006b5e:	f7fd fcab 	bl	80044b8 <vListInsert>
 8006b62:	e012      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	683b      	ldr	r3, [r7, #0]
 8006b68:	429a      	cmp	r2, r3
 8006b6a:	d206      	bcs.n	8006b7a <prvInsertTimerInActiveList+0x62>
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	683b      	ldr	r3, [r7, #0]
 8006b70:	429a      	cmp	r2, r3
 8006b72:	d302      	bcc.n	8006b7a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b74:	2301      	movs	r3, #1
 8006b76:	617b      	str	r3, [r7, #20]
 8006b78:	e007      	b.n	8006b8a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b7a:	4b07      	ldr	r3, [pc, #28]	@ (8006b98 <prvInsertTimerInActiveList+0x80>)
 8006b7c:	681a      	ldr	r2, [r3, #0]
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	3304      	adds	r3, #4
 8006b82:	4619      	mov	r1, r3
 8006b84:	4610      	mov	r0, r2
 8006b86:	f7fd fc97 	bl	80044b8 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b8a:	697b      	ldr	r3, [r7, #20]
}
 8006b8c:	4618      	mov	r0, r3
 8006b8e:	3718      	adds	r7, #24
 8006b90:	46bd      	mov	sp, r7
 8006b92:	bd80      	pop	{r7, pc}
 8006b94:	20000e88 	.word	0x20000e88
 8006b98:	20000e84 	.word	0x20000e84

08006b9c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b9c:	b580      	push	{r7, lr}
 8006b9e:	b08e      	sub	sp, #56	@ 0x38
 8006ba0:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ba2:	e0ce      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	da19      	bge.n	8006bde <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006baa:	1d3b      	adds	r3, r7, #4
 8006bac:	3304      	adds	r3, #4
 8006bae:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006bb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d10b      	bne.n	8006bce <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006bb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bba:	f383 8811 	msr	BASEPRI, r3
 8006bbe:	f3bf 8f6f 	isb	sy
 8006bc2:	f3bf 8f4f 	dsb	sy
 8006bc6:	61fb      	str	r3, [r7, #28]
}
 8006bc8:	bf00      	nop
 8006bca:	bf00      	nop
 8006bcc:	e7fd      	b.n	8006bca <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006bce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006bd0:	681b      	ldr	r3, [r3, #0]
 8006bd2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd4:	6850      	ldr	r0, [r2, #4]
 8006bd6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006bd8:	6892      	ldr	r2, [r2, #8]
 8006bda:	4611      	mov	r1, r2
 8006bdc:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	f2c0 80ae 	blt.w	8006d42 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006be6:	68fb      	ldr	r3, [r7, #12]
 8006be8:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bec:	695b      	ldr	r3, [r3, #20]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d004      	beq.n	8006bfc <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bf2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bf4:	3304      	adds	r3, #4
 8006bf6:	4618      	mov	r0, r3
 8006bf8:	f7fd fc96 	bl	8004528 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bfc:	463b      	mov	r3, r7
 8006bfe:	4618      	mov	r0, r3
 8006c00:	f7ff ff6a 	bl	8006ad8 <prvSampleTimeNow>
 8006c04:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2b09      	cmp	r3, #9
 8006c0a:	f200 8097 	bhi.w	8006d3c <prvProcessReceivedCommands+0x1a0>
 8006c0e:	a201      	add	r2, pc, #4	@ (adr r2, 8006c14 <prvProcessReceivedCommands+0x78>)
 8006c10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006c14:	08006c3d 	.word	0x08006c3d
 8006c18:	08006c3d 	.word	0x08006c3d
 8006c1c:	08006c3d 	.word	0x08006c3d
 8006c20:	08006cb3 	.word	0x08006cb3
 8006c24:	08006cc7 	.word	0x08006cc7
 8006c28:	08006d13 	.word	0x08006d13
 8006c2c:	08006c3d 	.word	0x08006c3d
 8006c30:	08006c3d 	.word	0x08006c3d
 8006c34:	08006cb3 	.word	0x08006cb3
 8006c38:	08006cc7 	.word	0x08006cc7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c42:	f043 0301 	orr.w	r3, r3, #1
 8006c46:	b2da      	uxtb	r2, r3
 8006c48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c4e:	68ba      	ldr	r2, [r7, #8]
 8006c50:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c52:	699b      	ldr	r3, [r3, #24]
 8006c54:	18d1      	adds	r1, r2, r3
 8006c56:	68bb      	ldr	r3, [r7, #8]
 8006c58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5c:	f7ff ff5c 	bl	8006b18 <prvInsertTimerInActiveList>
 8006c60:	4603      	mov	r3, r0
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d06c      	beq.n	8006d40 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c68:	6a1b      	ldr	r3, [r3, #32]
 8006c6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c6c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c70:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d061      	beq.n	8006d40 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c7c:	68ba      	ldr	r2, [r7, #8]
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	699b      	ldr	r3, [r3, #24]
 8006c82:	441a      	add	r2, r3
 8006c84:	2300      	movs	r3, #0
 8006c86:	9300      	str	r3, [sp, #0]
 8006c88:	2300      	movs	r3, #0
 8006c8a:	2100      	movs	r1, #0
 8006c8c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c8e:	f7ff fe03 	bl	8006898 <xTimerGenericCommand>
 8006c92:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c94:	6a3b      	ldr	r3, [r7, #32]
 8006c96:	2b00      	cmp	r3, #0
 8006c98:	d152      	bne.n	8006d40 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9e:	f383 8811 	msr	BASEPRI, r3
 8006ca2:	f3bf 8f6f 	isb	sy
 8006ca6:	f3bf 8f4f 	dsb	sy
 8006caa:	61bb      	str	r3, [r7, #24]
}
 8006cac:	bf00      	nop
 8006cae:	bf00      	nop
 8006cb0:	e7fd      	b.n	8006cae <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cb2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cb4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cb8:	f023 0301 	bic.w	r3, r3, #1
 8006cbc:	b2da      	uxtb	r2, r3
 8006cbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006cc4:	e03d      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006cc6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cc8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ccc:	f043 0301 	orr.w	r3, r3, #1
 8006cd0:	b2da      	uxtb	r2, r3
 8006cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cd4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006cd8:	68ba      	ldr	r2, [r7, #8]
 8006cda:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cdc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	699b      	ldr	r3, [r3, #24]
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d10b      	bne.n	8006cfe <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cea:	f383 8811 	msr	BASEPRI, r3
 8006cee:	f3bf 8f6f 	isb	sy
 8006cf2:	f3bf 8f4f 	dsb	sy
 8006cf6:	617b      	str	r3, [r7, #20]
}
 8006cf8:	bf00      	nop
 8006cfa:	bf00      	nop
 8006cfc:	e7fd      	b.n	8006cfa <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cfe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d00:	699a      	ldr	r2, [r3, #24]
 8006d02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d04:	18d1      	adds	r1, r2, r3
 8006d06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006d08:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006d0a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d0c:	f7ff ff04 	bl	8006b18 <prvInsertTimerInActiveList>
					break;
 8006d10:	e017      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006d12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d14:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d18:	f003 0302 	and.w	r3, r3, #2
 8006d1c:	2b00      	cmp	r3, #0
 8006d1e:	d103      	bne.n	8006d28 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006d20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006d22:	f000 fb8b 	bl	800743c <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006d26:	e00c      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006d28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d2a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d2e:	f023 0301 	bic.w	r3, r3, #1
 8006d32:	b2da      	uxtb	r2, r3
 8006d34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d36:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d3a:	e002      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d3c:	bf00      	nop
 8006d3e:	e000      	b.n	8006d42 <prvProcessReceivedCommands+0x1a6>
					break;
 8006d40:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d42:	4b08      	ldr	r3, [pc, #32]	@ (8006d64 <prvProcessReceivedCommands+0x1c8>)
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	1d39      	adds	r1, r7, #4
 8006d48:	2200      	movs	r2, #0
 8006d4a:	4618      	mov	r0, r3
 8006d4c:	f7fd fec0 	bl	8004ad0 <xQueueReceive>
 8006d50:	4603      	mov	r3, r0
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	f47f af26 	bne.w	8006ba4 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d58:	bf00      	nop
 8006d5a:	bf00      	nop
 8006d5c:	3730      	adds	r7, #48	@ 0x30
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	20000e8c 	.word	0x20000e8c

08006d68 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b088      	sub	sp, #32
 8006d6c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d6e:	e049      	b.n	8006e04 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d70:	4b2e      	ldr	r3, [pc, #184]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	68db      	ldr	r3, [r3, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d7a:	4b2c      	ldr	r3, [pc, #176]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	68db      	ldr	r3, [r3, #12]
 8006d80:	68db      	ldr	r3, [r3, #12]
 8006d82:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	3304      	adds	r3, #4
 8006d88:	4618      	mov	r0, r3
 8006d8a:	f7fd fbcd 	bl	8004528 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	6a1b      	ldr	r3, [r3, #32]
 8006d92:	68f8      	ldr	r0, [r7, #12]
 8006d94:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d96:	68fb      	ldr	r3, [r7, #12]
 8006d98:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d9c:	f003 0304 	and.w	r3, r3, #4
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d02f      	beq.n	8006e04 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	699b      	ldr	r3, [r3, #24]
 8006da8:	693a      	ldr	r2, [r7, #16]
 8006daa:	4413      	add	r3, r2
 8006dac:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006dae:	68ba      	ldr	r2, [r7, #8]
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	429a      	cmp	r2, r3
 8006db4:	d90e      	bls.n	8006dd4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	68fa      	ldr	r2, [r7, #12]
 8006dc0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc2:	4b1a      	ldr	r3, [pc, #104]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	3304      	adds	r3, #4
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4610      	mov	r0, r2
 8006dce:	f7fd fb73 	bl	80044b8 <vListInsert>
 8006dd2:	e017      	b.n	8006e04 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006dd4:	2300      	movs	r3, #0
 8006dd6:	9300      	str	r3, [sp, #0]
 8006dd8:	2300      	movs	r3, #0
 8006dda:	693a      	ldr	r2, [r7, #16]
 8006ddc:	2100      	movs	r1, #0
 8006dde:	68f8      	ldr	r0, [r7, #12]
 8006de0:	f7ff fd5a 	bl	8006898 <xTimerGenericCommand>
 8006de4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d10b      	bne.n	8006e04 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006dec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df0:	f383 8811 	msr	BASEPRI, r3
 8006df4:	f3bf 8f6f 	isb	sy
 8006df8:	f3bf 8f4f 	dsb	sy
 8006dfc:	603b      	str	r3, [r7, #0]
}
 8006dfe:	bf00      	nop
 8006e00:	bf00      	nop
 8006e02:	e7fd      	b.n	8006e00 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006e04:	4b09      	ldr	r3, [pc, #36]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d1b0      	bne.n	8006d70 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006e0e:	4b07      	ldr	r3, [pc, #28]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006e14:	4b06      	ldr	r3, [pc, #24]	@ (8006e30 <prvSwitchTimerLists+0xc8>)
 8006e16:	681b      	ldr	r3, [r3, #0]
 8006e18:	4a04      	ldr	r2, [pc, #16]	@ (8006e2c <prvSwitchTimerLists+0xc4>)
 8006e1a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006e1c:	4a04      	ldr	r2, [pc, #16]	@ (8006e30 <prvSwitchTimerLists+0xc8>)
 8006e1e:	697b      	ldr	r3, [r7, #20]
 8006e20:	6013      	str	r3, [r2, #0]
}
 8006e22:	bf00      	nop
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20000e84 	.word	0x20000e84
 8006e30:	20000e88 	.word	0x20000e88

08006e34 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e34:	b580      	push	{r7, lr}
 8006e36:	b082      	sub	sp, #8
 8006e38:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e3a:	f000 f92f 	bl	800709c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e3e:	4b15      	ldr	r3, [pc, #84]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d120      	bne.n	8006e88 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e46:	4814      	ldr	r0, [pc, #80]	@ (8006e98 <prvCheckForValidListAndQueue+0x64>)
 8006e48:	f7fd fae8 	bl	800441c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e4c:	4813      	ldr	r0, [pc, #76]	@ (8006e9c <prvCheckForValidListAndQueue+0x68>)
 8006e4e:	f7fd fae5 	bl	800441c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e52:	4b13      	ldr	r3, [pc, #76]	@ (8006ea0 <prvCheckForValidListAndQueue+0x6c>)
 8006e54:	4a10      	ldr	r2, [pc, #64]	@ (8006e98 <prvCheckForValidListAndQueue+0x64>)
 8006e56:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e58:	4b12      	ldr	r3, [pc, #72]	@ (8006ea4 <prvCheckForValidListAndQueue+0x70>)
 8006e5a:	4a10      	ldr	r2, [pc, #64]	@ (8006e9c <prvCheckForValidListAndQueue+0x68>)
 8006e5c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e5e:	2300      	movs	r3, #0
 8006e60:	9300      	str	r3, [sp, #0]
 8006e62:	4b11      	ldr	r3, [pc, #68]	@ (8006ea8 <prvCheckForValidListAndQueue+0x74>)
 8006e64:	4a11      	ldr	r2, [pc, #68]	@ (8006eac <prvCheckForValidListAndQueue+0x78>)
 8006e66:	2110      	movs	r1, #16
 8006e68:	200a      	movs	r0, #10
 8006e6a:	f7fd fbf1 	bl	8004650 <xQueueGenericCreateStatic>
 8006e6e:	4603      	mov	r3, r0
 8006e70:	4a08      	ldr	r2, [pc, #32]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e72:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e74:	4b07      	ldr	r3, [pc, #28]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e76:	681b      	ldr	r3, [r3, #0]
 8006e78:	2b00      	cmp	r3, #0
 8006e7a:	d005      	beq.n	8006e88 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e7c:	4b05      	ldr	r3, [pc, #20]	@ (8006e94 <prvCheckForValidListAndQueue+0x60>)
 8006e7e:	681b      	ldr	r3, [r3, #0]
 8006e80:	490b      	ldr	r1, [pc, #44]	@ (8006eb0 <prvCheckForValidListAndQueue+0x7c>)
 8006e82:	4618      	mov	r0, r3
 8006e84:	f7fe f816 	bl	8004eb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e88:	f000 f938 	bl	80070fc <vPortExitCritical>
}
 8006e8c:	bf00      	nop
 8006e8e:	46bd      	mov	sp, r7
 8006e90:	bd80      	pop	{r7, pc}
 8006e92:	bf00      	nop
 8006e94:	20000e8c 	.word	0x20000e8c
 8006e98:	20000e5c 	.word	0x20000e5c
 8006e9c:	20000e70 	.word	0x20000e70
 8006ea0:	20000e84 	.word	0x20000e84
 8006ea4:	20000e88 	.word	0x20000e88
 8006ea8:	20000f38 	.word	0x20000f38
 8006eac:	20000e98 	.word	0x20000e98
 8006eb0:	0800af0c 	.word	0x0800af0c

08006eb4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006eb4:	b480      	push	{r7}
 8006eb6:	b085      	sub	sp, #20
 8006eb8:	af00      	add	r7, sp, #0
 8006eba:	60f8      	str	r0, [r7, #12]
 8006ebc:	60b9      	str	r1, [r7, #8]
 8006ebe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	3b04      	subs	r3, #4
 8006ec4:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006ecc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	3b04      	subs	r3, #4
 8006ed2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	f023 0201 	bic.w	r2, r3, #1
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	3b04      	subs	r3, #4
 8006ee2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006ee4:	4a08      	ldr	r2, [pc, #32]	@ (8006f08 <pxPortInitialiseStack+0x54>)
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	3b14      	subs	r3, #20
 8006eee:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ef0:	687a      	ldr	r2, [r7, #4]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	601a      	str	r2, [r3, #0]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	3b20      	subs	r3, #32
 8006efa:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006efc:	68fb      	ldr	r3, [r7, #12]
}
 8006efe:	4618      	mov	r0, r3
 8006f00:	3714      	adds	r7, #20
 8006f02:	46bd      	mov	sp, r7
 8006f04:	bc80      	pop	{r7}
 8006f06:	4770      	bx	lr
 8006f08:	08006f0d 	.word	0x08006f0d

08006f0c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b085      	sub	sp, #20
 8006f10:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0UL;
 8006f12:	2300      	movs	r3, #0
 8006f14:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006f16:	4b12      	ldr	r3, [pc, #72]	@ (8006f60 <prvTaskExitError+0x54>)
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f1e:	d00b      	beq.n	8006f38 <prvTaskExitError+0x2c>
	__asm volatile
 8006f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f24:	f383 8811 	msr	BASEPRI, r3
 8006f28:	f3bf 8f6f 	isb	sy
 8006f2c:	f3bf 8f4f 	dsb	sy
 8006f30:	60fb      	str	r3, [r7, #12]
}
 8006f32:	bf00      	nop
 8006f34:	bf00      	nop
 8006f36:	e7fd      	b.n	8006f34 <prvTaskExitError+0x28>
	__asm volatile
 8006f38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f3c:	f383 8811 	msr	BASEPRI, r3
 8006f40:	f3bf 8f6f 	isb	sy
 8006f44:	f3bf 8f4f 	dsb	sy
 8006f48:	60bb      	str	r3, [r7, #8]
}
 8006f4a:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f4c:	bf00      	nop
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	d0fc      	beq.n	8006f4e <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f54:	bf00      	nop
 8006f56:	bf00      	nop
 8006f58:	3714      	adds	r7, #20
 8006f5a:	46bd      	mov	sp, r7
 8006f5c:	bc80      	pop	{r7}
 8006f5e:	4770      	bx	lr
 8006f60:	2000000c 	.word	0x2000000c
	...

08006f70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f70:	4b07      	ldr	r3, [pc, #28]	@ (8006f90 <pxCurrentTCBConst2>)
 8006f72:	6819      	ldr	r1, [r3, #0]
 8006f74:	6808      	ldr	r0, [r1, #0]
 8006f76:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8006f7a:	f380 8809 	msr	PSP, r0
 8006f7e:	f3bf 8f6f 	isb	sy
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8811 	msr	BASEPRI, r0
 8006f8a:	f04e 0e0d 	orr.w	lr, lr, #13
 8006f8e:	4770      	bx	lr

08006f90 <pxCurrentTCBConst2>:
 8006f90:	2000095c 	.word	0x2000095c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f94:	bf00      	nop
 8006f96:	bf00      	nop

08006f98 <prvPortStartFirstTask>:
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
 8006f98:	4806      	ldr	r0, [pc, #24]	@ (8006fb4 <prvPortStartFirstTask+0x1c>)
 8006f9a:	6800      	ldr	r0, [r0, #0]
 8006f9c:	6800      	ldr	r0, [r0, #0]
 8006f9e:	f380 8808 	msr	MSP, r0
 8006fa2:	b662      	cpsie	i
 8006fa4:	b661      	cpsie	f
 8006fa6:	f3bf 8f4f 	dsb	sy
 8006faa:	f3bf 8f6f 	isb	sy
 8006fae:	df00      	svc	0
 8006fb0:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006fb2:	bf00      	nop
 8006fb4:	e000ed08 	.word	0xe000ed08

08006fb8 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fbe:	4b32      	ldr	r3, [pc, #200]	@ (8007088 <xPortStartScheduler+0xd0>)
 8006fc0:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fc2:	68fb      	ldr	r3, [r7, #12]
 8006fc4:	781b      	ldrb	r3, [r3, #0]
 8006fc6:	b2db      	uxtb	r3, r3
 8006fc8:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	22ff      	movs	r2, #255	@ 0xff
 8006fce:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	781b      	ldrb	r3, [r3, #0]
 8006fd4:	b2db      	uxtb	r3, r3
 8006fd6:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8006fd8:	78fb      	ldrb	r3, [r7, #3]
 8006fda:	b2db      	uxtb	r3, r3
 8006fdc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8006fe0:	b2da      	uxtb	r2, r3
 8006fe2:	4b2a      	ldr	r3, [pc, #168]	@ (800708c <xPortStartScheduler+0xd4>)
 8006fe4:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8006fe6:	4b2a      	ldr	r3, [pc, #168]	@ (8007090 <xPortStartScheduler+0xd8>)
 8006fe8:	2207      	movs	r2, #7
 8006fea:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8006fec:	e009      	b.n	8007002 <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8006fee:	4b28      	ldr	r3, [pc, #160]	@ (8007090 <xPortStartScheduler+0xd8>)
 8006ff0:	681b      	ldr	r3, [r3, #0]
 8006ff2:	3b01      	subs	r3, #1
 8006ff4:	4a26      	ldr	r2, [pc, #152]	@ (8007090 <xPortStartScheduler+0xd8>)
 8006ff6:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8006ff8:	78fb      	ldrb	r3, [r7, #3]
 8006ffa:	b2db      	uxtb	r3, r3
 8006ffc:	005b      	lsls	r3, r3, #1
 8006ffe:	b2db      	uxtb	r3, r3
 8007000:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007002:	78fb      	ldrb	r3, [r7, #3]
 8007004:	b2db      	uxtb	r3, r3
 8007006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700a:	2b80      	cmp	r3, #128	@ 0x80
 800700c:	d0ef      	beq.n	8006fee <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800700e:	4b20      	ldr	r3, [pc, #128]	@ (8007090 <xPortStartScheduler+0xd8>)
 8007010:	681b      	ldr	r3, [r3, #0]
 8007012:	f1c3 0307 	rsb	r3, r3, #7
 8007016:	2b04      	cmp	r3, #4
 8007018:	d00b      	beq.n	8007032 <xPortStartScheduler+0x7a>
	__asm volatile
 800701a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800701e:	f383 8811 	msr	BASEPRI, r3
 8007022:	f3bf 8f6f 	isb	sy
 8007026:	f3bf 8f4f 	dsb	sy
 800702a:	60bb      	str	r3, [r7, #8]
}
 800702c:	bf00      	nop
 800702e:	bf00      	nop
 8007030:	e7fd      	b.n	800702e <xPortStartScheduler+0x76>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007032:	4b17      	ldr	r3, [pc, #92]	@ (8007090 <xPortStartScheduler+0xd8>)
 8007034:	681b      	ldr	r3, [r3, #0]
 8007036:	021b      	lsls	r3, r3, #8
 8007038:	4a15      	ldr	r2, [pc, #84]	@ (8007090 <xPortStartScheduler+0xd8>)
 800703a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800703c:	4b14      	ldr	r3, [pc, #80]	@ (8007090 <xPortStartScheduler+0xd8>)
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007044:	4a12      	ldr	r2, [pc, #72]	@ (8007090 <xPortStartScheduler+0xd8>)
 8007046:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	b2da      	uxtb	r2, r3
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007050:	4b10      	ldr	r3, [pc, #64]	@ (8007094 <xPortStartScheduler+0xdc>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	4a0f      	ldr	r2, [pc, #60]	@ (8007094 <xPortStartScheduler+0xdc>)
 8007056:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800705a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800705c:	4b0d      	ldr	r3, [pc, #52]	@ (8007094 <xPortStartScheduler+0xdc>)
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	4a0c      	ldr	r2, [pc, #48]	@ (8007094 <xPortStartScheduler+0xdc>)
 8007062:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007066:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007068:	f000 f8b8 	bl	80071dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800706c:	4b0a      	ldr	r3, [pc, #40]	@ (8007098 <xPortStartScheduler+0xe0>)
 800706e:	2200      	movs	r2, #0
 8007070:	601a      	str	r2, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007072:	f7ff ff91 	bl	8006f98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007076:	f7fe fe4b 	bl	8005d10 <vTaskSwitchContext>
	prvTaskExitError();
 800707a:	f7ff ff47 	bl	8006f0c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800707e:	2300      	movs	r3, #0
}
 8007080:	4618      	mov	r0, r3
 8007082:	3710      	adds	r7, #16
 8007084:	46bd      	mov	sp, r7
 8007086:	bd80      	pop	{r7, pc}
 8007088:	e000e400 	.word	0xe000e400
 800708c:	20000f88 	.word	0x20000f88
 8007090:	20000f8c 	.word	0x20000f8c
 8007094:	e000ed20 	.word	0xe000ed20
 8007098:	2000000c 	.word	0x2000000c

0800709c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800709c:	b480      	push	{r7}
 800709e:	b083      	sub	sp, #12
 80070a0:	af00      	add	r7, sp, #0
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	607b      	str	r3, [r7, #4]
}
 80070b4:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 80070b6:	4b0f      	ldr	r3, [pc, #60]	@ (80070f4 <vPortEnterCritical+0x58>)
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	3301      	adds	r3, #1
 80070bc:	4a0d      	ldr	r2, [pc, #52]	@ (80070f4 <vPortEnterCritical+0x58>)
 80070be:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 80070c0:	4b0c      	ldr	r3, [pc, #48]	@ (80070f4 <vPortEnterCritical+0x58>)
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2b01      	cmp	r3, #1
 80070c6:	d110      	bne.n	80070ea <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 80070c8:	4b0b      	ldr	r3, [pc, #44]	@ (80070f8 <vPortEnterCritical+0x5c>)
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	b2db      	uxtb	r3, r3
 80070ce:	2b00      	cmp	r3, #0
 80070d0:	d00b      	beq.n	80070ea <vPortEnterCritical+0x4e>
	__asm volatile
 80070d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070d6:	f383 8811 	msr	BASEPRI, r3
 80070da:	f3bf 8f6f 	isb	sy
 80070de:	f3bf 8f4f 	dsb	sy
 80070e2:	603b      	str	r3, [r7, #0]
}
 80070e4:	bf00      	nop
 80070e6:	bf00      	nop
 80070e8:	e7fd      	b.n	80070e6 <vPortEnterCritical+0x4a>
	}
}
 80070ea:	bf00      	nop
 80070ec:	370c      	adds	r7, #12
 80070ee:	46bd      	mov	sp, r7
 80070f0:	bc80      	pop	{r7}
 80070f2:	4770      	bx	lr
 80070f4:	2000000c 	.word	0x2000000c
 80070f8:	e000ed04 	.word	0xe000ed04

080070fc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80070fc:	b480      	push	{r7}
 80070fe:	b083      	sub	sp, #12
 8007100:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007102:	4b12      	ldr	r3, [pc, #72]	@ (800714c <vPortExitCritical+0x50>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d10b      	bne.n	8007122 <vPortExitCritical+0x26>
	__asm volatile
 800710a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800710e:	f383 8811 	msr	BASEPRI, r3
 8007112:	f3bf 8f6f 	isb	sy
 8007116:	f3bf 8f4f 	dsb	sy
 800711a:	607b      	str	r3, [r7, #4]
}
 800711c:	bf00      	nop
 800711e:	bf00      	nop
 8007120:	e7fd      	b.n	800711e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007122:	4b0a      	ldr	r3, [pc, #40]	@ (800714c <vPortExitCritical+0x50>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	3b01      	subs	r3, #1
 8007128:	4a08      	ldr	r2, [pc, #32]	@ (800714c <vPortExitCritical+0x50>)
 800712a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800712c:	4b07      	ldr	r3, [pc, #28]	@ (800714c <vPortExitCritical+0x50>)
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	2b00      	cmp	r3, #0
 8007132:	d105      	bne.n	8007140 <vPortExitCritical+0x44>
 8007134:	2300      	movs	r3, #0
 8007136:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007138:	683b      	ldr	r3, [r7, #0]
 800713a:	f383 8811 	msr	BASEPRI, r3
}
 800713e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007140:	bf00      	nop
 8007142:	370c      	adds	r7, #12
 8007144:	46bd      	mov	sp, r7
 8007146:	bc80      	pop	{r7}
 8007148:	4770      	bx	lr
 800714a:	bf00      	nop
 800714c:	2000000c 	.word	0x2000000c

08007150 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007150:	f3ef 8009 	mrs	r0, PSP
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	4b0d      	ldr	r3, [pc, #52]	@ (8007190 <pxCurrentTCBConst>)
 800715a:	681a      	ldr	r2, [r3, #0]
 800715c:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007160:	6010      	str	r0, [r2, #0]
 8007162:	e92d 4008 	stmdb	sp!, {r3, lr}
 8007166:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800716a:	f380 8811 	msr	BASEPRI, r0
 800716e:	f7fe fdcf 	bl	8005d10 <vTaskSwitchContext>
 8007172:	f04f 0000 	mov.w	r0, #0
 8007176:	f380 8811 	msr	BASEPRI, r0
 800717a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800717e:	6819      	ldr	r1, [r3, #0]
 8007180:	6808      	ldr	r0, [r1, #0]
 8007182:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
 8007186:	f380 8809 	msr	PSP, r0
 800718a:	f3bf 8f6f 	isb	sy
 800718e:	4770      	bx	lr

08007190 <pxCurrentTCBConst>:
 8007190:	2000095c 	.word	0x2000095c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007194:	bf00      	nop
 8007196:	bf00      	nop

08007198 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007198:	b580      	push	{r7, lr}
 800719a:	b082      	sub	sp, #8
 800719c:	af00      	add	r7, sp, #0
	__asm volatile
 800719e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a2:	f383 8811 	msr	BASEPRI, r3
 80071a6:	f3bf 8f6f 	isb	sy
 80071aa:	f3bf 8f4f 	dsb	sy
 80071ae:	607b      	str	r3, [r7, #4]
}
 80071b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80071b2:	f7fe fcf3 	bl	8005b9c <xTaskIncrementTick>
 80071b6:	4603      	mov	r3, r0
 80071b8:	2b00      	cmp	r3, #0
 80071ba:	d003      	beq.n	80071c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80071bc:	4b06      	ldr	r3, [pc, #24]	@ (80071d8 <xPortSysTickHandler+0x40>)
 80071be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80071c2:	601a      	str	r2, [r3, #0]
 80071c4:	2300      	movs	r3, #0
 80071c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	f383 8811 	msr	BASEPRI, r3
}
 80071ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80071d0:	bf00      	nop
 80071d2:	3708      	adds	r7, #8
 80071d4:	46bd      	mov	sp, r7
 80071d6:	bd80      	pop	{r7, pc}
 80071d8:	e000ed04 	.word	0xe000ed04

080071dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80071dc:	b480      	push	{r7}
 80071de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80071e0:	4b0a      	ldr	r3, [pc, #40]	@ (800720c <vPortSetupTimerInterrupt+0x30>)
 80071e2:	2200      	movs	r2, #0
 80071e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80071e6:	4b0a      	ldr	r3, [pc, #40]	@ (8007210 <vPortSetupTimerInterrupt+0x34>)
 80071e8:	2200      	movs	r2, #0
 80071ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80071ec:	4b09      	ldr	r3, [pc, #36]	@ (8007214 <vPortSetupTimerInterrupt+0x38>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	4a09      	ldr	r2, [pc, #36]	@ (8007218 <vPortSetupTimerInterrupt+0x3c>)
 80071f2:	fba2 2303 	umull	r2, r3, r2, r3
 80071f6:	099b      	lsrs	r3, r3, #6
 80071f8:	4a08      	ldr	r2, [pc, #32]	@ (800721c <vPortSetupTimerInterrupt+0x40>)
 80071fa:	3b01      	subs	r3, #1
 80071fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80071fe:	4b03      	ldr	r3, [pc, #12]	@ (800720c <vPortSetupTimerInterrupt+0x30>)
 8007200:	2207      	movs	r2, #7
 8007202:	601a      	str	r2, [r3, #0]
}
 8007204:	bf00      	nop
 8007206:	46bd      	mov	sp, r7
 8007208:	bc80      	pop	{r7}
 800720a:	4770      	bx	lr
 800720c:	e000e010 	.word	0xe000e010
 8007210:	e000e018 	.word	0xe000e018
 8007214:	20000000 	.word	0x20000000
 8007218:	10624dd3 	.word	0x10624dd3
 800721c:	e000e014 	.word	0xe000e014

08007220 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007226:	f3ef 8305 	mrs	r3, IPSR
 800722a:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	2b0f      	cmp	r3, #15
 8007230:	d915      	bls.n	800725e <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007232:	4a17      	ldr	r2, [pc, #92]	@ (8007290 <vPortValidateInterruptPriority+0x70>)
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	4413      	add	r3, r2
 8007238:	781b      	ldrb	r3, [r3, #0]
 800723a:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800723c:	4b15      	ldr	r3, [pc, #84]	@ (8007294 <vPortValidateInterruptPriority+0x74>)
 800723e:	781b      	ldrb	r3, [r3, #0]
 8007240:	7afa      	ldrb	r2, [r7, #11]
 8007242:	429a      	cmp	r2, r3
 8007244:	d20b      	bcs.n	800725e <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007246:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800724a:	f383 8811 	msr	BASEPRI, r3
 800724e:	f3bf 8f6f 	isb	sy
 8007252:	f3bf 8f4f 	dsb	sy
 8007256:	607b      	str	r3, [r7, #4]
}
 8007258:	bf00      	nop
 800725a:	bf00      	nop
 800725c:	e7fd      	b.n	800725a <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800725e:	4b0e      	ldr	r3, [pc, #56]	@ (8007298 <vPortValidateInterruptPriority+0x78>)
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007266:	4b0d      	ldr	r3, [pc, #52]	@ (800729c <vPortValidateInterruptPriority+0x7c>)
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	429a      	cmp	r2, r3
 800726c:	d90b      	bls.n	8007286 <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800726e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007272:	f383 8811 	msr	BASEPRI, r3
 8007276:	f3bf 8f6f 	isb	sy
 800727a:	f3bf 8f4f 	dsb	sy
 800727e:	603b      	str	r3, [r7, #0]
}
 8007280:	bf00      	nop
 8007282:	bf00      	nop
 8007284:	e7fd      	b.n	8007282 <vPortValidateInterruptPriority+0x62>
	}
 8007286:	bf00      	nop
 8007288:	3714      	adds	r7, #20
 800728a:	46bd      	mov	sp, r7
 800728c:	bc80      	pop	{r7}
 800728e:	4770      	bx	lr
 8007290:	e000e3f0 	.word	0xe000e3f0
 8007294:	20000f88 	.word	0x20000f88
 8007298:	e000ed0c 	.word	0xe000ed0c
 800729c:	20000f8c 	.word	0x20000f8c

080072a0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80072a0:	b580      	push	{r7, lr}
 80072a2:	b08a      	sub	sp, #40	@ 0x28
 80072a4:	af00      	add	r7, sp, #0
 80072a6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80072a8:	2300      	movs	r3, #0
 80072aa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80072ac:	f7fe fbbc 	bl	8005a28 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80072b0:	4b5c      	ldr	r3, [pc, #368]	@ (8007424 <pvPortMalloc+0x184>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d101      	bne.n	80072bc <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80072b8:	f000 f924 	bl	8007504 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80072bc:	4b5a      	ldr	r3, [pc, #360]	@ (8007428 <pvPortMalloc+0x188>)
 80072be:	681a      	ldr	r2, [r3, #0]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	4013      	ands	r3, r2
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	f040 8095 	bne.w	80073f4 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	d01e      	beq.n	800730e <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 80072d0:	2208      	movs	r2, #8
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	4413      	add	r3, r2
 80072d6:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b00      	cmp	r3, #0
 80072e0:	d015      	beq.n	800730e <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	f023 0307 	bic.w	r3, r3, #7
 80072e8:	3308      	adds	r3, #8
 80072ea:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	f003 0307 	and.w	r3, r3, #7
 80072f2:	2b00      	cmp	r3, #0
 80072f4:	d00b      	beq.n	800730e <pvPortMalloc+0x6e>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	617b      	str	r3, [r7, #20]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d06f      	beq.n	80073f4 <pvPortMalloc+0x154>
 8007314:	4b45      	ldr	r3, [pc, #276]	@ (800742c <pvPortMalloc+0x18c>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	687a      	ldr	r2, [r7, #4]
 800731a:	429a      	cmp	r2, r3
 800731c:	d86a      	bhi.n	80073f4 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800731e:	4b44      	ldr	r3, [pc, #272]	@ (8007430 <pvPortMalloc+0x190>)
 8007320:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007322:	4b43      	ldr	r3, [pc, #268]	@ (8007430 <pvPortMalloc+0x190>)
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007328:	e004      	b.n	8007334 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800732a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800732c:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800732e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007330:	681b      	ldr	r3, [r3, #0]
 8007332:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007334:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007336:	685b      	ldr	r3, [r3, #4]
 8007338:	687a      	ldr	r2, [r7, #4]
 800733a:	429a      	cmp	r2, r3
 800733c:	d903      	bls.n	8007346 <pvPortMalloc+0xa6>
 800733e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	2b00      	cmp	r3, #0
 8007344:	d1f1      	bne.n	800732a <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007346:	4b37      	ldr	r3, [pc, #220]	@ (8007424 <pvPortMalloc+0x184>)
 8007348:	681b      	ldr	r3, [r3, #0]
 800734a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800734c:	429a      	cmp	r2, r3
 800734e:	d051      	beq.n	80073f4 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007350:	6a3b      	ldr	r3, [r7, #32]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	2208      	movs	r2, #8
 8007356:	4413      	add	r3, r2
 8007358:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800735a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800735c:	681a      	ldr	r2, [r3, #0]
 800735e:	6a3b      	ldr	r3, [r7, #32]
 8007360:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	685a      	ldr	r2, [r3, #4]
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	1ad2      	subs	r2, r2, r3
 800736a:	2308      	movs	r3, #8
 800736c:	005b      	lsls	r3, r3, #1
 800736e:	429a      	cmp	r2, r3
 8007370:	d920      	bls.n	80073b4 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007372:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	4413      	add	r3, r2
 8007378:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800737a:	69bb      	ldr	r3, [r7, #24]
 800737c:	f003 0307 	and.w	r3, r3, #7
 8007380:	2b00      	cmp	r3, #0
 8007382:	d00b      	beq.n	800739c <pvPortMalloc+0xfc>
	__asm volatile
 8007384:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007388:	f383 8811 	msr	BASEPRI, r3
 800738c:	f3bf 8f6f 	isb	sy
 8007390:	f3bf 8f4f 	dsb	sy
 8007394:	613b      	str	r3, [r7, #16]
}
 8007396:	bf00      	nop
 8007398:	bf00      	nop
 800739a:	e7fd      	b.n	8007398 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800739c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800739e:	685a      	ldr	r2, [r3, #4]
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	1ad2      	subs	r2, r2, r3
 80073a4:	69bb      	ldr	r3, [r7, #24]
 80073a6:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80073a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073aa:	687a      	ldr	r2, [r7, #4]
 80073ac:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80073ae:	69b8      	ldr	r0, [r7, #24]
 80073b0:	f000 f90a 	bl	80075c8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80073b4:	4b1d      	ldr	r3, [pc, #116]	@ (800742c <pvPortMalloc+0x18c>)
 80073b6:	681a      	ldr	r2, [r3, #0]
 80073b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073ba:	685b      	ldr	r3, [r3, #4]
 80073bc:	1ad3      	subs	r3, r2, r3
 80073be:	4a1b      	ldr	r2, [pc, #108]	@ (800742c <pvPortMalloc+0x18c>)
 80073c0:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80073c2:	4b1a      	ldr	r3, [pc, #104]	@ (800742c <pvPortMalloc+0x18c>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	4b1b      	ldr	r3, [pc, #108]	@ (8007434 <pvPortMalloc+0x194>)
 80073c8:	681b      	ldr	r3, [r3, #0]
 80073ca:	429a      	cmp	r2, r3
 80073cc:	d203      	bcs.n	80073d6 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80073ce:	4b17      	ldr	r3, [pc, #92]	@ (800742c <pvPortMalloc+0x18c>)
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	4a18      	ldr	r2, [pc, #96]	@ (8007434 <pvPortMalloc+0x194>)
 80073d4:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80073d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073d8:	685a      	ldr	r2, [r3, #4]
 80073da:	4b13      	ldr	r3, [pc, #76]	@ (8007428 <pvPortMalloc+0x188>)
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	431a      	orrs	r2, r3
 80073e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e2:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80073e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e6:	2200      	movs	r2, #0
 80073e8:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80073ea:	4b13      	ldr	r3, [pc, #76]	@ (8007438 <pvPortMalloc+0x198>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	3301      	adds	r3, #1
 80073f0:	4a11      	ldr	r2, [pc, #68]	@ (8007438 <pvPortMalloc+0x198>)
 80073f2:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80073f4:	f7fe fb26 	bl	8005a44 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80073f8:	69fb      	ldr	r3, [r7, #28]
 80073fa:	f003 0307 	and.w	r3, r3, #7
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d00b      	beq.n	800741a <pvPortMalloc+0x17a>
	__asm volatile
 8007402:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007406:	f383 8811 	msr	BASEPRI, r3
 800740a:	f3bf 8f6f 	isb	sy
 800740e:	f3bf 8f4f 	dsb	sy
 8007412:	60fb      	str	r3, [r7, #12]
}
 8007414:	bf00      	nop
 8007416:	bf00      	nop
 8007418:	e7fd      	b.n	8007416 <pvPortMalloc+0x176>
	return pvReturn;
 800741a:	69fb      	ldr	r3, [r7, #28]
}
 800741c:	4618      	mov	r0, r3
 800741e:	3728      	adds	r7, #40	@ 0x28
 8007420:	46bd      	mov	sp, r7
 8007422:	bd80      	pop	{r7, pc}
 8007424:	20001b98 	.word	0x20001b98
 8007428:	20001bac 	.word	0x20001bac
 800742c:	20001b9c 	.word	0x20001b9c
 8007430:	20001b90 	.word	0x20001b90
 8007434:	20001ba0 	.word	0x20001ba0
 8007438:	20001ba4 	.word	0x20001ba4

0800743c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800743c:	b580      	push	{r7, lr}
 800743e:	b086      	sub	sp, #24
 8007440:	af00      	add	r7, sp, #0
 8007442:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007448:	687b      	ldr	r3, [r7, #4]
 800744a:	2b00      	cmp	r3, #0
 800744c:	d04f      	beq.n	80074ee <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800744e:	2308      	movs	r3, #8
 8007450:	425b      	negs	r3, r3
 8007452:	697a      	ldr	r2, [r7, #20]
 8007454:	4413      	add	r3, r2
 8007456:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007458:	697b      	ldr	r3, [r7, #20]
 800745a:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800745c:	693b      	ldr	r3, [r7, #16]
 800745e:	685a      	ldr	r2, [r3, #4]
 8007460:	4b25      	ldr	r3, [pc, #148]	@ (80074f8 <vPortFree+0xbc>)
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	4013      	ands	r3, r2
 8007466:	2b00      	cmp	r3, #0
 8007468:	d10b      	bne.n	8007482 <vPortFree+0x46>
	__asm volatile
 800746a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800746e:	f383 8811 	msr	BASEPRI, r3
 8007472:	f3bf 8f6f 	isb	sy
 8007476:	f3bf 8f4f 	dsb	sy
 800747a:	60fb      	str	r3, [r7, #12]
}
 800747c:	bf00      	nop
 800747e:	bf00      	nop
 8007480:	e7fd      	b.n	800747e <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007482:	693b      	ldr	r3, [r7, #16]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d00b      	beq.n	80074a2 <vPortFree+0x66>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	60bb      	str	r3, [r7, #8]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80074a2:	693b      	ldr	r3, [r7, #16]
 80074a4:	685a      	ldr	r2, [r3, #4]
 80074a6:	4b14      	ldr	r3, [pc, #80]	@ (80074f8 <vPortFree+0xbc>)
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	4013      	ands	r3, r2
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d01e      	beq.n	80074ee <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80074b0:	693b      	ldr	r3, [r7, #16]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	2b00      	cmp	r3, #0
 80074b6:	d11a      	bne.n	80074ee <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80074b8:	693b      	ldr	r3, [r7, #16]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	4b0e      	ldr	r3, [pc, #56]	@ (80074f8 <vPortFree+0xbc>)
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	43db      	mvns	r3, r3
 80074c2:	401a      	ands	r2, r3
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80074c8:	f7fe faae 	bl	8005a28 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80074cc:	693b      	ldr	r3, [r7, #16]
 80074ce:	685a      	ldr	r2, [r3, #4]
 80074d0:	4b0a      	ldr	r3, [pc, #40]	@ (80074fc <vPortFree+0xc0>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4413      	add	r3, r2
 80074d6:	4a09      	ldr	r2, [pc, #36]	@ (80074fc <vPortFree+0xc0>)
 80074d8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80074da:	6938      	ldr	r0, [r7, #16]
 80074dc:	f000 f874 	bl	80075c8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80074e0:	4b07      	ldr	r3, [pc, #28]	@ (8007500 <vPortFree+0xc4>)
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	3301      	adds	r3, #1
 80074e6:	4a06      	ldr	r2, [pc, #24]	@ (8007500 <vPortFree+0xc4>)
 80074e8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80074ea:	f7fe faab 	bl	8005a44 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80074ee:	bf00      	nop
 80074f0:	3718      	adds	r7, #24
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	20001bac 	.word	0x20001bac
 80074fc:	20001b9c 	.word	0x20001b9c
 8007500:	20001ba8 	.word	0x20001ba8

08007504 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007504:	b480      	push	{r7}
 8007506:	b085      	sub	sp, #20
 8007508:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800750a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800750e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007510:	4b27      	ldr	r3, [pc, #156]	@ (80075b0 <prvHeapInit+0xac>)
 8007512:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	f003 0307 	and.w	r3, r3, #7
 800751a:	2b00      	cmp	r3, #0
 800751c:	d00c      	beq.n	8007538 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	3307      	adds	r3, #7
 8007522:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	f023 0307 	bic.w	r3, r3, #7
 800752a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800752c:	68ba      	ldr	r2, [r7, #8]
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	1ad3      	subs	r3, r2, r3
 8007532:	4a1f      	ldr	r2, [pc, #124]	@ (80075b0 <prvHeapInit+0xac>)
 8007534:	4413      	add	r3, r2
 8007536:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800753c:	4a1d      	ldr	r2, [pc, #116]	@ (80075b4 <prvHeapInit+0xb0>)
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007542:	4b1c      	ldr	r3, [pc, #112]	@ (80075b4 <prvHeapInit+0xb0>)
 8007544:	2200      	movs	r2, #0
 8007546:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	68ba      	ldr	r2, [r7, #8]
 800754c:	4413      	add	r3, r2
 800754e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007550:	2208      	movs	r2, #8
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	1a9b      	subs	r3, r3, r2
 8007556:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	f023 0307 	bic.w	r3, r3, #7
 800755e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	4a15      	ldr	r2, [pc, #84]	@ (80075b8 <prvHeapInit+0xb4>)
 8007564:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007566:	4b14      	ldr	r3, [pc, #80]	@ (80075b8 <prvHeapInit+0xb4>)
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	2200      	movs	r2, #0
 800756c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800756e:	4b12      	ldr	r3, [pc, #72]	@ (80075b8 <prvHeapInit+0xb4>)
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	2200      	movs	r2, #0
 8007574:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800757a:	683b      	ldr	r3, [r7, #0]
 800757c:	68fa      	ldr	r2, [r7, #12]
 800757e:	1ad2      	subs	r2, r2, r3
 8007580:	683b      	ldr	r3, [r7, #0]
 8007582:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007584:	4b0c      	ldr	r3, [pc, #48]	@ (80075b8 <prvHeapInit+0xb4>)
 8007586:	681a      	ldr	r2, [r3, #0]
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	685b      	ldr	r3, [r3, #4]
 8007590:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <prvHeapInit+0xb8>)
 8007592:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	685b      	ldr	r3, [r3, #4]
 8007598:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <prvHeapInit+0xbc>)
 800759a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800759c:	4b09      	ldr	r3, [pc, #36]	@ (80075c4 <prvHeapInit+0xc0>)
 800759e:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	3714      	adds	r7, #20
 80075a8:	46bd      	mov	sp, r7
 80075aa:	bc80      	pop	{r7}
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	20000f90 	.word	0x20000f90
 80075b4:	20001b90 	.word	0x20001b90
 80075b8:	20001b98 	.word	0x20001b98
 80075bc:	20001ba0 	.word	0x20001ba0
 80075c0:	20001b9c 	.word	0x20001b9c
 80075c4:	20001bac 	.word	0x20001bac

080075c8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80075c8:	b480      	push	{r7}
 80075ca:	b085      	sub	sp, #20
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80075d0:	4b27      	ldr	r3, [pc, #156]	@ (8007670 <prvInsertBlockIntoFreeList+0xa8>)
 80075d2:	60fb      	str	r3, [r7, #12]
 80075d4:	e002      	b.n	80075dc <prvInsertBlockIntoFreeList+0x14>
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	60fb      	str	r3, [r7, #12]
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	687a      	ldr	r2, [r7, #4]
 80075e2:	429a      	cmp	r2, r3
 80075e4:	d8f7      	bhi.n	80075d6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	685b      	ldr	r3, [r3, #4]
 80075ee:	68ba      	ldr	r2, [r7, #8]
 80075f0:	4413      	add	r3, r2
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d108      	bne.n	800760a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	685a      	ldr	r2, [r3, #4]
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	685b      	ldr	r3, [r3, #4]
 8007600:	441a      	add	r2, r3
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	685b      	ldr	r3, [r3, #4]
 8007612:	68ba      	ldr	r2, [r7, #8]
 8007614:	441a      	add	r2, r3
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	429a      	cmp	r2, r3
 800761c:	d118      	bne.n	8007650 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	4b14      	ldr	r3, [pc, #80]	@ (8007674 <prvInsertBlockIntoFreeList+0xac>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	429a      	cmp	r2, r3
 8007628:	d00d      	beq.n	8007646 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	685a      	ldr	r2, [r3, #4]
 800762e:	68fb      	ldr	r3, [r7, #12]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	685b      	ldr	r3, [r3, #4]
 8007634:	441a      	add	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	681a      	ldr	r2, [r3, #0]
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	601a      	str	r2, [r3, #0]
 8007644:	e008      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007646:	4b0b      	ldr	r3, [pc, #44]	@ (8007674 <prvInsertBlockIntoFreeList+0xac>)
 8007648:	681a      	ldr	r2, [r3, #0]
 800764a:	687b      	ldr	r3, [r7, #4]
 800764c:	601a      	str	r2, [r3, #0]
 800764e:	e003      	b.n	8007658 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007650:	68fb      	ldr	r3, [r7, #12]
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007658:	68fa      	ldr	r2, [r7, #12]
 800765a:	687b      	ldr	r3, [r7, #4]
 800765c:	429a      	cmp	r2, r3
 800765e:	d002      	beq.n	8007666 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007660:	68fb      	ldr	r3, [r7, #12]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007666:	bf00      	nop
 8007668:	3714      	adds	r7, #20
 800766a:	46bd      	mov	sp, r7
 800766c:	bc80      	pop	{r7}
 800766e:	4770      	bx	lr
 8007670:	20001b90 	.word	0x20001b90
 8007674:	20001b98 	.word	0x20001b98

08007678 <rand>:
 8007678:	4b16      	ldr	r3, [pc, #88]	@ (80076d4 <rand+0x5c>)
 800767a:	b510      	push	{r4, lr}
 800767c:	681c      	ldr	r4, [r3, #0]
 800767e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8007680:	b9b3      	cbnz	r3, 80076b0 <rand+0x38>
 8007682:	2018      	movs	r0, #24
 8007684:	f001 fd6c 	bl	8009160 <malloc>
 8007688:	4602      	mov	r2, r0
 800768a:	6320      	str	r0, [r4, #48]	@ 0x30
 800768c:	b920      	cbnz	r0, 8007698 <rand+0x20>
 800768e:	2152      	movs	r1, #82	@ 0x52
 8007690:	4b11      	ldr	r3, [pc, #68]	@ (80076d8 <rand+0x60>)
 8007692:	4812      	ldr	r0, [pc, #72]	@ (80076dc <rand+0x64>)
 8007694:	f000 feae 	bl	80083f4 <__assert_func>
 8007698:	4911      	ldr	r1, [pc, #68]	@ (80076e0 <rand+0x68>)
 800769a:	4b12      	ldr	r3, [pc, #72]	@ (80076e4 <rand+0x6c>)
 800769c:	e9c0 1300 	strd	r1, r3, [r0]
 80076a0:	4b11      	ldr	r3, [pc, #68]	@ (80076e8 <rand+0x70>)
 80076a2:	2100      	movs	r1, #0
 80076a4:	6083      	str	r3, [r0, #8]
 80076a6:	230b      	movs	r3, #11
 80076a8:	8183      	strh	r3, [r0, #12]
 80076aa:	2001      	movs	r0, #1
 80076ac:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80076b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80076b2:	480e      	ldr	r0, [pc, #56]	@ (80076ec <rand+0x74>)
 80076b4:	690b      	ldr	r3, [r1, #16]
 80076b6:	694c      	ldr	r4, [r1, #20]
 80076b8:	4358      	muls	r0, r3
 80076ba:	4a0d      	ldr	r2, [pc, #52]	@ (80076f0 <rand+0x78>)
 80076bc:	fb02 0004 	mla	r0, r2, r4, r0
 80076c0:	fba3 3202 	umull	r3, r2, r3, r2
 80076c4:	3301      	adds	r3, #1
 80076c6:	eb40 0002 	adc.w	r0, r0, r2
 80076ca:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80076ce:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80076d2:	bd10      	pop	{r4, pc}
 80076d4:	2000001c 	.word	0x2000001c
 80076d8:	0800af5e 	.word	0x0800af5e
 80076dc:	0800af75 	.word	0x0800af75
 80076e0:	abcd330e 	.word	0xabcd330e
 80076e4:	e66d1234 	.word	0xe66d1234
 80076e8:	0005deec 	.word	0x0005deec
 80076ec:	5851f42d 	.word	0x5851f42d
 80076f0:	4c957f2d 	.word	0x4c957f2d

080076f4 <__cvt>:
 80076f4:	2b00      	cmp	r3, #0
 80076f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80076fa:	461d      	mov	r5, r3
 80076fc:	bfbb      	ittet	lt
 80076fe:	f103 4300 	addlt.w	r3, r3, #2147483648	@ 0x80000000
 8007702:	461d      	movlt	r5, r3
 8007704:	2300      	movge	r3, #0
 8007706:	232d      	movlt	r3, #45	@ 0x2d
 8007708:	b088      	sub	sp, #32
 800770a:	4614      	mov	r4, r2
 800770c:	bfb8      	it	lt
 800770e:	4614      	movlt	r4, r2
 8007710:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007712:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007714:	7013      	strb	r3, [r2, #0]
 8007716:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007718:	f8dd a04c 	ldr.w	sl, [sp, #76]	@ 0x4c
 800771c:	f023 0820 	bic.w	r8, r3, #32
 8007720:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8007724:	d005      	beq.n	8007732 <__cvt+0x3e>
 8007726:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800772a:	d100      	bne.n	800772e <__cvt+0x3a>
 800772c:	3601      	adds	r6, #1
 800772e:	2302      	movs	r3, #2
 8007730:	e000      	b.n	8007734 <__cvt+0x40>
 8007732:	2303      	movs	r3, #3
 8007734:	aa07      	add	r2, sp, #28
 8007736:	9204      	str	r2, [sp, #16]
 8007738:	aa06      	add	r2, sp, #24
 800773a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800773e:	e9cd 3600 	strd	r3, r6, [sp]
 8007742:	4622      	mov	r2, r4
 8007744:	462b      	mov	r3, r5
 8007746:	f000 fefb 	bl	8008540 <_dtoa_r>
 800774a:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800774e:	4607      	mov	r7, r0
 8007750:	d119      	bne.n	8007786 <__cvt+0x92>
 8007752:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007754:	07db      	lsls	r3, r3, #31
 8007756:	d50e      	bpl.n	8007776 <__cvt+0x82>
 8007758:	eb00 0906 	add.w	r9, r0, r6
 800775c:	2200      	movs	r2, #0
 800775e:	2300      	movs	r3, #0
 8007760:	4620      	mov	r0, r4
 8007762:	4629      	mov	r1, r5
 8007764:	f7f9 f92a 	bl	80009bc <__aeabi_dcmpeq>
 8007768:	b108      	cbz	r0, 800776e <__cvt+0x7a>
 800776a:	f8cd 901c 	str.w	r9, [sp, #28]
 800776e:	2230      	movs	r2, #48	@ 0x30
 8007770:	9b07      	ldr	r3, [sp, #28]
 8007772:	454b      	cmp	r3, r9
 8007774:	d31e      	bcc.n	80077b4 <__cvt+0xc0>
 8007776:	4638      	mov	r0, r7
 8007778:	9b07      	ldr	r3, [sp, #28]
 800777a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 800777c:	1bdb      	subs	r3, r3, r7
 800777e:	6013      	str	r3, [r2, #0]
 8007780:	b008      	add	sp, #32
 8007782:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007786:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800778a:	eb00 0906 	add.w	r9, r0, r6
 800778e:	d1e5      	bne.n	800775c <__cvt+0x68>
 8007790:	7803      	ldrb	r3, [r0, #0]
 8007792:	2b30      	cmp	r3, #48	@ 0x30
 8007794:	d10a      	bne.n	80077ac <__cvt+0xb8>
 8007796:	2200      	movs	r2, #0
 8007798:	2300      	movs	r3, #0
 800779a:	4620      	mov	r0, r4
 800779c:	4629      	mov	r1, r5
 800779e:	f7f9 f90d 	bl	80009bc <__aeabi_dcmpeq>
 80077a2:	b918      	cbnz	r0, 80077ac <__cvt+0xb8>
 80077a4:	f1c6 0601 	rsb	r6, r6, #1
 80077a8:	f8ca 6000 	str.w	r6, [sl]
 80077ac:	f8da 3000 	ldr.w	r3, [sl]
 80077b0:	4499      	add	r9, r3
 80077b2:	e7d3      	b.n	800775c <__cvt+0x68>
 80077b4:	1c59      	adds	r1, r3, #1
 80077b6:	9107      	str	r1, [sp, #28]
 80077b8:	701a      	strb	r2, [r3, #0]
 80077ba:	e7d9      	b.n	8007770 <__cvt+0x7c>

080077bc <__exponent>:
 80077bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80077be:	2900      	cmp	r1, #0
 80077c0:	bfb6      	itet	lt
 80077c2:	232d      	movlt	r3, #45	@ 0x2d
 80077c4:	232b      	movge	r3, #43	@ 0x2b
 80077c6:	4249      	neglt	r1, r1
 80077c8:	2909      	cmp	r1, #9
 80077ca:	7002      	strb	r2, [r0, #0]
 80077cc:	7043      	strb	r3, [r0, #1]
 80077ce:	dd29      	ble.n	8007824 <__exponent+0x68>
 80077d0:	f10d 0307 	add.w	r3, sp, #7
 80077d4:	461d      	mov	r5, r3
 80077d6:	270a      	movs	r7, #10
 80077d8:	fbb1 f6f7 	udiv	r6, r1, r7
 80077dc:	461a      	mov	r2, r3
 80077de:	fb07 1416 	mls	r4, r7, r6, r1
 80077e2:	3430      	adds	r4, #48	@ 0x30
 80077e4:	f802 4c01 	strb.w	r4, [r2, #-1]
 80077e8:	460c      	mov	r4, r1
 80077ea:	2c63      	cmp	r4, #99	@ 0x63
 80077ec:	4631      	mov	r1, r6
 80077ee:	f103 33ff 	add.w	r3, r3, #4294967295
 80077f2:	dcf1      	bgt.n	80077d8 <__exponent+0x1c>
 80077f4:	3130      	adds	r1, #48	@ 0x30
 80077f6:	1e94      	subs	r4, r2, #2
 80077f8:	f803 1c01 	strb.w	r1, [r3, #-1]
 80077fc:	4623      	mov	r3, r4
 80077fe:	1c41      	adds	r1, r0, #1
 8007800:	42ab      	cmp	r3, r5
 8007802:	d30a      	bcc.n	800781a <__exponent+0x5e>
 8007804:	f10d 0309 	add.w	r3, sp, #9
 8007808:	1a9b      	subs	r3, r3, r2
 800780a:	42ac      	cmp	r4, r5
 800780c:	bf88      	it	hi
 800780e:	2300      	movhi	r3, #0
 8007810:	3302      	adds	r3, #2
 8007812:	4403      	add	r3, r0
 8007814:	1a18      	subs	r0, r3, r0
 8007816:	b003      	add	sp, #12
 8007818:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800781a:	f813 6b01 	ldrb.w	r6, [r3], #1
 800781e:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007822:	e7ed      	b.n	8007800 <__exponent+0x44>
 8007824:	2330      	movs	r3, #48	@ 0x30
 8007826:	3130      	adds	r1, #48	@ 0x30
 8007828:	7083      	strb	r3, [r0, #2]
 800782a:	70c1      	strb	r1, [r0, #3]
 800782c:	1d03      	adds	r3, r0, #4
 800782e:	e7f1      	b.n	8007814 <__exponent+0x58>

08007830 <_printf_float>:
 8007830:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007834:	b091      	sub	sp, #68	@ 0x44
 8007836:	460c      	mov	r4, r1
 8007838:	f8dd 8068 	ldr.w	r8, [sp, #104]	@ 0x68
 800783c:	4616      	mov	r6, r2
 800783e:	461f      	mov	r7, r3
 8007840:	4605      	mov	r5, r0
 8007842:	f000 fd43 	bl	80082cc <_localeconv_r>
 8007846:	6803      	ldr	r3, [r0, #0]
 8007848:	4618      	mov	r0, r3
 800784a:	9308      	str	r3, [sp, #32]
 800784c:	f7f8 fc8a 	bl	8000164 <strlen>
 8007850:	2300      	movs	r3, #0
 8007852:	930e      	str	r3, [sp, #56]	@ 0x38
 8007854:	f8d8 3000 	ldr.w	r3, [r8]
 8007858:	9009      	str	r0, [sp, #36]	@ 0x24
 800785a:	3307      	adds	r3, #7
 800785c:	f023 0307 	bic.w	r3, r3, #7
 8007860:	f103 0208 	add.w	r2, r3, #8
 8007864:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007868:	f8d4 b000 	ldr.w	fp, [r4]
 800786c:	f8c8 2000 	str.w	r2, [r8]
 8007870:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007874:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8007878:	930b      	str	r3, [sp, #44]	@ 0x2c
 800787a:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 800787e:	f04f 32ff 	mov.w	r2, #4294967295
 8007882:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007886:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800788a:	4b9c      	ldr	r3, [pc, #624]	@ (8007afc <_printf_float+0x2cc>)
 800788c:	f7f9 f8c8 	bl	8000a20 <__aeabi_dcmpun>
 8007890:	bb70      	cbnz	r0, 80078f0 <_printf_float+0xc0>
 8007892:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007896:	f04f 32ff 	mov.w	r2, #4294967295
 800789a:	4b98      	ldr	r3, [pc, #608]	@ (8007afc <_printf_float+0x2cc>)
 800789c:	f7f9 f8a2 	bl	80009e4 <__aeabi_dcmple>
 80078a0:	bb30      	cbnz	r0, 80078f0 <_printf_float+0xc0>
 80078a2:	2200      	movs	r2, #0
 80078a4:	2300      	movs	r3, #0
 80078a6:	4640      	mov	r0, r8
 80078a8:	4649      	mov	r1, r9
 80078aa:	f7f9 f891 	bl	80009d0 <__aeabi_dcmplt>
 80078ae:	b110      	cbz	r0, 80078b6 <_printf_float+0x86>
 80078b0:	232d      	movs	r3, #45	@ 0x2d
 80078b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80078b6:	4a92      	ldr	r2, [pc, #584]	@ (8007b00 <_printf_float+0x2d0>)
 80078b8:	4b92      	ldr	r3, [pc, #584]	@ (8007b04 <_printf_float+0x2d4>)
 80078ba:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80078be:	bf94      	ite	ls
 80078c0:	4690      	movls	r8, r2
 80078c2:	4698      	movhi	r8, r3
 80078c4:	2303      	movs	r3, #3
 80078c6:	f04f 0900 	mov.w	r9, #0
 80078ca:	6123      	str	r3, [r4, #16]
 80078cc:	f02b 0304 	bic.w	r3, fp, #4
 80078d0:	6023      	str	r3, [r4, #0]
 80078d2:	4633      	mov	r3, r6
 80078d4:	4621      	mov	r1, r4
 80078d6:	4628      	mov	r0, r5
 80078d8:	9700      	str	r7, [sp, #0]
 80078da:	aa0f      	add	r2, sp, #60	@ 0x3c
 80078dc:	f000 f9d4 	bl	8007c88 <_printf_common>
 80078e0:	3001      	adds	r0, #1
 80078e2:	f040 8090 	bne.w	8007a06 <_printf_float+0x1d6>
 80078e6:	f04f 30ff 	mov.w	r0, #4294967295
 80078ea:	b011      	add	sp, #68	@ 0x44
 80078ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80078f0:	4642      	mov	r2, r8
 80078f2:	464b      	mov	r3, r9
 80078f4:	4640      	mov	r0, r8
 80078f6:	4649      	mov	r1, r9
 80078f8:	f7f9 f892 	bl	8000a20 <__aeabi_dcmpun>
 80078fc:	b148      	cbz	r0, 8007912 <_printf_float+0xe2>
 80078fe:	464b      	mov	r3, r9
 8007900:	2b00      	cmp	r3, #0
 8007902:	bfb8      	it	lt
 8007904:	232d      	movlt	r3, #45	@ 0x2d
 8007906:	4a80      	ldr	r2, [pc, #512]	@ (8007b08 <_printf_float+0x2d8>)
 8007908:	bfb8      	it	lt
 800790a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800790e:	4b7f      	ldr	r3, [pc, #508]	@ (8007b0c <_printf_float+0x2dc>)
 8007910:	e7d3      	b.n	80078ba <_printf_float+0x8a>
 8007912:	6863      	ldr	r3, [r4, #4]
 8007914:	f00a 01df 	and.w	r1, sl, #223	@ 0xdf
 8007918:	1c5a      	adds	r2, r3, #1
 800791a:	d13f      	bne.n	800799c <_printf_float+0x16c>
 800791c:	2306      	movs	r3, #6
 800791e:	6063      	str	r3, [r4, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f44b 6380 	orr.w	r3, fp, #1024	@ 0x400
 8007926:	6023      	str	r3, [r4, #0]
 8007928:	9206      	str	r2, [sp, #24]
 800792a:	aa0e      	add	r2, sp, #56	@ 0x38
 800792c:	e9cd a204 	strd	sl, r2, [sp, #16]
 8007930:	aa0d      	add	r2, sp, #52	@ 0x34
 8007932:	9203      	str	r2, [sp, #12]
 8007934:	f10d 0233 	add.w	r2, sp, #51	@ 0x33
 8007938:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800793c:	6863      	ldr	r3, [r4, #4]
 800793e:	4642      	mov	r2, r8
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	4628      	mov	r0, r5
 8007944:	464b      	mov	r3, r9
 8007946:	910a      	str	r1, [sp, #40]	@ 0x28
 8007948:	f7ff fed4 	bl	80076f4 <__cvt>
 800794c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800794e:	4680      	mov	r8, r0
 8007950:	2947      	cmp	r1, #71	@ 0x47
 8007952:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007954:	d128      	bne.n	80079a8 <_printf_float+0x178>
 8007956:	1cc8      	adds	r0, r1, #3
 8007958:	db02      	blt.n	8007960 <_printf_float+0x130>
 800795a:	6863      	ldr	r3, [r4, #4]
 800795c:	4299      	cmp	r1, r3
 800795e:	dd40      	ble.n	80079e2 <_printf_float+0x1b2>
 8007960:	f1aa 0a02 	sub.w	sl, sl, #2
 8007964:	fa5f fa8a 	uxtb.w	sl, sl
 8007968:	4652      	mov	r2, sl
 800796a:	3901      	subs	r1, #1
 800796c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8007970:	910d      	str	r1, [sp, #52]	@ 0x34
 8007972:	f7ff ff23 	bl	80077bc <__exponent>
 8007976:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007978:	4681      	mov	r9, r0
 800797a:	1813      	adds	r3, r2, r0
 800797c:	2a01      	cmp	r2, #1
 800797e:	6123      	str	r3, [r4, #16]
 8007980:	dc02      	bgt.n	8007988 <_printf_float+0x158>
 8007982:	6822      	ldr	r2, [r4, #0]
 8007984:	07d2      	lsls	r2, r2, #31
 8007986:	d501      	bpl.n	800798c <_printf_float+0x15c>
 8007988:	3301      	adds	r3, #1
 800798a:	6123      	str	r3, [r4, #16]
 800798c:	f89d 3033 	ldrb.w	r3, [sp, #51]	@ 0x33
 8007990:	2b00      	cmp	r3, #0
 8007992:	d09e      	beq.n	80078d2 <_printf_float+0xa2>
 8007994:	232d      	movs	r3, #45	@ 0x2d
 8007996:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800799a:	e79a      	b.n	80078d2 <_printf_float+0xa2>
 800799c:	2947      	cmp	r1, #71	@ 0x47
 800799e:	d1bf      	bne.n	8007920 <_printf_float+0xf0>
 80079a0:	2b00      	cmp	r3, #0
 80079a2:	d1bd      	bne.n	8007920 <_printf_float+0xf0>
 80079a4:	2301      	movs	r3, #1
 80079a6:	e7ba      	b.n	800791e <_printf_float+0xee>
 80079a8:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80079ac:	d9dc      	bls.n	8007968 <_printf_float+0x138>
 80079ae:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80079b2:	d118      	bne.n	80079e6 <_printf_float+0x1b6>
 80079b4:	2900      	cmp	r1, #0
 80079b6:	6863      	ldr	r3, [r4, #4]
 80079b8:	dd0b      	ble.n	80079d2 <_printf_float+0x1a2>
 80079ba:	6121      	str	r1, [r4, #16]
 80079bc:	b913      	cbnz	r3, 80079c4 <_printf_float+0x194>
 80079be:	6822      	ldr	r2, [r4, #0]
 80079c0:	07d0      	lsls	r0, r2, #31
 80079c2:	d502      	bpl.n	80079ca <_printf_float+0x19a>
 80079c4:	3301      	adds	r3, #1
 80079c6:	440b      	add	r3, r1
 80079c8:	6123      	str	r3, [r4, #16]
 80079ca:	f04f 0900 	mov.w	r9, #0
 80079ce:	65a1      	str	r1, [r4, #88]	@ 0x58
 80079d0:	e7dc      	b.n	800798c <_printf_float+0x15c>
 80079d2:	b913      	cbnz	r3, 80079da <_printf_float+0x1aa>
 80079d4:	6822      	ldr	r2, [r4, #0]
 80079d6:	07d2      	lsls	r2, r2, #31
 80079d8:	d501      	bpl.n	80079de <_printf_float+0x1ae>
 80079da:	3302      	adds	r3, #2
 80079dc:	e7f4      	b.n	80079c8 <_printf_float+0x198>
 80079de:	2301      	movs	r3, #1
 80079e0:	e7f2      	b.n	80079c8 <_printf_float+0x198>
 80079e2:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80079e6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80079e8:	4299      	cmp	r1, r3
 80079ea:	db05      	blt.n	80079f8 <_printf_float+0x1c8>
 80079ec:	6823      	ldr	r3, [r4, #0]
 80079ee:	6121      	str	r1, [r4, #16]
 80079f0:	07d8      	lsls	r0, r3, #31
 80079f2:	d5ea      	bpl.n	80079ca <_printf_float+0x19a>
 80079f4:	1c4b      	adds	r3, r1, #1
 80079f6:	e7e7      	b.n	80079c8 <_printf_float+0x198>
 80079f8:	2900      	cmp	r1, #0
 80079fa:	bfcc      	ite	gt
 80079fc:	2201      	movgt	r2, #1
 80079fe:	f1c1 0202 	rsble	r2, r1, #2
 8007a02:	4413      	add	r3, r2
 8007a04:	e7e0      	b.n	80079c8 <_printf_float+0x198>
 8007a06:	6823      	ldr	r3, [r4, #0]
 8007a08:	055a      	lsls	r2, r3, #21
 8007a0a:	d407      	bmi.n	8007a1c <_printf_float+0x1ec>
 8007a0c:	6923      	ldr	r3, [r4, #16]
 8007a0e:	4642      	mov	r2, r8
 8007a10:	4631      	mov	r1, r6
 8007a12:	4628      	mov	r0, r5
 8007a14:	47b8      	blx	r7
 8007a16:	3001      	adds	r0, #1
 8007a18:	d12b      	bne.n	8007a72 <_printf_float+0x242>
 8007a1a:	e764      	b.n	80078e6 <_printf_float+0xb6>
 8007a1c:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8007a20:	f240 80dc 	bls.w	8007bdc <_printf_float+0x3ac>
 8007a24:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007a28:	2200      	movs	r2, #0
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	f7f8 ffc6 	bl	80009bc <__aeabi_dcmpeq>
 8007a30:	2800      	cmp	r0, #0
 8007a32:	d033      	beq.n	8007a9c <_printf_float+0x26c>
 8007a34:	2301      	movs	r3, #1
 8007a36:	4631      	mov	r1, r6
 8007a38:	4628      	mov	r0, r5
 8007a3a:	4a35      	ldr	r2, [pc, #212]	@ (8007b10 <_printf_float+0x2e0>)
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af51 	beq.w	80078e6 <_printf_float+0xb6>
 8007a44:	e9dd 380d 	ldrd	r3, r8, [sp, #52]	@ 0x34
 8007a48:	4543      	cmp	r3, r8
 8007a4a:	db02      	blt.n	8007a52 <_printf_float+0x222>
 8007a4c:	6823      	ldr	r3, [r4, #0]
 8007a4e:	07d8      	lsls	r0, r3, #31
 8007a50:	d50f      	bpl.n	8007a72 <_printf_float+0x242>
 8007a52:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007a56:	4631      	mov	r1, r6
 8007a58:	4628      	mov	r0, r5
 8007a5a:	47b8      	blx	r7
 8007a5c:	3001      	adds	r0, #1
 8007a5e:	f43f af42 	beq.w	80078e6 <_printf_float+0xb6>
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	f108 38ff 	add.w	r8, r8, #4294967295
 8007a6a:	f104 0a1a 	add.w	sl, r4, #26
 8007a6e:	45c8      	cmp	r8, r9
 8007a70:	dc09      	bgt.n	8007a86 <_printf_float+0x256>
 8007a72:	6823      	ldr	r3, [r4, #0]
 8007a74:	079b      	lsls	r3, r3, #30
 8007a76:	f100 8102 	bmi.w	8007c7e <_printf_float+0x44e>
 8007a7a:	68e0      	ldr	r0, [r4, #12]
 8007a7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007a7e:	4298      	cmp	r0, r3
 8007a80:	bfb8      	it	lt
 8007a82:	4618      	movlt	r0, r3
 8007a84:	e731      	b.n	80078ea <_printf_float+0xba>
 8007a86:	2301      	movs	r3, #1
 8007a88:	4652      	mov	r2, sl
 8007a8a:	4631      	mov	r1, r6
 8007a8c:	4628      	mov	r0, r5
 8007a8e:	47b8      	blx	r7
 8007a90:	3001      	adds	r0, #1
 8007a92:	f43f af28 	beq.w	80078e6 <_printf_float+0xb6>
 8007a96:	f109 0901 	add.w	r9, r9, #1
 8007a9a:	e7e8      	b.n	8007a6e <_printf_float+0x23e>
 8007a9c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007a9e:	2b00      	cmp	r3, #0
 8007aa0:	dc38      	bgt.n	8007b14 <_printf_float+0x2e4>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4631      	mov	r1, r6
 8007aa6:	4628      	mov	r0, r5
 8007aa8:	4a19      	ldr	r2, [pc, #100]	@ (8007b10 <_printf_float+0x2e0>)
 8007aaa:	47b8      	blx	r7
 8007aac:	3001      	adds	r0, #1
 8007aae:	f43f af1a 	beq.w	80078e6 <_printf_float+0xb6>
 8007ab2:	e9dd 390d 	ldrd	r3, r9, [sp, #52]	@ 0x34
 8007ab6:	ea59 0303 	orrs.w	r3, r9, r3
 8007aba:	d102      	bne.n	8007ac2 <_printf_float+0x292>
 8007abc:	6823      	ldr	r3, [r4, #0]
 8007abe:	07d9      	lsls	r1, r3, #31
 8007ac0:	d5d7      	bpl.n	8007a72 <_printf_float+0x242>
 8007ac2:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007ac6:	4631      	mov	r1, r6
 8007ac8:	4628      	mov	r0, r5
 8007aca:	47b8      	blx	r7
 8007acc:	3001      	adds	r0, #1
 8007ace:	f43f af0a 	beq.w	80078e6 <_printf_float+0xb6>
 8007ad2:	f04f 0a00 	mov.w	sl, #0
 8007ad6:	f104 0b1a 	add.w	fp, r4, #26
 8007ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007adc:	425b      	negs	r3, r3
 8007ade:	4553      	cmp	r3, sl
 8007ae0:	dc01      	bgt.n	8007ae6 <_printf_float+0x2b6>
 8007ae2:	464b      	mov	r3, r9
 8007ae4:	e793      	b.n	8007a0e <_printf_float+0x1de>
 8007ae6:	2301      	movs	r3, #1
 8007ae8:	465a      	mov	r2, fp
 8007aea:	4631      	mov	r1, r6
 8007aec:	4628      	mov	r0, r5
 8007aee:	47b8      	blx	r7
 8007af0:	3001      	adds	r0, #1
 8007af2:	f43f aef8 	beq.w	80078e6 <_printf_float+0xb6>
 8007af6:	f10a 0a01 	add.w	sl, sl, #1
 8007afa:	e7ee      	b.n	8007ada <_printf_float+0x2aa>
 8007afc:	7fefffff 	.word	0x7fefffff
 8007b00:	0800afcd 	.word	0x0800afcd
 8007b04:	0800afd1 	.word	0x0800afd1
 8007b08:	0800afd5 	.word	0x0800afd5
 8007b0c:	0800afd9 	.word	0x0800afd9
 8007b10:	0800b22f 	.word	0x0800b22f
 8007b14:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b16:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007b1a:	4553      	cmp	r3, sl
 8007b1c:	bfa8      	it	ge
 8007b1e:	4653      	movge	r3, sl
 8007b20:	2b00      	cmp	r3, #0
 8007b22:	4699      	mov	r9, r3
 8007b24:	dc36      	bgt.n	8007b94 <_printf_float+0x364>
 8007b26:	f04f 0b00 	mov.w	fp, #0
 8007b2a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b2e:	f104 021a 	add.w	r2, r4, #26
 8007b32:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007b34:	930a      	str	r3, [sp, #40]	@ 0x28
 8007b36:	eba3 0309 	sub.w	r3, r3, r9
 8007b3a:	455b      	cmp	r3, fp
 8007b3c:	dc31      	bgt.n	8007ba2 <_printf_float+0x372>
 8007b3e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b40:	459a      	cmp	sl, r3
 8007b42:	dc3a      	bgt.n	8007bba <_printf_float+0x38a>
 8007b44:	6823      	ldr	r3, [r4, #0]
 8007b46:	07da      	lsls	r2, r3, #31
 8007b48:	d437      	bmi.n	8007bba <_printf_float+0x38a>
 8007b4a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b4c:	ebaa 0903 	sub.w	r9, sl, r3
 8007b50:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007b52:	ebaa 0303 	sub.w	r3, sl, r3
 8007b56:	4599      	cmp	r9, r3
 8007b58:	bfa8      	it	ge
 8007b5a:	4699      	movge	r9, r3
 8007b5c:	f1b9 0f00 	cmp.w	r9, #0
 8007b60:	dc33      	bgt.n	8007bca <_printf_float+0x39a>
 8007b62:	f04f 0800 	mov.w	r8, #0
 8007b66:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007b6a:	f104 0b1a 	add.w	fp, r4, #26
 8007b6e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b70:	ebaa 0303 	sub.w	r3, sl, r3
 8007b74:	eba3 0309 	sub.w	r3, r3, r9
 8007b78:	4543      	cmp	r3, r8
 8007b7a:	f77f af7a 	ble.w	8007a72 <_printf_float+0x242>
 8007b7e:	2301      	movs	r3, #1
 8007b80:	465a      	mov	r2, fp
 8007b82:	4631      	mov	r1, r6
 8007b84:	4628      	mov	r0, r5
 8007b86:	47b8      	blx	r7
 8007b88:	3001      	adds	r0, #1
 8007b8a:	f43f aeac 	beq.w	80078e6 <_printf_float+0xb6>
 8007b8e:	f108 0801 	add.w	r8, r8, #1
 8007b92:	e7ec      	b.n	8007b6e <_printf_float+0x33e>
 8007b94:	4642      	mov	r2, r8
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d1c2      	bne.n	8007b26 <_printf_float+0x2f6>
 8007ba0:	e6a1      	b.n	80078e6 <_printf_float+0xb6>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4631      	mov	r1, r6
 8007ba6:	4628      	mov	r0, r5
 8007ba8:	920a      	str	r2, [sp, #40]	@ 0x28
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae9a 	beq.w	80078e6 <_printf_float+0xb6>
 8007bb2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bb4:	f10b 0b01 	add.w	fp, fp, #1
 8007bb8:	e7bb      	b.n	8007b32 <_printf_float+0x302>
 8007bba:	4631      	mov	r1, r6
 8007bbc:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bc0:	4628      	mov	r0, r5
 8007bc2:	47b8      	blx	r7
 8007bc4:	3001      	adds	r0, #1
 8007bc6:	d1c0      	bne.n	8007b4a <_printf_float+0x31a>
 8007bc8:	e68d      	b.n	80078e6 <_printf_float+0xb6>
 8007bca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007bcc:	464b      	mov	r3, r9
 8007bce:	4631      	mov	r1, r6
 8007bd0:	4628      	mov	r0, r5
 8007bd2:	4442      	add	r2, r8
 8007bd4:	47b8      	blx	r7
 8007bd6:	3001      	adds	r0, #1
 8007bd8:	d1c3      	bne.n	8007b62 <_printf_float+0x332>
 8007bda:	e684      	b.n	80078e6 <_printf_float+0xb6>
 8007bdc:	f8dd a038 	ldr.w	sl, [sp, #56]	@ 0x38
 8007be0:	f1ba 0f01 	cmp.w	sl, #1
 8007be4:	dc01      	bgt.n	8007bea <_printf_float+0x3ba>
 8007be6:	07db      	lsls	r3, r3, #31
 8007be8:	d536      	bpl.n	8007c58 <_printf_float+0x428>
 8007bea:	2301      	movs	r3, #1
 8007bec:	4642      	mov	r2, r8
 8007bee:	4631      	mov	r1, r6
 8007bf0:	4628      	mov	r0, r5
 8007bf2:	47b8      	blx	r7
 8007bf4:	3001      	adds	r0, #1
 8007bf6:	f43f ae76 	beq.w	80078e6 <_printf_float+0xb6>
 8007bfa:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8007bfe:	4631      	mov	r1, r6
 8007c00:	4628      	mov	r0, r5
 8007c02:	47b8      	blx	r7
 8007c04:	3001      	adds	r0, #1
 8007c06:	f43f ae6e 	beq.w	80078e6 <_printf_float+0xb6>
 8007c0a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007c0e:	2200      	movs	r2, #0
 8007c10:	2300      	movs	r3, #0
 8007c12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007c16:	f7f8 fed1 	bl	80009bc <__aeabi_dcmpeq>
 8007c1a:	b9c0      	cbnz	r0, 8007c4e <_printf_float+0x41e>
 8007c1c:	4653      	mov	r3, sl
 8007c1e:	f108 0201 	add.w	r2, r8, #1
 8007c22:	4631      	mov	r1, r6
 8007c24:	4628      	mov	r0, r5
 8007c26:	47b8      	blx	r7
 8007c28:	3001      	adds	r0, #1
 8007c2a:	d10c      	bne.n	8007c46 <_printf_float+0x416>
 8007c2c:	e65b      	b.n	80078e6 <_printf_float+0xb6>
 8007c2e:	2301      	movs	r3, #1
 8007c30:	465a      	mov	r2, fp
 8007c32:	4631      	mov	r1, r6
 8007c34:	4628      	mov	r0, r5
 8007c36:	47b8      	blx	r7
 8007c38:	3001      	adds	r0, #1
 8007c3a:	f43f ae54 	beq.w	80078e6 <_printf_float+0xb6>
 8007c3e:	f108 0801 	add.w	r8, r8, #1
 8007c42:	45d0      	cmp	r8, sl
 8007c44:	dbf3      	blt.n	8007c2e <_printf_float+0x3fe>
 8007c46:	464b      	mov	r3, r9
 8007c48:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8007c4c:	e6e0      	b.n	8007a10 <_printf_float+0x1e0>
 8007c4e:	f04f 0800 	mov.w	r8, #0
 8007c52:	f104 0b1a 	add.w	fp, r4, #26
 8007c56:	e7f4      	b.n	8007c42 <_printf_float+0x412>
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4642      	mov	r2, r8
 8007c5c:	e7e1      	b.n	8007c22 <_printf_float+0x3f2>
 8007c5e:	2301      	movs	r3, #1
 8007c60:	464a      	mov	r2, r9
 8007c62:	4631      	mov	r1, r6
 8007c64:	4628      	mov	r0, r5
 8007c66:	47b8      	blx	r7
 8007c68:	3001      	adds	r0, #1
 8007c6a:	f43f ae3c 	beq.w	80078e6 <_printf_float+0xb6>
 8007c6e:	f108 0801 	add.w	r8, r8, #1
 8007c72:	68e3      	ldr	r3, [r4, #12]
 8007c74:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007c76:	1a5b      	subs	r3, r3, r1
 8007c78:	4543      	cmp	r3, r8
 8007c7a:	dcf0      	bgt.n	8007c5e <_printf_float+0x42e>
 8007c7c:	e6fd      	b.n	8007a7a <_printf_float+0x24a>
 8007c7e:	f04f 0800 	mov.w	r8, #0
 8007c82:	f104 0919 	add.w	r9, r4, #25
 8007c86:	e7f4      	b.n	8007c72 <_printf_float+0x442>

08007c88 <_printf_common>:
 8007c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	4698      	mov	r8, r3
 8007c90:	688a      	ldr	r2, [r1, #8]
 8007c92:	690b      	ldr	r3, [r1, #16]
 8007c94:	4607      	mov	r7, r0
 8007c96:	4293      	cmp	r3, r2
 8007c98:	bfb8      	it	lt
 8007c9a:	4613      	movlt	r3, r2
 8007c9c:	6033      	str	r3, [r6, #0]
 8007c9e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8007ca2:	460c      	mov	r4, r1
 8007ca4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8007ca8:	b10a      	cbz	r2, 8007cae <_printf_common+0x26>
 8007caa:	3301      	adds	r3, #1
 8007cac:	6033      	str	r3, [r6, #0]
 8007cae:	6823      	ldr	r3, [r4, #0]
 8007cb0:	0699      	lsls	r1, r3, #26
 8007cb2:	bf42      	ittt	mi
 8007cb4:	6833      	ldrmi	r3, [r6, #0]
 8007cb6:	3302      	addmi	r3, #2
 8007cb8:	6033      	strmi	r3, [r6, #0]
 8007cba:	6825      	ldr	r5, [r4, #0]
 8007cbc:	f015 0506 	ands.w	r5, r5, #6
 8007cc0:	d106      	bne.n	8007cd0 <_printf_common+0x48>
 8007cc2:	f104 0a19 	add.w	sl, r4, #25
 8007cc6:	68e3      	ldr	r3, [r4, #12]
 8007cc8:	6832      	ldr	r2, [r6, #0]
 8007cca:	1a9b      	subs	r3, r3, r2
 8007ccc:	42ab      	cmp	r3, r5
 8007cce:	dc2b      	bgt.n	8007d28 <_printf_common+0xa0>
 8007cd0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007cd4:	6822      	ldr	r2, [r4, #0]
 8007cd6:	3b00      	subs	r3, #0
 8007cd8:	bf18      	it	ne
 8007cda:	2301      	movne	r3, #1
 8007cdc:	0692      	lsls	r2, r2, #26
 8007cde:	d430      	bmi.n	8007d42 <_printf_common+0xba>
 8007ce0:	4641      	mov	r1, r8
 8007ce2:	4638      	mov	r0, r7
 8007ce4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007ce8:	47c8      	blx	r9
 8007cea:	3001      	adds	r0, #1
 8007cec:	d023      	beq.n	8007d36 <_printf_common+0xae>
 8007cee:	6823      	ldr	r3, [r4, #0]
 8007cf0:	6922      	ldr	r2, [r4, #16]
 8007cf2:	f003 0306 	and.w	r3, r3, #6
 8007cf6:	2b04      	cmp	r3, #4
 8007cf8:	bf14      	ite	ne
 8007cfa:	2500      	movne	r5, #0
 8007cfc:	6833      	ldreq	r3, [r6, #0]
 8007cfe:	f04f 0600 	mov.w	r6, #0
 8007d02:	bf08      	it	eq
 8007d04:	68e5      	ldreq	r5, [r4, #12]
 8007d06:	f104 041a 	add.w	r4, r4, #26
 8007d0a:	bf08      	it	eq
 8007d0c:	1aed      	subeq	r5, r5, r3
 8007d0e:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8007d12:	bf08      	it	eq
 8007d14:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007d18:	4293      	cmp	r3, r2
 8007d1a:	bfc4      	itt	gt
 8007d1c:	1a9b      	subgt	r3, r3, r2
 8007d1e:	18ed      	addgt	r5, r5, r3
 8007d20:	42b5      	cmp	r5, r6
 8007d22:	d11a      	bne.n	8007d5a <_printf_common+0xd2>
 8007d24:	2000      	movs	r0, #0
 8007d26:	e008      	b.n	8007d3a <_printf_common+0xb2>
 8007d28:	2301      	movs	r3, #1
 8007d2a:	4652      	mov	r2, sl
 8007d2c:	4641      	mov	r1, r8
 8007d2e:	4638      	mov	r0, r7
 8007d30:	47c8      	blx	r9
 8007d32:	3001      	adds	r0, #1
 8007d34:	d103      	bne.n	8007d3e <_printf_common+0xb6>
 8007d36:	f04f 30ff 	mov.w	r0, #4294967295
 8007d3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d3e:	3501      	adds	r5, #1
 8007d40:	e7c1      	b.n	8007cc6 <_printf_common+0x3e>
 8007d42:	2030      	movs	r0, #48	@ 0x30
 8007d44:	18e1      	adds	r1, r4, r3
 8007d46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007d4a:	1c5a      	adds	r2, r3, #1
 8007d4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007d50:	4422      	add	r2, r4
 8007d52:	3302      	adds	r3, #2
 8007d54:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8007d58:	e7c2      	b.n	8007ce0 <_printf_common+0x58>
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	4622      	mov	r2, r4
 8007d5e:	4641      	mov	r1, r8
 8007d60:	4638      	mov	r0, r7
 8007d62:	47c8      	blx	r9
 8007d64:	3001      	adds	r0, #1
 8007d66:	d0e6      	beq.n	8007d36 <_printf_common+0xae>
 8007d68:	3601      	adds	r6, #1
 8007d6a:	e7d9      	b.n	8007d20 <_printf_common+0x98>

08007d6c <_printf_i>:
 8007d6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007d70:	7e0f      	ldrb	r7, [r1, #24]
 8007d72:	4691      	mov	r9, r2
 8007d74:	2f78      	cmp	r7, #120	@ 0x78
 8007d76:	4680      	mov	r8, r0
 8007d78:	460c      	mov	r4, r1
 8007d7a:	469a      	mov	sl, r3
 8007d7c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8007d7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8007d82:	d807      	bhi.n	8007d94 <_printf_i+0x28>
 8007d84:	2f62      	cmp	r7, #98	@ 0x62
 8007d86:	d80a      	bhi.n	8007d9e <_printf_i+0x32>
 8007d88:	2f00      	cmp	r7, #0
 8007d8a:	f000 80d3 	beq.w	8007f34 <_printf_i+0x1c8>
 8007d8e:	2f58      	cmp	r7, #88	@ 0x58
 8007d90:	f000 80ba 	beq.w	8007f08 <_printf_i+0x19c>
 8007d94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007d98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8007d9c:	e03a      	b.n	8007e14 <_printf_i+0xa8>
 8007d9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8007da2:	2b15      	cmp	r3, #21
 8007da4:	d8f6      	bhi.n	8007d94 <_printf_i+0x28>
 8007da6:	a101      	add	r1, pc, #4	@ (adr r1, 8007dac <_printf_i+0x40>)
 8007da8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007dac:	08007e05 	.word	0x08007e05
 8007db0:	08007e19 	.word	0x08007e19
 8007db4:	08007d95 	.word	0x08007d95
 8007db8:	08007d95 	.word	0x08007d95
 8007dbc:	08007d95 	.word	0x08007d95
 8007dc0:	08007d95 	.word	0x08007d95
 8007dc4:	08007e19 	.word	0x08007e19
 8007dc8:	08007d95 	.word	0x08007d95
 8007dcc:	08007d95 	.word	0x08007d95
 8007dd0:	08007d95 	.word	0x08007d95
 8007dd4:	08007d95 	.word	0x08007d95
 8007dd8:	08007f1b 	.word	0x08007f1b
 8007ddc:	08007e43 	.word	0x08007e43
 8007de0:	08007ed5 	.word	0x08007ed5
 8007de4:	08007d95 	.word	0x08007d95
 8007de8:	08007d95 	.word	0x08007d95
 8007dec:	08007f3d 	.word	0x08007f3d
 8007df0:	08007d95 	.word	0x08007d95
 8007df4:	08007e43 	.word	0x08007e43
 8007df8:	08007d95 	.word	0x08007d95
 8007dfc:	08007d95 	.word	0x08007d95
 8007e00:	08007edd 	.word	0x08007edd
 8007e04:	6833      	ldr	r3, [r6, #0]
 8007e06:	1d1a      	adds	r2, r3, #4
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	6032      	str	r2, [r6, #0]
 8007e0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007e10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8007e14:	2301      	movs	r3, #1
 8007e16:	e09e      	b.n	8007f56 <_printf_i+0x1ea>
 8007e18:	6833      	ldr	r3, [r6, #0]
 8007e1a:	6820      	ldr	r0, [r4, #0]
 8007e1c:	1d19      	adds	r1, r3, #4
 8007e1e:	6031      	str	r1, [r6, #0]
 8007e20:	0606      	lsls	r6, r0, #24
 8007e22:	d501      	bpl.n	8007e28 <_printf_i+0xbc>
 8007e24:	681d      	ldr	r5, [r3, #0]
 8007e26:	e003      	b.n	8007e30 <_printf_i+0xc4>
 8007e28:	0645      	lsls	r5, r0, #25
 8007e2a:	d5fb      	bpl.n	8007e24 <_printf_i+0xb8>
 8007e2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007e30:	2d00      	cmp	r5, #0
 8007e32:	da03      	bge.n	8007e3c <_printf_i+0xd0>
 8007e34:	232d      	movs	r3, #45	@ 0x2d
 8007e36:	426d      	negs	r5, r5
 8007e38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007e3c:	230a      	movs	r3, #10
 8007e3e:	4859      	ldr	r0, [pc, #356]	@ (8007fa4 <_printf_i+0x238>)
 8007e40:	e011      	b.n	8007e66 <_printf_i+0xfa>
 8007e42:	6821      	ldr	r1, [r4, #0]
 8007e44:	6833      	ldr	r3, [r6, #0]
 8007e46:	0608      	lsls	r0, r1, #24
 8007e48:	f853 5b04 	ldr.w	r5, [r3], #4
 8007e4c:	d402      	bmi.n	8007e54 <_printf_i+0xe8>
 8007e4e:	0649      	lsls	r1, r1, #25
 8007e50:	bf48      	it	mi
 8007e52:	b2ad      	uxthmi	r5, r5
 8007e54:	2f6f      	cmp	r7, #111	@ 0x6f
 8007e56:	6033      	str	r3, [r6, #0]
 8007e58:	bf14      	ite	ne
 8007e5a:	230a      	movne	r3, #10
 8007e5c:	2308      	moveq	r3, #8
 8007e5e:	4851      	ldr	r0, [pc, #324]	@ (8007fa4 <_printf_i+0x238>)
 8007e60:	2100      	movs	r1, #0
 8007e62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8007e66:	6866      	ldr	r6, [r4, #4]
 8007e68:	2e00      	cmp	r6, #0
 8007e6a:	bfa8      	it	ge
 8007e6c:	6821      	ldrge	r1, [r4, #0]
 8007e6e:	60a6      	str	r6, [r4, #8]
 8007e70:	bfa4      	itt	ge
 8007e72:	f021 0104 	bicge.w	r1, r1, #4
 8007e76:	6021      	strge	r1, [r4, #0]
 8007e78:	b90d      	cbnz	r5, 8007e7e <_printf_i+0x112>
 8007e7a:	2e00      	cmp	r6, #0
 8007e7c:	d04b      	beq.n	8007f16 <_printf_i+0x1aa>
 8007e7e:	4616      	mov	r6, r2
 8007e80:	fbb5 f1f3 	udiv	r1, r5, r3
 8007e84:	fb03 5711 	mls	r7, r3, r1, r5
 8007e88:	5dc7      	ldrb	r7, [r0, r7]
 8007e8a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007e8e:	462f      	mov	r7, r5
 8007e90:	42bb      	cmp	r3, r7
 8007e92:	460d      	mov	r5, r1
 8007e94:	d9f4      	bls.n	8007e80 <_printf_i+0x114>
 8007e96:	2b08      	cmp	r3, #8
 8007e98:	d10b      	bne.n	8007eb2 <_printf_i+0x146>
 8007e9a:	6823      	ldr	r3, [r4, #0]
 8007e9c:	07df      	lsls	r7, r3, #31
 8007e9e:	d508      	bpl.n	8007eb2 <_printf_i+0x146>
 8007ea0:	6923      	ldr	r3, [r4, #16]
 8007ea2:	6861      	ldr	r1, [r4, #4]
 8007ea4:	4299      	cmp	r1, r3
 8007ea6:	bfde      	ittt	le
 8007ea8:	2330      	movle	r3, #48	@ 0x30
 8007eaa:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007eae:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007eb2:	1b92      	subs	r2, r2, r6
 8007eb4:	6122      	str	r2, [r4, #16]
 8007eb6:	464b      	mov	r3, r9
 8007eb8:	4621      	mov	r1, r4
 8007eba:	4640      	mov	r0, r8
 8007ebc:	f8cd a000 	str.w	sl, [sp]
 8007ec0:	aa03      	add	r2, sp, #12
 8007ec2:	f7ff fee1 	bl	8007c88 <_printf_common>
 8007ec6:	3001      	adds	r0, #1
 8007ec8:	d14a      	bne.n	8007f60 <_printf_i+0x1f4>
 8007eca:	f04f 30ff 	mov.w	r0, #4294967295
 8007ece:	b004      	add	sp, #16
 8007ed0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007ed4:	6823      	ldr	r3, [r4, #0]
 8007ed6:	f043 0320 	orr.w	r3, r3, #32
 8007eda:	6023      	str	r3, [r4, #0]
 8007edc:	2778      	movs	r7, #120	@ 0x78
 8007ede:	4832      	ldr	r0, [pc, #200]	@ (8007fa8 <_printf_i+0x23c>)
 8007ee0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007ee4:	6823      	ldr	r3, [r4, #0]
 8007ee6:	6831      	ldr	r1, [r6, #0]
 8007ee8:	061f      	lsls	r7, r3, #24
 8007eea:	f851 5b04 	ldr.w	r5, [r1], #4
 8007eee:	d402      	bmi.n	8007ef6 <_printf_i+0x18a>
 8007ef0:	065f      	lsls	r7, r3, #25
 8007ef2:	bf48      	it	mi
 8007ef4:	b2ad      	uxthmi	r5, r5
 8007ef6:	6031      	str	r1, [r6, #0]
 8007ef8:	07d9      	lsls	r1, r3, #31
 8007efa:	bf44      	itt	mi
 8007efc:	f043 0320 	orrmi.w	r3, r3, #32
 8007f00:	6023      	strmi	r3, [r4, #0]
 8007f02:	b11d      	cbz	r5, 8007f0c <_printf_i+0x1a0>
 8007f04:	2310      	movs	r3, #16
 8007f06:	e7ab      	b.n	8007e60 <_printf_i+0xf4>
 8007f08:	4826      	ldr	r0, [pc, #152]	@ (8007fa4 <_printf_i+0x238>)
 8007f0a:	e7e9      	b.n	8007ee0 <_printf_i+0x174>
 8007f0c:	6823      	ldr	r3, [r4, #0]
 8007f0e:	f023 0320 	bic.w	r3, r3, #32
 8007f12:	6023      	str	r3, [r4, #0]
 8007f14:	e7f6      	b.n	8007f04 <_printf_i+0x198>
 8007f16:	4616      	mov	r6, r2
 8007f18:	e7bd      	b.n	8007e96 <_printf_i+0x12a>
 8007f1a:	6833      	ldr	r3, [r6, #0]
 8007f1c:	6825      	ldr	r5, [r4, #0]
 8007f1e:	1d18      	adds	r0, r3, #4
 8007f20:	6961      	ldr	r1, [r4, #20]
 8007f22:	6030      	str	r0, [r6, #0]
 8007f24:	062e      	lsls	r6, r5, #24
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	d501      	bpl.n	8007f2e <_printf_i+0x1c2>
 8007f2a:	6019      	str	r1, [r3, #0]
 8007f2c:	e002      	b.n	8007f34 <_printf_i+0x1c8>
 8007f2e:	0668      	lsls	r0, r5, #25
 8007f30:	d5fb      	bpl.n	8007f2a <_printf_i+0x1be>
 8007f32:	8019      	strh	r1, [r3, #0]
 8007f34:	2300      	movs	r3, #0
 8007f36:	4616      	mov	r6, r2
 8007f38:	6123      	str	r3, [r4, #16]
 8007f3a:	e7bc      	b.n	8007eb6 <_printf_i+0x14a>
 8007f3c:	6833      	ldr	r3, [r6, #0]
 8007f3e:	2100      	movs	r1, #0
 8007f40:	1d1a      	adds	r2, r3, #4
 8007f42:	6032      	str	r2, [r6, #0]
 8007f44:	681e      	ldr	r6, [r3, #0]
 8007f46:	6862      	ldr	r2, [r4, #4]
 8007f48:	4630      	mov	r0, r6
 8007f4a:	f000 fa36 	bl	80083ba <memchr>
 8007f4e:	b108      	cbz	r0, 8007f54 <_printf_i+0x1e8>
 8007f50:	1b80      	subs	r0, r0, r6
 8007f52:	6060      	str	r0, [r4, #4]
 8007f54:	6863      	ldr	r3, [r4, #4]
 8007f56:	6123      	str	r3, [r4, #16]
 8007f58:	2300      	movs	r3, #0
 8007f5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007f5e:	e7aa      	b.n	8007eb6 <_printf_i+0x14a>
 8007f60:	4632      	mov	r2, r6
 8007f62:	4649      	mov	r1, r9
 8007f64:	4640      	mov	r0, r8
 8007f66:	6923      	ldr	r3, [r4, #16]
 8007f68:	47d0      	blx	sl
 8007f6a:	3001      	adds	r0, #1
 8007f6c:	d0ad      	beq.n	8007eca <_printf_i+0x15e>
 8007f6e:	6823      	ldr	r3, [r4, #0]
 8007f70:	079b      	lsls	r3, r3, #30
 8007f72:	d413      	bmi.n	8007f9c <_printf_i+0x230>
 8007f74:	68e0      	ldr	r0, [r4, #12]
 8007f76:	9b03      	ldr	r3, [sp, #12]
 8007f78:	4298      	cmp	r0, r3
 8007f7a:	bfb8      	it	lt
 8007f7c:	4618      	movlt	r0, r3
 8007f7e:	e7a6      	b.n	8007ece <_printf_i+0x162>
 8007f80:	2301      	movs	r3, #1
 8007f82:	4632      	mov	r2, r6
 8007f84:	4649      	mov	r1, r9
 8007f86:	4640      	mov	r0, r8
 8007f88:	47d0      	blx	sl
 8007f8a:	3001      	adds	r0, #1
 8007f8c:	d09d      	beq.n	8007eca <_printf_i+0x15e>
 8007f8e:	3501      	adds	r5, #1
 8007f90:	68e3      	ldr	r3, [r4, #12]
 8007f92:	9903      	ldr	r1, [sp, #12]
 8007f94:	1a5b      	subs	r3, r3, r1
 8007f96:	42ab      	cmp	r3, r5
 8007f98:	dcf2      	bgt.n	8007f80 <_printf_i+0x214>
 8007f9a:	e7eb      	b.n	8007f74 <_printf_i+0x208>
 8007f9c:	2500      	movs	r5, #0
 8007f9e:	f104 0619 	add.w	r6, r4, #25
 8007fa2:	e7f5      	b.n	8007f90 <_printf_i+0x224>
 8007fa4:	0800afdd 	.word	0x0800afdd
 8007fa8:	0800afee 	.word	0x0800afee

08007fac <std>:
 8007fac:	2300      	movs	r3, #0
 8007fae:	b510      	push	{r4, lr}
 8007fb0:	4604      	mov	r4, r0
 8007fb2:	e9c0 3300 	strd	r3, r3, [r0]
 8007fb6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007fba:	6083      	str	r3, [r0, #8]
 8007fbc:	8181      	strh	r1, [r0, #12]
 8007fbe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007fc0:	81c2      	strh	r2, [r0, #14]
 8007fc2:	6183      	str	r3, [r0, #24]
 8007fc4:	4619      	mov	r1, r3
 8007fc6:	2208      	movs	r2, #8
 8007fc8:	305c      	adds	r0, #92	@ 0x5c
 8007fca:	f000 f954 	bl	8008276 <memset>
 8007fce:	4b0d      	ldr	r3, [pc, #52]	@ (8008004 <std+0x58>)
 8007fd0:	6224      	str	r4, [r4, #32]
 8007fd2:	6263      	str	r3, [r4, #36]	@ 0x24
 8007fd4:	4b0c      	ldr	r3, [pc, #48]	@ (8008008 <std+0x5c>)
 8007fd6:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007fd8:	4b0c      	ldr	r3, [pc, #48]	@ (800800c <std+0x60>)
 8007fda:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007fdc:	4b0c      	ldr	r3, [pc, #48]	@ (8008010 <std+0x64>)
 8007fde:	6323      	str	r3, [r4, #48]	@ 0x30
 8007fe0:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <std+0x68>)
 8007fe2:	429c      	cmp	r4, r3
 8007fe4:	d006      	beq.n	8007ff4 <std+0x48>
 8007fe6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007fea:	4294      	cmp	r4, r2
 8007fec:	d002      	beq.n	8007ff4 <std+0x48>
 8007fee:	33d0      	adds	r3, #208	@ 0xd0
 8007ff0:	429c      	cmp	r4, r3
 8007ff2:	d105      	bne.n	8008000 <std+0x54>
 8007ff4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007ff8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ffc:	f000 b9da 	b.w	80083b4 <__retarget_lock_init_recursive>
 8008000:	bd10      	pop	{r4, pc}
 8008002:	bf00      	nop
 8008004:	080081ed 	.word	0x080081ed
 8008008:	08008213 	.word	0x08008213
 800800c:	0800824b 	.word	0x0800824b
 8008010:	0800826f 	.word	0x0800826f
 8008014:	20001bb0 	.word	0x20001bb0

08008018 <stdio_exit_handler>:
 8008018:	4a02      	ldr	r2, [pc, #8]	@ (8008024 <stdio_exit_handler+0xc>)
 800801a:	4903      	ldr	r1, [pc, #12]	@ (8008028 <stdio_exit_handler+0x10>)
 800801c:	4803      	ldr	r0, [pc, #12]	@ (800802c <stdio_exit_handler+0x14>)
 800801e:	f000 b869 	b.w	80080f4 <_fwalk_sglue>
 8008022:	bf00      	nop
 8008024:	20000010 	.word	0x20000010
 8008028:	0800a3a9 	.word	0x0800a3a9
 800802c:	20000020 	.word	0x20000020

08008030 <cleanup_stdio>:
 8008030:	6841      	ldr	r1, [r0, #4]
 8008032:	4b0c      	ldr	r3, [pc, #48]	@ (8008064 <cleanup_stdio+0x34>)
 8008034:	b510      	push	{r4, lr}
 8008036:	4299      	cmp	r1, r3
 8008038:	4604      	mov	r4, r0
 800803a:	d001      	beq.n	8008040 <cleanup_stdio+0x10>
 800803c:	f002 f9b4 	bl	800a3a8 <_fflush_r>
 8008040:	68a1      	ldr	r1, [r4, #8]
 8008042:	4b09      	ldr	r3, [pc, #36]	@ (8008068 <cleanup_stdio+0x38>)
 8008044:	4299      	cmp	r1, r3
 8008046:	d002      	beq.n	800804e <cleanup_stdio+0x1e>
 8008048:	4620      	mov	r0, r4
 800804a:	f002 f9ad 	bl	800a3a8 <_fflush_r>
 800804e:	68e1      	ldr	r1, [r4, #12]
 8008050:	4b06      	ldr	r3, [pc, #24]	@ (800806c <cleanup_stdio+0x3c>)
 8008052:	4299      	cmp	r1, r3
 8008054:	d004      	beq.n	8008060 <cleanup_stdio+0x30>
 8008056:	4620      	mov	r0, r4
 8008058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800805c:	f002 b9a4 	b.w	800a3a8 <_fflush_r>
 8008060:	bd10      	pop	{r4, pc}
 8008062:	bf00      	nop
 8008064:	20001bb0 	.word	0x20001bb0
 8008068:	20001c18 	.word	0x20001c18
 800806c:	20001c80 	.word	0x20001c80

08008070 <global_stdio_init.part.0>:
 8008070:	b510      	push	{r4, lr}
 8008072:	4b0b      	ldr	r3, [pc, #44]	@ (80080a0 <global_stdio_init.part.0+0x30>)
 8008074:	4c0b      	ldr	r4, [pc, #44]	@ (80080a4 <global_stdio_init.part.0+0x34>)
 8008076:	4a0c      	ldr	r2, [pc, #48]	@ (80080a8 <global_stdio_init.part.0+0x38>)
 8008078:	4620      	mov	r0, r4
 800807a:	601a      	str	r2, [r3, #0]
 800807c:	2104      	movs	r1, #4
 800807e:	2200      	movs	r2, #0
 8008080:	f7ff ff94 	bl	8007fac <std>
 8008084:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008088:	2201      	movs	r2, #1
 800808a:	2109      	movs	r1, #9
 800808c:	f7ff ff8e 	bl	8007fac <std>
 8008090:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008094:	2202      	movs	r2, #2
 8008096:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800809a:	2112      	movs	r1, #18
 800809c:	f7ff bf86 	b.w	8007fac <std>
 80080a0:	20001ce8 	.word	0x20001ce8
 80080a4:	20001bb0 	.word	0x20001bb0
 80080a8:	08008019 	.word	0x08008019

080080ac <__sfp_lock_acquire>:
 80080ac:	4801      	ldr	r0, [pc, #4]	@ (80080b4 <__sfp_lock_acquire+0x8>)
 80080ae:	f000 b982 	b.w	80083b6 <__retarget_lock_acquire_recursive>
 80080b2:	bf00      	nop
 80080b4:	20001cf1 	.word	0x20001cf1

080080b8 <__sfp_lock_release>:
 80080b8:	4801      	ldr	r0, [pc, #4]	@ (80080c0 <__sfp_lock_release+0x8>)
 80080ba:	f000 b97d 	b.w	80083b8 <__retarget_lock_release_recursive>
 80080be:	bf00      	nop
 80080c0:	20001cf1 	.word	0x20001cf1

080080c4 <__sinit>:
 80080c4:	b510      	push	{r4, lr}
 80080c6:	4604      	mov	r4, r0
 80080c8:	f7ff fff0 	bl	80080ac <__sfp_lock_acquire>
 80080cc:	6a23      	ldr	r3, [r4, #32]
 80080ce:	b11b      	cbz	r3, 80080d8 <__sinit+0x14>
 80080d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080d4:	f7ff bff0 	b.w	80080b8 <__sfp_lock_release>
 80080d8:	4b04      	ldr	r3, [pc, #16]	@ (80080ec <__sinit+0x28>)
 80080da:	6223      	str	r3, [r4, #32]
 80080dc:	4b04      	ldr	r3, [pc, #16]	@ (80080f0 <__sinit+0x2c>)
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	d1f5      	bne.n	80080d0 <__sinit+0xc>
 80080e4:	f7ff ffc4 	bl	8008070 <global_stdio_init.part.0>
 80080e8:	e7f2      	b.n	80080d0 <__sinit+0xc>
 80080ea:	bf00      	nop
 80080ec:	08008031 	.word	0x08008031
 80080f0:	20001ce8 	.word	0x20001ce8

080080f4 <_fwalk_sglue>:
 80080f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80080f8:	4607      	mov	r7, r0
 80080fa:	4688      	mov	r8, r1
 80080fc:	4614      	mov	r4, r2
 80080fe:	2600      	movs	r6, #0
 8008100:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008104:	f1b9 0901 	subs.w	r9, r9, #1
 8008108:	d505      	bpl.n	8008116 <_fwalk_sglue+0x22>
 800810a:	6824      	ldr	r4, [r4, #0]
 800810c:	2c00      	cmp	r4, #0
 800810e:	d1f7      	bne.n	8008100 <_fwalk_sglue+0xc>
 8008110:	4630      	mov	r0, r6
 8008112:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008116:	89ab      	ldrh	r3, [r5, #12]
 8008118:	2b01      	cmp	r3, #1
 800811a:	d907      	bls.n	800812c <_fwalk_sglue+0x38>
 800811c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008120:	3301      	adds	r3, #1
 8008122:	d003      	beq.n	800812c <_fwalk_sglue+0x38>
 8008124:	4629      	mov	r1, r5
 8008126:	4638      	mov	r0, r7
 8008128:	47c0      	blx	r8
 800812a:	4306      	orrs	r6, r0
 800812c:	3568      	adds	r5, #104	@ 0x68
 800812e:	e7e9      	b.n	8008104 <_fwalk_sglue+0x10>

08008130 <sniprintf>:
 8008130:	b40c      	push	{r2, r3}
 8008132:	b530      	push	{r4, r5, lr}
 8008134:	4b17      	ldr	r3, [pc, #92]	@ (8008194 <sniprintf+0x64>)
 8008136:	1e0c      	subs	r4, r1, #0
 8008138:	681d      	ldr	r5, [r3, #0]
 800813a:	b09d      	sub	sp, #116	@ 0x74
 800813c:	da08      	bge.n	8008150 <sniprintf+0x20>
 800813e:	238b      	movs	r3, #139	@ 0x8b
 8008140:	f04f 30ff 	mov.w	r0, #4294967295
 8008144:	602b      	str	r3, [r5, #0]
 8008146:	b01d      	add	sp, #116	@ 0x74
 8008148:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800814c:	b002      	add	sp, #8
 800814e:	4770      	bx	lr
 8008150:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008154:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008158:	bf0c      	ite	eq
 800815a:	4623      	moveq	r3, r4
 800815c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8008160:	9304      	str	r3, [sp, #16]
 8008162:	9307      	str	r3, [sp, #28]
 8008164:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008168:	9002      	str	r0, [sp, #8]
 800816a:	9006      	str	r0, [sp, #24]
 800816c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008170:	4628      	mov	r0, r5
 8008172:	ab21      	add	r3, sp, #132	@ 0x84
 8008174:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008176:	a902      	add	r1, sp, #8
 8008178:	9301      	str	r3, [sp, #4]
 800817a:	f001 fc83 	bl	8009a84 <_svfiprintf_r>
 800817e:	1c43      	adds	r3, r0, #1
 8008180:	bfbc      	itt	lt
 8008182:	238b      	movlt	r3, #139	@ 0x8b
 8008184:	602b      	strlt	r3, [r5, #0]
 8008186:	2c00      	cmp	r4, #0
 8008188:	d0dd      	beq.n	8008146 <sniprintf+0x16>
 800818a:	2200      	movs	r2, #0
 800818c:	9b02      	ldr	r3, [sp, #8]
 800818e:	701a      	strb	r2, [r3, #0]
 8008190:	e7d9      	b.n	8008146 <sniprintf+0x16>
 8008192:	bf00      	nop
 8008194:	2000001c 	.word	0x2000001c

08008198 <siscanf>:
 8008198:	b40e      	push	{r1, r2, r3}
 800819a:	f44f 7201 	mov.w	r2, #516	@ 0x204
 800819e:	b530      	push	{r4, r5, lr}
 80081a0:	b09c      	sub	sp, #112	@ 0x70
 80081a2:	ac1f      	add	r4, sp, #124	@ 0x7c
 80081a4:	f854 5b04 	ldr.w	r5, [r4], #4
 80081a8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80081ac:	9002      	str	r0, [sp, #8]
 80081ae:	9006      	str	r0, [sp, #24]
 80081b0:	f7f7 ffd8 	bl	8000164 <strlen>
 80081b4:	4b0b      	ldr	r3, [pc, #44]	@ (80081e4 <siscanf+0x4c>)
 80081b6:	9003      	str	r0, [sp, #12]
 80081b8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80081ba:	2300      	movs	r3, #0
 80081bc:	930f      	str	r3, [sp, #60]	@ 0x3c
 80081be:	9314      	str	r3, [sp, #80]	@ 0x50
 80081c0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80081c4:	9007      	str	r0, [sp, #28]
 80081c6:	4808      	ldr	r0, [pc, #32]	@ (80081e8 <siscanf+0x50>)
 80081c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80081cc:	462a      	mov	r2, r5
 80081ce:	4623      	mov	r3, r4
 80081d0:	a902      	add	r1, sp, #8
 80081d2:	6800      	ldr	r0, [r0, #0]
 80081d4:	9401      	str	r4, [sp, #4]
 80081d6:	f001 fda9 	bl	8009d2c <__ssvfiscanf_r>
 80081da:	b01c      	add	sp, #112	@ 0x70
 80081dc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80081e0:	b003      	add	sp, #12
 80081e2:	4770      	bx	lr
 80081e4:	0800820f 	.word	0x0800820f
 80081e8:	2000001c 	.word	0x2000001c

080081ec <__sread>:
 80081ec:	b510      	push	{r4, lr}
 80081ee:	460c      	mov	r4, r1
 80081f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f4:	f000 f890 	bl	8008318 <_read_r>
 80081f8:	2800      	cmp	r0, #0
 80081fa:	bfab      	itete	ge
 80081fc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081fe:	89a3      	ldrhlt	r3, [r4, #12]
 8008200:	181b      	addge	r3, r3, r0
 8008202:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008206:	bfac      	ite	ge
 8008208:	6563      	strge	r3, [r4, #84]	@ 0x54
 800820a:	81a3      	strhlt	r3, [r4, #12]
 800820c:	bd10      	pop	{r4, pc}

0800820e <__seofread>:
 800820e:	2000      	movs	r0, #0
 8008210:	4770      	bx	lr

08008212 <__swrite>:
 8008212:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008216:	461f      	mov	r7, r3
 8008218:	898b      	ldrh	r3, [r1, #12]
 800821a:	4605      	mov	r5, r0
 800821c:	05db      	lsls	r3, r3, #23
 800821e:	460c      	mov	r4, r1
 8008220:	4616      	mov	r6, r2
 8008222:	d505      	bpl.n	8008230 <__swrite+0x1e>
 8008224:	2302      	movs	r3, #2
 8008226:	2200      	movs	r2, #0
 8008228:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800822c:	f000 f862 	bl	80082f4 <_lseek_r>
 8008230:	89a3      	ldrh	r3, [r4, #12]
 8008232:	4632      	mov	r2, r6
 8008234:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008238:	81a3      	strh	r3, [r4, #12]
 800823a:	4628      	mov	r0, r5
 800823c:	463b      	mov	r3, r7
 800823e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008242:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008246:	f000 b879 	b.w	800833c <_write_r>

0800824a <__sseek>:
 800824a:	b510      	push	{r4, lr}
 800824c:	460c      	mov	r4, r1
 800824e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008252:	f000 f84f 	bl	80082f4 <_lseek_r>
 8008256:	1c43      	adds	r3, r0, #1
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	bf15      	itete	ne
 800825c:	6560      	strne	r0, [r4, #84]	@ 0x54
 800825e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008262:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008266:	81a3      	strheq	r3, [r4, #12]
 8008268:	bf18      	it	ne
 800826a:	81a3      	strhne	r3, [r4, #12]
 800826c:	bd10      	pop	{r4, pc}

0800826e <__sclose>:
 800826e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008272:	f000 b82f 	b.w	80082d4 <_close_r>

08008276 <memset>:
 8008276:	4603      	mov	r3, r0
 8008278:	4402      	add	r2, r0
 800827a:	4293      	cmp	r3, r2
 800827c:	d100      	bne.n	8008280 <memset+0xa>
 800827e:	4770      	bx	lr
 8008280:	f803 1b01 	strb.w	r1, [r3], #1
 8008284:	e7f9      	b.n	800827a <memset+0x4>

08008286 <strcspn>:
 8008286:	4603      	mov	r3, r0
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	461e      	mov	r6, r3
 800828c:	f813 4b01 	ldrb.w	r4, [r3], #1
 8008290:	b144      	cbz	r4, 80082a4 <strcspn+0x1e>
 8008292:	1e4a      	subs	r2, r1, #1
 8008294:	e001      	b.n	800829a <strcspn+0x14>
 8008296:	42a5      	cmp	r5, r4
 8008298:	d004      	beq.n	80082a4 <strcspn+0x1e>
 800829a:	f812 5f01 	ldrb.w	r5, [r2, #1]!
 800829e:	2d00      	cmp	r5, #0
 80082a0:	d1f9      	bne.n	8008296 <strcspn+0x10>
 80082a2:	e7f2      	b.n	800828a <strcspn+0x4>
 80082a4:	1a30      	subs	r0, r6, r0
 80082a6:	bd70      	pop	{r4, r5, r6, pc}

080082a8 <strncmp>:
 80082a8:	b510      	push	{r4, lr}
 80082aa:	b16a      	cbz	r2, 80082c8 <strncmp+0x20>
 80082ac:	3901      	subs	r1, #1
 80082ae:	1884      	adds	r4, r0, r2
 80082b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80082b4:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 80082b8:	429a      	cmp	r2, r3
 80082ba:	d103      	bne.n	80082c4 <strncmp+0x1c>
 80082bc:	42a0      	cmp	r0, r4
 80082be:	d001      	beq.n	80082c4 <strncmp+0x1c>
 80082c0:	2a00      	cmp	r2, #0
 80082c2:	d1f5      	bne.n	80082b0 <strncmp+0x8>
 80082c4:	1ad0      	subs	r0, r2, r3
 80082c6:	bd10      	pop	{r4, pc}
 80082c8:	4610      	mov	r0, r2
 80082ca:	e7fc      	b.n	80082c6 <strncmp+0x1e>

080082cc <_localeconv_r>:
 80082cc:	4800      	ldr	r0, [pc, #0]	@ (80082d0 <_localeconv_r+0x4>)
 80082ce:	4770      	bx	lr
 80082d0:	2000015c 	.word	0x2000015c

080082d4 <_close_r>:
 80082d4:	b538      	push	{r3, r4, r5, lr}
 80082d6:	2300      	movs	r3, #0
 80082d8:	4d05      	ldr	r5, [pc, #20]	@ (80082f0 <_close_r+0x1c>)
 80082da:	4604      	mov	r4, r0
 80082dc:	4608      	mov	r0, r1
 80082de:	602b      	str	r3, [r5, #0]
 80082e0:	f7f9 fa29 	bl	8001736 <_close>
 80082e4:	1c43      	adds	r3, r0, #1
 80082e6:	d102      	bne.n	80082ee <_close_r+0x1a>
 80082e8:	682b      	ldr	r3, [r5, #0]
 80082ea:	b103      	cbz	r3, 80082ee <_close_r+0x1a>
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	bd38      	pop	{r3, r4, r5, pc}
 80082f0:	20001cec 	.word	0x20001cec

080082f4 <_lseek_r>:
 80082f4:	b538      	push	{r3, r4, r5, lr}
 80082f6:	4604      	mov	r4, r0
 80082f8:	4608      	mov	r0, r1
 80082fa:	4611      	mov	r1, r2
 80082fc:	2200      	movs	r2, #0
 80082fe:	4d05      	ldr	r5, [pc, #20]	@ (8008314 <_lseek_r+0x20>)
 8008300:	602a      	str	r2, [r5, #0]
 8008302:	461a      	mov	r2, r3
 8008304:	f7f9 fa3b 	bl	800177e <_lseek>
 8008308:	1c43      	adds	r3, r0, #1
 800830a:	d102      	bne.n	8008312 <_lseek_r+0x1e>
 800830c:	682b      	ldr	r3, [r5, #0]
 800830e:	b103      	cbz	r3, 8008312 <_lseek_r+0x1e>
 8008310:	6023      	str	r3, [r4, #0]
 8008312:	bd38      	pop	{r3, r4, r5, pc}
 8008314:	20001cec 	.word	0x20001cec

08008318 <_read_r>:
 8008318:	b538      	push	{r3, r4, r5, lr}
 800831a:	4604      	mov	r4, r0
 800831c:	4608      	mov	r0, r1
 800831e:	4611      	mov	r1, r2
 8008320:	2200      	movs	r2, #0
 8008322:	4d05      	ldr	r5, [pc, #20]	@ (8008338 <_read_r+0x20>)
 8008324:	602a      	str	r2, [r5, #0]
 8008326:	461a      	mov	r2, r3
 8008328:	f7f9 f9cc 	bl	80016c4 <_read>
 800832c:	1c43      	adds	r3, r0, #1
 800832e:	d102      	bne.n	8008336 <_read_r+0x1e>
 8008330:	682b      	ldr	r3, [r5, #0]
 8008332:	b103      	cbz	r3, 8008336 <_read_r+0x1e>
 8008334:	6023      	str	r3, [r4, #0]
 8008336:	bd38      	pop	{r3, r4, r5, pc}
 8008338:	20001cec 	.word	0x20001cec

0800833c <_write_r>:
 800833c:	b538      	push	{r3, r4, r5, lr}
 800833e:	4604      	mov	r4, r0
 8008340:	4608      	mov	r0, r1
 8008342:	4611      	mov	r1, r2
 8008344:	2200      	movs	r2, #0
 8008346:	4d05      	ldr	r5, [pc, #20]	@ (800835c <_write_r+0x20>)
 8008348:	602a      	str	r2, [r5, #0]
 800834a:	461a      	mov	r2, r3
 800834c:	f7f9 f9d7 	bl	80016fe <_write>
 8008350:	1c43      	adds	r3, r0, #1
 8008352:	d102      	bne.n	800835a <_write_r+0x1e>
 8008354:	682b      	ldr	r3, [r5, #0]
 8008356:	b103      	cbz	r3, 800835a <_write_r+0x1e>
 8008358:	6023      	str	r3, [r4, #0]
 800835a:	bd38      	pop	{r3, r4, r5, pc}
 800835c:	20001cec 	.word	0x20001cec

08008360 <__errno>:
 8008360:	4b01      	ldr	r3, [pc, #4]	@ (8008368 <__errno+0x8>)
 8008362:	6818      	ldr	r0, [r3, #0]
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	2000001c 	.word	0x2000001c

0800836c <__libc_init_array>:
 800836c:	b570      	push	{r4, r5, r6, lr}
 800836e:	2600      	movs	r6, #0
 8008370:	4d0c      	ldr	r5, [pc, #48]	@ (80083a4 <__libc_init_array+0x38>)
 8008372:	4c0d      	ldr	r4, [pc, #52]	@ (80083a8 <__libc_init_array+0x3c>)
 8008374:	1b64      	subs	r4, r4, r5
 8008376:	10a4      	asrs	r4, r4, #2
 8008378:	42a6      	cmp	r6, r4
 800837a:	d109      	bne.n	8008390 <__libc_init_array+0x24>
 800837c:	f002 fce2 	bl	800ad44 <_init>
 8008380:	2600      	movs	r6, #0
 8008382:	4d0a      	ldr	r5, [pc, #40]	@ (80083ac <__libc_init_array+0x40>)
 8008384:	4c0a      	ldr	r4, [pc, #40]	@ (80083b0 <__libc_init_array+0x44>)
 8008386:	1b64      	subs	r4, r4, r5
 8008388:	10a4      	asrs	r4, r4, #2
 800838a:	42a6      	cmp	r6, r4
 800838c:	d105      	bne.n	800839a <__libc_init_array+0x2e>
 800838e:	bd70      	pop	{r4, r5, r6, pc}
 8008390:	f855 3b04 	ldr.w	r3, [r5], #4
 8008394:	4798      	blx	r3
 8008396:	3601      	adds	r6, #1
 8008398:	e7ee      	b.n	8008378 <__libc_init_array+0xc>
 800839a:	f855 3b04 	ldr.w	r3, [r5], #4
 800839e:	4798      	blx	r3
 80083a0:	3601      	adds	r6, #1
 80083a2:	e7f2      	b.n	800838a <__libc_init_array+0x1e>
 80083a4:	0800b348 	.word	0x0800b348
 80083a8:	0800b348 	.word	0x0800b348
 80083ac:	0800b348 	.word	0x0800b348
 80083b0:	0800b34c 	.word	0x0800b34c

080083b4 <__retarget_lock_init_recursive>:
 80083b4:	4770      	bx	lr

080083b6 <__retarget_lock_acquire_recursive>:
 80083b6:	4770      	bx	lr

080083b8 <__retarget_lock_release_recursive>:
 80083b8:	4770      	bx	lr

080083ba <memchr>:
 80083ba:	4603      	mov	r3, r0
 80083bc:	b510      	push	{r4, lr}
 80083be:	b2c9      	uxtb	r1, r1
 80083c0:	4402      	add	r2, r0
 80083c2:	4293      	cmp	r3, r2
 80083c4:	4618      	mov	r0, r3
 80083c6:	d101      	bne.n	80083cc <memchr+0x12>
 80083c8:	2000      	movs	r0, #0
 80083ca:	e003      	b.n	80083d4 <memchr+0x1a>
 80083cc:	7804      	ldrb	r4, [r0, #0]
 80083ce:	3301      	adds	r3, #1
 80083d0:	428c      	cmp	r4, r1
 80083d2:	d1f6      	bne.n	80083c2 <memchr+0x8>
 80083d4:	bd10      	pop	{r4, pc}

080083d6 <memcpy>:
 80083d6:	440a      	add	r2, r1
 80083d8:	4291      	cmp	r1, r2
 80083da:	f100 33ff 	add.w	r3, r0, #4294967295
 80083de:	d100      	bne.n	80083e2 <memcpy+0xc>
 80083e0:	4770      	bx	lr
 80083e2:	b510      	push	{r4, lr}
 80083e4:	f811 4b01 	ldrb.w	r4, [r1], #1
 80083e8:	4291      	cmp	r1, r2
 80083ea:	f803 4f01 	strb.w	r4, [r3, #1]!
 80083ee:	d1f9      	bne.n	80083e4 <memcpy+0xe>
 80083f0:	bd10      	pop	{r4, pc}
	...

080083f4 <__assert_func>:
 80083f4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80083f6:	4614      	mov	r4, r2
 80083f8:	461a      	mov	r2, r3
 80083fa:	4b09      	ldr	r3, [pc, #36]	@ (8008420 <__assert_func+0x2c>)
 80083fc:	4605      	mov	r5, r0
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	68d8      	ldr	r0, [r3, #12]
 8008402:	b954      	cbnz	r4, 800841a <__assert_func+0x26>
 8008404:	4b07      	ldr	r3, [pc, #28]	@ (8008424 <__assert_func+0x30>)
 8008406:	461c      	mov	r4, r3
 8008408:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800840c:	9100      	str	r1, [sp, #0]
 800840e:	462b      	mov	r3, r5
 8008410:	4905      	ldr	r1, [pc, #20]	@ (8008428 <__assert_func+0x34>)
 8008412:	f001 fff1 	bl	800a3f8 <fiprintf>
 8008416:	f002 f89d 	bl	800a554 <abort>
 800841a:	4b04      	ldr	r3, [pc, #16]	@ (800842c <__assert_func+0x38>)
 800841c:	e7f4      	b.n	8008408 <__assert_func+0x14>
 800841e:	bf00      	nop
 8008420:	2000001c 	.word	0x2000001c
 8008424:	0800b03a 	.word	0x0800b03a
 8008428:	0800b00c 	.word	0x0800b00c
 800842c:	0800afff 	.word	0x0800afff

08008430 <quorem>:
 8008430:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008434:	6903      	ldr	r3, [r0, #16]
 8008436:	690c      	ldr	r4, [r1, #16]
 8008438:	4607      	mov	r7, r0
 800843a:	42a3      	cmp	r3, r4
 800843c:	db7e      	blt.n	800853c <quorem+0x10c>
 800843e:	3c01      	subs	r4, #1
 8008440:	00a3      	lsls	r3, r4, #2
 8008442:	f100 0514 	add.w	r5, r0, #20
 8008446:	f101 0814 	add.w	r8, r1, #20
 800844a:	9300      	str	r3, [sp, #0]
 800844c:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008450:	9301      	str	r3, [sp, #4]
 8008452:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008456:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800845a:	3301      	adds	r3, #1
 800845c:	429a      	cmp	r2, r3
 800845e:	fbb2 f6f3 	udiv	r6, r2, r3
 8008462:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008466:	d32e      	bcc.n	80084c6 <quorem+0x96>
 8008468:	f04f 0a00 	mov.w	sl, #0
 800846c:	46c4      	mov	ip, r8
 800846e:	46ae      	mov	lr, r5
 8008470:	46d3      	mov	fp, sl
 8008472:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008476:	b298      	uxth	r0, r3
 8008478:	fb06 a000 	mla	r0, r6, r0, sl
 800847c:	0c1b      	lsrs	r3, r3, #16
 800847e:	0c02      	lsrs	r2, r0, #16
 8008480:	fb06 2303 	mla	r3, r6, r3, r2
 8008484:	f8de 2000 	ldr.w	r2, [lr]
 8008488:	b280      	uxth	r0, r0
 800848a:	b292      	uxth	r2, r2
 800848c:	1a12      	subs	r2, r2, r0
 800848e:	445a      	add	r2, fp
 8008490:	f8de 0000 	ldr.w	r0, [lr]
 8008494:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008498:	b29b      	uxth	r3, r3
 800849a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800849e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80084a2:	b292      	uxth	r2, r2
 80084a4:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80084a8:	45e1      	cmp	r9, ip
 80084aa:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80084ae:	f84e 2b04 	str.w	r2, [lr], #4
 80084b2:	d2de      	bcs.n	8008472 <quorem+0x42>
 80084b4:	9b00      	ldr	r3, [sp, #0]
 80084b6:	58eb      	ldr	r3, [r5, r3]
 80084b8:	b92b      	cbnz	r3, 80084c6 <quorem+0x96>
 80084ba:	9b01      	ldr	r3, [sp, #4]
 80084bc:	3b04      	subs	r3, #4
 80084be:	429d      	cmp	r5, r3
 80084c0:	461a      	mov	r2, r3
 80084c2:	d32f      	bcc.n	8008524 <quorem+0xf4>
 80084c4:	613c      	str	r4, [r7, #16]
 80084c6:	4638      	mov	r0, r7
 80084c8:	f001 f978 	bl	80097bc <__mcmp>
 80084cc:	2800      	cmp	r0, #0
 80084ce:	db25      	blt.n	800851c <quorem+0xec>
 80084d0:	4629      	mov	r1, r5
 80084d2:	2000      	movs	r0, #0
 80084d4:	f858 2b04 	ldr.w	r2, [r8], #4
 80084d8:	f8d1 c000 	ldr.w	ip, [r1]
 80084dc:	fa1f fe82 	uxth.w	lr, r2
 80084e0:	fa1f f38c 	uxth.w	r3, ip
 80084e4:	eba3 030e 	sub.w	r3, r3, lr
 80084e8:	4403      	add	r3, r0
 80084ea:	0c12      	lsrs	r2, r2, #16
 80084ec:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80084f0:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80084f4:	b29b      	uxth	r3, r3
 80084f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80084fa:	45c1      	cmp	r9, r8
 80084fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008500:	f841 3b04 	str.w	r3, [r1], #4
 8008504:	d2e6      	bcs.n	80084d4 <quorem+0xa4>
 8008506:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800850a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800850e:	b922      	cbnz	r2, 800851a <quorem+0xea>
 8008510:	3b04      	subs	r3, #4
 8008512:	429d      	cmp	r5, r3
 8008514:	461a      	mov	r2, r3
 8008516:	d30b      	bcc.n	8008530 <quorem+0x100>
 8008518:	613c      	str	r4, [r7, #16]
 800851a:	3601      	adds	r6, #1
 800851c:	4630      	mov	r0, r6
 800851e:	b003      	add	sp, #12
 8008520:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008524:	6812      	ldr	r2, [r2, #0]
 8008526:	3b04      	subs	r3, #4
 8008528:	2a00      	cmp	r2, #0
 800852a:	d1cb      	bne.n	80084c4 <quorem+0x94>
 800852c:	3c01      	subs	r4, #1
 800852e:	e7c6      	b.n	80084be <quorem+0x8e>
 8008530:	6812      	ldr	r2, [r2, #0]
 8008532:	3b04      	subs	r3, #4
 8008534:	2a00      	cmp	r2, #0
 8008536:	d1ef      	bne.n	8008518 <quorem+0xe8>
 8008538:	3c01      	subs	r4, #1
 800853a:	e7ea      	b.n	8008512 <quorem+0xe2>
 800853c:	2000      	movs	r0, #0
 800853e:	e7ee      	b.n	800851e <quorem+0xee>

08008540 <_dtoa_r>:
 8008540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008544:	4614      	mov	r4, r2
 8008546:	461d      	mov	r5, r3
 8008548:	69c7      	ldr	r7, [r0, #28]
 800854a:	b097      	sub	sp, #92	@ 0x5c
 800854c:	4683      	mov	fp, r0
 800854e:	e9cd 4502 	strd	r4, r5, [sp, #8]
 8008552:	9e23      	ldr	r6, [sp, #140]	@ 0x8c
 8008554:	b97f      	cbnz	r7, 8008576 <_dtoa_r+0x36>
 8008556:	2010      	movs	r0, #16
 8008558:	f000 fe02 	bl	8009160 <malloc>
 800855c:	4602      	mov	r2, r0
 800855e:	f8cb 001c 	str.w	r0, [fp, #28]
 8008562:	b920      	cbnz	r0, 800856e <_dtoa_r+0x2e>
 8008564:	21ef      	movs	r1, #239	@ 0xef
 8008566:	4ba8      	ldr	r3, [pc, #672]	@ (8008808 <_dtoa_r+0x2c8>)
 8008568:	48a8      	ldr	r0, [pc, #672]	@ (800880c <_dtoa_r+0x2cc>)
 800856a:	f7ff ff43 	bl	80083f4 <__assert_func>
 800856e:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8008572:	6007      	str	r7, [r0, #0]
 8008574:	60c7      	str	r7, [r0, #12]
 8008576:	f8db 301c 	ldr.w	r3, [fp, #28]
 800857a:	6819      	ldr	r1, [r3, #0]
 800857c:	b159      	cbz	r1, 8008596 <_dtoa_r+0x56>
 800857e:	685a      	ldr	r2, [r3, #4]
 8008580:	2301      	movs	r3, #1
 8008582:	4093      	lsls	r3, r2
 8008584:	604a      	str	r2, [r1, #4]
 8008586:	608b      	str	r3, [r1, #8]
 8008588:	4658      	mov	r0, fp
 800858a:	f000 fedf 	bl	800934c <_Bfree>
 800858e:	2200      	movs	r2, #0
 8008590:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008594:	601a      	str	r2, [r3, #0]
 8008596:	1e2b      	subs	r3, r5, #0
 8008598:	bfaf      	iteee	ge
 800859a:	2300      	movge	r3, #0
 800859c:	2201      	movlt	r2, #1
 800859e:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80085a2:	9303      	strlt	r3, [sp, #12]
 80085a4:	bfa8      	it	ge
 80085a6:	6033      	strge	r3, [r6, #0]
 80085a8:	f8dd 800c 	ldr.w	r8, [sp, #12]
 80085ac:	4b98      	ldr	r3, [pc, #608]	@ (8008810 <_dtoa_r+0x2d0>)
 80085ae:	bfb8      	it	lt
 80085b0:	6032      	strlt	r2, [r6, #0]
 80085b2:	ea33 0308 	bics.w	r3, r3, r8
 80085b6:	d112      	bne.n	80085de <_dtoa_r+0x9e>
 80085b8:	f242 730f 	movw	r3, #9999	@ 0x270f
 80085bc:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	f3c8 0313 	ubfx	r3, r8, #0, #20
 80085c4:	4323      	orrs	r3, r4
 80085c6:	f000 8550 	beq.w	800906a <_dtoa_r+0xb2a>
 80085ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085cc:	f8df a244 	ldr.w	sl, [pc, #580]	@ 8008814 <_dtoa_r+0x2d4>
 80085d0:	2b00      	cmp	r3, #0
 80085d2:	f000 8552 	beq.w	800907a <_dtoa_r+0xb3a>
 80085d6:	f10a 0303 	add.w	r3, sl, #3
 80085da:	f000 bd4c 	b.w	8009076 <_dtoa_r+0xb36>
 80085de:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80085e2:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 80085e6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80085ea:	2200      	movs	r2, #0
 80085ec:	2300      	movs	r3, #0
 80085ee:	f7f8 f9e5 	bl	80009bc <__aeabi_dcmpeq>
 80085f2:	4607      	mov	r7, r0
 80085f4:	b158      	cbz	r0, 800860e <_dtoa_r+0xce>
 80085f6:	2301      	movs	r3, #1
 80085f8:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80085fa:	6013      	str	r3, [r2, #0]
 80085fc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80085fe:	b113      	cbz	r3, 8008606 <_dtoa_r+0xc6>
 8008600:	4b85      	ldr	r3, [pc, #532]	@ (8008818 <_dtoa_r+0x2d8>)
 8008602:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8008604:	6013      	str	r3, [r2, #0]
 8008606:	f8df a214 	ldr.w	sl, [pc, #532]	@ 800881c <_dtoa_r+0x2dc>
 800860a:	f000 bd36 	b.w	800907a <_dtoa_r+0xb3a>
 800860e:	ab14      	add	r3, sp, #80	@ 0x50
 8008610:	9301      	str	r3, [sp, #4]
 8008612:	ab15      	add	r3, sp, #84	@ 0x54
 8008614:	9300      	str	r3, [sp, #0]
 8008616:	4658      	mov	r0, fp
 8008618:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800861c:	f001 f97e 	bl	800991c <__d2b>
 8008620:	f3c8 560a 	ubfx	r6, r8, #20, #11
 8008624:	4681      	mov	r9, r0
 8008626:	2e00      	cmp	r6, #0
 8008628:	d077      	beq.n	800871a <_dtoa_r+0x1da>
 800862a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800862e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008630:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8008634:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008638:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800863c:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8008640:	9712      	str	r7, [sp, #72]	@ 0x48
 8008642:	4619      	mov	r1, r3
 8008644:	2200      	movs	r2, #0
 8008646:	4b76      	ldr	r3, [pc, #472]	@ (8008820 <_dtoa_r+0x2e0>)
 8008648:	f7f7 fd98 	bl	800017c <__aeabi_dsub>
 800864c:	a368      	add	r3, pc, #416	@ (adr r3, 80087f0 <_dtoa_r+0x2b0>)
 800864e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008652:	f7f7 ff4b 	bl	80004ec <__aeabi_dmul>
 8008656:	a368      	add	r3, pc, #416	@ (adr r3, 80087f8 <_dtoa_r+0x2b8>)
 8008658:	e9d3 2300 	ldrd	r2, r3, [r3]
 800865c:	f7f7 fd90 	bl	8000180 <__adddf3>
 8008660:	4604      	mov	r4, r0
 8008662:	4630      	mov	r0, r6
 8008664:	460d      	mov	r5, r1
 8008666:	f7f7 fed7 	bl	8000418 <__aeabi_i2d>
 800866a:	a365      	add	r3, pc, #404	@ (adr r3, 8008800 <_dtoa_r+0x2c0>)
 800866c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008670:	f7f7 ff3c 	bl	80004ec <__aeabi_dmul>
 8008674:	4602      	mov	r2, r0
 8008676:	460b      	mov	r3, r1
 8008678:	4620      	mov	r0, r4
 800867a:	4629      	mov	r1, r5
 800867c:	f7f7 fd80 	bl	8000180 <__adddf3>
 8008680:	4604      	mov	r4, r0
 8008682:	460d      	mov	r5, r1
 8008684:	f7f8 f9e2 	bl	8000a4c <__aeabi_d2iz>
 8008688:	2200      	movs	r2, #0
 800868a:	4607      	mov	r7, r0
 800868c:	2300      	movs	r3, #0
 800868e:	4620      	mov	r0, r4
 8008690:	4629      	mov	r1, r5
 8008692:	f7f8 f99d 	bl	80009d0 <__aeabi_dcmplt>
 8008696:	b140      	cbz	r0, 80086aa <_dtoa_r+0x16a>
 8008698:	4638      	mov	r0, r7
 800869a:	f7f7 febd 	bl	8000418 <__aeabi_i2d>
 800869e:	4622      	mov	r2, r4
 80086a0:	462b      	mov	r3, r5
 80086a2:	f7f8 f98b 	bl	80009bc <__aeabi_dcmpeq>
 80086a6:	b900      	cbnz	r0, 80086aa <_dtoa_r+0x16a>
 80086a8:	3f01      	subs	r7, #1
 80086aa:	2f16      	cmp	r7, #22
 80086ac:	d853      	bhi.n	8008756 <_dtoa_r+0x216>
 80086ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80086b2:	4b5c      	ldr	r3, [pc, #368]	@ (8008824 <_dtoa_r+0x2e4>)
 80086b4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80086b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80086bc:	f7f8 f988 	bl	80009d0 <__aeabi_dcmplt>
 80086c0:	2800      	cmp	r0, #0
 80086c2:	d04a      	beq.n	800875a <_dtoa_r+0x21a>
 80086c4:	2300      	movs	r3, #0
 80086c6:	3f01      	subs	r7, #1
 80086c8:	930f      	str	r3, [sp, #60]	@ 0x3c
 80086ca:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80086cc:	1b9b      	subs	r3, r3, r6
 80086ce:	1e5a      	subs	r2, r3, #1
 80086d0:	bf46      	itte	mi
 80086d2:	f1c3 0801 	rsbmi	r8, r3, #1
 80086d6:	2300      	movmi	r3, #0
 80086d8:	f04f 0800 	movpl.w	r8, #0
 80086dc:	9209      	str	r2, [sp, #36]	@ 0x24
 80086de:	bf48      	it	mi
 80086e0:	9309      	strmi	r3, [sp, #36]	@ 0x24
 80086e2:	2f00      	cmp	r7, #0
 80086e4:	db3b      	blt.n	800875e <_dtoa_r+0x21e>
 80086e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80086e8:	970e      	str	r7, [sp, #56]	@ 0x38
 80086ea:	443b      	add	r3, r7
 80086ec:	9309      	str	r3, [sp, #36]	@ 0x24
 80086ee:	2300      	movs	r3, #0
 80086f0:	930a      	str	r3, [sp, #40]	@ 0x28
 80086f2:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 80086f4:	2b09      	cmp	r3, #9
 80086f6:	d866      	bhi.n	80087c6 <_dtoa_r+0x286>
 80086f8:	2b05      	cmp	r3, #5
 80086fa:	bfc4      	itt	gt
 80086fc:	3b04      	subgt	r3, #4
 80086fe:	9320      	strgt	r3, [sp, #128]	@ 0x80
 8008700:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008702:	bfc8      	it	gt
 8008704:	2400      	movgt	r4, #0
 8008706:	f1a3 0302 	sub.w	r3, r3, #2
 800870a:	bfd8      	it	le
 800870c:	2401      	movle	r4, #1
 800870e:	2b03      	cmp	r3, #3
 8008710:	d864      	bhi.n	80087dc <_dtoa_r+0x29c>
 8008712:	e8df f003 	tbb	[pc, r3]
 8008716:	382b      	.short	0x382b
 8008718:	5636      	.short	0x5636
 800871a:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800871e:	441e      	add	r6, r3
 8008720:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8008724:	2b20      	cmp	r3, #32
 8008726:	bfc1      	itttt	gt
 8008728:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800872c:	fa08 f803 	lslgt.w	r8, r8, r3
 8008730:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8008734:	fa24 f303 	lsrgt.w	r3, r4, r3
 8008738:	bfd6      	itet	le
 800873a:	f1c3 0320 	rsble	r3, r3, #32
 800873e:	ea48 0003 	orrgt.w	r0, r8, r3
 8008742:	fa04 f003 	lslle.w	r0, r4, r3
 8008746:	f7f7 fe57 	bl	80003f8 <__aeabi_ui2d>
 800874a:	2201      	movs	r2, #1
 800874c:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8008750:	3e01      	subs	r6, #1
 8008752:	9212      	str	r2, [sp, #72]	@ 0x48
 8008754:	e775      	b.n	8008642 <_dtoa_r+0x102>
 8008756:	2301      	movs	r3, #1
 8008758:	e7b6      	b.n	80086c8 <_dtoa_r+0x188>
 800875a:	900f      	str	r0, [sp, #60]	@ 0x3c
 800875c:	e7b5      	b.n	80086ca <_dtoa_r+0x18a>
 800875e:	427b      	negs	r3, r7
 8008760:	930a      	str	r3, [sp, #40]	@ 0x28
 8008762:	2300      	movs	r3, #0
 8008764:	eba8 0807 	sub.w	r8, r8, r7
 8008768:	930e      	str	r3, [sp, #56]	@ 0x38
 800876a:	e7c2      	b.n	80086f2 <_dtoa_r+0x1b2>
 800876c:	2300      	movs	r3, #0
 800876e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008770:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008772:	2b00      	cmp	r3, #0
 8008774:	dc35      	bgt.n	80087e2 <_dtoa_r+0x2a2>
 8008776:	2301      	movs	r3, #1
 8008778:	461a      	mov	r2, r3
 800877a:	e9cd 3307 	strd	r3, r3, [sp, #28]
 800877e:	9221      	str	r2, [sp, #132]	@ 0x84
 8008780:	e00b      	b.n	800879a <_dtoa_r+0x25a>
 8008782:	2301      	movs	r3, #1
 8008784:	e7f3      	b.n	800876e <_dtoa_r+0x22e>
 8008786:	2300      	movs	r3, #0
 8008788:	930b      	str	r3, [sp, #44]	@ 0x2c
 800878a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800878c:	18fb      	adds	r3, r7, r3
 800878e:	9308      	str	r3, [sp, #32]
 8008790:	3301      	adds	r3, #1
 8008792:	2b01      	cmp	r3, #1
 8008794:	9307      	str	r3, [sp, #28]
 8008796:	bfb8      	it	lt
 8008798:	2301      	movlt	r3, #1
 800879a:	2100      	movs	r1, #0
 800879c:	2204      	movs	r2, #4
 800879e:	f8db 001c 	ldr.w	r0, [fp, #28]
 80087a2:	f102 0514 	add.w	r5, r2, #20
 80087a6:	429d      	cmp	r5, r3
 80087a8:	d91f      	bls.n	80087ea <_dtoa_r+0x2aa>
 80087aa:	6041      	str	r1, [r0, #4]
 80087ac:	4658      	mov	r0, fp
 80087ae:	f000 fd8d 	bl	80092cc <_Balloc>
 80087b2:	4682      	mov	sl, r0
 80087b4:	2800      	cmp	r0, #0
 80087b6:	d139      	bne.n	800882c <_dtoa_r+0x2ec>
 80087b8:	4602      	mov	r2, r0
 80087ba:	f240 11af 	movw	r1, #431	@ 0x1af
 80087be:	4b1a      	ldr	r3, [pc, #104]	@ (8008828 <_dtoa_r+0x2e8>)
 80087c0:	e6d2      	b.n	8008568 <_dtoa_r+0x28>
 80087c2:	2301      	movs	r3, #1
 80087c4:	e7e0      	b.n	8008788 <_dtoa_r+0x248>
 80087c6:	2401      	movs	r4, #1
 80087c8:	2300      	movs	r3, #0
 80087ca:	940b      	str	r4, [sp, #44]	@ 0x2c
 80087cc:	9320      	str	r3, [sp, #128]	@ 0x80
 80087ce:	f04f 33ff 	mov.w	r3, #4294967295
 80087d2:	2200      	movs	r2, #0
 80087d4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80087d8:	2312      	movs	r3, #18
 80087da:	e7d0      	b.n	800877e <_dtoa_r+0x23e>
 80087dc:	2301      	movs	r3, #1
 80087de:	930b      	str	r3, [sp, #44]	@ 0x2c
 80087e0:	e7f5      	b.n	80087ce <_dtoa_r+0x28e>
 80087e2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80087e4:	e9cd 3307 	strd	r3, r3, [sp, #28]
 80087e8:	e7d7      	b.n	800879a <_dtoa_r+0x25a>
 80087ea:	3101      	adds	r1, #1
 80087ec:	0052      	lsls	r2, r2, #1
 80087ee:	e7d8      	b.n	80087a2 <_dtoa_r+0x262>
 80087f0:	636f4361 	.word	0x636f4361
 80087f4:	3fd287a7 	.word	0x3fd287a7
 80087f8:	8b60c8b3 	.word	0x8b60c8b3
 80087fc:	3fc68a28 	.word	0x3fc68a28
 8008800:	509f79fb 	.word	0x509f79fb
 8008804:	3fd34413 	.word	0x3fd34413
 8008808:	0800af5e 	.word	0x0800af5e
 800880c:	0800b048 	.word	0x0800b048
 8008810:	7ff00000 	.word	0x7ff00000
 8008814:	0800b044 	.word	0x0800b044
 8008818:	0800b230 	.word	0x0800b230
 800881c:	0800b22f 	.word	0x0800b22f
 8008820:	3ff80000 	.word	0x3ff80000
 8008824:	0800b140 	.word	0x0800b140
 8008828:	0800b0a0 	.word	0x0800b0a0
 800882c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8008830:	6018      	str	r0, [r3, #0]
 8008832:	9b07      	ldr	r3, [sp, #28]
 8008834:	2b0e      	cmp	r3, #14
 8008836:	f200 80a4 	bhi.w	8008982 <_dtoa_r+0x442>
 800883a:	2c00      	cmp	r4, #0
 800883c:	f000 80a1 	beq.w	8008982 <_dtoa_r+0x442>
 8008840:	2f00      	cmp	r7, #0
 8008842:	dd33      	ble.n	80088ac <_dtoa_r+0x36c>
 8008844:	4b86      	ldr	r3, [pc, #536]	@ (8008a60 <_dtoa_r+0x520>)
 8008846:	f007 020f 	and.w	r2, r7, #15
 800884a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800884e:	05f8      	lsls	r0, r7, #23
 8008850:	e9d3 3400 	ldrd	r3, r4, [r3]
 8008854:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8008858:	ea4f 1427 	mov.w	r4, r7, asr #4
 800885c:	d516      	bpl.n	800888c <_dtoa_r+0x34c>
 800885e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8008862:	4b80      	ldr	r3, [pc, #512]	@ (8008a64 <_dtoa_r+0x524>)
 8008864:	2603      	movs	r6, #3
 8008866:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800886a:	f7f7 ff69 	bl	8000740 <__aeabi_ddiv>
 800886e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008872:	f004 040f 	and.w	r4, r4, #15
 8008876:	4d7b      	ldr	r5, [pc, #492]	@ (8008a64 <_dtoa_r+0x524>)
 8008878:	b954      	cbnz	r4, 8008890 <_dtoa_r+0x350>
 800887a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800887e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008882:	f7f7 ff5d 	bl	8000740 <__aeabi_ddiv>
 8008886:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800888a:	e028      	b.n	80088de <_dtoa_r+0x39e>
 800888c:	2602      	movs	r6, #2
 800888e:	e7f2      	b.n	8008876 <_dtoa_r+0x336>
 8008890:	07e1      	lsls	r1, r4, #31
 8008892:	d508      	bpl.n	80088a6 <_dtoa_r+0x366>
 8008894:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008898:	e9d5 2300 	ldrd	r2, r3, [r5]
 800889c:	f7f7 fe26 	bl	80004ec <__aeabi_dmul>
 80088a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088a4:	3601      	adds	r6, #1
 80088a6:	1064      	asrs	r4, r4, #1
 80088a8:	3508      	adds	r5, #8
 80088aa:	e7e5      	b.n	8008878 <_dtoa_r+0x338>
 80088ac:	f000 80d2 	beq.w	8008a54 <_dtoa_r+0x514>
 80088b0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80088b4:	427c      	negs	r4, r7
 80088b6:	4b6a      	ldr	r3, [pc, #424]	@ (8008a60 <_dtoa_r+0x520>)
 80088b8:	f004 020f 	and.w	r2, r4, #15
 80088bc:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80088c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80088c4:	f7f7 fe12 	bl	80004ec <__aeabi_dmul>
 80088c8:	2602      	movs	r6, #2
 80088ca:	2300      	movs	r3, #0
 80088cc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80088d0:	4d64      	ldr	r5, [pc, #400]	@ (8008a64 <_dtoa_r+0x524>)
 80088d2:	1124      	asrs	r4, r4, #4
 80088d4:	2c00      	cmp	r4, #0
 80088d6:	f040 80b2 	bne.w	8008a3e <_dtoa_r+0x4fe>
 80088da:	2b00      	cmp	r3, #0
 80088dc:	d1d3      	bne.n	8008886 <_dtoa_r+0x346>
 80088de:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80088e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 80b7 	beq.w	8008a58 <_dtoa_r+0x518>
 80088ea:	2200      	movs	r2, #0
 80088ec:	4620      	mov	r0, r4
 80088ee:	4629      	mov	r1, r5
 80088f0:	4b5d      	ldr	r3, [pc, #372]	@ (8008a68 <_dtoa_r+0x528>)
 80088f2:	f7f8 f86d 	bl	80009d0 <__aeabi_dcmplt>
 80088f6:	2800      	cmp	r0, #0
 80088f8:	f000 80ae 	beq.w	8008a58 <_dtoa_r+0x518>
 80088fc:	9b07      	ldr	r3, [sp, #28]
 80088fe:	2b00      	cmp	r3, #0
 8008900:	f000 80aa 	beq.w	8008a58 <_dtoa_r+0x518>
 8008904:	9b08      	ldr	r3, [sp, #32]
 8008906:	2b00      	cmp	r3, #0
 8008908:	dd37      	ble.n	800897a <_dtoa_r+0x43a>
 800890a:	1e7b      	subs	r3, r7, #1
 800890c:	4620      	mov	r0, r4
 800890e:	9304      	str	r3, [sp, #16]
 8008910:	2200      	movs	r2, #0
 8008912:	4629      	mov	r1, r5
 8008914:	4b55      	ldr	r3, [pc, #340]	@ (8008a6c <_dtoa_r+0x52c>)
 8008916:	f7f7 fde9 	bl	80004ec <__aeabi_dmul>
 800891a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800891e:	9c08      	ldr	r4, [sp, #32]
 8008920:	3601      	adds	r6, #1
 8008922:	4630      	mov	r0, r6
 8008924:	f7f7 fd78 	bl	8000418 <__aeabi_i2d>
 8008928:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800892c:	f7f7 fdde 	bl	80004ec <__aeabi_dmul>
 8008930:	2200      	movs	r2, #0
 8008932:	4b4f      	ldr	r3, [pc, #316]	@ (8008a70 <_dtoa_r+0x530>)
 8008934:	f7f7 fc24 	bl	8000180 <__adddf3>
 8008938:	4605      	mov	r5, r0
 800893a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800893e:	2c00      	cmp	r4, #0
 8008940:	f040 809a 	bne.w	8008a78 <_dtoa_r+0x538>
 8008944:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008948:	2200      	movs	r2, #0
 800894a:	4b4a      	ldr	r3, [pc, #296]	@ (8008a74 <_dtoa_r+0x534>)
 800894c:	f7f7 fc16 	bl	800017c <__aeabi_dsub>
 8008950:	4602      	mov	r2, r0
 8008952:	460b      	mov	r3, r1
 8008954:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008958:	462a      	mov	r2, r5
 800895a:	4633      	mov	r3, r6
 800895c:	f7f8 f856 	bl	8000a0c <__aeabi_dcmpgt>
 8008960:	2800      	cmp	r0, #0
 8008962:	f040 828e 	bne.w	8008e82 <_dtoa_r+0x942>
 8008966:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800896a:	462a      	mov	r2, r5
 800896c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8008970:	f7f8 f82e 	bl	80009d0 <__aeabi_dcmplt>
 8008974:	2800      	cmp	r0, #0
 8008976:	f040 8127 	bne.w	8008bc8 <_dtoa_r+0x688>
 800897a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800897e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8008982:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8008984:	2b00      	cmp	r3, #0
 8008986:	f2c0 8163 	blt.w	8008c50 <_dtoa_r+0x710>
 800898a:	2f0e      	cmp	r7, #14
 800898c:	f300 8160 	bgt.w	8008c50 <_dtoa_r+0x710>
 8008990:	4b33      	ldr	r3, [pc, #204]	@ (8008a60 <_dtoa_r+0x520>)
 8008992:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008996:	e9d3 3400 	ldrd	r3, r4, [r3]
 800899a:	e9cd 3404 	strd	r3, r4, [sp, #16]
 800899e:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	da03      	bge.n	80089ac <_dtoa_r+0x46c>
 80089a4:	9b07      	ldr	r3, [sp, #28]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	f340 8100 	ble.w	8008bac <_dtoa_r+0x66c>
 80089ac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80089b0:	4656      	mov	r6, sl
 80089b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089b6:	4620      	mov	r0, r4
 80089b8:	4629      	mov	r1, r5
 80089ba:	f7f7 fec1 	bl	8000740 <__aeabi_ddiv>
 80089be:	f7f8 f845 	bl	8000a4c <__aeabi_d2iz>
 80089c2:	4680      	mov	r8, r0
 80089c4:	f7f7 fd28 	bl	8000418 <__aeabi_i2d>
 80089c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089cc:	f7f7 fd8e 	bl	80004ec <__aeabi_dmul>
 80089d0:	4602      	mov	r2, r0
 80089d2:	460b      	mov	r3, r1
 80089d4:	4620      	mov	r0, r4
 80089d6:	4629      	mov	r1, r5
 80089d8:	f7f7 fbd0 	bl	800017c <__aeabi_dsub>
 80089dc:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80089e0:	9d07      	ldr	r5, [sp, #28]
 80089e2:	f806 4b01 	strb.w	r4, [r6], #1
 80089e6:	eba6 040a 	sub.w	r4, r6, sl
 80089ea:	42a5      	cmp	r5, r4
 80089ec:	4602      	mov	r2, r0
 80089ee:	460b      	mov	r3, r1
 80089f0:	f040 8116 	bne.w	8008c20 <_dtoa_r+0x6e0>
 80089f4:	f7f7 fbc4 	bl	8000180 <__adddf3>
 80089f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80089fc:	4604      	mov	r4, r0
 80089fe:	460d      	mov	r5, r1
 8008a00:	f7f8 f804 	bl	8000a0c <__aeabi_dcmpgt>
 8008a04:	2800      	cmp	r0, #0
 8008a06:	f040 80f8 	bne.w	8008bfa <_dtoa_r+0x6ba>
 8008a0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008a0e:	4620      	mov	r0, r4
 8008a10:	4629      	mov	r1, r5
 8008a12:	f7f7 ffd3 	bl	80009bc <__aeabi_dcmpeq>
 8008a16:	b118      	cbz	r0, 8008a20 <_dtoa_r+0x4e0>
 8008a18:	f018 0f01 	tst.w	r8, #1
 8008a1c:	f040 80ed 	bne.w	8008bfa <_dtoa_r+0x6ba>
 8008a20:	4649      	mov	r1, r9
 8008a22:	4658      	mov	r0, fp
 8008a24:	f000 fc92 	bl	800934c <_Bfree>
 8008a28:	2300      	movs	r3, #0
 8008a2a:	7033      	strb	r3, [r6, #0]
 8008a2c:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008a2e:	3701      	adds	r7, #1
 8008a30:	601f      	str	r7, [r3, #0]
 8008a32:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	f000 8320 	beq.w	800907a <_dtoa_r+0xb3a>
 8008a3a:	601e      	str	r6, [r3, #0]
 8008a3c:	e31d      	b.n	800907a <_dtoa_r+0xb3a>
 8008a3e:	07e2      	lsls	r2, r4, #31
 8008a40:	d505      	bpl.n	8008a4e <_dtoa_r+0x50e>
 8008a42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008a46:	f7f7 fd51 	bl	80004ec <__aeabi_dmul>
 8008a4a:	2301      	movs	r3, #1
 8008a4c:	3601      	adds	r6, #1
 8008a4e:	1064      	asrs	r4, r4, #1
 8008a50:	3508      	adds	r5, #8
 8008a52:	e73f      	b.n	80088d4 <_dtoa_r+0x394>
 8008a54:	2602      	movs	r6, #2
 8008a56:	e742      	b.n	80088de <_dtoa_r+0x39e>
 8008a58:	9c07      	ldr	r4, [sp, #28]
 8008a5a:	9704      	str	r7, [sp, #16]
 8008a5c:	e761      	b.n	8008922 <_dtoa_r+0x3e2>
 8008a5e:	bf00      	nop
 8008a60:	0800b140 	.word	0x0800b140
 8008a64:	0800b118 	.word	0x0800b118
 8008a68:	3ff00000 	.word	0x3ff00000
 8008a6c:	40240000 	.word	0x40240000
 8008a70:	401c0000 	.word	0x401c0000
 8008a74:	40140000 	.word	0x40140000
 8008a78:	4b70      	ldr	r3, [pc, #448]	@ (8008c3c <_dtoa_r+0x6fc>)
 8008a7a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8008a7c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008a80:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8008a84:	4454      	add	r4, sl
 8008a86:	2900      	cmp	r1, #0
 8008a88:	d045      	beq.n	8008b16 <_dtoa_r+0x5d6>
 8008a8a:	2000      	movs	r0, #0
 8008a8c:	496c      	ldr	r1, [pc, #432]	@ (8008c40 <_dtoa_r+0x700>)
 8008a8e:	f7f7 fe57 	bl	8000740 <__aeabi_ddiv>
 8008a92:	4633      	mov	r3, r6
 8008a94:	462a      	mov	r2, r5
 8008a96:	f7f7 fb71 	bl	800017c <__aeabi_dsub>
 8008a9a:	4656      	mov	r6, sl
 8008a9c:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008aa0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008aa4:	f7f7 ffd2 	bl	8000a4c <__aeabi_d2iz>
 8008aa8:	4605      	mov	r5, r0
 8008aaa:	f7f7 fcb5 	bl	8000418 <__aeabi_i2d>
 8008aae:	4602      	mov	r2, r0
 8008ab0:	460b      	mov	r3, r1
 8008ab2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ab6:	f7f7 fb61 	bl	800017c <__aeabi_dsub>
 8008aba:	4602      	mov	r2, r0
 8008abc:	460b      	mov	r3, r1
 8008abe:	3530      	adds	r5, #48	@ 0x30
 8008ac0:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008ac4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ac8:	f806 5b01 	strb.w	r5, [r6], #1
 8008acc:	f7f7 ff80 	bl	80009d0 <__aeabi_dcmplt>
 8008ad0:	2800      	cmp	r0, #0
 8008ad2:	d163      	bne.n	8008b9c <_dtoa_r+0x65c>
 8008ad4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008ad8:	2000      	movs	r0, #0
 8008ada:	495a      	ldr	r1, [pc, #360]	@ (8008c44 <_dtoa_r+0x704>)
 8008adc:	f7f7 fb4e 	bl	800017c <__aeabi_dsub>
 8008ae0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008ae4:	f7f7 ff74 	bl	80009d0 <__aeabi_dcmplt>
 8008ae8:	2800      	cmp	r0, #0
 8008aea:	f040 8087 	bne.w	8008bfc <_dtoa_r+0x6bc>
 8008aee:	42a6      	cmp	r6, r4
 8008af0:	f43f af43 	beq.w	800897a <_dtoa_r+0x43a>
 8008af4:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008af8:	2200      	movs	r2, #0
 8008afa:	4b53      	ldr	r3, [pc, #332]	@ (8008c48 <_dtoa_r+0x708>)
 8008afc:	f7f7 fcf6 	bl	80004ec <__aeabi_dmul>
 8008b00:	2200      	movs	r2, #0
 8008b02:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b0a:	4b4f      	ldr	r3, [pc, #316]	@ (8008c48 <_dtoa_r+0x708>)
 8008b0c:	f7f7 fcee 	bl	80004ec <__aeabi_dmul>
 8008b10:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008b14:	e7c4      	b.n	8008aa0 <_dtoa_r+0x560>
 8008b16:	4631      	mov	r1, r6
 8008b18:	4628      	mov	r0, r5
 8008b1a:	f7f7 fce7 	bl	80004ec <__aeabi_dmul>
 8008b1e:	4656      	mov	r6, sl
 8008b20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8008b24:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008b26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b2a:	f7f7 ff8f 	bl	8000a4c <__aeabi_d2iz>
 8008b2e:	4605      	mov	r5, r0
 8008b30:	f7f7 fc72 	bl	8000418 <__aeabi_i2d>
 8008b34:	4602      	mov	r2, r0
 8008b36:	460b      	mov	r3, r1
 8008b38:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b3c:	f7f7 fb1e 	bl	800017c <__aeabi_dsub>
 8008b40:	4602      	mov	r2, r0
 8008b42:	460b      	mov	r3, r1
 8008b44:	3530      	adds	r5, #48	@ 0x30
 8008b46:	f806 5b01 	strb.w	r5, [r6], #1
 8008b4a:	42a6      	cmp	r6, r4
 8008b4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8008b50:	f04f 0200 	mov.w	r2, #0
 8008b54:	d124      	bne.n	8008ba0 <_dtoa_r+0x660>
 8008b56:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8008b5a:	4b39      	ldr	r3, [pc, #228]	@ (8008c40 <_dtoa_r+0x700>)
 8008b5c:	f7f7 fb10 	bl	8000180 <__adddf3>
 8008b60:	4602      	mov	r2, r0
 8008b62:	460b      	mov	r3, r1
 8008b64:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b68:	f7f7 ff50 	bl	8000a0c <__aeabi_dcmpgt>
 8008b6c:	2800      	cmp	r0, #0
 8008b6e:	d145      	bne.n	8008bfc <_dtoa_r+0x6bc>
 8008b70:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8008b74:	2000      	movs	r0, #0
 8008b76:	4932      	ldr	r1, [pc, #200]	@ (8008c40 <_dtoa_r+0x700>)
 8008b78:	f7f7 fb00 	bl	800017c <__aeabi_dsub>
 8008b7c:	4602      	mov	r2, r0
 8008b7e:	460b      	mov	r3, r1
 8008b80:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008b84:	f7f7 ff24 	bl	80009d0 <__aeabi_dcmplt>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f aef6 	beq.w	800897a <_dtoa_r+0x43a>
 8008b8e:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8008b90:	1e73      	subs	r3, r6, #1
 8008b92:	9313      	str	r3, [sp, #76]	@ 0x4c
 8008b94:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8008b98:	2b30      	cmp	r3, #48	@ 0x30
 8008b9a:	d0f8      	beq.n	8008b8e <_dtoa_r+0x64e>
 8008b9c:	9f04      	ldr	r7, [sp, #16]
 8008b9e:	e73f      	b.n	8008a20 <_dtoa_r+0x4e0>
 8008ba0:	4b29      	ldr	r3, [pc, #164]	@ (8008c48 <_dtoa_r+0x708>)
 8008ba2:	f7f7 fca3 	bl	80004ec <__aeabi_dmul>
 8008ba6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8008baa:	e7bc      	b.n	8008b26 <_dtoa_r+0x5e6>
 8008bac:	d10c      	bne.n	8008bc8 <_dtoa_r+0x688>
 8008bae:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008bb2:	2200      	movs	r2, #0
 8008bb4:	4b25      	ldr	r3, [pc, #148]	@ (8008c4c <_dtoa_r+0x70c>)
 8008bb6:	f7f7 fc99 	bl	80004ec <__aeabi_dmul>
 8008bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008bbe:	f7f7 ff1b 	bl	80009f8 <__aeabi_dcmpge>
 8008bc2:	2800      	cmp	r0, #0
 8008bc4:	f000 815b 	beq.w	8008e7e <_dtoa_r+0x93e>
 8008bc8:	2400      	movs	r4, #0
 8008bca:	4625      	mov	r5, r4
 8008bcc:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008bce:	4656      	mov	r6, sl
 8008bd0:	43db      	mvns	r3, r3
 8008bd2:	9304      	str	r3, [sp, #16]
 8008bd4:	2700      	movs	r7, #0
 8008bd6:	4621      	mov	r1, r4
 8008bd8:	4658      	mov	r0, fp
 8008bda:	f000 fbb7 	bl	800934c <_Bfree>
 8008bde:	2d00      	cmp	r5, #0
 8008be0:	d0dc      	beq.n	8008b9c <_dtoa_r+0x65c>
 8008be2:	b12f      	cbz	r7, 8008bf0 <_dtoa_r+0x6b0>
 8008be4:	42af      	cmp	r7, r5
 8008be6:	d003      	beq.n	8008bf0 <_dtoa_r+0x6b0>
 8008be8:	4639      	mov	r1, r7
 8008bea:	4658      	mov	r0, fp
 8008bec:	f000 fbae 	bl	800934c <_Bfree>
 8008bf0:	4629      	mov	r1, r5
 8008bf2:	4658      	mov	r0, fp
 8008bf4:	f000 fbaa 	bl	800934c <_Bfree>
 8008bf8:	e7d0      	b.n	8008b9c <_dtoa_r+0x65c>
 8008bfa:	9704      	str	r7, [sp, #16]
 8008bfc:	4633      	mov	r3, r6
 8008bfe:	461e      	mov	r6, r3
 8008c00:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008c04:	2a39      	cmp	r2, #57	@ 0x39
 8008c06:	d107      	bne.n	8008c18 <_dtoa_r+0x6d8>
 8008c08:	459a      	cmp	sl, r3
 8008c0a:	d1f8      	bne.n	8008bfe <_dtoa_r+0x6be>
 8008c0c:	9a04      	ldr	r2, [sp, #16]
 8008c0e:	3201      	adds	r2, #1
 8008c10:	9204      	str	r2, [sp, #16]
 8008c12:	2230      	movs	r2, #48	@ 0x30
 8008c14:	f88a 2000 	strb.w	r2, [sl]
 8008c18:	781a      	ldrb	r2, [r3, #0]
 8008c1a:	3201      	adds	r2, #1
 8008c1c:	701a      	strb	r2, [r3, #0]
 8008c1e:	e7bd      	b.n	8008b9c <_dtoa_r+0x65c>
 8008c20:	2200      	movs	r2, #0
 8008c22:	4b09      	ldr	r3, [pc, #36]	@ (8008c48 <_dtoa_r+0x708>)
 8008c24:	f7f7 fc62 	bl	80004ec <__aeabi_dmul>
 8008c28:	2200      	movs	r2, #0
 8008c2a:	2300      	movs	r3, #0
 8008c2c:	4604      	mov	r4, r0
 8008c2e:	460d      	mov	r5, r1
 8008c30:	f7f7 fec4 	bl	80009bc <__aeabi_dcmpeq>
 8008c34:	2800      	cmp	r0, #0
 8008c36:	f43f aebc 	beq.w	80089b2 <_dtoa_r+0x472>
 8008c3a:	e6f1      	b.n	8008a20 <_dtoa_r+0x4e0>
 8008c3c:	0800b140 	.word	0x0800b140
 8008c40:	3fe00000 	.word	0x3fe00000
 8008c44:	3ff00000 	.word	0x3ff00000
 8008c48:	40240000 	.word	0x40240000
 8008c4c:	40140000 	.word	0x40140000
 8008c50:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8008c52:	2a00      	cmp	r2, #0
 8008c54:	f000 80db 	beq.w	8008e0e <_dtoa_r+0x8ce>
 8008c58:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c5a:	2a01      	cmp	r2, #1
 8008c5c:	f300 80bf 	bgt.w	8008dde <_dtoa_r+0x89e>
 8008c60:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8008c62:	2a00      	cmp	r2, #0
 8008c64:	f000 80b7 	beq.w	8008dd6 <_dtoa_r+0x896>
 8008c68:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8008c6c:	4646      	mov	r6, r8
 8008c6e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c72:	2101      	movs	r1, #1
 8008c74:	441a      	add	r2, r3
 8008c76:	4658      	mov	r0, fp
 8008c78:	4498      	add	r8, r3
 8008c7a:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c7c:	f000 fc1a 	bl	80094b4 <__i2b>
 8008c80:	4605      	mov	r5, r0
 8008c82:	b15e      	cbz	r6, 8008c9c <_dtoa_r+0x75c>
 8008c84:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	dd08      	ble.n	8008c9c <_dtoa_r+0x75c>
 8008c8a:	42b3      	cmp	r3, r6
 8008c8c:	bfa8      	it	ge
 8008c8e:	4633      	movge	r3, r6
 8008c90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c92:	eba8 0803 	sub.w	r8, r8, r3
 8008c96:	1af6      	subs	r6, r6, r3
 8008c98:	1ad3      	subs	r3, r2, r3
 8008c9a:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008c9e:	b1f3      	cbz	r3, 8008cde <_dtoa_r+0x79e>
 8008ca0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	f000 80b7 	beq.w	8008e16 <_dtoa_r+0x8d6>
 8008ca8:	b18c      	cbz	r4, 8008cce <_dtoa_r+0x78e>
 8008caa:	4629      	mov	r1, r5
 8008cac:	4622      	mov	r2, r4
 8008cae:	4658      	mov	r0, fp
 8008cb0:	f000 fcbe 	bl	8009630 <__pow5mult>
 8008cb4:	464a      	mov	r2, r9
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	4605      	mov	r5, r0
 8008cba:	4658      	mov	r0, fp
 8008cbc:	f000 fc10 	bl	80094e0 <__multiply>
 8008cc0:	4649      	mov	r1, r9
 8008cc2:	9004      	str	r0, [sp, #16]
 8008cc4:	4658      	mov	r0, fp
 8008cc6:	f000 fb41 	bl	800934c <_Bfree>
 8008cca:	9b04      	ldr	r3, [sp, #16]
 8008ccc:	4699      	mov	r9, r3
 8008cce:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008cd0:	1b1a      	subs	r2, r3, r4
 8008cd2:	d004      	beq.n	8008cde <_dtoa_r+0x79e>
 8008cd4:	4649      	mov	r1, r9
 8008cd6:	4658      	mov	r0, fp
 8008cd8:	f000 fcaa 	bl	8009630 <__pow5mult>
 8008cdc:	4681      	mov	r9, r0
 8008cde:	2101      	movs	r1, #1
 8008ce0:	4658      	mov	r0, fp
 8008ce2:	f000 fbe7 	bl	80094b4 <__i2b>
 8008ce6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008ce8:	4604      	mov	r4, r0
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	f000 81c9 	beq.w	8009082 <_dtoa_r+0xb42>
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	4601      	mov	r1, r0
 8008cf4:	4658      	mov	r0, fp
 8008cf6:	f000 fc9b 	bl	8009630 <__pow5mult>
 8008cfa:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008cfc:	4604      	mov	r4, r0
 8008cfe:	2b01      	cmp	r3, #1
 8008d00:	f300 808f 	bgt.w	8008e22 <_dtoa_r+0x8e2>
 8008d04:	9b02      	ldr	r3, [sp, #8]
 8008d06:	2b00      	cmp	r3, #0
 8008d08:	f040 8087 	bne.w	8008e1a <_dtoa_r+0x8da>
 8008d0c:	9b03      	ldr	r3, [sp, #12]
 8008d0e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	f040 8083 	bne.w	8008e1e <_dtoa_r+0x8de>
 8008d18:	9b03      	ldr	r3, [sp, #12]
 8008d1a:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008d1e:	0d1b      	lsrs	r3, r3, #20
 8008d20:	051b      	lsls	r3, r3, #20
 8008d22:	b12b      	cbz	r3, 8008d30 <_dtoa_r+0x7f0>
 8008d24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d26:	f108 0801 	add.w	r8, r8, #1
 8008d2a:	3301      	adds	r3, #1
 8008d2c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d2e:	2301      	movs	r3, #1
 8008d30:	930a      	str	r3, [sp, #40]	@ 0x28
 8008d32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008d34:	2b00      	cmp	r3, #0
 8008d36:	f000 81aa 	beq.w	800908e <_dtoa_r+0xb4e>
 8008d3a:	6923      	ldr	r3, [r4, #16]
 8008d3c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008d40:	6918      	ldr	r0, [r3, #16]
 8008d42:	f000 fb6b 	bl	800941c <__hi0bits>
 8008d46:	f1c0 0020 	rsb	r0, r0, #32
 8008d4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d4c:	4418      	add	r0, r3
 8008d4e:	f010 001f 	ands.w	r0, r0, #31
 8008d52:	d071      	beq.n	8008e38 <_dtoa_r+0x8f8>
 8008d54:	f1c0 0320 	rsb	r3, r0, #32
 8008d58:	2b04      	cmp	r3, #4
 8008d5a:	dd65      	ble.n	8008e28 <_dtoa_r+0x8e8>
 8008d5c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d5e:	f1c0 001c 	rsb	r0, r0, #28
 8008d62:	4403      	add	r3, r0
 8008d64:	4480      	add	r8, r0
 8008d66:	4406      	add	r6, r0
 8008d68:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d6a:	f1b8 0f00 	cmp.w	r8, #0
 8008d6e:	dd05      	ble.n	8008d7c <_dtoa_r+0x83c>
 8008d70:	4649      	mov	r1, r9
 8008d72:	4642      	mov	r2, r8
 8008d74:	4658      	mov	r0, fp
 8008d76:	f000 fcb5 	bl	80096e4 <__lshift>
 8008d7a:	4681      	mov	r9, r0
 8008d7c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	dd05      	ble.n	8008d8e <_dtoa_r+0x84e>
 8008d82:	4621      	mov	r1, r4
 8008d84:	461a      	mov	r2, r3
 8008d86:	4658      	mov	r0, fp
 8008d88:	f000 fcac 	bl	80096e4 <__lshift>
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d053      	beq.n	8008e3c <_dtoa_r+0x8fc>
 8008d94:	4621      	mov	r1, r4
 8008d96:	4648      	mov	r0, r9
 8008d98:	f000 fd10 	bl	80097bc <__mcmp>
 8008d9c:	2800      	cmp	r0, #0
 8008d9e:	da4d      	bge.n	8008e3c <_dtoa_r+0x8fc>
 8008da0:	1e7b      	subs	r3, r7, #1
 8008da2:	4649      	mov	r1, r9
 8008da4:	9304      	str	r3, [sp, #16]
 8008da6:	220a      	movs	r2, #10
 8008da8:	2300      	movs	r3, #0
 8008daa:	4658      	mov	r0, fp
 8008dac:	f000 faf0 	bl	8009390 <__multadd>
 8008db0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008db2:	4681      	mov	r9, r0
 8008db4:	2b00      	cmp	r3, #0
 8008db6:	f000 816c 	beq.w	8009092 <_dtoa_r+0xb52>
 8008dba:	2300      	movs	r3, #0
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	220a      	movs	r2, #10
 8008dc0:	4658      	mov	r0, fp
 8008dc2:	f000 fae5 	bl	8009390 <__multadd>
 8008dc6:	9b08      	ldr	r3, [sp, #32]
 8008dc8:	4605      	mov	r5, r0
 8008dca:	2b00      	cmp	r3, #0
 8008dcc:	dc61      	bgt.n	8008e92 <_dtoa_r+0x952>
 8008dce:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008dd0:	2b02      	cmp	r3, #2
 8008dd2:	dc3b      	bgt.n	8008e4c <_dtoa_r+0x90c>
 8008dd4:	e05d      	b.n	8008e92 <_dtoa_r+0x952>
 8008dd6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008dd8:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008ddc:	e746      	b.n	8008c6c <_dtoa_r+0x72c>
 8008dde:	9b07      	ldr	r3, [sp, #28]
 8008de0:	1e5c      	subs	r4, r3, #1
 8008de2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008de4:	42a3      	cmp	r3, r4
 8008de6:	bfbf      	itttt	lt
 8008de8:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8008dea:	9a0e      	ldrlt	r2, [sp, #56]	@ 0x38
 8008dec:	1ae3      	sublt	r3, r4, r3
 8008dee:	18d2      	addlt	r2, r2, r3
 8008df0:	bfa8      	it	ge
 8008df2:	1b1c      	subge	r4, r3, r4
 8008df4:	9b07      	ldr	r3, [sp, #28]
 8008df6:	bfbe      	ittt	lt
 8008df8:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8008dfa:	920e      	strlt	r2, [sp, #56]	@ 0x38
 8008dfc:	2400      	movlt	r4, #0
 8008dfe:	2b00      	cmp	r3, #0
 8008e00:	bfb5      	itete	lt
 8008e02:	eba8 0603 	sublt.w	r6, r8, r3
 8008e06:	4646      	movge	r6, r8
 8008e08:	2300      	movlt	r3, #0
 8008e0a:	9b07      	ldrge	r3, [sp, #28]
 8008e0c:	e730      	b.n	8008c70 <_dtoa_r+0x730>
 8008e0e:	4646      	mov	r6, r8
 8008e10:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008e12:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8008e14:	e735      	b.n	8008c82 <_dtoa_r+0x742>
 8008e16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8008e18:	e75c      	b.n	8008cd4 <_dtoa_r+0x794>
 8008e1a:	2300      	movs	r3, #0
 8008e1c:	e788      	b.n	8008d30 <_dtoa_r+0x7f0>
 8008e1e:	9b02      	ldr	r3, [sp, #8]
 8008e20:	e786      	b.n	8008d30 <_dtoa_r+0x7f0>
 8008e22:	2300      	movs	r3, #0
 8008e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8008e26:	e788      	b.n	8008d3a <_dtoa_r+0x7fa>
 8008e28:	d09f      	beq.n	8008d6a <_dtoa_r+0x82a>
 8008e2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008e2c:	331c      	adds	r3, #28
 8008e2e:	441a      	add	r2, r3
 8008e30:	4498      	add	r8, r3
 8008e32:	441e      	add	r6, r3
 8008e34:	9209      	str	r2, [sp, #36]	@ 0x24
 8008e36:	e798      	b.n	8008d6a <_dtoa_r+0x82a>
 8008e38:	4603      	mov	r3, r0
 8008e3a:	e7f6      	b.n	8008e2a <_dtoa_r+0x8ea>
 8008e3c:	9b07      	ldr	r3, [sp, #28]
 8008e3e:	9704      	str	r7, [sp, #16]
 8008e40:	2b00      	cmp	r3, #0
 8008e42:	dc20      	bgt.n	8008e86 <_dtoa_r+0x946>
 8008e44:	9308      	str	r3, [sp, #32]
 8008e46:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008e48:	2b02      	cmp	r3, #2
 8008e4a:	dd1e      	ble.n	8008e8a <_dtoa_r+0x94a>
 8008e4c:	9b08      	ldr	r3, [sp, #32]
 8008e4e:	2b00      	cmp	r3, #0
 8008e50:	f47f aebc 	bne.w	8008bcc <_dtoa_r+0x68c>
 8008e54:	4621      	mov	r1, r4
 8008e56:	2205      	movs	r2, #5
 8008e58:	4658      	mov	r0, fp
 8008e5a:	f000 fa99 	bl	8009390 <__multadd>
 8008e5e:	4601      	mov	r1, r0
 8008e60:	4604      	mov	r4, r0
 8008e62:	4648      	mov	r0, r9
 8008e64:	f000 fcaa 	bl	80097bc <__mcmp>
 8008e68:	2800      	cmp	r0, #0
 8008e6a:	f77f aeaf 	ble.w	8008bcc <_dtoa_r+0x68c>
 8008e6e:	2331      	movs	r3, #49	@ 0x31
 8008e70:	4656      	mov	r6, sl
 8008e72:	f806 3b01 	strb.w	r3, [r6], #1
 8008e76:	9b04      	ldr	r3, [sp, #16]
 8008e78:	3301      	adds	r3, #1
 8008e7a:	9304      	str	r3, [sp, #16]
 8008e7c:	e6aa      	b.n	8008bd4 <_dtoa_r+0x694>
 8008e7e:	9c07      	ldr	r4, [sp, #28]
 8008e80:	9704      	str	r7, [sp, #16]
 8008e82:	4625      	mov	r5, r4
 8008e84:	e7f3      	b.n	8008e6e <_dtoa_r+0x92e>
 8008e86:	9b07      	ldr	r3, [sp, #28]
 8008e88:	9308      	str	r3, [sp, #32]
 8008e8a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	f000 8104 	beq.w	800909a <_dtoa_r+0xb5a>
 8008e92:	2e00      	cmp	r6, #0
 8008e94:	dd05      	ble.n	8008ea2 <_dtoa_r+0x962>
 8008e96:	4629      	mov	r1, r5
 8008e98:	4632      	mov	r2, r6
 8008e9a:	4658      	mov	r0, fp
 8008e9c:	f000 fc22 	bl	80096e4 <__lshift>
 8008ea0:	4605      	mov	r5, r0
 8008ea2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d05a      	beq.n	8008f5e <_dtoa_r+0xa1e>
 8008ea8:	4658      	mov	r0, fp
 8008eaa:	6869      	ldr	r1, [r5, #4]
 8008eac:	f000 fa0e 	bl	80092cc <_Balloc>
 8008eb0:	4606      	mov	r6, r0
 8008eb2:	b928      	cbnz	r0, 8008ec0 <_dtoa_r+0x980>
 8008eb4:	4602      	mov	r2, r0
 8008eb6:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008eba:	4b83      	ldr	r3, [pc, #524]	@ (80090c8 <_dtoa_r+0xb88>)
 8008ebc:	f7ff bb54 	b.w	8008568 <_dtoa_r+0x28>
 8008ec0:	692a      	ldr	r2, [r5, #16]
 8008ec2:	f105 010c 	add.w	r1, r5, #12
 8008ec6:	3202      	adds	r2, #2
 8008ec8:	0092      	lsls	r2, r2, #2
 8008eca:	300c      	adds	r0, #12
 8008ecc:	f7ff fa83 	bl	80083d6 <memcpy>
 8008ed0:	2201      	movs	r2, #1
 8008ed2:	4631      	mov	r1, r6
 8008ed4:	4658      	mov	r0, fp
 8008ed6:	f000 fc05 	bl	80096e4 <__lshift>
 8008eda:	462f      	mov	r7, r5
 8008edc:	4605      	mov	r5, r0
 8008ede:	f10a 0301 	add.w	r3, sl, #1
 8008ee2:	9307      	str	r3, [sp, #28]
 8008ee4:	9b08      	ldr	r3, [sp, #32]
 8008ee6:	4453      	add	r3, sl
 8008ee8:	930b      	str	r3, [sp, #44]	@ 0x2c
 8008eea:	9b02      	ldr	r3, [sp, #8]
 8008eec:	f003 0301 	and.w	r3, r3, #1
 8008ef0:	930a      	str	r3, [sp, #40]	@ 0x28
 8008ef2:	9b07      	ldr	r3, [sp, #28]
 8008ef4:	4621      	mov	r1, r4
 8008ef6:	3b01      	subs	r3, #1
 8008ef8:	4648      	mov	r0, r9
 8008efa:	9302      	str	r3, [sp, #8]
 8008efc:	f7ff fa98 	bl	8008430 <quorem>
 8008f00:	4639      	mov	r1, r7
 8008f02:	9008      	str	r0, [sp, #32]
 8008f04:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8008f08:	4648      	mov	r0, r9
 8008f0a:	f000 fc57 	bl	80097bc <__mcmp>
 8008f0e:	462a      	mov	r2, r5
 8008f10:	9009      	str	r0, [sp, #36]	@ 0x24
 8008f12:	4621      	mov	r1, r4
 8008f14:	4658      	mov	r0, fp
 8008f16:	f000 fc6d 	bl	80097f4 <__mdiff>
 8008f1a:	68c2      	ldr	r2, [r0, #12]
 8008f1c:	4606      	mov	r6, r0
 8008f1e:	bb02      	cbnz	r2, 8008f62 <_dtoa_r+0xa22>
 8008f20:	4601      	mov	r1, r0
 8008f22:	4648      	mov	r0, r9
 8008f24:	f000 fc4a 	bl	80097bc <__mcmp>
 8008f28:	4602      	mov	r2, r0
 8008f2a:	4631      	mov	r1, r6
 8008f2c:	4658      	mov	r0, fp
 8008f2e:	920c      	str	r2, [sp, #48]	@ 0x30
 8008f30:	f000 fa0c 	bl	800934c <_Bfree>
 8008f34:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8008f36:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008f38:	9e07      	ldr	r6, [sp, #28]
 8008f3a:	ea43 0102 	orr.w	r1, r3, r2
 8008f3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008f40:	4319      	orrs	r1, r3
 8008f42:	d110      	bne.n	8008f66 <_dtoa_r+0xa26>
 8008f44:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f48:	d029      	beq.n	8008f9e <_dtoa_r+0xa5e>
 8008f4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f4c:	2b00      	cmp	r3, #0
 8008f4e:	dd02      	ble.n	8008f56 <_dtoa_r+0xa16>
 8008f50:	9b08      	ldr	r3, [sp, #32]
 8008f52:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8008f56:	9b02      	ldr	r3, [sp, #8]
 8008f58:	f883 8000 	strb.w	r8, [r3]
 8008f5c:	e63b      	b.n	8008bd6 <_dtoa_r+0x696>
 8008f5e:	4628      	mov	r0, r5
 8008f60:	e7bb      	b.n	8008eda <_dtoa_r+0x99a>
 8008f62:	2201      	movs	r2, #1
 8008f64:	e7e1      	b.n	8008f2a <_dtoa_r+0x9ea>
 8008f66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008f68:	2b00      	cmp	r3, #0
 8008f6a:	db04      	blt.n	8008f76 <_dtoa_r+0xa36>
 8008f6c:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8008f6e:	430b      	orrs	r3, r1
 8008f70:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8008f72:	430b      	orrs	r3, r1
 8008f74:	d120      	bne.n	8008fb8 <_dtoa_r+0xa78>
 8008f76:	2a00      	cmp	r2, #0
 8008f78:	dded      	ble.n	8008f56 <_dtoa_r+0xa16>
 8008f7a:	4649      	mov	r1, r9
 8008f7c:	2201      	movs	r2, #1
 8008f7e:	4658      	mov	r0, fp
 8008f80:	f000 fbb0 	bl	80096e4 <__lshift>
 8008f84:	4621      	mov	r1, r4
 8008f86:	4681      	mov	r9, r0
 8008f88:	f000 fc18 	bl	80097bc <__mcmp>
 8008f8c:	2800      	cmp	r0, #0
 8008f8e:	dc03      	bgt.n	8008f98 <_dtoa_r+0xa58>
 8008f90:	d1e1      	bne.n	8008f56 <_dtoa_r+0xa16>
 8008f92:	f018 0f01 	tst.w	r8, #1
 8008f96:	d0de      	beq.n	8008f56 <_dtoa_r+0xa16>
 8008f98:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008f9c:	d1d8      	bne.n	8008f50 <_dtoa_r+0xa10>
 8008f9e:	2339      	movs	r3, #57	@ 0x39
 8008fa0:	9a02      	ldr	r2, [sp, #8]
 8008fa2:	7013      	strb	r3, [r2, #0]
 8008fa4:	4633      	mov	r3, r6
 8008fa6:	461e      	mov	r6, r3
 8008fa8:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008fac:	3b01      	subs	r3, #1
 8008fae:	2a39      	cmp	r2, #57	@ 0x39
 8008fb0:	d052      	beq.n	8009058 <_dtoa_r+0xb18>
 8008fb2:	3201      	adds	r2, #1
 8008fb4:	701a      	strb	r2, [r3, #0]
 8008fb6:	e60e      	b.n	8008bd6 <_dtoa_r+0x696>
 8008fb8:	2a00      	cmp	r2, #0
 8008fba:	dd07      	ble.n	8008fcc <_dtoa_r+0xa8c>
 8008fbc:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8008fc0:	d0ed      	beq.n	8008f9e <_dtoa_r+0xa5e>
 8008fc2:	9a02      	ldr	r2, [sp, #8]
 8008fc4:	f108 0301 	add.w	r3, r8, #1
 8008fc8:	7013      	strb	r3, [r2, #0]
 8008fca:	e604      	b.n	8008bd6 <_dtoa_r+0x696>
 8008fcc:	9b07      	ldr	r3, [sp, #28]
 8008fce:	9a07      	ldr	r2, [sp, #28]
 8008fd0:	f803 8c01 	strb.w	r8, [r3, #-1]
 8008fd4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d028      	beq.n	800902c <_dtoa_r+0xaec>
 8008fda:	4649      	mov	r1, r9
 8008fdc:	2300      	movs	r3, #0
 8008fde:	220a      	movs	r2, #10
 8008fe0:	4658      	mov	r0, fp
 8008fe2:	f000 f9d5 	bl	8009390 <__multadd>
 8008fe6:	42af      	cmp	r7, r5
 8008fe8:	4681      	mov	r9, r0
 8008fea:	f04f 0300 	mov.w	r3, #0
 8008fee:	f04f 020a 	mov.w	r2, #10
 8008ff2:	4639      	mov	r1, r7
 8008ff4:	4658      	mov	r0, fp
 8008ff6:	d107      	bne.n	8009008 <_dtoa_r+0xac8>
 8008ff8:	f000 f9ca 	bl	8009390 <__multadd>
 8008ffc:	4607      	mov	r7, r0
 8008ffe:	4605      	mov	r5, r0
 8009000:	9b07      	ldr	r3, [sp, #28]
 8009002:	3301      	adds	r3, #1
 8009004:	9307      	str	r3, [sp, #28]
 8009006:	e774      	b.n	8008ef2 <_dtoa_r+0x9b2>
 8009008:	f000 f9c2 	bl	8009390 <__multadd>
 800900c:	4629      	mov	r1, r5
 800900e:	4607      	mov	r7, r0
 8009010:	2300      	movs	r3, #0
 8009012:	220a      	movs	r2, #10
 8009014:	4658      	mov	r0, fp
 8009016:	f000 f9bb 	bl	8009390 <__multadd>
 800901a:	4605      	mov	r5, r0
 800901c:	e7f0      	b.n	8009000 <_dtoa_r+0xac0>
 800901e:	9b08      	ldr	r3, [sp, #32]
 8009020:	2700      	movs	r7, #0
 8009022:	2b00      	cmp	r3, #0
 8009024:	bfcc      	ite	gt
 8009026:	461e      	movgt	r6, r3
 8009028:	2601      	movle	r6, #1
 800902a:	4456      	add	r6, sl
 800902c:	4649      	mov	r1, r9
 800902e:	2201      	movs	r2, #1
 8009030:	4658      	mov	r0, fp
 8009032:	f000 fb57 	bl	80096e4 <__lshift>
 8009036:	4621      	mov	r1, r4
 8009038:	4681      	mov	r9, r0
 800903a:	f000 fbbf 	bl	80097bc <__mcmp>
 800903e:	2800      	cmp	r0, #0
 8009040:	dcb0      	bgt.n	8008fa4 <_dtoa_r+0xa64>
 8009042:	d102      	bne.n	800904a <_dtoa_r+0xb0a>
 8009044:	f018 0f01 	tst.w	r8, #1
 8009048:	d1ac      	bne.n	8008fa4 <_dtoa_r+0xa64>
 800904a:	4633      	mov	r3, r6
 800904c:	461e      	mov	r6, r3
 800904e:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009052:	2a30      	cmp	r2, #48	@ 0x30
 8009054:	d0fa      	beq.n	800904c <_dtoa_r+0xb0c>
 8009056:	e5be      	b.n	8008bd6 <_dtoa_r+0x696>
 8009058:	459a      	cmp	sl, r3
 800905a:	d1a4      	bne.n	8008fa6 <_dtoa_r+0xa66>
 800905c:	9b04      	ldr	r3, [sp, #16]
 800905e:	3301      	adds	r3, #1
 8009060:	9304      	str	r3, [sp, #16]
 8009062:	2331      	movs	r3, #49	@ 0x31
 8009064:	f88a 3000 	strb.w	r3, [sl]
 8009068:	e5b5      	b.n	8008bd6 <_dtoa_r+0x696>
 800906a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 800906c:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80090cc <_dtoa_r+0xb8c>
 8009070:	b11b      	cbz	r3, 800907a <_dtoa_r+0xb3a>
 8009072:	f10a 0308 	add.w	r3, sl, #8
 8009076:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8009078:	6013      	str	r3, [r2, #0]
 800907a:	4650      	mov	r0, sl
 800907c:	b017      	add	sp, #92	@ 0x5c
 800907e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009082:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8009084:	2b01      	cmp	r3, #1
 8009086:	f77f ae3d 	ble.w	8008d04 <_dtoa_r+0x7c4>
 800908a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800908c:	930a      	str	r3, [sp, #40]	@ 0x28
 800908e:	2001      	movs	r0, #1
 8009090:	e65b      	b.n	8008d4a <_dtoa_r+0x80a>
 8009092:	9b08      	ldr	r3, [sp, #32]
 8009094:	2b00      	cmp	r3, #0
 8009096:	f77f aed6 	ble.w	8008e46 <_dtoa_r+0x906>
 800909a:	4656      	mov	r6, sl
 800909c:	4621      	mov	r1, r4
 800909e:	4648      	mov	r0, r9
 80090a0:	f7ff f9c6 	bl	8008430 <quorem>
 80090a4:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80090a8:	9b08      	ldr	r3, [sp, #32]
 80090aa:	f806 8b01 	strb.w	r8, [r6], #1
 80090ae:	eba6 020a 	sub.w	r2, r6, sl
 80090b2:	4293      	cmp	r3, r2
 80090b4:	ddb3      	ble.n	800901e <_dtoa_r+0xade>
 80090b6:	4649      	mov	r1, r9
 80090b8:	2300      	movs	r3, #0
 80090ba:	220a      	movs	r2, #10
 80090bc:	4658      	mov	r0, fp
 80090be:	f000 f967 	bl	8009390 <__multadd>
 80090c2:	4681      	mov	r9, r0
 80090c4:	e7ea      	b.n	800909c <_dtoa_r+0xb5c>
 80090c6:	bf00      	nop
 80090c8:	0800b0a0 	.word	0x0800b0a0
 80090cc:	0800b03b 	.word	0x0800b03b

080090d0 <_free_r>:
 80090d0:	b538      	push	{r3, r4, r5, lr}
 80090d2:	4605      	mov	r5, r0
 80090d4:	2900      	cmp	r1, #0
 80090d6:	d040      	beq.n	800915a <_free_r+0x8a>
 80090d8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090dc:	1f0c      	subs	r4, r1, #4
 80090de:	2b00      	cmp	r3, #0
 80090e0:	bfb8      	it	lt
 80090e2:	18e4      	addlt	r4, r4, r3
 80090e4:	f000 f8e6 	bl	80092b4 <__malloc_lock>
 80090e8:	4a1c      	ldr	r2, [pc, #112]	@ (800915c <_free_r+0x8c>)
 80090ea:	6813      	ldr	r3, [r2, #0]
 80090ec:	b933      	cbnz	r3, 80090fc <_free_r+0x2c>
 80090ee:	6063      	str	r3, [r4, #4]
 80090f0:	6014      	str	r4, [r2, #0]
 80090f2:	4628      	mov	r0, r5
 80090f4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80090f8:	f000 b8e2 	b.w	80092c0 <__malloc_unlock>
 80090fc:	42a3      	cmp	r3, r4
 80090fe:	d908      	bls.n	8009112 <_free_r+0x42>
 8009100:	6820      	ldr	r0, [r4, #0]
 8009102:	1821      	adds	r1, r4, r0
 8009104:	428b      	cmp	r3, r1
 8009106:	bf01      	itttt	eq
 8009108:	6819      	ldreq	r1, [r3, #0]
 800910a:	685b      	ldreq	r3, [r3, #4]
 800910c:	1809      	addeq	r1, r1, r0
 800910e:	6021      	streq	r1, [r4, #0]
 8009110:	e7ed      	b.n	80090ee <_free_r+0x1e>
 8009112:	461a      	mov	r2, r3
 8009114:	685b      	ldr	r3, [r3, #4]
 8009116:	b10b      	cbz	r3, 800911c <_free_r+0x4c>
 8009118:	42a3      	cmp	r3, r4
 800911a:	d9fa      	bls.n	8009112 <_free_r+0x42>
 800911c:	6811      	ldr	r1, [r2, #0]
 800911e:	1850      	adds	r0, r2, r1
 8009120:	42a0      	cmp	r0, r4
 8009122:	d10b      	bne.n	800913c <_free_r+0x6c>
 8009124:	6820      	ldr	r0, [r4, #0]
 8009126:	4401      	add	r1, r0
 8009128:	1850      	adds	r0, r2, r1
 800912a:	4283      	cmp	r3, r0
 800912c:	6011      	str	r1, [r2, #0]
 800912e:	d1e0      	bne.n	80090f2 <_free_r+0x22>
 8009130:	6818      	ldr	r0, [r3, #0]
 8009132:	685b      	ldr	r3, [r3, #4]
 8009134:	4408      	add	r0, r1
 8009136:	6010      	str	r0, [r2, #0]
 8009138:	6053      	str	r3, [r2, #4]
 800913a:	e7da      	b.n	80090f2 <_free_r+0x22>
 800913c:	d902      	bls.n	8009144 <_free_r+0x74>
 800913e:	230c      	movs	r3, #12
 8009140:	602b      	str	r3, [r5, #0]
 8009142:	e7d6      	b.n	80090f2 <_free_r+0x22>
 8009144:	6820      	ldr	r0, [r4, #0]
 8009146:	1821      	adds	r1, r4, r0
 8009148:	428b      	cmp	r3, r1
 800914a:	bf01      	itttt	eq
 800914c:	6819      	ldreq	r1, [r3, #0]
 800914e:	685b      	ldreq	r3, [r3, #4]
 8009150:	1809      	addeq	r1, r1, r0
 8009152:	6021      	streq	r1, [r4, #0]
 8009154:	6063      	str	r3, [r4, #4]
 8009156:	6054      	str	r4, [r2, #4]
 8009158:	e7cb      	b.n	80090f2 <_free_r+0x22>
 800915a:	bd38      	pop	{r3, r4, r5, pc}
 800915c:	20001cf8 	.word	0x20001cf8

08009160 <malloc>:
 8009160:	4b02      	ldr	r3, [pc, #8]	@ (800916c <malloc+0xc>)
 8009162:	4601      	mov	r1, r0
 8009164:	6818      	ldr	r0, [r3, #0]
 8009166:	f000 b825 	b.w	80091b4 <_malloc_r>
 800916a:	bf00      	nop
 800916c:	2000001c 	.word	0x2000001c

08009170 <sbrk_aligned>:
 8009170:	b570      	push	{r4, r5, r6, lr}
 8009172:	4e0f      	ldr	r6, [pc, #60]	@ (80091b0 <sbrk_aligned+0x40>)
 8009174:	460c      	mov	r4, r1
 8009176:	6831      	ldr	r1, [r6, #0]
 8009178:	4605      	mov	r5, r0
 800917a:	b911      	cbnz	r1, 8009182 <sbrk_aligned+0x12>
 800917c:	f001 f9da 	bl	800a534 <_sbrk_r>
 8009180:	6030      	str	r0, [r6, #0]
 8009182:	4621      	mov	r1, r4
 8009184:	4628      	mov	r0, r5
 8009186:	f001 f9d5 	bl	800a534 <_sbrk_r>
 800918a:	1c43      	adds	r3, r0, #1
 800918c:	d103      	bne.n	8009196 <sbrk_aligned+0x26>
 800918e:	f04f 34ff 	mov.w	r4, #4294967295
 8009192:	4620      	mov	r0, r4
 8009194:	bd70      	pop	{r4, r5, r6, pc}
 8009196:	1cc4      	adds	r4, r0, #3
 8009198:	f024 0403 	bic.w	r4, r4, #3
 800919c:	42a0      	cmp	r0, r4
 800919e:	d0f8      	beq.n	8009192 <sbrk_aligned+0x22>
 80091a0:	1a21      	subs	r1, r4, r0
 80091a2:	4628      	mov	r0, r5
 80091a4:	f001 f9c6 	bl	800a534 <_sbrk_r>
 80091a8:	3001      	adds	r0, #1
 80091aa:	d1f2      	bne.n	8009192 <sbrk_aligned+0x22>
 80091ac:	e7ef      	b.n	800918e <sbrk_aligned+0x1e>
 80091ae:	bf00      	nop
 80091b0:	20001cf4 	.word	0x20001cf4

080091b4 <_malloc_r>:
 80091b4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091b8:	1ccd      	adds	r5, r1, #3
 80091ba:	f025 0503 	bic.w	r5, r5, #3
 80091be:	3508      	adds	r5, #8
 80091c0:	2d0c      	cmp	r5, #12
 80091c2:	bf38      	it	cc
 80091c4:	250c      	movcc	r5, #12
 80091c6:	2d00      	cmp	r5, #0
 80091c8:	4606      	mov	r6, r0
 80091ca:	db01      	blt.n	80091d0 <_malloc_r+0x1c>
 80091cc:	42a9      	cmp	r1, r5
 80091ce:	d904      	bls.n	80091da <_malloc_r+0x26>
 80091d0:	230c      	movs	r3, #12
 80091d2:	6033      	str	r3, [r6, #0]
 80091d4:	2000      	movs	r0, #0
 80091d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091da:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80092b0 <_malloc_r+0xfc>
 80091de:	f000 f869 	bl	80092b4 <__malloc_lock>
 80091e2:	f8d8 3000 	ldr.w	r3, [r8]
 80091e6:	461c      	mov	r4, r3
 80091e8:	bb44      	cbnz	r4, 800923c <_malloc_r+0x88>
 80091ea:	4629      	mov	r1, r5
 80091ec:	4630      	mov	r0, r6
 80091ee:	f7ff ffbf 	bl	8009170 <sbrk_aligned>
 80091f2:	1c43      	adds	r3, r0, #1
 80091f4:	4604      	mov	r4, r0
 80091f6:	d158      	bne.n	80092aa <_malloc_r+0xf6>
 80091f8:	f8d8 4000 	ldr.w	r4, [r8]
 80091fc:	4627      	mov	r7, r4
 80091fe:	2f00      	cmp	r7, #0
 8009200:	d143      	bne.n	800928a <_malloc_r+0xd6>
 8009202:	2c00      	cmp	r4, #0
 8009204:	d04b      	beq.n	800929e <_malloc_r+0xea>
 8009206:	6823      	ldr	r3, [r4, #0]
 8009208:	4639      	mov	r1, r7
 800920a:	4630      	mov	r0, r6
 800920c:	eb04 0903 	add.w	r9, r4, r3
 8009210:	f001 f990 	bl	800a534 <_sbrk_r>
 8009214:	4581      	cmp	r9, r0
 8009216:	d142      	bne.n	800929e <_malloc_r+0xea>
 8009218:	6821      	ldr	r1, [r4, #0]
 800921a:	4630      	mov	r0, r6
 800921c:	1a6d      	subs	r5, r5, r1
 800921e:	4629      	mov	r1, r5
 8009220:	f7ff ffa6 	bl	8009170 <sbrk_aligned>
 8009224:	3001      	adds	r0, #1
 8009226:	d03a      	beq.n	800929e <_malloc_r+0xea>
 8009228:	6823      	ldr	r3, [r4, #0]
 800922a:	442b      	add	r3, r5
 800922c:	6023      	str	r3, [r4, #0]
 800922e:	f8d8 3000 	ldr.w	r3, [r8]
 8009232:	685a      	ldr	r2, [r3, #4]
 8009234:	bb62      	cbnz	r2, 8009290 <_malloc_r+0xdc>
 8009236:	f8c8 7000 	str.w	r7, [r8]
 800923a:	e00f      	b.n	800925c <_malloc_r+0xa8>
 800923c:	6822      	ldr	r2, [r4, #0]
 800923e:	1b52      	subs	r2, r2, r5
 8009240:	d420      	bmi.n	8009284 <_malloc_r+0xd0>
 8009242:	2a0b      	cmp	r2, #11
 8009244:	d917      	bls.n	8009276 <_malloc_r+0xc2>
 8009246:	1961      	adds	r1, r4, r5
 8009248:	42a3      	cmp	r3, r4
 800924a:	6025      	str	r5, [r4, #0]
 800924c:	bf18      	it	ne
 800924e:	6059      	strne	r1, [r3, #4]
 8009250:	6863      	ldr	r3, [r4, #4]
 8009252:	bf08      	it	eq
 8009254:	f8c8 1000 	streq.w	r1, [r8]
 8009258:	5162      	str	r2, [r4, r5]
 800925a:	604b      	str	r3, [r1, #4]
 800925c:	4630      	mov	r0, r6
 800925e:	f000 f82f 	bl	80092c0 <__malloc_unlock>
 8009262:	f104 000b 	add.w	r0, r4, #11
 8009266:	1d23      	adds	r3, r4, #4
 8009268:	f020 0007 	bic.w	r0, r0, #7
 800926c:	1ac2      	subs	r2, r0, r3
 800926e:	bf1c      	itt	ne
 8009270:	1a1b      	subne	r3, r3, r0
 8009272:	50a3      	strne	r3, [r4, r2]
 8009274:	e7af      	b.n	80091d6 <_malloc_r+0x22>
 8009276:	6862      	ldr	r2, [r4, #4]
 8009278:	42a3      	cmp	r3, r4
 800927a:	bf0c      	ite	eq
 800927c:	f8c8 2000 	streq.w	r2, [r8]
 8009280:	605a      	strne	r2, [r3, #4]
 8009282:	e7eb      	b.n	800925c <_malloc_r+0xa8>
 8009284:	4623      	mov	r3, r4
 8009286:	6864      	ldr	r4, [r4, #4]
 8009288:	e7ae      	b.n	80091e8 <_malloc_r+0x34>
 800928a:	463c      	mov	r4, r7
 800928c:	687f      	ldr	r7, [r7, #4]
 800928e:	e7b6      	b.n	80091fe <_malloc_r+0x4a>
 8009290:	461a      	mov	r2, r3
 8009292:	685b      	ldr	r3, [r3, #4]
 8009294:	42a3      	cmp	r3, r4
 8009296:	d1fb      	bne.n	8009290 <_malloc_r+0xdc>
 8009298:	2300      	movs	r3, #0
 800929a:	6053      	str	r3, [r2, #4]
 800929c:	e7de      	b.n	800925c <_malloc_r+0xa8>
 800929e:	230c      	movs	r3, #12
 80092a0:	4630      	mov	r0, r6
 80092a2:	6033      	str	r3, [r6, #0]
 80092a4:	f000 f80c 	bl	80092c0 <__malloc_unlock>
 80092a8:	e794      	b.n	80091d4 <_malloc_r+0x20>
 80092aa:	6005      	str	r5, [r0, #0]
 80092ac:	e7d6      	b.n	800925c <_malloc_r+0xa8>
 80092ae:	bf00      	nop
 80092b0:	20001cf8 	.word	0x20001cf8

080092b4 <__malloc_lock>:
 80092b4:	4801      	ldr	r0, [pc, #4]	@ (80092bc <__malloc_lock+0x8>)
 80092b6:	f7ff b87e 	b.w	80083b6 <__retarget_lock_acquire_recursive>
 80092ba:	bf00      	nop
 80092bc:	20001cf0 	.word	0x20001cf0

080092c0 <__malloc_unlock>:
 80092c0:	4801      	ldr	r0, [pc, #4]	@ (80092c8 <__malloc_unlock+0x8>)
 80092c2:	f7ff b879 	b.w	80083b8 <__retarget_lock_release_recursive>
 80092c6:	bf00      	nop
 80092c8:	20001cf0 	.word	0x20001cf0

080092cc <_Balloc>:
 80092cc:	b570      	push	{r4, r5, r6, lr}
 80092ce:	69c6      	ldr	r6, [r0, #28]
 80092d0:	4604      	mov	r4, r0
 80092d2:	460d      	mov	r5, r1
 80092d4:	b976      	cbnz	r6, 80092f4 <_Balloc+0x28>
 80092d6:	2010      	movs	r0, #16
 80092d8:	f7ff ff42 	bl	8009160 <malloc>
 80092dc:	4602      	mov	r2, r0
 80092de:	61e0      	str	r0, [r4, #28]
 80092e0:	b920      	cbnz	r0, 80092ec <_Balloc+0x20>
 80092e2:	216b      	movs	r1, #107	@ 0x6b
 80092e4:	4b17      	ldr	r3, [pc, #92]	@ (8009344 <_Balloc+0x78>)
 80092e6:	4818      	ldr	r0, [pc, #96]	@ (8009348 <_Balloc+0x7c>)
 80092e8:	f7ff f884 	bl	80083f4 <__assert_func>
 80092ec:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80092f0:	6006      	str	r6, [r0, #0]
 80092f2:	60c6      	str	r6, [r0, #12]
 80092f4:	69e6      	ldr	r6, [r4, #28]
 80092f6:	68f3      	ldr	r3, [r6, #12]
 80092f8:	b183      	cbz	r3, 800931c <_Balloc+0x50>
 80092fa:	69e3      	ldr	r3, [r4, #28]
 80092fc:	68db      	ldr	r3, [r3, #12]
 80092fe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009302:	b9b8      	cbnz	r0, 8009334 <_Balloc+0x68>
 8009304:	2101      	movs	r1, #1
 8009306:	fa01 f605 	lsl.w	r6, r1, r5
 800930a:	1d72      	adds	r2, r6, #5
 800930c:	4620      	mov	r0, r4
 800930e:	0092      	lsls	r2, r2, #2
 8009310:	f001 f927 	bl	800a562 <_calloc_r>
 8009314:	b160      	cbz	r0, 8009330 <_Balloc+0x64>
 8009316:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800931a:	e00e      	b.n	800933a <_Balloc+0x6e>
 800931c:	2221      	movs	r2, #33	@ 0x21
 800931e:	2104      	movs	r1, #4
 8009320:	4620      	mov	r0, r4
 8009322:	f001 f91e 	bl	800a562 <_calloc_r>
 8009326:	69e3      	ldr	r3, [r4, #28]
 8009328:	60f0      	str	r0, [r6, #12]
 800932a:	68db      	ldr	r3, [r3, #12]
 800932c:	2b00      	cmp	r3, #0
 800932e:	d1e4      	bne.n	80092fa <_Balloc+0x2e>
 8009330:	2000      	movs	r0, #0
 8009332:	bd70      	pop	{r4, r5, r6, pc}
 8009334:	6802      	ldr	r2, [r0, #0]
 8009336:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800933a:	2300      	movs	r3, #0
 800933c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009340:	e7f7      	b.n	8009332 <_Balloc+0x66>
 8009342:	bf00      	nop
 8009344:	0800af5e 	.word	0x0800af5e
 8009348:	0800b0b1 	.word	0x0800b0b1

0800934c <_Bfree>:
 800934c:	b570      	push	{r4, r5, r6, lr}
 800934e:	69c6      	ldr	r6, [r0, #28]
 8009350:	4605      	mov	r5, r0
 8009352:	460c      	mov	r4, r1
 8009354:	b976      	cbnz	r6, 8009374 <_Bfree+0x28>
 8009356:	2010      	movs	r0, #16
 8009358:	f7ff ff02 	bl	8009160 <malloc>
 800935c:	4602      	mov	r2, r0
 800935e:	61e8      	str	r0, [r5, #28]
 8009360:	b920      	cbnz	r0, 800936c <_Bfree+0x20>
 8009362:	218f      	movs	r1, #143	@ 0x8f
 8009364:	4b08      	ldr	r3, [pc, #32]	@ (8009388 <_Bfree+0x3c>)
 8009366:	4809      	ldr	r0, [pc, #36]	@ (800938c <_Bfree+0x40>)
 8009368:	f7ff f844 	bl	80083f4 <__assert_func>
 800936c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009370:	6006      	str	r6, [r0, #0]
 8009372:	60c6      	str	r6, [r0, #12]
 8009374:	b13c      	cbz	r4, 8009386 <_Bfree+0x3a>
 8009376:	69eb      	ldr	r3, [r5, #28]
 8009378:	6862      	ldr	r2, [r4, #4]
 800937a:	68db      	ldr	r3, [r3, #12]
 800937c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009380:	6021      	str	r1, [r4, #0]
 8009382:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009386:	bd70      	pop	{r4, r5, r6, pc}
 8009388:	0800af5e 	.word	0x0800af5e
 800938c:	0800b0b1 	.word	0x0800b0b1

08009390 <__multadd>:
 8009390:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009394:	4607      	mov	r7, r0
 8009396:	460c      	mov	r4, r1
 8009398:	461e      	mov	r6, r3
 800939a:	2000      	movs	r0, #0
 800939c:	690d      	ldr	r5, [r1, #16]
 800939e:	f101 0c14 	add.w	ip, r1, #20
 80093a2:	f8dc 3000 	ldr.w	r3, [ip]
 80093a6:	3001      	adds	r0, #1
 80093a8:	b299      	uxth	r1, r3
 80093aa:	fb02 6101 	mla	r1, r2, r1, r6
 80093ae:	0c1e      	lsrs	r6, r3, #16
 80093b0:	0c0b      	lsrs	r3, r1, #16
 80093b2:	fb02 3306 	mla	r3, r2, r6, r3
 80093b6:	b289      	uxth	r1, r1
 80093b8:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80093bc:	4285      	cmp	r5, r0
 80093be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80093c2:	f84c 1b04 	str.w	r1, [ip], #4
 80093c6:	dcec      	bgt.n	80093a2 <__multadd+0x12>
 80093c8:	b30e      	cbz	r6, 800940e <__multadd+0x7e>
 80093ca:	68a3      	ldr	r3, [r4, #8]
 80093cc:	42ab      	cmp	r3, r5
 80093ce:	dc19      	bgt.n	8009404 <__multadd+0x74>
 80093d0:	6861      	ldr	r1, [r4, #4]
 80093d2:	4638      	mov	r0, r7
 80093d4:	3101      	adds	r1, #1
 80093d6:	f7ff ff79 	bl	80092cc <_Balloc>
 80093da:	4680      	mov	r8, r0
 80093dc:	b928      	cbnz	r0, 80093ea <__multadd+0x5a>
 80093de:	4602      	mov	r2, r0
 80093e0:	21ba      	movs	r1, #186	@ 0xba
 80093e2:	4b0c      	ldr	r3, [pc, #48]	@ (8009414 <__multadd+0x84>)
 80093e4:	480c      	ldr	r0, [pc, #48]	@ (8009418 <__multadd+0x88>)
 80093e6:	f7ff f805 	bl	80083f4 <__assert_func>
 80093ea:	6922      	ldr	r2, [r4, #16]
 80093ec:	f104 010c 	add.w	r1, r4, #12
 80093f0:	3202      	adds	r2, #2
 80093f2:	0092      	lsls	r2, r2, #2
 80093f4:	300c      	adds	r0, #12
 80093f6:	f7fe ffee 	bl	80083d6 <memcpy>
 80093fa:	4621      	mov	r1, r4
 80093fc:	4638      	mov	r0, r7
 80093fe:	f7ff ffa5 	bl	800934c <_Bfree>
 8009402:	4644      	mov	r4, r8
 8009404:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009408:	3501      	adds	r5, #1
 800940a:	615e      	str	r6, [r3, #20]
 800940c:	6125      	str	r5, [r4, #16]
 800940e:	4620      	mov	r0, r4
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	0800b0a0 	.word	0x0800b0a0
 8009418:	0800b0b1 	.word	0x0800b0b1

0800941c <__hi0bits>:
 800941c:	4603      	mov	r3, r0
 800941e:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009422:	bf3a      	itte	cc
 8009424:	0403      	lslcc	r3, r0, #16
 8009426:	2010      	movcc	r0, #16
 8009428:	2000      	movcs	r0, #0
 800942a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800942e:	bf3c      	itt	cc
 8009430:	021b      	lslcc	r3, r3, #8
 8009432:	3008      	addcc	r0, #8
 8009434:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009438:	bf3c      	itt	cc
 800943a:	011b      	lslcc	r3, r3, #4
 800943c:	3004      	addcc	r0, #4
 800943e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009442:	bf3c      	itt	cc
 8009444:	009b      	lslcc	r3, r3, #2
 8009446:	3002      	addcc	r0, #2
 8009448:	2b00      	cmp	r3, #0
 800944a:	db05      	blt.n	8009458 <__hi0bits+0x3c>
 800944c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009450:	f100 0001 	add.w	r0, r0, #1
 8009454:	bf08      	it	eq
 8009456:	2020      	moveq	r0, #32
 8009458:	4770      	bx	lr

0800945a <__lo0bits>:
 800945a:	6803      	ldr	r3, [r0, #0]
 800945c:	4602      	mov	r2, r0
 800945e:	f013 0007 	ands.w	r0, r3, #7
 8009462:	d00b      	beq.n	800947c <__lo0bits+0x22>
 8009464:	07d9      	lsls	r1, r3, #31
 8009466:	d421      	bmi.n	80094ac <__lo0bits+0x52>
 8009468:	0798      	lsls	r0, r3, #30
 800946a:	bf49      	itett	mi
 800946c:	085b      	lsrmi	r3, r3, #1
 800946e:	089b      	lsrpl	r3, r3, #2
 8009470:	2001      	movmi	r0, #1
 8009472:	6013      	strmi	r3, [r2, #0]
 8009474:	bf5c      	itt	pl
 8009476:	2002      	movpl	r0, #2
 8009478:	6013      	strpl	r3, [r2, #0]
 800947a:	4770      	bx	lr
 800947c:	b299      	uxth	r1, r3
 800947e:	b909      	cbnz	r1, 8009484 <__lo0bits+0x2a>
 8009480:	2010      	movs	r0, #16
 8009482:	0c1b      	lsrs	r3, r3, #16
 8009484:	b2d9      	uxtb	r1, r3
 8009486:	b909      	cbnz	r1, 800948c <__lo0bits+0x32>
 8009488:	3008      	adds	r0, #8
 800948a:	0a1b      	lsrs	r3, r3, #8
 800948c:	0719      	lsls	r1, r3, #28
 800948e:	bf04      	itt	eq
 8009490:	091b      	lsreq	r3, r3, #4
 8009492:	3004      	addeq	r0, #4
 8009494:	0799      	lsls	r1, r3, #30
 8009496:	bf04      	itt	eq
 8009498:	089b      	lsreq	r3, r3, #2
 800949a:	3002      	addeq	r0, #2
 800949c:	07d9      	lsls	r1, r3, #31
 800949e:	d403      	bmi.n	80094a8 <__lo0bits+0x4e>
 80094a0:	085b      	lsrs	r3, r3, #1
 80094a2:	f100 0001 	add.w	r0, r0, #1
 80094a6:	d003      	beq.n	80094b0 <__lo0bits+0x56>
 80094a8:	6013      	str	r3, [r2, #0]
 80094aa:	4770      	bx	lr
 80094ac:	2000      	movs	r0, #0
 80094ae:	4770      	bx	lr
 80094b0:	2020      	movs	r0, #32
 80094b2:	4770      	bx	lr

080094b4 <__i2b>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	460c      	mov	r4, r1
 80094b8:	2101      	movs	r1, #1
 80094ba:	f7ff ff07 	bl	80092cc <_Balloc>
 80094be:	4602      	mov	r2, r0
 80094c0:	b928      	cbnz	r0, 80094ce <__i2b+0x1a>
 80094c2:	f240 1145 	movw	r1, #325	@ 0x145
 80094c6:	4b04      	ldr	r3, [pc, #16]	@ (80094d8 <__i2b+0x24>)
 80094c8:	4804      	ldr	r0, [pc, #16]	@ (80094dc <__i2b+0x28>)
 80094ca:	f7fe ff93 	bl	80083f4 <__assert_func>
 80094ce:	2301      	movs	r3, #1
 80094d0:	6144      	str	r4, [r0, #20]
 80094d2:	6103      	str	r3, [r0, #16]
 80094d4:	bd10      	pop	{r4, pc}
 80094d6:	bf00      	nop
 80094d8:	0800b0a0 	.word	0x0800b0a0
 80094dc:	0800b0b1 	.word	0x0800b0b1

080094e0 <__multiply>:
 80094e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e4:	4614      	mov	r4, r2
 80094e6:	690a      	ldr	r2, [r1, #16]
 80094e8:	6923      	ldr	r3, [r4, #16]
 80094ea:	460f      	mov	r7, r1
 80094ec:	429a      	cmp	r2, r3
 80094ee:	bfa2      	ittt	ge
 80094f0:	4623      	movge	r3, r4
 80094f2:	460c      	movge	r4, r1
 80094f4:	461f      	movge	r7, r3
 80094f6:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80094fa:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80094fe:	68a3      	ldr	r3, [r4, #8]
 8009500:	6861      	ldr	r1, [r4, #4]
 8009502:	eb0a 0609 	add.w	r6, sl, r9
 8009506:	42b3      	cmp	r3, r6
 8009508:	b085      	sub	sp, #20
 800950a:	bfb8      	it	lt
 800950c:	3101      	addlt	r1, #1
 800950e:	f7ff fedd 	bl	80092cc <_Balloc>
 8009512:	b930      	cbnz	r0, 8009522 <__multiply+0x42>
 8009514:	4602      	mov	r2, r0
 8009516:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800951a:	4b43      	ldr	r3, [pc, #268]	@ (8009628 <__multiply+0x148>)
 800951c:	4843      	ldr	r0, [pc, #268]	@ (800962c <__multiply+0x14c>)
 800951e:	f7fe ff69 	bl	80083f4 <__assert_func>
 8009522:	f100 0514 	add.w	r5, r0, #20
 8009526:	462b      	mov	r3, r5
 8009528:	2200      	movs	r2, #0
 800952a:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800952e:	4543      	cmp	r3, r8
 8009530:	d321      	bcc.n	8009576 <__multiply+0x96>
 8009532:	f107 0114 	add.w	r1, r7, #20
 8009536:	f104 0214 	add.w	r2, r4, #20
 800953a:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800953e:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8009542:	9302      	str	r3, [sp, #8]
 8009544:	1b13      	subs	r3, r2, r4
 8009546:	3b15      	subs	r3, #21
 8009548:	f023 0303 	bic.w	r3, r3, #3
 800954c:	3304      	adds	r3, #4
 800954e:	f104 0715 	add.w	r7, r4, #21
 8009552:	42ba      	cmp	r2, r7
 8009554:	bf38      	it	cc
 8009556:	2304      	movcc	r3, #4
 8009558:	9301      	str	r3, [sp, #4]
 800955a:	9b02      	ldr	r3, [sp, #8]
 800955c:	9103      	str	r1, [sp, #12]
 800955e:	428b      	cmp	r3, r1
 8009560:	d80c      	bhi.n	800957c <__multiply+0x9c>
 8009562:	2e00      	cmp	r6, #0
 8009564:	dd03      	ble.n	800956e <__multiply+0x8e>
 8009566:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800956a:	2b00      	cmp	r3, #0
 800956c:	d05a      	beq.n	8009624 <__multiply+0x144>
 800956e:	6106      	str	r6, [r0, #16]
 8009570:	b005      	add	sp, #20
 8009572:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009576:	f843 2b04 	str.w	r2, [r3], #4
 800957a:	e7d8      	b.n	800952e <__multiply+0x4e>
 800957c:	f8b1 a000 	ldrh.w	sl, [r1]
 8009580:	f1ba 0f00 	cmp.w	sl, #0
 8009584:	d023      	beq.n	80095ce <__multiply+0xee>
 8009586:	46a9      	mov	r9, r5
 8009588:	f04f 0c00 	mov.w	ip, #0
 800958c:	f104 0e14 	add.w	lr, r4, #20
 8009590:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009594:	f8d9 3000 	ldr.w	r3, [r9]
 8009598:	fa1f fb87 	uxth.w	fp, r7
 800959c:	b29b      	uxth	r3, r3
 800959e:	fb0a 330b 	mla	r3, sl, fp, r3
 80095a2:	4463      	add	r3, ip
 80095a4:	f8d9 c000 	ldr.w	ip, [r9]
 80095a8:	0c3f      	lsrs	r7, r7, #16
 80095aa:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80095ae:	fb0a c707 	mla	r7, sl, r7, ip
 80095b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80095b6:	b29b      	uxth	r3, r3
 80095b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095bc:	4572      	cmp	r2, lr
 80095be:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80095c2:	f849 3b04 	str.w	r3, [r9], #4
 80095c6:	d8e3      	bhi.n	8009590 <__multiply+0xb0>
 80095c8:	9b01      	ldr	r3, [sp, #4]
 80095ca:	f845 c003 	str.w	ip, [r5, r3]
 80095ce:	9b03      	ldr	r3, [sp, #12]
 80095d0:	3104      	adds	r1, #4
 80095d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80095d6:	f1b9 0f00 	cmp.w	r9, #0
 80095da:	d021      	beq.n	8009620 <__multiply+0x140>
 80095dc:	46ae      	mov	lr, r5
 80095de:	f04f 0a00 	mov.w	sl, #0
 80095e2:	682b      	ldr	r3, [r5, #0]
 80095e4:	f104 0c14 	add.w	ip, r4, #20
 80095e8:	f8bc b000 	ldrh.w	fp, [ip]
 80095ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80095f0:	b29b      	uxth	r3, r3
 80095f2:	fb09 770b 	mla	r7, r9, fp, r7
 80095f6:	4457      	add	r7, sl
 80095f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80095fc:	f84e 3b04 	str.w	r3, [lr], #4
 8009600:	f85c 3b04 	ldr.w	r3, [ip], #4
 8009604:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8009608:	f8be 3000 	ldrh.w	r3, [lr]
 800960c:	4562      	cmp	r2, ip
 800960e:	fb09 330a 	mla	r3, r9, sl, r3
 8009612:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8009616:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800961a:	d8e5      	bhi.n	80095e8 <__multiply+0x108>
 800961c:	9f01      	ldr	r7, [sp, #4]
 800961e:	51eb      	str	r3, [r5, r7]
 8009620:	3504      	adds	r5, #4
 8009622:	e79a      	b.n	800955a <__multiply+0x7a>
 8009624:	3e01      	subs	r6, #1
 8009626:	e79c      	b.n	8009562 <__multiply+0x82>
 8009628:	0800b0a0 	.word	0x0800b0a0
 800962c:	0800b0b1 	.word	0x0800b0b1

08009630 <__pow5mult>:
 8009630:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009634:	4615      	mov	r5, r2
 8009636:	f012 0203 	ands.w	r2, r2, #3
 800963a:	4607      	mov	r7, r0
 800963c:	460e      	mov	r6, r1
 800963e:	d007      	beq.n	8009650 <__pow5mult+0x20>
 8009640:	4c25      	ldr	r4, [pc, #148]	@ (80096d8 <__pow5mult+0xa8>)
 8009642:	3a01      	subs	r2, #1
 8009644:	2300      	movs	r3, #0
 8009646:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800964a:	f7ff fea1 	bl	8009390 <__multadd>
 800964e:	4606      	mov	r6, r0
 8009650:	10ad      	asrs	r5, r5, #2
 8009652:	d03d      	beq.n	80096d0 <__pow5mult+0xa0>
 8009654:	69fc      	ldr	r4, [r7, #28]
 8009656:	b97c      	cbnz	r4, 8009678 <__pow5mult+0x48>
 8009658:	2010      	movs	r0, #16
 800965a:	f7ff fd81 	bl	8009160 <malloc>
 800965e:	4602      	mov	r2, r0
 8009660:	61f8      	str	r0, [r7, #28]
 8009662:	b928      	cbnz	r0, 8009670 <__pow5mult+0x40>
 8009664:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009668:	4b1c      	ldr	r3, [pc, #112]	@ (80096dc <__pow5mult+0xac>)
 800966a:	481d      	ldr	r0, [pc, #116]	@ (80096e0 <__pow5mult+0xb0>)
 800966c:	f7fe fec2 	bl	80083f4 <__assert_func>
 8009670:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009674:	6004      	str	r4, [r0, #0]
 8009676:	60c4      	str	r4, [r0, #12]
 8009678:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800967c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009680:	b94c      	cbnz	r4, 8009696 <__pow5mult+0x66>
 8009682:	f240 2171 	movw	r1, #625	@ 0x271
 8009686:	4638      	mov	r0, r7
 8009688:	f7ff ff14 	bl	80094b4 <__i2b>
 800968c:	2300      	movs	r3, #0
 800968e:	4604      	mov	r4, r0
 8009690:	f8c8 0008 	str.w	r0, [r8, #8]
 8009694:	6003      	str	r3, [r0, #0]
 8009696:	f04f 0900 	mov.w	r9, #0
 800969a:	07eb      	lsls	r3, r5, #31
 800969c:	d50a      	bpl.n	80096b4 <__pow5mult+0x84>
 800969e:	4631      	mov	r1, r6
 80096a0:	4622      	mov	r2, r4
 80096a2:	4638      	mov	r0, r7
 80096a4:	f7ff ff1c 	bl	80094e0 <__multiply>
 80096a8:	4680      	mov	r8, r0
 80096aa:	4631      	mov	r1, r6
 80096ac:	4638      	mov	r0, r7
 80096ae:	f7ff fe4d 	bl	800934c <_Bfree>
 80096b2:	4646      	mov	r6, r8
 80096b4:	106d      	asrs	r5, r5, #1
 80096b6:	d00b      	beq.n	80096d0 <__pow5mult+0xa0>
 80096b8:	6820      	ldr	r0, [r4, #0]
 80096ba:	b938      	cbnz	r0, 80096cc <__pow5mult+0x9c>
 80096bc:	4622      	mov	r2, r4
 80096be:	4621      	mov	r1, r4
 80096c0:	4638      	mov	r0, r7
 80096c2:	f7ff ff0d 	bl	80094e0 <__multiply>
 80096c6:	6020      	str	r0, [r4, #0]
 80096c8:	f8c0 9000 	str.w	r9, [r0]
 80096cc:	4604      	mov	r4, r0
 80096ce:	e7e4      	b.n	800969a <__pow5mult+0x6a>
 80096d0:	4630      	mov	r0, r6
 80096d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80096d6:	bf00      	nop
 80096d8:	0800b10c 	.word	0x0800b10c
 80096dc:	0800af5e 	.word	0x0800af5e
 80096e0:	0800b0b1 	.word	0x0800b0b1

080096e4 <__lshift>:
 80096e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80096e8:	460c      	mov	r4, r1
 80096ea:	4607      	mov	r7, r0
 80096ec:	4691      	mov	r9, r2
 80096ee:	6923      	ldr	r3, [r4, #16]
 80096f0:	6849      	ldr	r1, [r1, #4]
 80096f2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80096f6:	68a3      	ldr	r3, [r4, #8]
 80096f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80096fc:	f108 0601 	add.w	r6, r8, #1
 8009700:	42b3      	cmp	r3, r6
 8009702:	db0b      	blt.n	800971c <__lshift+0x38>
 8009704:	4638      	mov	r0, r7
 8009706:	f7ff fde1 	bl	80092cc <_Balloc>
 800970a:	4605      	mov	r5, r0
 800970c:	b948      	cbnz	r0, 8009722 <__lshift+0x3e>
 800970e:	4602      	mov	r2, r0
 8009710:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8009714:	4b27      	ldr	r3, [pc, #156]	@ (80097b4 <__lshift+0xd0>)
 8009716:	4828      	ldr	r0, [pc, #160]	@ (80097b8 <__lshift+0xd4>)
 8009718:	f7fe fe6c 	bl	80083f4 <__assert_func>
 800971c:	3101      	adds	r1, #1
 800971e:	005b      	lsls	r3, r3, #1
 8009720:	e7ee      	b.n	8009700 <__lshift+0x1c>
 8009722:	2300      	movs	r3, #0
 8009724:	f100 0114 	add.w	r1, r0, #20
 8009728:	f100 0210 	add.w	r2, r0, #16
 800972c:	4618      	mov	r0, r3
 800972e:	4553      	cmp	r3, sl
 8009730:	db33      	blt.n	800979a <__lshift+0xb6>
 8009732:	6920      	ldr	r0, [r4, #16]
 8009734:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8009738:	f104 0314 	add.w	r3, r4, #20
 800973c:	f019 091f 	ands.w	r9, r9, #31
 8009740:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009744:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8009748:	d02b      	beq.n	80097a2 <__lshift+0xbe>
 800974a:	468a      	mov	sl, r1
 800974c:	2200      	movs	r2, #0
 800974e:	f1c9 0e20 	rsb	lr, r9, #32
 8009752:	6818      	ldr	r0, [r3, #0]
 8009754:	fa00 f009 	lsl.w	r0, r0, r9
 8009758:	4310      	orrs	r0, r2
 800975a:	f84a 0b04 	str.w	r0, [sl], #4
 800975e:	f853 2b04 	ldr.w	r2, [r3], #4
 8009762:	459c      	cmp	ip, r3
 8009764:	fa22 f20e 	lsr.w	r2, r2, lr
 8009768:	d8f3      	bhi.n	8009752 <__lshift+0x6e>
 800976a:	ebac 0304 	sub.w	r3, ip, r4
 800976e:	3b15      	subs	r3, #21
 8009770:	f023 0303 	bic.w	r3, r3, #3
 8009774:	3304      	adds	r3, #4
 8009776:	f104 0015 	add.w	r0, r4, #21
 800977a:	4584      	cmp	ip, r0
 800977c:	bf38      	it	cc
 800977e:	2304      	movcc	r3, #4
 8009780:	50ca      	str	r2, [r1, r3]
 8009782:	b10a      	cbz	r2, 8009788 <__lshift+0xa4>
 8009784:	f108 0602 	add.w	r6, r8, #2
 8009788:	3e01      	subs	r6, #1
 800978a:	4638      	mov	r0, r7
 800978c:	4621      	mov	r1, r4
 800978e:	612e      	str	r6, [r5, #16]
 8009790:	f7ff fddc 	bl	800934c <_Bfree>
 8009794:	4628      	mov	r0, r5
 8009796:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800979a:	f842 0f04 	str.w	r0, [r2, #4]!
 800979e:	3301      	adds	r3, #1
 80097a0:	e7c5      	b.n	800972e <__lshift+0x4a>
 80097a2:	3904      	subs	r1, #4
 80097a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80097a8:	459c      	cmp	ip, r3
 80097aa:	f841 2f04 	str.w	r2, [r1, #4]!
 80097ae:	d8f9      	bhi.n	80097a4 <__lshift+0xc0>
 80097b0:	e7ea      	b.n	8009788 <__lshift+0xa4>
 80097b2:	bf00      	nop
 80097b4:	0800b0a0 	.word	0x0800b0a0
 80097b8:	0800b0b1 	.word	0x0800b0b1

080097bc <__mcmp>:
 80097bc:	4603      	mov	r3, r0
 80097be:	690a      	ldr	r2, [r1, #16]
 80097c0:	6900      	ldr	r0, [r0, #16]
 80097c2:	b530      	push	{r4, r5, lr}
 80097c4:	1a80      	subs	r0, r0, r2
 80097c6:	d10e      	bne.n	80097e6 <__mcmp+0x2a>
 80097c8:	3314      	adds	r3, #20
 80097ca:	3114      	adds	r1, #20
 80097cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80097d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80097d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80097d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80097dc:	4295      	cmp	r5, r2
 80097de:	d003      	beq.n	80097e8 <__mcmp+0x2c>
 80097e0:	d205      	bcs.n	80097ee <__mcmp+0x32>
 80097e2:	f04f 30ff 	mov.w	r0, #4294967295
 80097e6:	bd30      	pop	{r4, r5, pc}
 80097e8:	42a3      	cmp	r3, r4
 80097ea:	d3f3      	bcc.n	80097d4 <__mcmp+0x18>
 80097ec:	e7fb      	b.n	80097e6 <__mcmp+0x2a>
 80097ee:	2001      	movs	r0, #1
 80097f0:	e7f9      	b.n	80097e6 <__mcmp+0x2a>
	...

080097f4 <__mdiff>:
 80097f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80097f8:	4689      	mov	r9, r1
 80097fa:	4606      	mov	r6, r0
 80097fc:	4611      	mov	r1, r2
 80097fe:	4648      	mov	r0, r9
 8009800:	4614      	mov	r4, r2
 8009802:	f7ff ffdb 	bl	80097bc <__mcmp>
 8009806:	1e05      	subs	r5, r0, #0
 8009808:	d112      	bne.n	8009830 <__mdiff+0x3c>
 800980a:	4629      	mov	r1, r5
 800980c:	4630      	mov	r0, r6
 800980e:	f7ff fd5d 	bl	80092cc <_Balloc>
 8009812:	4602      	mov	r2, r0
 8009814:	b928      	cbnz	r0, 8009822 <__mdiff+0x2e>
 8009816:	f240 2137 	movw	r1, #567	@ 0x237
 800981a:	4b3e      	ldr	r3, [pc, #248]	@ (8009914 <__mdiff+0x120>)
 800981c:	483e      	ldr	r0, [pc, #248]	@ (8009918 <__mdiff+0x124>)
 800981e:	f7fe fde9 	bl	80083f4 <__assert_func>
 8009822:	2301      	movs	r3, #1
 8009824:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8009828:	4610      	mov	r0, r2
 800982a:	b003      	add	sp, #12
 800982c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009830:	bfbc      	itt	lt
 8009832:	464b      	movlt	r3, r9
 8009834:	46a1      	movlt	r9, r4
 8009836:	4630      	mov	r0, r6
 8009838:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800983c:	bfba      	itte	lt
 800983e:	461c      	movlt	r4, r3
 8009840:	2501      	movlt	r5, #1
 8009842:	2500      	movge	r5, #0
 8009844:	f7ff fd42 	bl	80092cc <_Balloc>
 8009848:	4602      	mov	r2, r0
 800984a:	b918      	cbnz	r0, 8009854 <__mdiff+0x60>
 800984c:	f240 2145 	movw	r1, #581	@ 0x245
 8009850:	4b30      	ldr	r3, [pc, #192]	@ (8009914 <__mdiff+0x120>)
 8009852:	e7e3      	b.n	800981c <__mdiff+0x28>
 8009854:	f100 0b14 	add.w	fp, r0, #20
 8009858:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800985c:	f109 0310 	add.w	r3, r9, #16
 8009860:	60c5      	str	r5, [r0, #12]
 8009862:	f04f 0c00 	mov.w	ip, #0
 8009866:	f109 0514 	add.w	r5, r9, #20
 800986a:	46d9      	mov	r9, fp
 800986c:	6926      	ldr	r6, [r4, #16]
 800986e:	f104 0e14 	add.w	lr, r4, #20
 8009872:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009876:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800987a:	9301      	str	r3, [sp, #4]
 800987c:	9b01      	ldr	r3, [sp, #4]
 800987e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009882:	f853 af04 	ldr.w	sl, [r3, #4]!
 8009886:	b281      	uxth	r1, r0
 8009888:	9301      	str	r3, [sp, #4]
 800988a:	fa1f f38a 	uxth.w	r3, sl
 800988e:	1a5b      	subs	r3, r3, r1
 8009890:	0c00      	lsrs	r0, r0, #16
 8009892:	4463      	add	r3, ip
 8009894:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8009898:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800989c:	b29b      	uxth	r3, r3
 800989e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80098a2:	4576      	cmp	r6, lr
 80098a4:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80098a8:	f849 3b04 	str.w	r3, [r9], #4
 80098ac:	d8e6      	bhi.n	800987c <__mdiff+0x88>
 80098ae:	1b33      	subs	r3, r6, r4
 80098b0:	3b15      	subs	r3, #21
 80098b2:	f023 0303 	bic.w	r3, r3, #3
 80098b6:	3415      	adds	r4, #21
 80098b8:	3304      	adds	r3, #4
 80098ba:	42a6      	cmp	r6, r4
 80098bc:	bf38      	it	cc
 80098be:	2304      	movcc	r3, #4
 80098c0:	441d      	add	r5, r3
 80098c2:	445b      	add	r3, fp
 80098c4:	461e      	mov	r6, r3
 80098c6:	462c      	mov	r4, r5
 80098c8:	4544      	cmp	r4, r8
 80098ca:	d30e      	bcc.n	80098ea <__mdiff+0xf6>
 80098cc:	f108 0103 	add.w	r1, r8, #3
 80098d0:	1b49      	subs	r1, r1, r5
 80098d2:	f021 0103 	bic.w	r1, r1, #3
 80098d6:	3d03      	subs	r5, #3
 80098d8:	45a8      	cmp	r8, r5
 80098da:	bf38      	it	cc
 80098dc:	2100      	movcc	r1, #0
 80098de:	440b      	add	r3, r1
 80098e0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80098e4:	b199      	cbz	r1, 800990e <__mdiff+0x11a>
 80098e6:	6117      	str	r7, [r2, #16]
 80098e8:	e79e      	b.n	8009828 <__mdiff+0x34>
 80098ea:	46e6      	mov	lr, ip
 80098ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80098f0:	fa1f fc81 	uxth.w	ip, r1
 80098f4:	44f4      	add	ip, lr
 80098f6:	0c08      	lsrs	r0, r1, #16
 80098f8:	4471      	add	r1, lr
 80098fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80098fe:	b289      	uxth	r1, r1
 8009900:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009904:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009908:	f846 1b04 	str.w	r1, [r6], #4
 800990c:	e7dc      	b.n	80098c8 <__mdiff+0xd4>
 800990e:	3f01      	subs	r7, #1
 8009910:	e7e6      	b.n	80098e0 <__mdiff+0xec>
 8009912:	bf00      	nop
 8009914:	0800b0a0 	.word	0x0800b0a0
 8009918:	0800b0b1 	.word	0x0800b0b1

0800991c <__d2b>:
 800991c:	e92d 4373 	stmdb	sp!, {r0, r1, r4, r5, r6, r8, r9, lr}
 8009920:	2101      	movs	r1, #1
 8009922:	4690      	mov	r8, r2
 8009924:	4699      	mov	r9, r3
 8009926:	9e08      	ldr	r6, [sp, #32]
 8009928:	f7ff fcd0 	bl	80092cc <_Balloc>
 800992c:	4604      	mov	r4, r0
 800992e:	b930      	cbnz	r0, 800993e <__d2b+0x22>
 8009930:	4602      	mov	r2, r0
 8009932:	f240 310f 	movw	r1, #783	@ 0x30f
 8009936:	4b23      	ldr	r3, [pc, #140]	@ (80099c4 <__d2b+0xa8>)
 8009938:	4823      	ldr	r0, [pc, #140]	@ (80099c8 <__d2b+0xac>)
 800993a:	f7fe fd5b 	bl	80083f4 <__assert_func>
 800993e:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009942:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8009946:	b10d      	cbz	r5, 800994c <__d2b+0x30>
 8009948:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800994c:	9301      	str	r3, [sp, #4]
 800994e:	f1b8 0300 	subs.w	r3, r8, #0
 8009952:	d024      	beq.n	800999e <__d2b+0x82>
 8009954:	4668      	mov	r0, sp
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	f7ff fd7f 	bl	800945a <__lo0bits>
 800995c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009960:	b1d8      	cbz	r0, 800999a <__d2b+0x7e>
 8009962:	f1c0 0320 	rsb	r3, r0, #32
 8009966:	fa02 f303 	lsl.w	r3, r2, r3
 800996a:	430b      	orrs	r3, r1
 800996c:	40c2      	lsrs	r2, r0
 800996e:	6163      	str	r3, [r4, #20]
 8009970:	9201      	str	r2, [sp, #4]
 8009972:	9b01      	ldr	r3, [sp, #4]
 8009974:	2b00      	cmp	r3, #0
 8009976:	bf0c      	ite	eq
 8009978:	2201      	moveq	r2, #1
 800997a:	2202      	movne	r2, #2
 800997c:	61a3      	str	r3, [r4, #24]
 800997e:	6122      	str	r2, [r4, #16]
 8009980:	b1ad      	cbz	r5, 80099ae <__d2b+0x92>
 8009982:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8009986:	4405      	add	r5, r0
 8009988:	6035      	str	r5, [r6, #0]
 800998a:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800998e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009990:	6018      	str	r0, [r3, #0]
 8009992:	4620      	mov	r0, r4
 8009994:	b002      	add	sp, #8
 8009996:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800999a:	6161      	str	r1, [r4, #20]
 800999c:	e7e9      	b.n	8009972 <__d2b+0x56>
 800999e:	a801      	add	r0, sp, #4
 80099a0:	f7ff fd5b 	bl	800945a <__lo0bits>
 80099a4:	9b01      	ldr	r3, [sp, #4]
 80099a6:	2201      	movs	r2, #1
 80099a8:	6163      	str	r3, [r4, #20]
 80099aa:	3020      	adds	r0, #32
 80099ac:	e7e7      	b.n	800997e <__d2b+0x62>
 80099ae:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80099b2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80099b6:	6030      	str	r0, [r6, #0]
 80099b8:	6918      	ldr	r0, [r3, #16]
 80099ba:	f7ff fd2f 	bl	800941c <__hi0bits>
 80099be:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80099c2:	e7e4      	b.n	800998e <__d2b+0x72>
 80099c4:	0800b0a0 	.word	0x0800b0a0
 80099c8:	0800b0b1 	.word	0x0800b0b1

080099cc <__ssputs_r>:
 80099cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80099d0:	461f      	mov	r7, r3
 80099d2:	688e      	ldr	r6, [r1, #8]
 80099d4:	4682      	mov	sl, r0
 80099d6:	42be      	cmp	r6, r7
 80099d8:	460c      	mov	r4, r1
 80099da:	4690      	mov	r8, r2
 80099dc:	680b      	ldr	r3, [r1, #0]
 80099de:	d82d      	bhi.n	8009a3c <__ssputs_r+0x70>
 80099e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80099e4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80099e8:	d026      	beq.n	8009a38 <__ssputs_r+0x6c>
 80099ea:	6965      	ldr	r5, [r4, #20]
 80099ec:	6909      	ldr	r1, [r1, #16]
 80099ee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80099f2:	eba3 0901 	sub.w	r9, r3, r1
 80099f6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80099fa:	1c7b      	adds	r3, r7, #1
 80099fc:	444b      	add	r3, r9
 80099fe:	106d      	asrs	r5, r5, #1
 8009a00:	429d      	cmp	r5, r3
 8009a02:	bf38      	it	cc
 8009a04:	461d      	movcc	r5, r3
 8009a06:	0553      	lsls	r3, r2, #21
 8009a08:	d527      	bpl.n	8009a5a <__ssputs_r+0x8e>
 8009a0a:	4629      	mov	r1, r5
 8009a0c:	f7ff fbd2 	bl	80091b4 <_malloc_r>
 8009a10:	4606      	mov	r6, r0
 8009a12:	b360      	cbz	r0, 8009a6e <__ssputs_r+0xa2>
 8009a14:	464a      	mov	r2, r9
 8009a16:	6921      	ldr	r1, [r4, #16]
 8009a18:	f7fe fcdd 	bl	80083d6 <memcpy>
 8009a1c:	89a3      	ldrh	r3, [r4, #12]
 8009a1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009a22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009a26:	81a3      	strh	r3, [r4, #12]
 8009a28:	6126      	str	r6, [r4, #16]
 8009a2a:	444e      	add	r6, r9
 8009a2c:	6026      	str	r6, [r4, #0]
 8009a2e:	463e      	mov	r6, r7
 8009a30:	6165      	str	r5, [r4, #20]
 8009a32:	eba5 0509 	sub.w	r5, r5, r9
 8009a36:	60a5      	str	r5, [r4, #8]
 8009a38:	42be      	cmp	r6, r7
 8009a3a:	d900      	bls.n	8009a3e <__ssputs_r+0x72>
 8009a3c:	463e      	mov	r6, r7
 8009a3e:	4632      	mov	r2, r6
 8009a40:	4641      	mov	r1, r8
 8009a42:	6820      	ldr	r0, [r4, #0]
 8009a44:	f000 fd5b 	bl	800a4fe <memmove>
 8009a48:	2000      	movs	r0, #0
 8009a4a:	68a3      	ldr	r3, [r4, #8]
 8009a4c:	1b9b      	subs	r3, r3, r6
 8009a4e:	60a3      	str	r3, [r4, #8]
 8009a50:	6823      	ldr	r3, [r4, #0]
 8009a52:	4433      	add	r3, r6
 8009a54:	6023      	str	r3, [r4, #0]
 8009a56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a5a:	462a      	mov	r2, r5
 8009a5c:	f000 fda7 	bl	800a5ae <_realloc_r>
 8009a60:	4606      	mov	r6, r0
 8009a62:	2800      	cmp	r0, #0
 8009a64:	d1e0      	bne.n	8009a28 <__ssputs_r+0x5c>
 8009a66:	4650      	mov	r0, sl
 8009a68:	6921      	ldr	r1, [r4, #16]
 8009a6a:	f7ff fb31 	bl	80090d0 <_free_r>
 8009a6e:	230c      	movs	r3, #12
 8009a70:	f8ca 3000 	str.w	r3, [sl]
 8009a74:	89a3      	ldrh	r3, [r4, #12]
 8009a76:	f04f 30ff 	mov.w	r0, #4294967295
 8009a7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009a7e:	81a3      	strh	r3, [r4, #12]
 8009a80:	e7e9      	b.n	8009a56 <__ssputs_r+0x8a>
	...

08009a84 <_svfiprintf_r>:
 8009a84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a88:	4698      	mov	r8, r3
 8009a8a:	898b      	ldrh	r3, [r1, #12]
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	061b      	lsls	r3, r3, #24
 8009a90:	460d      	mov	r5, r1
 8009a92:	4614      	mov	r4, r2
 8009a94:	b09d      	sub	sp, #116	@ 0x74
 8009a96:	d510      	bpl.n	8009aba <_svfiprintf_r+0x36>
 8009a98:	690b      	ldr	r3, [r1, #16]
 8009a9a:	b973      	cbnz	r3, 8009aba <_svfiprintf_r+0x36>
 8009a9c:	2140      	movs	r1, #64	@ 0x40
 8009a9e:	f7ff fb89 	bl	80091b4 <_malloc_r>
 8009aa2:	6028      	str	r0, [r5, #0]
 8009aa4:	6128      	str	r0, [r5, #16]
 8009aa6:	b930      	cbnz	r0, 8009ab6 <_svfiprintf_r+0x32>
 8009aa8:	230c      	movs	r3, #12
 8009aaa:	603b      	str	r3, [r7, #0]
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295
 8009ab0:	b01d      	add	sp, #116	@ 0x74
 8009ab2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009ab6:	2340      	movs	r3, #64	@ 0x40
 8009ab8:	616b      	str	r3, [r5, #20]
 8009aba:	2300      	movs	r3, #0
 8009abc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009abe:	2320      	movs	r3, #32
 8009ac0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009ac4:	2330      	movs	r3, #48	@ 0x30
 8009ac6:	f04f 0901 	mov.w	r9, #1
 8009aca:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ace:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8009c68 <_svfiprintf_r+0x1e4>
 8009ad2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ad6:	4623      	mov	r3, r4
 8009ad8:	469a      	mov	sl, r3
 8009ada:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ade:	b10a      	cbz	r2, 8009ae4 <_svfiprintf_r+0x60>
 8009ae0:	2a25      	cmp	r2, #37	@ 0x25
 8009ae2:	d1f9      	bne.n	8009ad8 <_svfiprintf_r+0x54>
 8009ae4:	ebba 0b04 	subs.w	fp, sl, r4
 8009ae8:	d00b      	beq.n	8009b02 <_svfiprintf_r+0x7e>
 8009aea:	465b      	mov	r3, fp
 8009aec:	4622      	mov	r2, r4
 8009aee:	4629      	mov	r1, r5
 8009af0:	4638      	mov	r0, r7
 8009af2:	f7ff ff6b 	bl	80099cc <__ssputs_r>
 8009af6:	3001      	adds	r0, #1
 8009af8:	f000 80a7 	beq.w	8009c4a <_svfiprintf_r+0x1c6>
 8009afc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009afe:	445a      	add	r2, fp
 8009b00:	9209      	str	r2, [sp, #36]	@ 0x24
 8009b02:	f89a 3000 	ldrb.w	r3, [sl]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	f000 809f 	beq.w	8009c4a <_svfiprintf_r+0x1c6>
 8009b0c:	2300      	movs	r3, #0
 8009b0e:	f04f 32ff 	mov.w	r2, #4294967295
 8009b12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b16:	f10a 0a01 	add.w	sl, sl, #1
 8009b1a:	9304      	str	r3, [sp, #16]
 8009b1c:	9307      	str	r3, [sp, #28]
 8009b1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b22:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b24:	4654      	mov	r4, sl
 8009b26:	2205      	movs	r2, #5
 8009b28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b2c:	484e      	ldr	r0, [pc, #312]	@ (8009c68 <_svfiprintf_r+0x1e4>)
 8009b2e:	f7fe fc44 	bl	80083ba <memchr>
 8009b32:	9a04      	ldr	r2, [sp, #16]
 8009b34:	b9d8      	cbnz	r0, 8009b6e <_svfiprintf_r+0xea>
 8009b36:	06d0      	lsls	r0, r2, #27
 8009b38:	bf44      	itt	mi
 8009b3a:	2320      	movmi	r3, #32
 8009b3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b40:	0711      	lsls	r1, r2, #28
 8009b42:	bf44      	itt	mi
 8009b44:	232b      	movmi	r3, #43	@ 0x2b
 8009b46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b4a:	f89a 3000 	ldrb.w	r3, [sl]
 8009b4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b50:	d015      	beq.n	8009b7e <_svfiprintf_r+0xfa>
 8009b52:	4654      	mov	r4, sl
 8009b54:	2000      	movs	r0, #0
 8009b56:	f04f 0c0a 	mov.w	ip, #10
 8009b5a:	9a07      	ldr	r2, [sp, #28]
 8009b5c:	4621      	mov	r1, r4
 8009b5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b62:	3b30      	subs	r3, #48	@ 0x30
 8009b64:	2b09      	cmp	r3, #9
 8009b66:	d94b      	bls.n	8009c00 <_svfiprintf_r+0x17c>
 8009b68:	b1b0      	cbz	r0, 8009b98 <_svfiprintf_r+0x114>
 8009b6a:	9207      	str	r2, [sp, #28]
 8009b6c:	e014      	b.n	8009b98 <_svfiprintf_r+0x114>
 8009b6e:	eba0 0308 	sub.w	r3, r0, r8
 8009b72:	fa09 f303 	lsl.w	r3, r9, r3
 8009b76:	4313      	orrs	r3, r2
 8009b78:	46a2      	mov	sl, r4
 8009b7a:	9304      	str	r3, [sp, #16]
 8009b7c:	e7d2      	b.n	8009b24 <_svfiprintf_r+0xa0>
 8009b7e:	9b03      	ldr	r3, [sp, #12]
 8009b80:	1d19      	adds	r1, r3, #4
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	9103      	str	r1, [sp, #12]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	bfbb      	ittet	lt
 8009b8a:	425b      	neglt	r3, r3
 8009b8c:	f042 0202 	orrlt.w	r2, r2, #2
 8009b90:	9307      	strge	r3, [sp, #28]
 8009b92:	9307      	strlt	r3, [sp, #28]
 8009b94:	bfb8      	it	lt
 8009b96:	9204      	strlt	r2, [sp, #16]
 8009b98:	7823      	ldrb	r3, [r4, #0]
 8009b9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b9c:	d10a      	bne.n	8009bb4 <_svfiprintf_r+0x130>
 8009b9e:	7863      	ldrb	r3, [r4, #1]
 8009ba0:	2b2a      	cmp	r3, #42	@ 0x2a
 8009ba2:	d132      	bne.n	8009c0a <_svfiprintf_r+0x186>
 8009ba4:	9b03      	ldr	r3, [sp, #12]
 8009ba6:	3402      	adds	r4, #2
 8009ba8:	1d1a      	adds	r2, r3, #4
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	9203      	str	r2, [sp, #12]
 8009bae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009bb2:	9305      	str	r3, [sp, #20]
 8009bb4:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8009c6c <_svfiprintf_r+0x1e8>
 8009bb8:	2203      	movs	r2, #3
 8009bba:	4650      	mov	r0, sl
 8009bbc:	7821      	ldrb	r1, [r4, #0]
 8009bbe:	f7fe fbfc 	bl	80083ba <memchr>
 8009bc2:	b138      	cbz	r0, 8009bd4 <_svfiprintf_r+0x150>
 8009bc4:	2240      	movs	r2, #64	@ 0x40
 8009bc6:	9b04      	ldr	r3, [sp, #16]
 8009bc8:	eba0 000a 	sub.w	r0, r0, sl
 8009bcc:	4082      	lsls	r2, r0
 8009bce:	4313      	orrs	r3, r2
 8009bd0:	3401      	adds	r4, #1
 8009bd2:	9304      	str	r3, [sp, #16]
 8009bd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bd8:	2206      	movs	r2, #6
 8009bda:	4825      	ldr	r0, [pc, #148]	@ (8009c70 <_svfiprintf_r+0x1ec>)
 8009bdc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009be0:	f7fe fbeb 	bl	80083ba <memchr>
 8009be4:	2800      	cmp	r0, #0
 8009be6:	d036      	beq.n	8009c56 <_svfiprintf_r+0x1d2>
 8009be8:	4b22      	ldr	r3, [pc, #136]	@ (8009c74 <_svfiprintf_r+0x1f0>)
 8009bea:	bb1b      	cbnz	r3, 8009c34 <_svfiprintf_r+0x1b0>
 8009bec:	9b03      	ldr	r3, [sp, #12]
 8009bee:	3307      	adds	r3, #7
 8009bf0:	f023 0307 	bic.w	r3, r3, #7
 8009bf4:	3308      	adds	r3, #8
 8009bf6:	9303      	str	r3, [sp, #12]
 8009bf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009bfa:	4433      	add	r3, r6
 8009bfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009bfe:	e76a      	b.n	8009ad6 <_svfiprintf_r+0x52>
 8009c00:	460c      	mov	r4, r1
 8009c02:	2001      	movs	r0, #1
 8009c04:	fb0c 3202 	mla	r2, ip, r2, r3
 8009c08:	e7a8      	b.n	8009b5c <_svfiprintf_r+0xd8>
 8009c0a:	2300      	movs	r3, #0
 8009c0c:	f04f 0c0a 	mov.w	ip, #10
 8009c10:	4619      	mov	r1, r3
 8009c12:	3401      	adds	r4, #1
 8009c14:	9305      	str	r3, [sp, #20]
 8009c16:	4620      	mov	r0, r4
 8009c18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c1c:	3a30      	subs	r2, #48	@ 0x30
 8009c1e:	2a09      	cmp	r2, #9
 8009c20:	d903      	bls.n	8009c2a <_svfiprintf_r+0x1a6>
 8009c22:	2b00      	cmp	r3, #0
 8009c24:	d0c6      	beq.n	8009bb4 <_svfiprintf_r+0x130>
 8009c26:	9105      	str	r1, [sp, #20]
 8009c28:	e7c4      	b.n	8009bb4 <_svfiprintf_r+0x130>
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	2301      	movs	r3, #1
 8009c2e:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c32:	e7f0      	b.n	8009c16 <_svfiprintf_r+0x192>
 8009c34:	ab03      	add	r3, sp, #12
 8009c36:	9300      	str	r3, [sp, #0]
 8009c38:	462a      	mov	r2, r5
 8009c3a:	4638      	mov	r0, r7
 8009c3c:	4b0e      	ldr	r3, [pc, #56]	@ (8009c78 <_svfiprintf_r+0x1f4>)
 8009c3e:	a904      	add	r1, sp, #16
 8009c40:	f7fd fdf6 	bl	8007830 <_printf_float>
 8009c44:	1c42      	adds	r2, r0, #1
 8009c46:	4606      	mov	r6, r0
 8009c48:	d1d6      	bne.n	8009bf8 <_svfiprintf_r+0x174>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	065b      	lsls	r3, r3, #25
 8009c4e:	f53f af2d 	bmi.w	8009aac <_svfiprintf_r+0x28>
 8009c52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c54:	e72c      	b.n	8009ab0 <_svfiprintf_r+0x2c>
 8009c56:	ab03      	add	r3, sp, #12
 8009c58:	9300      	str	r3, [sp, #0]
 8009c5a:	462a      	mov	r2, r5
 8009c5c:	4638      	mov	r0, r7
 8009c5e:	4b06      	ldr	r3, [pc, #24]	@ (8009c78 <_svfiprintf_r+0x1f4>)
 8009c60:	a904      	add	r1, sp, #16
 8009c62:	f7fe f883 	bl	8007d6c <_printf_i>
 8009c66:	e7ed      	b.n	8009c44 <_svfiprintf_r+0x1c0>
 8009c68:	0800b208 	.word	0x0800b208
 8009c6c:	0800b20e 	.word	0x0800b20e
 8009c70:	0800b212 	.word	0x0800b212
 8009c74:	08007831 	.word	0x08007831
 8009c78:	080099cd 	.word	0x080099cd

08009c7c <_sungetc_r>:
 8009c7c:	b538      	push	{r3, r4, r5, lr}
 8009c7e:	1c4b      	adds	r3, r1, #1
 8009c80:	4614      	mov	r4, r2
 8009c82:	d103      	bne.n	8009c8c <_sungetc_r+0x10>
 8009c84:	f04f 35ff 	mov.w	r5, #4294967295
 8009c88:	4628      	mov	r0, r5
 8009c8a:	bd38      	pop	{r3, r4, r5, pc}
 8009c8c:	8993      	ldrh	r3, [r2, #12]
 8009c8e:	b2cd      	uxtb	r5, r1
 8009c90:	f023 0320 	bic.w	r3, r3, #32
 8009c94:	8193      	strh	r3, [r2, #12]
 8009c96:	6853      	ldr	r3, [r2, #4]
 8009c98:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8009c9a:	b18a      	cbz	r2, 8009cc0 <_sungetc_r+0x44>
 8009c9c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009c9e:	429a      	cmp	r2, r3
 8009ca0:	dd08      	ble.n	8009cb4 <_sungetc_r+0x38>
 8009ca2:	6823      	ldr	r3, [r4, #0]
 8009ca4:	1e5a      	subs	r2, r3, #1
 8009ca6:	6022      	str	r2, [r4, #0]
 8009ca8:	f803 5c01 	strb.w	r5, [r3, #-1]
 8009cac:	6863      	ldr	r3, [r4, #4]
 8009cae:	3301      	adds	r3, #1
 8009cb0:	6063      	str	r3, [r4, #4]
 8009cb2:	e7e9      	b.n	8009c88 <_sungetc_r+0xc>
 8009cb4:	4621      	mov	r1, r4
 8009cb6:	f000 fbea 	bl	800a48e <__submore>
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d0f1      	beq.n	8009ca2 <_sungetc_r+0x26>
 8009cbe:	e7e1      	b.n	8009c84 <_sungetc_r+0x8>
 8009cc0:	6921      	ldr	r1, [r4, #16]
 8009cc2:	6822      	ldr	r2, [r4, #0]
 8009cc4:	b141      	cbz	r1, 8009cd8 <_sungetc_r+0x5c>
 8009cc6:	4291      	cmp	r1, r2
 8009cc8:	d206      	bcs.n	8009cd8 <_sungetc_r+0x5c>
 8009cca:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8009cce:	42a9      	cmp	r1, r5
 8009cd0:	d102      	bne.n	8009cd8 <_sungetc_r+0x5c>
 8009cd2:	3a01      	subs	r2, #1
 8009cd4:	6022      	str	r2, [r4, #0]
 8009cd6:	e7ea      	b.n	8009cae <_sungetc_r+0x32>
 8009cd8:	e9c4 230f 	strd	r2, r3, [r4, #60]	@ 0x3c
 8009cdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009ce0:	6363      	str	r3, [r4, #52]	@ 0x34
 8009ce2:	2303      	movs	r3, #3
 8009ce4:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009ce6:	4623      	mov	r3, r4
 8009ce8:	f803 5f46 	strb.w	r5, [r3, #70]!
 8009cec:	6023      	str	r3, [r4, #0]
 8009cee:	2301      	movs	r3, #1
 8009cf0:	e7de      	b.n	8009cb0 <_sungetc_r+0x34>

08009cf2 <__ssrefill_r>:
 8009cf2:	b510      	push	{r4, lr}
 8009cf4:	460c      	mov	r4, r1
 8009cf6:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 8009cf8:	b169      	cbz	r1, 8009d16 <__ssrefill_r+0x24>
 8009cfa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009cfe:	4299      	cmp	r1, r3
 8009d00:	d001      	beq.n	8009d06 <__ssrefill_r+0x14>
 8009d02:	f7ff f9e5 	bl	80090d0 <_free_r>
 8009d06:	2000      	movs	r0, #0
 8009d08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009d0a:	6360      	str	r0, [r4, #52]	@ 0x34
 8009d0c:	6063      	str	r3, [r4, #4]
 8009d0e:	b113      	cbz	r3, 8009d16 <__ssrefill_r+0x24>
 8009d10:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8009d12:	6023      	str	r3, [r4, #0]
 8009d14:	bd10      	pop	{r4, pc}
 8009d16:	6923      	ldr	r3, [r4, #16]
 8009d18:	f04f 30ff 	mov.w	r0, #4294967295
 8009d1c:	6023      	str	r3, [r4, #0]
 8009d1e:	2300      	movs	r3, #0
 8009d20:	6063      	str	r3, [r4, #4]
 8009d22:	89a3      	ldrh	r3, [r4, #12]
 8009d24:	f043 0320 	orr.w	r3, r3, #32
 8009d28:	81a3      	strh	r3, [r4, #12]
 8009d2a:	e7f3      	b.n	8009d14 <__ssrefill_r+0x22>

08009d2c <__ssvfiscanf_r>:
 8009d2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d30:	460c      	mov	r4, r1
 8009d32:	2100      	movs	r1, #0
 8009d34:	4606      	mov	r6, r0
 8009d36:	f5ad 7d22 	sub.w	sp, sp, #648	@ 0x288
 8009d3a:	e9cd 1144 	strd	r1, r1, [sp, #272]	@ 0x110
 8009d3e:	49aa      	ldr	r1, [pc, #680]	@ (8009fe8 <__ssvfiscanf_r+0x2bc>)
 8009d40:	f10d 0804 	add.w	r8, sp, #4
 8009d44:	91a0      	str	r1, [sp, #640]	@ 0x280
 8009d46:	49a9      	ldr	r1, [pc, #676]	@ (8009fec <__ssvfiscanf_r+0x2c0>)
 8009d48:	4fa9      	ldr	r7, [pc, #676]	@ (8009ff0 <__ssvfiscanf_r+0x2c4>)
 8009d4a:	f8cd 8118 	str.w	r8, [sp, #280]	@ 0x118
 8009d4e:	91a1      	str	r1, [sp, #644]	@ 0x284
 8009d50:	9300      	str	r3, [sp, #0]
 8009d52:	7813      	ldrb	r3, [r2, #0]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	f000 8159 	beq.w	800a00c <__ssvfiscanf_r+0x2e0>
 8009d5a:	5cf9      	ldrb	r1, [r7, r3]
 8009d5c:	1c55      	adds	r5, r2, #1
 8009d5e:	f011 0108 	ands.w	r1, r1, #8
 8009d62:	d019      	beq.n	8009d98 <__ssvfiscanf_r+0x6c>
 8009d64:	6863      	ldr	r3, [r4, #4]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd0f      	ble.n	8009d8a <__ssvfiscanf_r+0x5e>
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	781a      	ldrb	r2, [r3, #0]
 8009d6e:	5cba      	ldrb	r2, [r7, r2]
 8009d70:	0712      	lsls	r2, r2, #28
 8009d72:	d401      	bmi.n	8009d78 <__ssvfiscanf_r+0x4c>
 8009d74:	462a      	mov	r2, r5
 8009d76:	e7ec      	b.n	8009d52 <__ssvfiscanf_r+0x26>
 8009d78:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009d7a:	3301      	adds	r3, #1
 8009d7c:	3201      	adds	r2, #1
 8009d7e:	9245      	str	r2, [sp, #276]	@ 0x114
 8009d80:	6862      	ldr	r2, [r4, #4]
 8009d82:	6023      	str	r3, [r4, #0]
 8009d84:	3a01      	subs	r2, #1
 8009d86:	6062      	str	r2, [r4, #4]
 8009d88:	e7ec      	b.n	8009d64 <__ssvfiscanf_r+0x38>
 8009d8a:	4621      	mov	r1, r4
 8009d8c:	4630      	mov	r0, r6
 8009d8e:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009d90:	4798      	blx	r3
 8009d92:	2800      	cmp	r0, #0
 8009d94:	d0e9      	beq.n	8009d6a <__ssvfiscanf_r+0x3e>
 8009d96:	e7ed      	b.n	8009d74 <__ssvfiscanf_r+0x48>
 8009d98:	2b25      	cmp	r3, #37	@ 0x25
 8009d9a:	d012      	beq.n	8009dc2 <__ssvfiscanf_r+0x96>
 8009d9c:	4699      	mov	r9, r3
 8009d9e:	6863      	ldr	r3, [r4, #4]
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f340 8094 	ble.w	8009ece <__ssvfiscanf_r+0x1a2>
 8009da6:	6822      	ldr	r2, [r4, #0]
 8009da8:	7813      	ldrb	r3, [r2, #0]
 8009daa:	454b      	cmp	r3, r9
 8009dac:	f040 812e 	bne.w	800a00c <__ssvfiscanf_r+0x2e0>
 8009db0:	6863      	ldr	r3, [r4, #4]
 8009db2:	3201      	adds	r2, #1
 8009db4:	3b01      	subs	r3, #1
 8009db6:	6063      	str	r3, [r4, #4]
 8009db8:	9b45      	ldr	r3, [sp, #276]	@ 0x114
 8009dba:	6022      	str	r2, [r4, #0]
 8009dbc:	3301      	adds	r3, #1
 8009dbe:	9345      	str	r3, [sp, #276]	@ 0x114
 8009dc0:	e7d8      	b.n	8009d74 <__ssvfiscanf_r+0x48>
 8009dc2:	9141      	str	r1, [sp, #260]	@ 0x104
 8009dc4:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009dc6:	7853      	ldrb	r3, [r2, #1]
 8009dc8:	2b2a      	cmp	r3, #42	@ 0x2a
 8009dca:	bf04      	itt	eq
 8009dcc:	2310      	moveq	r3, #16
 8009dce:	1c95      	addeq	r5, r2, #2
 8009dd0:	f04f 020a 	mov.w	r2, #10
 8009dd4:	bf08      	it	eq
 8009dd6:	9341      	streq	r3, [sp, #260]	@ 0x104
 8009dd8:	46a9      	mov	r9, r5
 8009dda:	f819 1b01 	ldrb.w	r1, [r9], #1
 8009dde:	f1a1 0330 	sub.w	r3, r1, #48	@ 0x30
 8009de2:	2b09      	cmp	r3, #9
 8009de4:	d91e      	bls.n	8009e24 <__ssvfiscanf_r+0xf8>
 8009de6:	f8df a20c 	ldr.w	sl, [pc, #524]	@ 8009ff4 <__ssvfiscanf_r+0x2c8>
 8009dea:	2203      	movs	r2, #3
 8009dec:	4650      	mov	r0, sl
 8009dee:	f7fe fae4 	bl	80083ba <memchr>
 8009df2:	b138      	cbz	r0, 8009e04 <__ssvfiscanf_r+0xd8>
 8009df4:	2301      	movs	r3, #1
 8009df6:	464d      	mov	r5, r9
 8009df8:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009dfa:	eba0 000a 	sub.w	r0, r0, sl
 8009dfe:	4083      	lsls	r3, r0
 8009e00:	4313      	orrs	r3, r2
 8009e02:	9341      	str	r3, [sp, #260]	@ 0x104
 8009e04:	f815 3b01 	ldrb.w	r3, [r5], #1
 8009e08:	2b78      	cmp	r3, #120	@ 0x78
 8009e0a:	d806      	bhi.n	8009e1a <__ssvfiscanf_r+0xee>
 8009e0c:	2b57      	cmp	r3, #87	@ 0x57
 8009e0e:	d810      	bhi.n	8009e32 <__ssvfiscanf_r+0x106>
 8009e10:	2b25      	cmp	r3, #37	@ 0x25
 8009e12:	d0c3      	beq.n	8009d9c <__ssvfiscanf_r+0x70>
 8009e14:	d856      	bhi.n	8009ec4 <__ssvfiscanf_r+0x198>
 8009e16:	2b00      	cmp	r3, #0
 8009e18:	d064      	beq.n	8009ee4 <__ssvfiscanf_r+0x1b8>
 8009e1a:	2303      	movs	r3, #3
 8009e1c:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009e1e:	230a      	movs	r3, #10
 8009e20:	9342      	str	r3, [sp, #264]	@ 0x108
 8009e22:	e077      	b.n	8009f14 <__ssvfiscanf_r+0x1e8>
 8009e24:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8009e26:	464d      	mov	r5, r9
 8009e28:	fb02 1103 	mla	r1, r2, r3, r1
 8009e2c:	3930      	subs	r1, #48	@ 0x30
 8009e2e:	9143      	str	r1, [sp, #268]	@ 0x10c
 8009e30:	e7d2      	b.n	8009dd8 <__ssvfiscanf_r+0xac>
 8009e32:	f1a3 0258 	sub.w	r2, r3, #88	@ 0x58
 8009e36:	2a20      	cmp	r2, #32
 8009e38:	d8ef      	bhi.n	8009e1a <__ssvfiscanf_r+0xee>
 8009e3a:	a101      	add	r1, pc, #4	@ (adr r1, 8009e40 <__ssvfiscanf_r+0x114>)
 8009e3c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8009e40:	08009ef3 	.word	0x08009ef3
 8009e44:	08009e1b 	.word	0x08009e1b
 8009e48:	08009e1b 	.word	0x08009e1b
 8009e4c:	08009f4d 	.word	0x08009f4d
 8009e50:	08009e1b 	.word	0x08009e1b
 8009e54:	08009e1b 	.word	0x08009e1b
 8009e58:	08009e1b 	.word	0x08009e1b
 8009e5c:	08009e1b 	.word	0x08009e1b
 8009e60:	08009e1b 	.word	0x08009e1b
 8009e64:	08009e1b 	.word	0x08009e1b
 8009e68:	08009e1b 	.word	0x08009e1b
 8009e6c:	08009f63 	.word	0x08009f63
 8009e70:	08009f49 	.word	0x08009f49
 8009e74:	08009ecb 	.word	0x08009ecb
 8009e78:	08009ecb 	.word	0x08009ecb
 8009e7c:	08009ecb 	.word	0x08009ecb
 8009e80:	08009e1b 	.word	0x08009e1b
 8009e84:	08009f05 	.word	0x08009f05
 8009e88:	08009e1b 	.word	0x08009e1b
 8009e8c:	08009e1b 	.word	0x08009e1b
 8009e90:	08009e1b 	.word	0x08009e1b
 8009e94:	08009e1b 	.word	0x08009e1b
 8009e98:	08009f73 	.word	0x08009f73
 8009e9c:	08009f0d 	.word	0x08009f0d
 8009ea0:	08009eeb 	.word	0x08009eeb
 8009ea4:	08009e1b 	.word	0x08009e1b
 8009ea8:	08009e1b 	.word	0x08009e1b
 8009eac:	08009f6f 	.word	0x08009f6f
 8009eb0:	08009e1b 	.word	0x08009e1b
 8009eb4:	08009f49 	.word	0x08009f49
 8009eb8:	08009e1b 	.word	0x08009e1b
 8009ebc:	08009e1b 	.word	0x08009e1b
 8009ec0:	08009ef3 	.word	0x08009ef3
 8009ec4:	3b45      	subs	r3, #69	@ 0x45
 8009ec6:	2b02      	cmp	r3, #2
 8009ec8:	d8a7      	bhi.n	8009e1a <__ssvfiscanf_r+0xee>
 8009eca:	2305      	movs	r3, #5
 8009ecc:	e021      	b.n	8009f12 <__ssvfiscanf_r+0x1e6>
 8009ece:	4621      	mov	r1, r4
 8009ed0:	4630      	mov	r0, r6
 8009ed2:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009ed4:	4798      	blx	r3
 8009ed6:	2800      	cmp	r0, #0
 8009ed8:	f43f af65 	beq.w	8009da6 <__ssvfiscanf_r+0x7a>
 8009edc:	9844      	ldr	r0, [sp, #272]	@ 0x110
 8009ede:	2800      	cmp	r0, #0
 8009ee0:	f040 808c 	bne.w	8009ffc <__ssvfiscanf_r+0x2d0>
 8009ee4:	f04f 30ff 	mov.w	r0, #4294967295
 8009ee8:	e08c      	b.n	800a004 <__ssvfiscanf_r+0x2d8>
 8009eea:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009eec:	f042 0220 	orr.w	r2, r2, #32
 8009ef0:	9241      	str	r2, [sp, #260]	@ 0x104
 8009ef2:	9a41      	ldr	r2, [sp, #260]	@ 0x104
 8009ef4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8009ef8:	9241      	str	r2, [sp, #260]	@ 0x104
 8009efa:	2210      	movs	r2, #16
 8009efc:	2b6e      	cmp	r3, #110	@ 0x6e
 8009efe:	9242      	str	r2, [sp, #264]	@ 0x108
 8009f00:	d902      	bls.n	8009f08 <__ssvfiscanf_r+0x1dc>
 8009f02:	e005      	b.n	8009f10 <__ssvfiscanf_r+0x1e4>
 8009f04:	2300      	movs	r3, #0
 8009f06:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f08:	2303      	movs	r3, #3
 8009f0a:	e002      	b.n	8009f12 <__ssvfiscanf_r+0x1e6>
 8009f0c:	2308      	movs	r3, #8
 8009f0e:	9342      	str	r3, [sp, #264]	@ 0x108
 8009f10:	2304      	movs	r3, #4
 8009f12:	9347      	str	r3, [sp, #284]	@ 0x11c
 8009f14:	6863      	ldr	r3, [r4, #4]
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	dd39      	ble.n	8009f8e <__ssvfiscanf_r+0x262>
 8009f1a:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f1c:	0659      	lsls	r1, r3, #25
 8009f1e:	d404      	bmi.n	8009f2a <__ssvfiscanf_r+0x1fe>
 8009f20:	6823      	ldr	r3, [r4, #0]
 8009f22:	781a      	ldrb	r2, [r3, #0]
 8009f24:	5cba      	ldrb	r2, [r7, r2]
 8009f26:	0712      	lsls	r2, r2, #28
 8009f28:	d438      	bmi.n	8009f9c <__ssvfiscanf_r+0x270>
 8009f2a:	9b47      	ldr	r3, [sp, #284]	@ 0x11c
 8009f2c:	2b02      	cmp	r3, #2
 8009f2e:	dc47      	bgt.n	8009fc0 <__ssvfiscanf_r+0x294>
 8009f30:	466b      	mov	r3, sp
 8009f32:	4622      	mov	r2, r4
 8009f34:	4630      	mov	r0, r6
 8009f36:	a941      	add	r1, sp, #260	@ 0x104
 8009f38:	f000 f86a 	bl	800a010 <_scanf_chars>
 8009f3c:	2801      	cmp	r0, #1
 8009f3e:	d065      	beq.n	800a00c <__ssvfiscanf_r+0x2e0>
 8009f40:	2802      	cmp	r0, #2
 8009f42:	f47f af17 	bne.w	8009d74 <__ssvfiscanf_r+0x48>
 8009f46:	e7c9      	b.n	8009edc <__ssvfiscanf_r+0x1b0>
 8009f48:	220a      	movs	r2, #10
 8009f4a:	e7d7      	b.n	8009efc <__ssvfiscanf_r+0x1d0>
 8009f4c:	4629      	mov	r1, r5
 8009f4e:	4640      	mov	r0, r8
 8009f50:	f000 fa64 	bl	800a41c <__sccl>
 8009f54:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f56:	4605      	mov	r5, r0
 8009f58:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f5c:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f5e:	2301      	movs	r3, #1
 8009f60:	e7d7      	b.n	8009f12 <__ssvfiscanf_r+0x1e6>
 8009f62:	9b41      	ldr	r3, [sp, #260]	@ 0x104
 8009f64:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009f68:	9341      	str	r3, [sp, #260]	@ 0x104
 8009f6a:	2300      	movs	r3, #0
 8009f6c:	e7d1      	b.n	8009f12 <__ssvfiscanf_r+0x1e6>
 8009f6e:	2302      	movs	r3, #2
 8009f70:	e7cf      	b.n	8009f12 <__ssvfiscanf_r+0x1e6>
 8009f72:	9841      	ldr	r0, [sp, #260]	@ 0x104
 8009f74:	06c3      	lsls	r3, r0, #27
 8009f76:	f53f aefd 	bmi.w	8009d74 <__ssvfiscanf_r+0x48>
 8009f7a:	9b00      	ldr	r3, [sp, #0]
 8009f7c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f7e:	1d19      	adds	r1, r3, #4
 8009f80:	9100      	str	r1, [sp, #0]
 8009f82:	681b      	ldr	r3, [r3, #0]
 8009f84:	07c0      	lsls	r0, r0, #31
 8009f86:	bf4c      	ite	mi
 8009f88:	801a      	strhmi	r2, [r3, #0]
 8009f8a:	601a      	strpl	r2, [r3, #0]
 8009f8c:	e6f2      	b.n	8009d74 <__ssvfiscanf_r+0x48>
 8009f8e:	4621      	mov	r1, r4
 8009f90:	4630      	mov	r0, r6
 8009f92:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009f94:	4798      	blx	r3
 8009f96:	2800      	cmp	r0, #0
 8009f98:	d0bf      	beq.n	8009f1a <__ssvfiscanf_r+0x1ee>
 8009f9a:	e79f      	b.n	8009edc <__ssvfiscanf_r+0x1b0>
 8009f9c:	9a45      	ldr	r2, [sp, #276]	@ 0x114
 8009f9e:	3201      	adds	r2, #1
 8009fa0:	9245      	str	r2, [sp, #276]	@ 0x114
 8009fa2:	6862      	ldr	r2, [r4, #4]
 8009fa4:	3a01      	subs	r2, #1
 8009fa6:	2a00      	cmp	r2, #0
 8009fa8:	6062      	str	r2, [r4, #4]
 8009faa:	dd02      	ble.n	8009fb2 <__ssvfiscanf_r+0x286>
 8009fac:	3301      	adds	r3, #1
 8009fae:	6023      	str	r3, [r4, #0]
 8009fb0:	e7b6      	b.n	8009f20 <__ssvfiscanf_r+0x1f4>
 8009fb2:	4621      	mov	r1, r4
 8009fb4:	4630      	mov	r0, r6
 8009fb6:	9ba1      	ldr	r3, [sp, #644]	@ 0x284
 8009fb8:	4798      	blx	r3
 8009fba:	2800      	cmp	r0, #0
 8009fbc:	d0b0      	beq.n	8009f20 <__ssvfiscanf_r+0x1f4>
 8009fbe:	e78d      	b.n	8009edc <__ssvfiscanf_r+0x1b0>
 8009fc0:	2b04      	cmp	r3, #4
 8009fc2:	dc06      	bgt.n	8009fd2 <__ssvfiscanf_r+0x2a6>
 8009fc4:	466b      	mov	r3, sp
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4630      	mov	r0, r6
 8009fca:	a941      	add	r1, sp, #260	@ 0x104
 8009fcc:	f000 f87a 	bl	800a0c4 <_scanf_i>
 8009fd0:	e7b4      	b.n	8009f3c <__ssvfiscanf_r+0x210>
 8009fd2:	4b09      	ldr	r3, [pc, #36]	@ (8009ff8 <__ssvfiscanf_r+0x2cc>)
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f43f aecd 	beq.w	8009d74 <__ssvfiscanf_r+0x48>
 8009fda:	466b      	mov	r3, sp
 8009fdc:	4622      	mov	r2, r4
 8009fde:	4630      	mov	r0, r6
 8009fe0:	a941      	add	r1, sp, #260	@ 0x104
 8009fe2:	f3af 8000 	nop.w
 8009fe6:	e7a9      	b.n	8009f3c <__ssvfiscanf_r+0x210>
 8009fe8:	08009c7d 	.word	0x08009c7d
 8009fec:	08009cf3 	.word	0x08009cf3
 8009ff0:	0800b23f 	.word	0x0800b23f
 8009ff4:	0800b20e 	.word	0x0800b20e
 8009ff8:	00000000 	.word	0x00000000
 8009ffc:	89a3      	ldrh	r3, [r4, #12]
 8009ffe:	065b      	lsls	r3, r3, #25
 800a000:	f53f af70 	bmi.w	8009ee4 <__ssvfiscanf_r+0x1b8>
 800a004:	f50d 7d22 	add.w	sp, sp, #648	@ 0x288
 800a008:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a00c:	9844      	ldr	r0, [sp, #272]	@ 0x110
 800a00e:	e7f9      	b.n	800a004 <__ssvfiscanf_r+0x2d8>

0800a010 <_scanf_chars>:
 800a010:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a014:	4615      	mov	r5, r2
 800a016:	688a      	ldr	r2, [r1, #8]
 800a018:	4680      	mov	r8, r0
 800a01a:	460c      	mov	r4, r1
 800a01c:	b932      	cbnz	r2, 800a02c <_scanf_chars+0x1c>
 800a01e:	698a      	ldr	r2, [r1, #24]
 800a020:	2a00      	cmp	r2, #0
 800a022:	bf14      	ite	ne
 800a024:	f04f 32ff 	movne.w	r2, #4294967295
 800a028:	2201      	moveq	r2, #1
 800a02a:	608a      	str	r2, [r1, #8]
 800a02c:	2700      	movs	r7, #0
 800a02e:	6822      	ldr	r2, [r4, #0]
 800a030:	f8df 908c 	ldr.w	r9, [pc, #140]	@ 800a0c0 <_scanf_chars+0xb0>
 800a034:	06d1      	lsls	r1, r2, #27
 800a036:	bf5f      	itttt	pl
 800a038:	681a      	ldrpl	r2, [r3, #0]
 800a03a:	1d11      	addpl	r1, r2, #4
 800a03c:	6019      	strpl	r1, [r3, #0]
 800a03e:	6816      	ldrpl	r6, [r2, #0]
 800a040:	69a0      	ldr	r0, [r4, #24]
 800a042:	b188      	cbz	r0, 800a068 <_scanf_chars+0x58>
 800a044:	2801      	cmp	r0, #1
 800a046:	d107      	bne.n	800a058 <_scanf_chars+0x48>
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	781a      	ldrb	r2, [r3, #0]
 800a04c:	6963      	ldr	r3, [r4, #20]
 800a04e:	5c9b      	ldrb	r3, [r3, r2]
 800a050:	b953      	cbnz	r3, 800a068 <_scanf_chars+0x58>
 800a052:	2f00      	cmp	r7, #0
 800a054:	d031      	beq.n	800a0ba <_scanf_chars+0xaa>
 800a056:	e022      	b.n	800a09e <_scanf_chars+0x8e>
 800a058:	2802      	cmp	r0, #2
 800a05a:	d120      	bne.n	800a09e <_scanf_chars+0x8e>
 800a05c:	682b      	ldr	r3, [r5, #0]
 800a05e:	781b      	ldrb	r3, [r3, #0]
 800a060:	f819 3003 	ldrb.w	r3, [r9, r3]
 800a064:	071b      	lsls	r3, r3, #28
 800a066:	d41a      	bmi.n	800a09e <_scanf_chars+0x8e>
 800a068:	6823      	ldr	r3, [r4, #0]
 800a06a:	3701      	adds	r7, #1
 800a06c:	06da      	lsls	r2, r3, #27
 800a06e:	bf5e      	ittt	pl
 800a070:	682b      	ldrpl	r3, [r5, #0]
 800a072:	781b      	ldrbpl	r3, [r3, #0]
 800a074:	f806 3b01 	strbpl.w	r3, [r6], #1
 800a078:	682a      	ldr	r2, [r5, #0]
 800a07a:	686b      	ldr	r3, [r5, #4]
 800a07c:	3201      	adds	r2, #1
 800a07e:	602a      	str	r2, [r5, #0]
 800a080:	68a2      	ldr	r2, [r4, #8]
 800a082:	3b01      	subs	r3, #1
 800a084:	3a01      	subs	r2, #1
 800a086:	606b      	str	r3, [r5, #4]
 800a088:	60a2      	str	r2, [r4, #8]
 800a08a:	b142      	cbz	r2, 800a09e <_scanf_chars+0x8e>
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	dcd7      	bgt.n	800a040 <_scanf_chars+0x30>
 800a090:	4629      	mov	r1, r5
 800a092:	4640      	mov	r0, r8
 800a094:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a098:	4798      	blx	r3
 800a09a:	2800      	cmp	r0, #0
 800a09c:	d0d0      	beq.n	800a040 <_scanf_chars+0x30>
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	f013 0310 	ands.w	r3, r3, #16
 800a0a4:	d105      	bne.n	800a0b2 <_scanf_chars+0xa2>
 800a0a6:	68e2      	ldr	r2, [r4, #12]
 800a0a8:	3201      	adds	r2, #1
 800a0aa:	60e2      	str	r2, [r4, #12]
 800a0ac:	69a2      	ldr	r2, [r4, #24]
 800a0ae:	b102      	cbz	r2, 800a0b2 <_scanf_chars+0xa2>
 800a0b0:	7033      	strb	r3, [r6, #0]
 800a0b2:	2000      	movs	r0, #0
 800a0b4:	6923      	ldr	r3, [r4, #16]
 800a0b6:	443b      	add	r3, r7
 800a0b8:	6123      	str	r3, [r4, #16]
 800a0ba:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a0be:	bf00      	nop
 800a0c0:	0800b23f 	.word	0x0800b23f

0800a0c4 <_scanf_i>:
 800a0c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0c8:	460c      	mov	r4, r1
 800a0ca:	4698      	mov	r8, r3
 800a0cc:	4b72      	ldr	r3, [pc, #456]	@ (800a298 <_scanf_i+0x1d4>)
 800a0ce:	b087      	sub	sp, #28
 800a0d0:	4682      	mov	sl, r0
 800a0d2:	4616      	mov	r6, r2
 800a0d4:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800a0d8:	ab03      	add	r3, sp, #12
 800a0da:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 800a0de:	4b6f      	ldr	r3, [pc, #444]	@ (800a29c <_scanf_i+0x1d8>)
 800a0e0:	69a1      	ldr	r1, [r4, #24]
 800a0e2:	4a6f      	ldr	r2, [pc, #444]	@ (800a2a0 <_scanf_i+0x1dc>)
 800a0e4:	4627      	mov	r7, r4
 800a0e6:	2903      	cmp	r1, #3
 800a0e8:	bf08      	it	eq
 800a0ea:	461a      	moveq	r2, r3
 800a0ec:	68a3      	ldr	r3, [r4, #8]
 800a0ee:	9201      	str	r2, [sp, #4]
 800a0f0:	1e5a      	subs	r2, r3, #1
 800a0f2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 800a0f6:	bf81      	itttt	hi
 800a0f8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 800a0fc:	eb03 0905 	addhi.w	r9, r3, r5
 800a100:	f240 135d 	movwhi	r3, #349	@ 0x15d
 800a104:	60a3      	strhi	r3, [r4, #8]
 800a106:	f857 3b1c 	ldr.w	r3, [r7], #28
 800a10a:	bf98      	it	ls
 800a10c:	f04f 0900 	movls.w	r9, #0
 800a110:	463d      	mov	r5, r7
 800a112:	f04f 0b00 	mov.w	fp, #0
 800a116:	f443 6350 	orr.w	r3, r3, #3328	@ 0xd00
 800a11a:	6023      	str	r3, [r4, #0]
 800a11c:	6831      	ldr	r1, [r6, #0]
 800a11e:	ab03      	add	r3, sp, #12
 800a120:	2202      	movs	r2, #2
 800a122:	7809      	ldrb	r1, [r1, #0]
 800a124:	f853 002b 	ldr.w	r0, [r3, fp, lsl #2]
 800a128:	f7fe f947 	bl	80083ba <memchr>
 800a12c:	b328      	cbz	r0, 800a17a <_scanf_i+0xb6>
 800a12e:	f1bb 0f01 	cmp.w	fp, #1
 800a132:	d159      	bne.n	800a1e8 <_scanf_i+0x124>
 800a134:	6862      	ldr	r2, [r4, #4]
 800a136:	b92a      	cbnz	r2, 800a144 <_scanf_i+0x80>
 800a138:	2108      	movs	r1, #8
 800a13a:	6822      	ldr	r2, [r4, #0]
 800a13c:	6061      	str	r1, [r4, #4]
 800a13e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800a142:	6022      	str	r2, [r4, #0]
 800a144:	6822      	ldr	r2, [r4, #0]
 800a146:	f422 62a0 	bic.w	r2, r2, #1280	@ 0x500
 800a14a:	6022      	str	r2, [r4, #0]
 800a14c:	68a2      	ldr	r2, [r4, #8]
 800a14e:	1e51      	subs	r1, r2, #1
 800a150:	60a1      	str	r1, [r4, #8]
 800a152:	b192      	cbz	r2, 800a17a <_scanf_i+0xb6>
 800a154:	6832      	ldr	r2, [r6, #0]
 800a156:	1c51      	adds	r1, r2, #1
 800a158:	6031      	str	r1, [r6, #0]
 800a15a:	7812      	ldrb	r2, [r2, #0]
 800a15c:	f805 2b01 	strb.w	r2, [r5], #1
 800a160:	6872      	ldr	r2, [r6, #4]
 800a162:	3a01      	subs	r2, #1
 800a164:	2a00      	cmp	r2, #0
 800a166:	6072      	str	r2, [r6, #4]
 800a168:	dc07      	bgt.n	800a17a <_scanf_i+0xb6>
 800a16a:	4631      	mov	r1, r6
 800a16c:	4650      	mov	r0, sl
 800a16e:	f8d4 2180 	ldr.w	r2, [r4, #384]	@ 0x180
 800a172:	4790      	blx	r2
 800a174:	2800      	cmp	r0, #0
 800a176:	f040 8085 	bne.w	800a284 <_scanf_i+0x1c0>
 800a17a:	f10b 0b01 	add.w	fp, fp, #1
 800a17e:	f1bb 0f03 	cmp.w	fp, #3
 800a182:	d1cb      	bne.n	800a11c <_scanf_i+0x58>
 800a184:	6863      	ldr	r3, [r4, #4]
 800a186:	b90b      	cbnz	r3, 800a18c <_scanf_i+0xc8>
 800a188:	230a      	movs	r3, #10
 800a18a:	6063      	str	r3, [r4, #4]
 800a18c:	6863      	ldr	r3, [r4, #4]
 800a18e:	4945      	ldr	r1, [pc, #276]	@ (800a2a4 <_scanf_i+0x1e0>)
 800a190:	6960      	ldr	r0, [r4, #20]
 800a192:	1ac9      	subs	r1, r1, r3
 800a194:	f000 f942 	bl	800a41c <__sccl>
 800a198:	f04f 0b00 	mov.w	fp, #0
 800a19c:	68a3      	ldr	r3, [r4, #8]
 800a19e:	6822      	ldr	r2, [r4, #0]
 800a1a0:	2b00      	cmp	r3, #0
 800a1a2:	d03d      	beq.n	800a220 <_scanf_i+0x15c>
 800a1a4:	6831      	ldr	r1, [r6, #0]
 800a1a6:	6960      	ldr	r0, [r4, #20]
 800a1a8:	f891 c000 	ldrb.w	ip, [r1]
 800a1ac:	f810 000c 	ldrb.w	r0, [r0, ip]
 800a1b0:	2800      	cmp	r0, #0
 800a1b2:	d035      	beq.n	800a220 <_scanf_i+0x15c>
 800a1b4:	f1bc 0f30 	cmp.w	ip, #48	@ 0x30
 800a1b8:	d124      	bne.n	800a204 <_scanf_i+0x140>
 800a1ba:	0510      	lsls	r0, r2, #20
 800a1bc:	d522      	bpl.n	800a204 <_scanf_i+0x140>
 800a1be:	f10b 0b01 	add.w	fp, fp, #1
 800a1c2:	f1b9 0f00 	cmp.w	r9, #0
 800a1c6:	d003      	beq.n	800a1d0 <_scanf_i+0x10c>
 800a1c8:	3301      	adds	r3, #1
 800a1ca:	f109 39ff 	add.w	r9, r9, #4294967295
 800a1ce:	60a3      	str	r3, [r4, #8]
 800a1d0:	6873      	ldr	r3, [r6, #4]
 800a1d2:	3b01      	subs	r3, #1
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	6073      	str	r3, [r6, #4]
 800a1d8:	dd1b      	ble.n	800a212 <_scanf_i+0x14e>
 800a1da:	6833      	ldr	r3, [r6, #0]
 800a1dc:	3301      	adds	r3, #1
 800a1de:	6033      	str	r3, [r6, #0]
 800a1e0:	68a3      	ldr	r3, [r4, #8]
 800a1e2:	3b01      	subs	r3, #1
 800a1e4:	60a3      	str	r3, [r4, #8]
 800a1e6:	e7d9      	b.n	800a19c <_scanf_i+0xd8>
 800a1e8:	f1bb 0f02 	cmp.w	fp, #2
 800a1ec:	d1ae      	bne.n	800a14c <_scanf_i+0x88>
 800a1ee:	6822      	ldr	r2, [r4, #0]
 800a1f0:	f402 61c0 	and.w	r1, r2, #1536	@ 0x600
 800a1f4:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 800a1f8:	d1bf      	bne.n	800a17a <_scanf_i+0xb6>
 800a1fa:	2110      	movs	r1, #16
 800a1fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a200:	6061      	str	r1, [r4, #4]
 800a202:	e7a2      	b.n	800a14a <_scanf_i+0x86>
 800a204:	f422 6210 	bic.w	r2, r2, #2304	@ 0x900
 800a208:	6022      	str	r2, [r4, #0]
 800a20a:	780b      	ldrb	r3, [r1, #0]
 800a20c:	f805 3b01 	strb.w	r3, [r5], #1
 800a210:	e7de      	b.n	800a1d0 <_scanf_i+0x10c>
 800a212:	4631      	mov	r1, r6
 800a214:	4650      	mov	r0, sl
 800a216:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 800a21a:	4798      	blx	r3
 800a21c:	2800      	cmp	r0, #0
 800a21e:	d0df      	beq.n	800a1e0 <_scanf_i+0x11c>
 800a220:	6823      	ldr	r3, [r4, #0]
 800a222:	05d9      	lsls	r1, r3, #23
 800a224:	d50d      	bpl.n	800a242 <_scanf_i+0x17e>
 800a226:	42bd      	cmp	r5, r7
 800a228:	d909      	bls.n	800a23e <_scanf_i+0x17a>
 800a22a:	f815 1c01 	ldrb.w	r1, [r5, #-1]
 800a22e:	4632      	mov	r2, r6
 800a230:	4650      	mov	r0, sl
 800a232:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800a236:	f105 39ff 	add.w	r9, r5, #4294967295
 800a23a:	4798      	blx	r3
 800a23c:	464d      	mov	r5, r9
 800a23e:	42bd      	cmp	r5, r7
 800a240:	d028      	beq.n	800a294 <_scanf_i+0x1d0>
 800a242:	6822      	ldr	r2, [r4, #0]
 800a244:	f012 0210 	ands.w	r2, r2, #16
 800a248:	d113      	bne.n	800a272 <_scanf_i+0x1ae>
 800a24a:	702a      	strb	r2, [r5, #0]
 800a24c:	4639      	mov	r1, r7
 800a24e:	6863      	ldr	r3, [r4, #4]
 800a250:	4650      	mov	r0, sl
 800a252:	9e01      	ldr	r6, [sp, #4]
 800a254:	47b0      	blx	r6
 800a256:	f8d8 3000 	ldr.w	r3, [r8]
 800a25a:	6821      	ldr	r1, [r4, #0]
 800a25c:	1d1a      	adds	r2, r3, #4
 800a25e:	f8c8 2000 	str.w	r2, [r8]
 800a262:	f011 0f20 	tst.w	r1, #32
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	d00f      	beq.n	800a28a <_scanf_i+0x1c6>
 800a26a:	6018      	str	r0, [r3, #0]
 800a26c:	68e3      	ldr	r3, [r4, #12]
 800a26e:	3301      	adds	r3, #1
 800a270:	60e3      	str	r3, [r4, #12]
 800a272:	2000      	movs	r0, #0
 800a274:	6923      	ldr	r3, [r4, #16]
 800a276:	1bed      	subs	r5, r5, r7
 800a278:	445d      	add	r5, fp
 800a27a:	442b      	add	r3, r5
 800a27c:	6123      	str	r3, [r4, #16]
 800a27e:	b007      	add	sp, #28
 800a280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a284:	f04f 0b00 	mov.w	fp, #0
 800a288:	e7ca      	b.n	800a220 <_scanf_i+0x15c>
 800a28a:	07ca      	lsls	r2, r1, #31
 800a28c:	bf4c      	ite	mi
 800a28e:	8018      	strhmi	r0, [r3, #0]
 800a290:	6018      	strpl	r0, [r3, #0]
 800a292:	e7eb      	b.n	800a26c <_scanf_i+0x1a8>
 800a294:	2001      	movs	r0, #1
 800a296:	e7f2      	b.n	800a27e <_scanf_i+0x1ba>
 800a298:	0800af14 	.word	0x0800af14
 800a29c:	0800a701 	.word	0x0800a701
 800a2a0:	0800a7e1 	.word	0x0800a7e1
 800a2a4:	0800b229 	.word	0x0800b229

0800a2a8 <__sflush_r>:
 800a2a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a2ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a2ae:	0716      	lsls	r6, r2, #28
 800a2b0:	4605      	mov	r5, r0
 800a2b2:	460c      	mov	r4, r1
 800a2b4:	d454      	bmi.n	800a360 <__sflush_r+0xb8>
 800a2b6:	684b      	ldr	r3, [r1, #4]
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	dc02      	bgt.n	800a2c2 <__sflush_r+0x1a>
 800a2bc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	dd48      	ble.n	800a354 <__sflush_r+0xac>
 800a2c2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2c4:	2e00      	cmp	r6, #0
 800a2c6:	d045      	beq.n	800a354 <__sflush_r+0xac>
 800a2c8:	2300      	movs	r3, #0
 800a2ca:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a2ce:	682f      	ldr	r7, [r5, #0]
 800a2d0:	6a21      	ldr	r1, [r4, #32]
 800a2d2:	602b      	str	r3, [r5, #0]
 800a2d4:	d030      	beq.n	800a338 <__sflush_r+0x90>
 800a2d6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a2d8:	89a3      	ldrh	r3, [r4, #12]
 800a2da:	0759      	lsls	r1, r3, #29
 800a2dc:	d505      	bpl.n	800a2ea <__sflush_r+0x42>
 800a2de:	6863      	ldr	r3, [r4, #4]
 800a2e0:	1ad2      	subs	r2, r2, r3
 800a2e2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a2e4:	b10b      	cbz	r3, 800a2ea <__sflush_r+0x42>
 800a2e6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a2e8:	1ad2      	subs	r2, r2, r3
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	4628      	mov	r0, r5
 800a2ee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a2f0:	6a21      	ldr	r1, [r4, #32]
 800a2f2:	47b0      	blx	r6
 800a2f4:	1c43      	adds	r3, r0, #1
 800a2f6:	89a3      	ldrh	r3, [r4, #12]
 800a2f8:	d106      	bne.n	800a308 <__sflush_r+0x60>
 800a2fa:	6829      	ldr	r1, [r5, #0]
 800a2fc:	291d      	cmp	r1, #29
 800a2fe:	d82b      	bhi.n	800a358 <__sflush_r+0xb0>
 800a300:	4a28      	ldr	r2, [pc, #160]	@ (800a3a4 <__sflush_r+0xfc>)
 800a302:	410a      	asrs	r2, r1
 800a304:	07d6      	lsls	r6, r2, #31
 800a306:	d427      	bmi.n	800a358 <__sflush_r+0xb0>
 800a308:	2200      	movs	r2, #0
 800a30a:	6062      	str	r2, [r4, #4]
 800a30c:	6922      	ldr	r2, [r4, #16]
 800a30e:	04d9      	lsls	r1, r3, #19
 800a310:	6022      	str	r2, [r4, #0]
 800a312:	d504      	bpl.n	800a31e <__sflush_r+0x76>
 800a314:	1c42      	adds	r2, r0, #1
 800a316:	d101      	bne.n	800a31c <__sflush_r+0x74>
 800a318:	682b      	ldr	r3, [r5, #0]
 800a31a:	b903      	cbnz	r3, 800a31e <__sflush_r+0x76>
 800a31c:	6560      	str	r0, [r4, #84]	@ 0x54
 800a31e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a320:	602f      	str	r7, [r5, #0]
 800a322:	b1b9      	cbz	r1, 800a354 <__sflush_r+0xac>
 800a324:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a328:	4299      	cmp	r1, r3
 800a32a:	d002      	beq.n	800a332 <__sflush_r+0x8a>
 800a32c:	4628      	mov	r0, r5
 800a32e:	f7fe fecf 	bl	80090d0 <_free_r>
 800a332:	2300      	movs	r3, #0
 800a334:	6363      	str	r3, [r4, #52]	@ 0x34
 800a336:	e00d      	b.n	800a354 <__sflush_r+0xac>
 800a338:	2301      	movs	r3, #1
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b0      	blx	r6
 800a33e:	4602      	mov	r2, r0
 800a340:	1c50      	adds	r0, r2, #1
 800a342:	d1c9      	bne.n	800a2d8 <__sflush_r+0x30>
 800a344:	682b      	ldr	r3, [r5, #0]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d0c6      	beq.n	800a2d8 <__sflush_r+0x30>
 800a34a:	2b1d      	cmp	r3, #29
 800a34c:	d001      	beq.n	800a352 <__sflush_r+0xaa>
 800a34e:	2b16      	cmp	r3, #22
 800a350:	d11d      	bne.n	800a38e <__sflush_r+0xe6>
 800a352:	602f      	str	r7, [r5, #0]
 800a354:	2000      	movs	r0, #0
 800a356:	e021      	b.n	800a39c <__sflush_r+0xf4>
 800a358:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a35c:	b21b      	sxth	r3, r3
 800a35e:	e01a      	b.n	800a396 <__sflush_r+0xee>
 800a360:	690f      	ldr	r7, [r1, #16]
 800a362:	2f00      	cmp	r7, #0
 800a364:	d0f6      	beq.n	800a354 <__sflush_r+0xac>
 800a366:	0793      	lsls	r3, r2, #30
 800a368:	bf18      	it	ne
 800a36a:	2300      	movne	r3, #0
 800a36c:	680e      	ldr	r6, [r1, #0]
 800a36e:	bf08      	it	eq
 800a370:	694b      	ldreq	r3, [r1, #20]
 800a372:	1bf6      	subs	r6, r6, r7
 800a374:	600f      	str	r7, [r1, #0]
 800a376:	608b      	str	r3, [r1, #8]
 800a378:	2e00      	cmp	r6, #0
 800a37a:	ddeb      	ble.n	800a354 <__sflush_r+0xac>
 800a37c:	4633      	mov	r3, r6
 800a37e:	463a      	mov	r2, r7
 800a380:	4628      	mov	r0, r5
 800a382:	6a21      	ldr	r1, [r4, #32]
 800a384:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 800a388:	47e0      	blx	ip
 800a38a:	2800      	cmp	r0, #0
 800a38c:	dc07      	bgt.n	800a39e <__sflush_r+0xf6>
 800a38e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a392:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a396:	f04f 30ff 	mov.w	r0, #4294967295
 800a39a:	81a3      	strh	r3, [r4, #12]
 800a39c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a39e:	4407      	add	r7, r0
 800a3a0:	1a36      	subs	r6, r6, r0
 800a3a2:	e7e9      	b.n	800a378 <__sflush_r+0xd0>
 800a3a4:	dfbffffe 	.word	0xdfbffffe

0800a3a8 <_fflush_r>:
 800a3a8:	b538      	push	{r3, r4, r5, lr}
 800a3aa:	690b      	ldr	r3, [r1, #16]
 800a3ac:	4605      	mov	r5, r0
 800a3ae:	460c      	mov	r4, r1
 800a3b0:	b913      	cbnz	r3, 800a3b8 <_fflush_r+0x10>
 800a3b2:	2500      	movs	r5, #0
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	bd38      	pop	{r3, r4, r5, pc}
 800a3b8:	b118      	cbz	r0, 800a3c2 <_fflush_r+0x1a>
 800a3ba:	6a03      	ldr	r3, [r0, #32]
 800a3bc:	b90b      	cbnz	r3, 800a3c2 <_fflush_r+0x1a>
 800a3be:	f7fd fe81 	bl	80080c4 <__sinit>
 800a3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3c6:	2b00      	cmp	r3, #0
 800a3c8:	d0f3      	beq.n	800a3b2 <_fflush_r+0xa>
 800a3ca:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a3cc:	07d0      	lsls	r0, r2, #31
 800a3ce:	d404      	bmi.n	800a3da <_fflush_r+0x32>
 800a3d0:	0599      	lsls	r1, r3, #22
 800a3d2:	d402      	bmi.n	800a3da <_fflush_r+0x32>
 800a3d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3d6:	f7fd ffee 	bl	80083b6 <__retarget_lock_acquire_recursive>
 800a3da:	4628      	mov	r0, r5
 800a3dc:	4621      	mov	r1, r4
 800a3de:	f7ff ff63 	bl	800a2a8 <__sflush_r>
 800a3e2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a3e4:	4605      	mov	r5, r0
 800a3e6:	07da      	lsls	r2, r3, #31
 800a3e8:	d4e4      	bmi.n	800a3b4 <_fflush_r+0xc>
 800a3ea:	89a3      	ldrh	r3, [r4, #12]
 800a3ec:	059b      	lsls	r3, r3, #22
 800a3ee:	d4e1      	bmi.n	800a3b4 <_fflush_r+0xc>
 800a3f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a3f2:	f7fd ffe1 	bl	80083b8 <__retarget_lock_release_recursive>
 800a3f6:	e7dd      	b.n	800a3b4 <_fflush_r+0xc>

0800a3f8 <fiprintf>:
 800a3f8:	b40e      	push	{r1, r2, r3}
 800a3fa:	b503      	push	{r0, r1, lr}
 800a3fc:	4601      	mov	r1, r0
 800a3fe:	ab03      	add	r3, sp, #12
 800a400:	4805      	ldr	r0, [pc, #20]	@ (800a418 <fiprintf+0x20>)
 800a402:	f853 2b04 	ldr.w	r2, [r3], #4
 800a406:	6800      	ldr	r0, [r0, #0]
 800a408:	9301      	str	r3, [sp, #4]
 800a40a:	f000 fa1f 	bl	800a84c <_vfiprintf_r>
 800a40e:	b002      	add	sp, #8
 800a410:	f85d eb04 	ldr.w	lr, [sp], #4
 800a414:	b003      	add	sp, #12
 800a416:	4770      	bx	lr
 800a418:	2000001c 	.word	0x2000001c

0800a41c <__sccl>:
 800a41c:	b570      	push	{r4, r5, r6, lr}
 800a41e:	780b      	ldrb	r3, [r1, #0]
 800a420:	4604      	mov	r4, r0
 800a422:	2b5e      	cmp	r3, #94	@ 0x5e
 800a424:	bf0b      	itete	eq
 800a426:	784b      	ldrbeq	r3, [r1, #1]
 800a428:	1c4a      	addne	r2, r1, #1
 800a42a:	1c8a      	addeq	r2, r1, #2
 800a42c:	2100      	movne	r1, #0
 800a42e:	bf08      	it	eq
 800a430:	2101      	moveq	r1, #1
 800a432:	3801      	subs	r0, #1
 800a434:	f104 05ff 	add.w	r5, r4, #255	@ 0xff
 800a438:	f800 1f01 	strb.w	r1, [r0, #1]!
 800a43c:	42a8      	cmp	r0, r5
 800a43e:	d1fb      	bne.n	800a438 <__sccl+0x1c>
 800a440:	b90b      	cbnz	r3, 800a446 <__sccl+0x2a>
 800a442:	1e50      	subs	r0, r2, #1
 800a444:	bd70      	pop	{r4, r5, r6, pc}
 800a446:	f081 0101 	eor.w	r1, r1, #1
 800a44a:	4610      	mov	r0, r2
 800a44c:	54e1      	strb	r1, [r4, r3]
 800a44e:	4602      	mov	r2, r0
 800a450:	f812 5b01 	ldrb.w	r5, [r2], #1
 800a454:	2d2d      	cmp	r5, #45	@ 0x2d
 800a456:	d005      	beq.n	800a464 <__sccl+0x48>
 800a458:	2d5d      	cmp	r5, #93	@ 0x5d
 800a45a:	d016      	beq.n	800a48a <__sccl+0x6e>
 800a45c:	2d00      	cmp	r5, #0
 800a45e:	d0f1      	beq.n	800a444 <__sccl+0x28>
 800a460:	462b      	mov	r3, r5
 800a462:	e7f2      	b.n	800a44a <__sccl+0x2e>
 800a464:	7846      	ldrb	r6, [r0, #1]
 800a466:	2e5d      	cmp	r6, #93	@ 0x5d
 800a468:	d0fa      	beq.n	800a460 <__sccl+0x44>
 800a46a:	42b3      	cmp	r3, r6
 800a46c:	dcf8      	bgt.n	800a460 <__sccl+0x44>
 800a46e:	461a      	mov	r2, r3
 800a470:	3002      	adds	r0, #2
 800a472:	3201      	adds	r2, #1
 800a474:	4296      	cmp	r6, r2
 800a476:	54a1      	strb	r1, [r4, r2]
 800a478:	dcfb      	bgt.n	800a472 <__sccl+0x56>
 800a47a:	1af2      	subs	r2, r6, r3
 800a47c:	3a01      	subs	r2, #1
 800a47e:	42b3      	cmp	r3, r6
 800a480:	bfa8      	it	ge
 800a482:	2200      	movge	r2, #0
 800a484:	1c5d      	adds	r5, r3, #1
 800a486:	18ab      	adds	r3, r5, r2
 800a488:	e7e1      	b.n	800a44e <__sccl+0x32>
 800a48a:	4610      	mov	r0, r2
 800a48c:	e7da      	b.n	800a444 <__sccl+0x28>

0800a48e <__submore>:
 800a48e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a492:	460c      	mov	r4, r1
 800a494:	6b49      	ldr	r1, [r1, #52]	@ 0x34
 800a496:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a49a:	4299      	cmp	r1, r3
 800a49c:	d11b      	bne.n	800a4d6 <__submore+0x48>
 800a49e:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800a4a2:	f7fe fe87 	bl	80091b4 <_malloc_r>
 800a4a6:	b918      	cbnz	r0, 800a4b0 <__submore+0x22>
 800a4a8:	f04f 30ff 	mov.w	r0, #4294967295
 800a4ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a4b0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a4b4:	63a3      	str	r3, [r4, #56]	@ 0x38
 800a4b6:	f894 3046 	ldrb.w	r3, [r4, #70]	@ 0x46
 800a4ba:	6360      	str	r0, [r4, #52]	@ 0x34
 800a4bc:	f880 33ff 	strb.w	r3, [r0, #1023]	@ 0x3ff
 800a4c0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800a4c4:	f200 30fd 	addw	r0, r0, #1021	@ 0x3fd
 800a4c8:	7043      	strb	r3, [r0, #1]
 800a4ca:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800a4ce:	7003      	strb	r3, [r0, #0]
 800a4d0:	6020      	str	r0, [r4, #0]
 800a4d2:	2000      	movs	r0, #0
 800a4d4:	e7ea      	b.n	800a4ac <__submore+0x1e>
 800a4d6:	6ba6      	ldr	r6, [r4, #56]	@ 0x38
 800a4d8:	0077      	lsls	r7, r6, #1
 800a4da:	463a      	mov	r2, r7
 800a4dc:	f000 f867 	bl	800a5ae <_realloc_r>
 800a4e0:	4605      	mov	r5, r0
 800a4e2:	2800      	cmp	r0, #0
 800a4e4:	d0e0      	beq.n	800a4a8 <__submore+0x1a>
 800a4e6:	eb00 0806 	add.w	r8, r0, r6
 800a4ea:	4601      	mov	r1, r0
 800a4ec:	4632      	mov	r2, r6
 800a4ee:	4640      	mov	r0, r8
 800a4f0:	f7fd ff71 	bl	80083d6 <memcpy>
 800a4f4:	e9c4 570d 	strd	r5, r7, [r4, #52]	@ 0x34
 800a4f8:	f8c4 8000 	str.w	r8, [r4]
 800a4fc:	e7e9      	b.n	800a4d2 <__submore+0x44>

0800a4fe <memmove>:
 800a4fe:	4288      	cmp	r0, r1
 800a500:	b510      	push	{r4, lr}
 800a502:	eb01 0402 	add.w	r4, r1, r2
 800a506:	d902      	bls.n	800a50e <memmove+0x10>
 800a508:	4284      	cmp	r4, r0
 800a50a:	4623      	mov	r3, r4
 800a50c:	d807      	bhi.n	800a51e <memmove+0x20>
 800a50e:	1e43      	subs	r3, r0, #1
 800a510:	42a1      	cmp	r1, r4
 800a512:	d008      	beq.n	800a526 <memmove+0x28>
 800a514:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a518:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a51c:	e7f8      	b.n	800a510 <memmove+0x12>
 800a51e:	4601      	mov	r1, r0
 800a520:	4402      	add	r2, r0
 800a522:	428a      	cmp	r2, r1
 800a524:	d100      	bne.n	800a528 <memmove+0x2a>
 800a526:	bd10      	pop	{r4, pc}
 800a528:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a52c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a530:	e7f7      	b.n	800a522 <memmove+0x24>
	...

0800a534 <_sbrk_r>:
 800a534:	b538      	push	{r3, r4, r5, lr}
 800a536:	2300      	movs	r3, #0
 800a538:	4d05      	ldr	r5, [pc, #20]	@ (800a550 <_sbrk_r+0x1c>)
 800a53a:	4604      	mov	r4, r0
 800a53c:	4608      	mov	r0, r1
 800a53e:	602b      	str	r3, [r5, #0]
 800a540:	f7f7 f92a 	bl	8001798 <_sbrk>
 800a544:	1c43      	adds	r3, r0, #1
 800a546:	d102      	bne.n	800a54e <_sbrk_r+0x1a>
 800a548:	682b      	ldr	r3, [r5, #0]
 800a54a:	b103      	cbz	r3, 800a54e <_sbrk_r+0x1a>
 800a54c:	6023      	str	r3, [r4, #0]
 800a54e:	bd38      	pop	{r3, r4, r5, pc}
 800a550:	20001cec 	.word	0x20001cec

0800a554 <abort>:
 800a554:	2006      	movs	r0, #6
 800a556:	b508      	push	{r3, lr}
 800a558:	f000 fb4c 	bl	800abf4 <raise>
 800a55c:	2001      	movs	r0, #1
 800a55e:	f7f7 f8a6 	bl	80016ae <_exit>

0800a562 <_calloc_r>:
 800a562:	b570      	push	{r4, r5, r6, lr}
 800a564:	fba1 5402 	umull	r5, r4, r1, r2
 800a568:	b93c      	cbnz	r4, 800a57a <_calloc_r+0x18>
 800a56a:	4629      	mov	r1, r5
 800a56c:	f7fe fe22 	bl	80091b4 <_malloc_r>
 800a570:	4606      	mov	r6, r0
 800a572:	b928      	cbnz	r0, 800a580 <_calloc_r+0x1e>
 800a574:	2600      	movs	r6, #0
 800a576:	4630      	mov	r0, r6
 800a578:	bd70      	pop	{r4, r5, r6, pc}
 800a57a:	220c      	movs	r2, #12
 800a57c:	6002      	str	r2, [r0, #0]
 800a57e:	e7f9      	b.n	800a574 <_calloc_r+0x12>
 800a580:	462a      	mov	r2, r5
 800a582:	4621      	mov	r1, r4
 800a584:	f7fd fe77 	bl	8008276 <memset>
 800a588:	e7f5      	b.n	800a576 <_calloc_r+0x14>

0800a58a <__ascii_mbtowc>:
 800a58a:	b082      	sub	sp, #8
 800a58c:	b901      	cbnz	r1, 800a590 <__ascii_mbtowc+0x6>
 800a58e:	a901      	add	r1, sp, #4
 800a590:	b142      	cbz	r2, 800a5a4 <__ascii_mbtowc+0x1a>
 800a592:	b14b      	cbz	r3, 800a5a8 <__ascii_mbtowc+0x1e>
 800a594:	7813      	ldrb	r3, [r2, #0]
 800a596:	600b      	str	r3, [r1, #0]
 800a598:	7812      	ldrb	r2, [r2, #0]
 800a59a:	1e10      	subs	r0, r2, #0
 800a59c:	bf18      	it	ne
 800a59e:	2001      	movne	r0, #1
 800a5a0:	b002      	add	sp, #8
 800a5a2:	4770      	bx	lr
 800a5a4:	4610      	mov	r0, r2
 800a5a6:	e7fb      	b.n	800a5a0 <__ascii_mbtowc+0x16>
 800a5a8:	f06f 0001 	mvn.w	r0, #1
 800a5ac:	e7f8      	b.n	800a5a0 <__ascii_mbtowc+0x16>

0800a5ae <_realloc_r>:
 800a5ae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a5b2:	4680      	mov	r8, r0
 800a5b4:	4615      	mov	r5, r2
 800a5b6:	460c      	mov	r4, r1
 800a5b8:	b921      	cbnz	r1, 800a5c4 <_realloc_r+0x16>
 800a5ba:	4611      	mov	r1, r2
 800a5bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a5c0:	f7fe bdf8 	b.w	80091b4 <_malloc_r>
 800a5c4:	b92a      	cbnz	r2, 800a5d2 <_realloc_r+0x24>
 800a5c6:	f7fe fd83 	bl	80090d0 <_free_r>
 800a5ca:	2400      	movs	r4, #0
 800a5cc:	4620      	mov	r0, r4
 800a5ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a5d2:	f000 fb2b 	bl	800ac2c <_malloc_usable_size_r>
 800a5d6:	4285      	cmp	r5, r0
 800a5d8:	4606      	mov	r6, r0
 800a5da:	d802      	bhi.n	800a5e2 <_realloc_r+0x34>
 800a5dc:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800a5e0:	d8f4      	bhi.n	800a5cc <_realloc_r+0x1e>
 800a5e2:	4629      	mov	r1, r5
 800a5e4:	4640      	mov	r0, r8
 800a5e6:	f7fe fde5 	bl	80091b4 <_malloc_r>
 800a5ea:	4607      	mov	r7, r0
 800a5ec:	2800      	cmp	r0, #0
 800a5ee:	d0ec      	beq.n	800a5ca <_realloc_r+0x1c>
 800a5f0:	42b5      	cmp	r5, r6
 800a5f2:	462a      	mov	r2, r5
 800a5f4:	4621      	mov	r1, r4
 800a5f6:	bf28      	it	cs
 800a5f8:	4632      	movcs	r2, r6
 800a5fa:	f7fd feec 	bl	80083d6 <memcpy>
 800a5fe:	4621      	mov	r1, r4
 800a600:	4640      	mov	r0, r8
 800a602:	f7fe fd65 	bl	80090d0 <_free_r>
 800a606:	463c      	mov	r4, r7
 800a608:	e7e0      	b.n	800a5cc <_realloc_r+0x1e>
	...

0800a60c <_strtol_l.constprop.0>:
 800a60c:	2b24      	cmp	r3, #36	@ 0x24
 800a60e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a612:	4686      	mov	lr, r0
 800a614:	4690      	mov	r8, r2
 800a616:	d801      	bhi.n	800a61c <_strtol_l.constprop.0+0x10>
 800a618:	2b01      	cmp	r3, #1
 800a61a:	d106      	bne.n	800a62a <_strtol_l.constprop.0+0x1e>
 800a61c:	f7fd fea0 	bl	8008360 <__errno>
 800a620:	2316      	movs	r3, #22
 800a622:	6003      	str	r3, [r0, #0]
 800a624:	2000      	movs	r0, #0
 800a626:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a62a:	460d      	mov	r5, r1
 800a62c:	4833      	ldr	r0, [pc, #204]	@ (800a6fc <_strtol_l.constprop.0+0xf0>)
 800a62e:	462a      	mov	r2, r5
 800a630:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a634:	5d06      	ldrb	r6, [r0, r4]
 800a636:	f016 0608 	ands.w	r6, r6, #8
 800a63a:	d1f8      	bne.n	800a62e <_strtol_l.constprop.0+0x22>
 800a63c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a63e:	d12d      	bne.n	800a69c <_strtol_l.constprop.0+0x90>
 800a640:	2601      	movs	r6, #1
 800a642:	782c      	ldrb	r4, [r5, #0]
 800a644:	1c95      	adds	r5, r2, #2
 800a646:	f033 0210 	bics.w	r2, r3, #16
 800a64a:	d109      	bne.n	800a660 <_strtol_l.constprop.0+0x54>
 800a64c:	2c30      	cmp	r4, #48	@ 0x30
 800a64e:	d12a      	bne.n	800a6a6 <_strtol_l.constprop.0+0x9a>
 800a650:	782a      	ldrb	r2, [r5, #0]
 800a652:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a656:	2a58      	cmp	r2, #88	@ 0x58
 800a658:	d125      	bne.n	800a6a6 <_strtol_l.constprop.0+0x9a>
 800a65a:	2310      	movs	r3, #16
 800a65c:	786c      	ldrb	r4, [r5, #1]
 800a65e:	3502      	adds	r5, #2
 800a660:	2200      	movs	r2, #0
 800a662:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a666:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a66a:	fbbc f9f3 	udiv	r9, ip, r3
 800a66e:	4610      	mov	r0, r2
 800a670:	fb03 ca19 	mls	sl, r3, r9, ip
 800a674:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a678:	2f09      	cmp	r7, #9
 800a67a:	d81b      	bhi.n	800a6b4 <_strtol_l.constprop.0+0xa8>
 800a67c:	463c      	mov	r4, r7
 800a67e:	42a3      	cmp	r3, r4
 800a680:	dd27      	ble.n	800a6d2 <_strtol_l.constprop.0+0xc6>
 800a682:	1c57      	adds	r7, r2, #1
 800a684:	d007      	beq.n	800a696 <_strtol_l.constprop.0+0x8a>
 800a686:	4581      	cmp	r9, r0
 800a688:	d320      	bcc.n	800a6cc <_strtol_l.constprop.0+0xc0>
 800a68a:	d101      	bne.n	800a690 <_strtol_l.constprop.0+0x84>
 800a68c:	45a2      	cmp	sl, r4
 800a68e:	db1d      	blt.n	800a6cc <_strtol_l.constprop.0+0xc0>
 800a690:	2201      	movs	r2, #1
 800a692:	fb00 4003 	mla	r0, r0, r3, r4
 800a696:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a69a:	e7eb      	b.n	800a674 <_strtol_l.constprop.0+0x68>
 800a69c:	2c2b      	cmp	r4, #43	@ 0x2b
 800a69e:	bf04      	itt	eq
 800a6a0:	782c      	ldrbeq	r4, [r5, #0]
 800a6a2:	1c95      	addeq	r5, r2, #2
 800a6a4:	e7cf      	b.n	800a646 <_strtol_l.constprop.0+0x3a>
 800a6a6:	2b00      	cmp	r3, #0
 800a6a8:	d1da      	bne.n	800a660 <_strtol_l.constprop.0+0x54>
 800a6aa:	2c30      	cmp	r4, #48	@ 0x30
 800a6ac:	bf0c      	ite	eq
 800a6ae:	2308      	moveq	r3, #8
 800a6b0:	230a      	movne	r3, #10
 800a6b2:	e7d5      	b.n	800a660 <_strtol_l.constprop.0+0x54>
 800a6b4:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a6b8:	2f19      	cmp	r7, #25
 800a6ba:	d801      	bhi.n	800a6c0 <_strtol_l.constprop.0+0xb4>
 800a6bc:	3c37      	subs	r4, #55	@ 0x37
 800a6be:	e7de      	b.n	800a67e <_strtol_l.constprop.0+0x72>
 800a6c0:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a6c4:	2f19      	cmp	r7, #25
 800a6c6:	d804      	bhi.n	800a6d2 <_strtol_l.constprop.0+0xc6>
 800a6c8:	3c57      	subs	r4, #87	@ 0x57
 800a6ca:	e7d8      	b.n	800a67e <_strtol_l.constprop.0+0x72>
 800a6cc:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d0:	e7e1      	b.n	800a696 <_strtol_l.constprop.0+0x8a>
 800a6d2:	1c53      	adds	r3, r2, #1
 800a6d4:	d108      	bne.n	800a6e8 <_strtol_l.constprop.0+0xdc>
 800a6d6:	2322      	movs	r3, #34	@ 0x22
 800a6d8:	4660      	mov	r0, ip
 800a6da:	f8ce 3000 	str.w	r3, [lr]
 800a6de:	f1b8 0f00 	cmp.w	r8, #0
 800a6e2:	d0a0      	beq.n	800a626 <_strtol_l.constprop.0+0x1a>
 800a6e4:	1e69      	subs	r1, r5, #1
 800a6e6:	e006      	b.n	800a6f6 <_strtol_l.constprop.0+0xea>
 800a6e8:	b106      	cbz	r6, 800a6ec <_strtol_l.constprop.0+0xe0>
 800a6ea:	4240      	negs	r0, r0
 800a6ec:	f1b8 0f00 	cmp.w	r8, #0
 800a6f0:	d099      	beq.n	800a626 <_strtol_l.constprop.0+0x1a>
 800a6f2:	2a00      	cmp	r2, #0
 800a6f4:	d1f6      	bne.n	800a6e4 <_strtol_l.constprop.0+0xd8>
 800a6f6:	f8c8 1000 	str.w	r1, [r8]
 800a6fa:	e794      	b.n	800a626 <_strtol_l.constprop.0+0x1a>
 800a6fc:	0800b23f 	.word	0x0800b23f

0800a700 <_strtol_r>:
 800a700:	f7ff bf84 	b.w	800a60c <_strtol_l.constprop.0>

0800a704 <_strtoul_l.constprop.0>:
 800a704:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a708:	4686      	mov	lr, r0
 800a70a:	460d      	mov	r5, r1
 800a70c:	4e33      	ldr	r6, [pc, #204]	@ (800a7dc <_strtoul_l.constprop.0+0xd8>)
 800a70e:	4628      	mov	r0, r5
 800a710:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a714:	5d37      	ldrb	r7, [r6, r4]
 800a716:	f017 0708 	ands.w	r7, r7, #8
 800a71a:	d1f8      	bne.n	800a70e <_strtoul_l.constprop.0+0xa>
 800a71c:	2c2d      	cmp	r4, #45	@ 0x2d
 800a71e:	d12f      	bne.n	800a780 <_strtoul_l.constprop.0+0x7c>
 800a720:	2701      	movs	r7, #1
 800a722:	782c      	ldrb	r4, [r5, #0]
 800a724:	1c85      	adds	r5, r0, #2
 800a726:	f033 0010 	bics.w	r0, r3, #16
 800a72a:	d109      	bne.n	800a740 <_strtoul_l.constprop.0+0x3c>
 800a72c:	2c30      	cmp	r4, #48	@ 0x30
 800a72e:	d12c      	bne.n	800a78a <_strtoul_l.constprop.0+0x86>
 800a730:	7828      	ldrb	r0, [r5, #0]
 800a732:	f000 00df 	and.w	r0, r0, #223	@ 0xdf
 800a736:	2858      	cmp	r0, #88	@ 0x58
 800a738:	d127      	bne.n	800a78a <_strtoul_l.constprop.0+0x86>
 800a73a:	2310      	movs	r3, #16
 800a73c:	786c      	ldrb	r4, [r5, #1]
 800a73e:	3502      	adds	r5, #2
 800a740:	f04f 38ff 	mov.w	r8, #4294967295
 800a744:	fbb8 f8f3 	udiv	r8, r8, r3
 800a748:	2600      	movs	r6, #0
 800a74a:	fb03 f908 	mul.w	r9, r3, r8
 800a74e:	4630      	mov	r0, r6
 800a750:	ea6f 0909 	mvn.w	r9, r9
 800a754:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 800a758:	f1bc 0f09 	cmp.w	ip, #9
 800a75c:	d81c      	bhi.n	800a798 <_strtoul_l.constprop.0+0x94>
 800a75e:	4664      	mov	r4, ip
 800a760:	42a3      	cmp	r3, r4
 800a762:	dd2a      	ble.n	800a7ba <_strtoul_l.constprop.0+0xb6>
 800a764:	f1b6 3fff 	cmp.w	r6, #4294967295
 800a768:	d007      	beq.n	800a77a <_strtoul_l.constprop.0+0x76>
 800a76a:	4580      	cmp	r8, r0
 800a76c:	d322      	bcc.n	800a7b4 <_strtoul_l.constprop.0+0xb0>
 800a76e:	d101      	bne.n	800a774 <_strtoul_l.constprop.0+0x70>
 800a770:	45a1      	cmp	r9, r4
 800a772:	db1f      	blt.n	800a7b4 <_strtoul_l.constprop.0+0xb0>
 800a774:	2601      	movs	r6, #1
 800a776:	fb00 4003 	mla	r0, r0, r3, r4
 800a77a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a77e:	e7e9      	b.n	800a754 <_strtoul_l.constprop.0+0x50>
 800a780:	2c2b      	cmp	r4, #43	@ 0x2b
 800a782:	bf04      	itt	eq
 800a784:	782c      	ldrbeq	r4, [r5, #0]
 800a786:	1c85      	addeq	r5, r0, #2
 800a788:	e7cd      	b.n	800a726 <_strtoul_l.constprop.0+0x22>
 800a78a:	2b00      	cmp	r3, #0
 800a78c:	d1d8      	bne.n	800a740 <_strtoul_l.constprop.0+0x3c>
 800a78e:	2c30      	cmp	r4, #48	@ 0x30
 800a790:	bf0c      	ite	eq
 800a792:	2308      	moveq	r3, #8
 800a794:	230a      	movne	r3, #10
 800a796:	e7d3      	b.n	800a740 <_strtoul_l.constprop.0+0x3c>
 800a798:	f1a4 0c41 	sub.w	ip, r4, #65	@ 0x41
 800a79c:	f1bc 0f19 	cmp.w	ip, #25
 800a7a0:	d801      	bhi.n	800a7a6 <_strtoul_l.constprop.0+0xa2>
 800a7a2:	3c37      	subs	r4, #55	@ 0x37
 800a7a4:	e7dc      	b.n	800a760 <_strtoul_l.constprop.0+0x5c>
 800a7a6:	f1a4 0c61 	sub.w	ip, r4, #97	@ 0x61
 800a7aa:	f1bc 0f19 	cmp.w	ip, #25
 800a7ae:	d804      	bhi.n	800a7ba <_strtoul_l.constprop.0+0xb6>
 800a7b0:	3c57      	subs	r4, #87	@ 0x57
 800a7b2:	e7d5      	b.n	800a760 <_strtoul_l.constprop.0+0x5c>
 800a7b4:	f04f 36ff 	mov.w	r6, #4294967295
 800a7b8:	e7df      	b.n	800a77a <_strtoul_l.constprop.0+0x76>
 800a7ba:	1c73      	adds	r3, r6, #1
 800a7bc:	d106      	bne.n	800a7cc <_strtoul_l.constprop.0+0xc8>
 800a7be:	2322      	movs	r3, #34	@ 0x22
 800a7c0:	4630      	mov	r0, r6
 800a7c2:	f8ce 3000 	str.w	r3, [lr]
 800a7c6:	b932      	cbnz	r2, 800a7d6 <_strtoul_l.constprop.0+0xd2>
 800a7c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a7cc:	b107      	cbz	r7, 800a7d0 <_strtoul_l.constprop.0+0xcc>
 800a7ce:	4240      	negs	r0, r0
 800a7d0:	2a00      	cmp	r2, #0
 800a7d2:	d0f9      	beq.n	800a7c8 <_strtoul_l.constprop.0+0xc4>
 800a7d4:	b106      	cbz	r6, 800a7d8 <_strtoul_l.constprop.0+0xd4>
 800a7d6:	1e69      	subs	r1, r5, #1
 800a7d8:	6011      	str	r1, [r2, #0]
 800a7da:	e7f5      	b.n	800a7c8 <_strtoul_l.constprop.0+0xc4>
 800a7dc:	0800b23f 	.word	0x0800b23f

0800a7e0 <_strtoul_r>:
 800a7e0:	f7ff bf90 	b.w	800a704 <_strtoul_l.constprop.0>

0800a7e4 <__ascii_wctomb>:
 800a7e4:	4603      	mov	r3, r0
 800a7e6:	4608      	mov	r0, r1
 800a7e8:	b141      	cbz	r1, 800a7fc <__ascii_wctomb+0x18>
 800a7ea:	2aff      	cmp	r2, #255	@ 0xff
 800a7ec:	d904      	bls.n	800a7f8 <__ascii_wctomb+0x14>
 800a7ee:	228a      	movs	r2, #138	@ 0x8a
 800a7f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a7f4:	601a      	str	r2, [r3, #0]
 800a7f6:	4770      	bx	lr
 800a7f8:	2001      	movs	r0, #1
 800a7fa:	700a      	strb	r2, [r1, #0]
 800a7fc:	4770      	bx	lr

0800a7fe <__sfputc_r>:
 800a7fe:	6893      	ldr	r3, [r2, #8]
 800a800:	b410      	push	{r4}
 800a802:	3b01      	subs	r3, #1
 800a804:	2b00      	cmp	r3, #0
 800a806:	6093      	str	r3, [r2, #8]
 800a808:	da07      	bge.n	800a81a <__sfputc_r+0x1c>
 800a80a:	6994      	ldr	r4, [r2, #24]
 800a80c:	42a3      	cmp	r3, r4
 800a80e:	db01      	blt.n	800a814 <__sfputc_r+0x16>
 800a810:	290a      	cmp	r1, #10
 800a812:	d102      	bne.n	800a81a <__sfputc_r+0x1c>
 800a814:	bc10      	pop	{r4}
 800a816:	f000 b931 	b.w	800aa7c <__swbuf_r>
 800a81a:	6813      	ldr	r3, [r2, #0]
 800a81c:	1c58      	adds	r0, r3, #1
 800a81e:	6010      	str	r0, [r2, #0]
 800a820:	7019      	strb	r1, [r3, #0]
 800a822:	4608      	mov	r0, r1
 800a824:	bc10      	pop	{r4}
 800a826:	4770      	bx	lr

0800a828 <__sfputs_r>:
 800a828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a82a:	4606      	mov	r6, r0
 800a82c:	460f      	mov	r7, r1
 800a82e:	4614      	mov	r4, r2
 800a830:	18d5      	adds	r5, r2, r3
 800a832:	42ac      	cmp	r4, r5
 800a834:	d101      	bne.n	800a83a <__sfputs_r+0x12>
 800a836:	2000      	movs	r0, #0
 800a838:	e007      	b.n	800a84a <__sfputs_r+0x22>
 800a83a:	463a      	mov	r2, r7
 800a83c:	4630      	mov	r0, r6
 800a83e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a842:	f7ff ffdc 	bl	800a7fe <__sfputc_r>
 800a846:	1c43      	adds	r3, r0, #1
 800a848:	d1f3      	bne.n	800a832 <__sfputs_r+0xa>
 800a84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800a84c <_vfiprintf_r>:
 800a84c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a850:	460d      	mov	r5, r1
 800a852:	4614      	mov	r4, r2
 800a854:	4698      	mov	r8, r3
 800a856:	4606      	mov	r6, r0
 800a858:	b09d      	sub	sp, #116	@ 0x74
 800a85a:	b118      	cbz	r0, 800a864 <_vfiprintf_r+0x18>
 800a85c:	6a03      	ldr	r3, [r0, #32]
 800a85e:	b90b      	cbnz	r3, 800a864 <_vfiprintf_r+0x18>
 800a860:	f7fd fc30 	bl	80080c4 <__sinit>
 800a864:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a866:	07d9      	lsls	r1, r3, #31
 800a868:	d405      	bmi.n	800a876 <_vfiprintf_r+0x2a>
 800a86a:	89ab      	ldrh	r3, [r5, #12]
 800a86c:	059a      	lsls	r2, r3, #22
 800a86e:	d402      	bmi.n	800a876 <_vfiprintf_r+0x2a>
 800a870:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a872:	f7fd fda0 	bl	80083b6 <__retarget_lock_acquire_recursive>
 800a876:	89ab      	ldrh	r3, [r5, #12]
 800a878:	071b      	lsls	r3, r3, #28
 800a87a:	d501      	bpl.n	800a880 <_vfiprintf_r+0x34>
 800a87c:	692b      	ldr	r3, [r5, #16]
 800a87e:	b99b      	cbnz	r3, 800a8a8 <_vfiprintf_r+0x5c>
 800a880:	4629      	mov	r1, r5
 800a882:	4630      	mov	r0, r6
 800a884:	f000 f938 	bl	800aaf8 <__swsetup_r>
 800a888:	b170      	cbz	r0, 800a8a8 <_vfiprintf_r+0x5c>
 800a88a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a88c:	07dc      	lsls	r4, r3, #31
 800a88e:	d504      	bpl.n	800a89a <_vfiprintf_r+0x4e>
 800a890:	f04f 30ff 	mov.w	r0, #4294967295
 800a894:	b01d      	add	sp, #116	@ 0x74
 800a896:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a89a:	89ab      	ldrh	r3, [r5, #12]
 800a89c:	0598      	lsls	r0, r3, #22
 800a89e:	d4f7      	bmi.n	800a890 <_vfiprintf_r+0x44>
 800a8a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a8a2:	f7fd fd89 	bl	80083b8 <__retarget_lock_release_recursive>
 800a8a6:	e7f3      	b.n	800a890 <_vfiprintf_r+0x44>
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8ac:	2320      	movs	r3, #32
 800a8ae:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a8b2:	2330      	movs	r3, #48	@ 0x30
 800a8b4:	f04f 0901 	mov.w	r9, #1
 800a8b8:	f8cd 800c 	str.w	r8, [sp, #12]
 800a8bc:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 800aa68 <_vfiprintf_r+0x21c>
 800a8c0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a8c4:	4623      	mov	r3, r4
 800a8c6:	469a      	mov	sl, r3
 800a8c8:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a8cc:	b10a      	cbz	r2, 800a8d2 <_vfiprintf_r+0x86>
 800a8ce:	2a25      	cmp	r2, #37	@ 0x25
 800a8d0:	d1f9      	bne.n	800a8c6 <_vfiprintf_r+0x7a>
 800a8d2:	ebba 0b04 	subs.w	fp, sl, r4
 800a8d6:	d00b      	beq.n	800a8f0 <_vfiprintf_r+0xa4>
 800a8d8:	465b      	mov	r3, fp
 800a8da:	4622      	mov	r2, r4
 800a8dc:	4629      	mov	r1, r5
 800a8de:	4630      	mov	r0, r6
 800a8e0:	f7ff ffa2 	bl	800a828 <__sfputs_r>
 800a8e4:	3001      	adds	r0, #1
 800a8e6:	f000 80a7 	beq.w	800aa38 <_vfiprintf_r+0x1ec>
 800a8ea:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a8ec:	445a      	add	r2, fp
 800a8ee:	9209      	str	r2, [sp, #36]	@ 0x24
 800a8f0:	f89a 3000 	ldrb.w	r3, [sl]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	f000 809f 	beq.w	800aa38 <_vfiprintf_r+0x1ec>
 800a8fa:	2300      	movs	r3, #0
 800a8fc:	f04f 32ff 	mov.w	r2, #4294967295
 800a900:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a904:	f10a 0a01 	add.w	sl, sl, #1
 800a908:	9304      	str	r3, [sp, #16]
 800a90a:	9307      	str	r3, [sp, #28]
 800a90c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a910:	931a      	str	r3, [sp, #104]	@ 0x68
 800a912:	4654      	mov	r4, sl
 800a914:	2205      	movs	r2, #5
 800a916:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a91a:	4853      	ldr	r0, [pc, #332]	@ (800aa68 <_vfiprintf_r+0x21c>)
 800a91c:	f7fd fd4d 	bl	80083ba <memchr>
 800a920:	9a04      	ldr	r2, [sp, #16]
 800a922:	b9d8      	cbnz	r0, 800a95c <_vfiprintf_r+0x110>
 800a924:	06d1      	lsls	r1, r2, #27
 800a926:	bf44      	itt	mi
 800a928:	2320      	movmi	r3, #32
 800a92a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a92e:	0713      	lsls	r3, r2, #28
 800a930:	bf44      	itt	mi
 800a932:	232b      	movmi	r3, #43	@ 0x2b
 800a934:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a938:	f89a 3000 	ldrb.w	r3, [sl]
 800a93c:	2b2a      	cmp	r3, #42	@ 0x2a
 800a93e:	d015      	beq.n	800a96c <_vfiprintf_r+0x120>
 800a940:	4654      	mov	r4, sl
 800a942:	2000      	movs	r0, #0
 800a944:	f04f 0c0a 	mov.w	ip, #10
 800a948:	9a07      	ldr	r2, [sp, #28]
 800a94a:	4621      	mov	r1, r4
 800a94c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a950:	3b30      	subs	r3, #48	@ 0x30
 800a952:	2b09      	cmp	r3, #9
 800a954:	d94b      	bls.n	800a9ee <_vfiprintf_r+0x1a2>
 800a956:	b1b0      	cbz	r0, 800a986 <_vfiprintf_r+0x13a>
 800a958:	9207      	str	r2, [sp, #28]
 800a95a:	e014      	b.n	800a986 <_vfiprintf_r+0x13a>
 800a95c:	eba0 0308 	sub.w	r3, r0, r8
 800a960:	fa09 f303 	lsl.w	r3, r9, r3
 800a964:	4313      	orrs	r3, r2
 800a966:	46a2      	mov	sl, r4
 800a968:	9304      	str	r3, [sp, #16]
 800a96a:	e7d2      	b.n	800a912 <_vfiprintf_r+0xc6>
 800a96c:	9b03      	ldr	r3, [sp, #12]
 800a96e:	1d19      	adds	r1, r3, #4
 800a970:	681b      	ldr	r3, [r3, #0]
 800a972:	9103      	str	r1, [sp, #12]
 800a974:	2b00      	cmp	r3, #0
 800a976:	bfbb      	ittet	lt
 800a978:	425b      	neglt	r3, r3
 800a97a:	f042 0202 	orrlt.w	r2, r2, #2
 800a97e:	9307      	strge	r3, [sp, #28]
 800a980:	9307      	strlt	r3, [sp, #28]
 800a982:	bfb8      	it	lt
 800a984:	9204      	strlt	r2, [sp, #16]
 800a986:	7823      	ldrb	r3, [r4, #0]
 800a988:	2b2e      	cmp	r3, #46	@ 0x2e
 800a98a:	d10a      	bne.n	800a9a2 <_vfiprintf_r+0x156>
 800a98c:	7863      	ldrb	r3, [r4, #1]
 800a98e:	2b2a      	cmp	r3, #42	@ 0x2a
 800a990:	d132      	bne.n	800a9f8 <_vfiprintf_r+0x1ac>
 800a992:	9b03      	ldr	r3, [sp, #12]
 800a994:	3402      	adds	r4, #2
 800a996:	1d1a      	adds	r2, r3, #4
 800a998:	681b      	ldr	r3, [r3, #0]
 800a99a:	9203      	str	r2, [sp, #12]
 800a99c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a9a0:	9305      	str	r3, [sp, #20]
 800a9a2:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800aa6c <_vfiprintf_r+0x220>
 800a9a6:	2203      	movs	r2, #3
 800a9a8:	4650      	mov	r0, sl
 800a9aa:	7821      	ldrb	r1, [r4, #0]
 800a9ac:	f7fd fd05 	bl	80083ba <memchr>
 800a9b0:	b138      	cbz	r0, 800a9c2 <_vfiprintf_r+0x176>
 800a9b2:	2240      	movs	r2, #64	@ 0x40
 800a9b4:	9b04      	ldr	r3, [sp, #16]
 800a9b6:	eba0 000a 	sub.w	r0, r0, sl
 800a9ba:	4082      	lsls	r2, r0
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	3401      	adds	r4, #1
 800a9c0:	9304      	str	r3, [sp, #16]
 800a9c2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a9c6:	2206      	movs	r2, #6
 800a9c8:	4829      	ldr	r0, [pc, #164]	@ (800aa70 <_vfiprintf_r+0x224>)
 800a9ca:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a9ce:	f7fd fcf4 	bl	80083ba <memchr>
 800a9d2:	2800      	cmp	r0, #0
 800a9d4:	d03f      	beq.n	800aa56 <_vfiprintf_r+0x20a>
 800a9d6:	4b27      	ldr	r3, [pc, #156]	@ (800aa74 <_vfiprintf_r+0x228>)
 800a9d8:	bb1b      	cbnz	r3, 800aa22 <_vfiprintf_r+0x1d6>
 800a9da:	9b03      	ldr	r3, [sp, #12]
 800a9dc:	3307      	adds	r3, #7
 800a9de:	f023 0307 	bic.w	r3, r3, #7
 800a9e2:	3308      	adds	r3, #8
 800a9e4:	9303      	str	r3, [sp, #12]
 800a9e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a9e8:	443b      	add	r3, r7
 800a9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 800a9ec:	e76a      	b.n	800a8c4 <_vfiprintf_r+0x78>
 800a9ee:	460c      	mov	r4, r1
 800a9f0:	2001      	movs	r0, #1
 800a9f2:	fb0c 3202 	mla	r2, ip, r2, r3
 800a9f6:	e7a8      	b.n	800a94a <_vfiprintf_r+0xfe>
 800a9f8:	2300      	movs	r3, #0
 800a9fa:	f04f 0c0a 	mov.w	ip, #10
 800a9fe:	4619      	mov	r1, r3
 800aa00:	3401      	adds	r4, #1
 800aa02:	9305      	str	r3, [sp, #20]
 800aa04:	4620      	mov	r0, r4
 800aa06:	f810 2b01 	ldrb.w	r2, [r0], #1
 800aa0a:	3a30      	subs	r2, #48	@ 0x30
 800aa0c:	2a09      	cmp	r2, #9
 800aa0e:	d903      	bls.n	800aa18 <_vfiprintf_r+0x1cc>
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	d0c6      	beq.n	800a9a2 <_vfiprintf_r+0x156>
 800aa14:	9105      	str	r1, [sp, #20]
 800aa16:	e7c4      	b.n	800a9a2 <_vfiprintf_r+0x156>
 800aa18:	4604      	mov	r4, r0
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	fb0c 2101 	mla	r1, ip, r1, r2
 800aa20:	e7f0      	b.n	800aa04 <_vfiprintf_r+0x1b8>
 800aa22:	ab03      	add	r3, sp, #12
 800aa24:	9300      	str	r3, [sp, #0]
 800aa26:	462a      	mov	r2, r5
 800aa28:	4630      	mov	r0, r6
 800aa2a:	4b13      	ldr	r3, [pc, #76]	@ (800aa78 <_vfiprintf_r+0x22c>)
 800aa2c:	a904      	add	r1, sp, #16
 800aa2e:	f7fc feff 	bl	8007830 <_printf_float>
 800aa32:	4607      	mov	r7, r0
 800aa34:	1c78      	adds	r0, r7, #1
 800aa36:	d1d6      	bne.n	800a9e6 <_vfiprintf_r+0x19a>
 800aa38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800aa3a:	07d9      	lsls	r1, r3, #31
 800aa3c:	d405      	bmi.n	800aa4a <_vfiprintf_r+0x1fe>
 800aa3e:	89ab      	ldrh	r3, [r5, #12]
 800aa40:	059a      	lsls	r2, r3, #22
 800aa42:	d402      	bmi.n	800aa4a <_vfiprintf_r+0x1fe>
 800aa44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800aa46:	f7fd fcb7 	bl	80083b8 <__retarget_lock_release_recursive>
 800aa4a:	89ab      	ldrh	r3, [r5, #12]
 800aa4c:	065b      	lsls	r3, r3, #25
 800aa4e:	f53f af1f 	bmi.w	800a890 <_vfiprintf_r+0x44>
 800aa52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800aa54:	e71e      	b.n	800a894 <_vfiprintf_r+0x48>
 800aa56:	ab03      	add	r3, sp, #12
 800aa58:	9300      	str	r3, [sp, #0]
 800aa5a:	462a      	mov	r2, r5
 800aa5c:	4630      	mov	r0, r6
 800aa5e:	4b06      	ldr	r3, [pc, #24]	@ (800aa78 <_vfiprintf_r+0x22c>)
 800aa60:	a904      	add	r1, sp, #16
 800aa62:	f7fd f983 	bl	8007d6c <_printf_i>
 800aa66:	e7e4      	b.n	800aa32 <_vfiprintf_r+0x1e6>
 800aa68:	0800b208 	.word	0x0800b208
 800aa6c:	0800b20e 	.word	0x0800b20e
 800aa70:	0800b212 	.word	0x0800b212
 800aa74:	08007831 	.word	0x08007831
 800aa78:	0800a829 	.word	0x0800a829

0800aa7c <__swbuf_r>:
 800aa7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800aa7e:	460e      	mov	r6, r1
 800aa80:	4614      	mov	r4, r2
 800aa82:	4605      	mov	r5, r0
 800aa84:	b118      	cbz	r0, 800aa8e <__swbuf_r+0x12>
 800aa86:	6a03      	ldr	r3, [r0, #32]
 800aa88:	b90b      	cbnz	r3, 800aa8e <__swbuf_r+0x12>
 800aa8a:	f7fd fb1b 	bl	80080c4 <__sinit>
 800aa8e:	69a3      	ldr	r3, [r4, #24]
 800aa90:	60a3      	str	r3, [r4, #8]
 800aa92:	89a3      	ldrh	r3, [r4, #12]
 800aa94:	071a      	lsls	r2, r3, #28
 800aa96:	d501      	bpl.n	800aa9c <__swbuf_r+0x20>
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	b943      	cbnz	r3, 800aaae <__swbuf_r+0x32>
 800aa9c:	4621      	mov	r1, r4
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	f000 f82a 	bl	800aaf8 <__swsetup_r>
 800aaa4:	b118      	cbz	r0, 800aaae <__swbuf_r+0x32>
 800aaa6:	f04f 37ff 	mov.w	r7, #4294967295
 800aaaa:	4638      	mov	r0, r7
 800aaac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800aaae:	6823      	ldr	r3, [r4, #0]
 800aab0:	6922      	ldr	r2, [r4, #16]
 800aab2:	b2f6      	uxtb	r6, r6
 800aab4:	1a98      	subs	r0, r3, r2
 800aab6:	6963      	ldr	r3, [r4, #20]
 800aab8:	4637      	mov	r7, r6
 800aaba:	4283      	cmp	r3, r0
 800aabc:	dc05      	bgt.n	800aaca <__swbuf_r+0x4e>
 800aabe:	4621      	mov	r1, r4
 800aac0:	4628      	mov	r0, r5
 800aac2:	f7ff fc71 	bl	800a3a8 <_fflush_r>
 800aac6:	2800      	cmp	r0, #0
 800aac8:	d1ed      	bne.n	800aaa6 <__swbuf_r+0x2a>
 800aaca:	68a3      	ldr	r3, [r4, #8]
 800aacc:	3b01      	subs	r3, #1
 800aace:	60a3      	str	r3, [r4, #8]
 800aad0:	6823      	ldr	r3, [r4, #0]
 800aad2:	1c5a      	adds	r2, r3, #1
 800aad4:	6022      	str	r2, [r4, #0]
 800aad6:	701e      	strb	r6, [r3, #0]
 800aad8:	6962      	ldr	r2, [r4, #20]
 800aada:	1c43      	adds	r3, r0, #1
 800aadc:	429a      	cmp	r2, r3
 800aade:	d004      	beq.n	800aaea <__swbuf_r+0x6e>
 800aae0:	89a3      	ldrh	r3, [r4, #12]
 800aae2:	07db      	lsls	r3, r3, #31
 800aae4:	d5e1      	bpl.n	800aaaa <__swbuf_r+0x2e>
 800aae6:	2e0a      	cmp	r6, #10
 800aae8:	d1df      	bne.n	800aaaa <__swbuf_r+0x2e>
 800aaea:	4621      	mov	r1, r4
 800aaec:	4628      	mov	r0, r5
 800aaee:	f7ff fc5b 	bl	800a3a8 <_fflush_r>
 800aaf2:	2800      	cmp	r0, #0
 800aaf4:	d0d9      	beq.n	800aaaa <__swbuf_r+0x2e>
 800aaf6:	e7d6      	b.n	800aaa6 <__swbuf_r+0x2a>

0800aaf8 <__swsetup_r>:
 800aaf8:	b538      	push	{r3, r4, r5, lr}
 800aafa:	4b29      	ldr	r3, [pc, #164]	@ (800aba0 <__swsetup_r+0xa8>)
 800aafc:	4605      	mov	r5, r0
 800aafe:	6818      	ldr	r0, [r3, #0]
 800ab00:	460c      	mov	r4, r1
 800ab02:	b118      	cbz	r0, 800ab0c <__swsetup_r+0x14>
 800ab04:	6a03      	ldr	r3, [r0, #32]
 800ab06:	b90b      	cbnz	r3, 800ab0c <__swsetup_r+0x14>
 800ab08:	f7fd fadc 	bl	80080c4 <__sinit>
 800ab0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab10:	0719      	lsls	r1, r3, #28
 800ab12:	d422      	bmi.n	800ab5a <__swsetup_r+0x62>
 800ab14:	06da      	lsls	r2, r3, #27
 800ab16:	d407      	bmi.n	800ab28 <__swsetup_r+0x30>
 800ab18:	2209      	movs	r2, #9
 800ab1a:	602a      	str	r2, [r5, #0]
 800ab1c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ab20:	f04f 30ff 	mov.w	r0, #4294967295
 800ab24:	81a3      	strh	r3, [r4, #12]
 800ab26:	e033      	b.n	800ab90 <__swsetup_r+0x98>
 800ab28:	0758      	lsls	r0, r3, #29
 800ab2a:	d512      	bpl.n	800ab52 <__swsetup_r+0x5a>
 800ab2c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800ab2e:	b141      	cbz	r1, 800ab42 <__swsetup_r+0x4a>
 800ab30:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800ab34:	4299      	cmp	r1, r3
 800ab36:	d002      	beq.n	800ab3e <__swsetup_r+0x46>
 800ab38:	4628      	mov	r0, r5
 800ab3a:	f7fe fac9 	bl	80090d0 <_free_r>
 800ab3e:	2300      	movs	r3, #0
 800ab40:	6363      	str	r3, [r4, #52]	@ 0x34
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800ab48:	81a3      	strh	r3, [r4, #12]
 800ab4a:	2300      	movs	r3, #0
 800ab4c:	6063      	str	r3, [r4, #4]
 800ab4e:	6923      	ldr	r3, [r4, #16]
 800ab50:	6023      	str	r3, [r4, #0]
 800ab52:	89a3      	ldrh	r3, [r4, #12]
 800ab54:	f043 0308 	orr.w	r3, r3, #8
 800ab58:	81a3      	strh	r3, [r4, #12]
 800ab5a:	6923      	ldr	r3, [r4, #16]
 800ab5c:	b94b      	cbnz	r3, 800ab72 <__swsetup_r+0x7a>
 800ab5e:	89a3      	ldrh	r3, [r4, #12]
 800ab60:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800ab64:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ab68:	d003      	beq.n	800ab72 <__swsetup_r+0x7a>
 800ab6a:	4621      	mov	r1, r4
 800ab6c:	4628      	mov	r0, r5
 800ab6e:	f000 f88a 	bl	800ac86 <__smakebuf_r>
 800ab72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab76:	f013 0201 	ands.w	r2, r3, #1
 800ab7a:	d00a      	beq.n	800ab92 <__swsetup_r+0x9a>
 800ab7c:	2200      	movs	r2, #0
 800ab7e:	60a2      	str	r2, [r4, #8]
 800ab80:	6962      	ldr	r2, [r4, #20]
 800ab82:	4252      	negs	r2, r2
 800ab84:	61a2      	str	r2, [r4, #24]
 800ab86:	6922      	ldr	r2, [r4, #16]
 800ab88:	b942      	cbnz	r2, 800ab9c <__swsetup_r+0xa4>
 800ab8a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800ab8e:	d1c5      	bne.n	800ab1c <__swsetup_r+0x24>
 800ab90:	bd38      	pop	{r3, r4, r5, pc}
 800ab92:	0799      	lsls	r1, r3, #30
 800ab94:	bf58      	it	pl
 800ab96:	6962      	ldrpl	r2, [r4, #20]
 800ab98:	60a2      	str	r2, [r4, #8]
 800ab9a:	e7f4      	b.n	800ab86 <__swsetup_r+0x8e>
 800ab9c:	2000      	movs	r0, #0
 800ab9e:	e7f7      	b.n	800ab90 <__swsetup_r+0x98>
 800aba0:	2000001c 	.word	0x2000001c

0800aba4 <_raise_r>:
 800aba4:	291f      	cmp	r1, #31
 800aba6:	b538      	push	{r3, r4, r5, lr}
 800aba8:	4605      	mov	r5, r0
 800abaa:	460c      	mov	r4, r1
 800abac:	d904      	bls.n	800abb8 <_raise_r+0x14>
 800abae:	2316      	movs	r3, #22
 800abb0:	6003      	str	r3, [r0, #0]
 800abb2:	f04f 30ff 	mov.w	r0, #4294967295
 800abb6:	bd38      	pop	{r3, r4, r5, pc}
 800abb8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800abba:	b112      	cbz	r2, 800abc2 <_raise_r+0x1e>
 800abbc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800abc0:	b94b      	cbnz	r3, 800abd6 <_raise_r+0x32>
 800abc2:	4628      	mov	r0, r5
 800abc4:	f000 f830 	bl	800ac28 <_getpid_r>
 800abc8:	4622      	mov	r2, r4
 800abca:	4601      	mov	r1, r0
 800abcc:	4628      	mov	r0, r5
 800abce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800abd2:	f000 b817 	b.w	800ac04 <_kill_r>
 800abd6:	2b01      	cmp	r3, #1
 800abd8:	d00a      	beq.n	800abf0 <_raise_r+0x4c>
 800abda:	1c59      	adds	r1, r3, #1
 800abdc:	d103      	bne.n	800abe6 <_raise_r+0x42>
 800abde:	2316      	movs	r3, #22
 800abe0:	6003      	str	r3, [r0, #0]
 800abe2:	2001      	movs	r0, #1
 800abe4:	e7e7      	b.n	800abb6 <_raise_r+0x12>
 800abe6:	2100      	movs	r1, #0
 800abe8:	4620      	mov	r0, r4
 800abea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800abee:	4798      	blx	r3
 800abf0:	2000      	movs	r0, #0
 800abf2:	e7e0      	b.n	800abb6 <_raise_r+0x12>

0800abf4 <raise>:
 800abf4:	4b02      	ldr	r3, [pc, #8]	@ (800ac00 <raise+0xc>)
 800abf6:	4601      	mov	r1, r0
 800abf8:	6818      	ldr	r0, [r3, #0]
 800abfa:	f7ff bfd3 	b.w	800aba4 <_raise_r>
 800abfe:	bf00      	nop
 800ac00:	2000001c 	.word	0x2000001c

0800ac04 <_kill_r>:
 800ac04:	b538      	push	{r3, r4, r5, lr}
 800ac06:	2300      	movs	r3, #0
 800ac08:	4d06      	ldr	r5, [pc, #24]	@ (800ac24 <_kill_r+0x20>)
 800ac0a:	4604      	mov	r4, r0
 800ac0c:	4608      	mov	r0, r1
 800ac0e:	4611      	mov	r1, r2
 800ac10:	602b      	str	r3, [r5, #0]
 800ac12:	f7f6 fd3c 	bl	800168e <_kill>
 800ac16:	1c43      	adds	r3, r0, #1
 800ac18:	d102      	bne.n	800ac20 <_kill_r+0x1c>
 800ac1a:	682b      	ldr	r3, [r5, #0]
 800ac1c:	b103      	cbz	r3, 800ac20 <_kill_r+0x1c>
 800ac1e:	6023      	str	r3, [r4, #0]
 800ac20:	bd38      	pop	{r3, r4, r5, pc}
 800ac22:	bf00      	nop
 800ac24:	20001cec 	.word	0x20001cec

0800ac28 <_getpid_r>:
 800ac28:	f7f6 bd2a 	b.w	8001680 <_getpid>

0800ac2c <_malloc_usable_size_r>:
 800ac2c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac30:	1f18      	subs	r0, r3, #4
 800ac32:	2b00      	cmp	r3, #0
 800ac34:	bfbc      	itt	lt
 800ac36:	580b      	ldrlt	r3, [r1, r0]
 800ac38:	18c0      	addlt	r0, r0, r3
 800ac3a:	4770      	bx	lr

0800ac3c <__swhatbuf_r>:
 800ac3c:	b570      	push	{r4, r5, r6, lr}
 800ac3e:	460c      	mov	r4, r1
 800ac40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ac44:	4615      	mov	r5, r2
 800ac46:	2900      	cmp	r1, #0
 800ac48:	461e      	mov	r6, r3
 800ac4a:	b096      	sub	sp, #88	@ 0x58
 800ac4c:	da0c      	bge.n	800ac68 <__swhatbuf_r+0x2c>
 800ac4e:	89a3      	ldrh	r3, [r4, #12]
 800ac50:	2100      	movs	r1, #0
 800ac52:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ac56:	bf14      	ite	ne
 800ac58:	2340      	movne	r3, #64	@ 0x40
 800ac5a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ac5e:	2000      	movs	r0, #0
 800ac60:	6031      	str	r1, [r6, #0]
 800ac62:	602b      	str	r3, [r5, #0]
 800ac64:	b016      	add	sp, #88	@ 0x58
 800ac66:	bd70      	pop	{r4, r5, r6, pc}
 800ac68:	466a      	mov	r2, sp
 800ac6a:	f000 f849 	bl	800ad00 <_fstat_r>
 800ac6e:	2800      	cmp	r0, #0
 800ac70:	dbed      	blt.n	800ac4e <__swhatbuf_r+0x12>
 800ac72:	9901      	ldr	r1, [sp, #4]
 800ac74:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ac78:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ac7c:	4259      	negs	r1, r3
 800ac7e:	4159      	adcs	r1, r3
 800ac80:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ac84:	e7eb      	b.n	800ac5e <__swhatbuf_r+0x22>

0800ac86 <__smakebuf_r>:
 800ac86:	898b      	ldrh	r3, [r1, #12]
 800ac88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ac8a:	079d      	lsls	r5, r3, #30
 800ac8c:	4606      	mov	r6, r0
 800ac8e:	460c      	mov	r4, r1
 800ac90:	d507      	bpl.n	800aca2 <__smakebuf_r+0x1c>
 800ac92:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ac96:	6023      	str	r3, [r4, #0]
 800ac98:	6123      	str	r3, [r4, #16]
 800ac9a:	2301      	movs	r3, #1
 800ac9c:	6163      	str	r3, [r4, #20]
 800ac9e:	b003      	add	sp, #12
 800aca0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aca2:	466a      	mov	r2, sp
 800aca4:	ab01      	add	r3, sp, #4
 800aca6:	f7ff ffc9 	bl	800ac3c <__swhatbuf_r>
 800acaa:	9f00      	ldr	r7, [sp, #0]
 800acac:	4605      	mov	r5, r0
 800acae:	4639      	mov	r1, r7
 800acb0:	4630      	mov	r0, r6
 800acb2:	f7fe fa7f 	bl	80091b4 <_malloc_r>
 800acb6:	b948      	cbnz	r0, 800accc <__smakebuf_r+0x46>
 800acb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800acbc:	059a      	lsls	r2, r3, #22
 800acbe:	d4ee      	bmi.n	800ac9e <__smakebuf_r+0x18>
 800acc0:	f023 0303 	bic.w	r3, r3, #3
 800acc4:	f043 0302 	orr.w	r3, r3, #2
 800acc8:	81a3      	strh	r3, [r4, #12]
 800acca:	e7e2      	b.n	800ac92 <__smakebuf_r+0xc>
 800accc:	89a3      	ldrh	r3, [r4, #12]
 800acce:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800acd2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800acd6:	81a3      	strh	r3, [r4, #12]
 800acd8:	9b01      	ldr	r3, [sp, #4]
 800acda:	6020      	str	r0, [r4, #0]
 800acdc:	b15b      	cbz	r3, 800acf6 <__smakebuf_r+0x70>
 800acde:	4630      	mov	r0, r6
 800ace0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ace4:	f000 f81e 	bl	800ad24 <_isatty_r>
 800ace8:	b128      	cbz	r0, 800acf6 <__smakebuf_r+0x70>
 800acea:	89a3      	ldrh	r3, [r4, #12]
 800acec:	f023 0303 	bic.w	r3, r3, #3
 800acf0:	f043 0301 	orr.w	r3, r3, #1
 800acf4:	81a3      	strh	r3, [r4, #12]
 800acf6:	89a3      	ldrh	r3, [r4, #12]
 800acf8:	431d      	orrs	r5, r3
 800acfa:	81a5      	strh	r5, [r4, #12]
 800acfc:	e7cf      	b.n	800ac9e <__smakebuf_r+0x18>
	...

0800ad00 <_fstat_r>:
 800ad00:	b538      	push	{r3, r4, r5, lr}
 800ad02:	2300      	movs	r3, #0
 800ad04:	4d06      	ldr	r5, [pc, #24]	@ (800ad20 <_fstat_r+0x20>)
 800ad06:	4604      	mov	r4, r0
 800ad08:	4608      	mov	r0, r1
 800ad0a:	4611      	mov	r1, r2
 800ad0c:	602b      	str	r3, [r5, #0]
 800ad0e:	f7f6 fd1d 	bl	800174c <_fstat>
 800ad12:	1c43      	adds	r3, r0, #1
 800ad14:	d102      	bne.n	800ad1c <_fstat_r+0x1c>
 800ad16:	682b      	ldr	r3, [r5, #0]
 800ad18:	b103      	cbz	r3, 800ad1c <_fstat_r+0x1c>
 800ad1a:	6023      	str	r3, [r4, #0]
 800ad1c:	bd38      	pop	{r3, r4, r5, pc}
 800ad1e:	bf00      	nop
 800ad20:	20001cec 	.word	0x20001cec

0800ad24 <_isatty_r>:
 800ad24:	b538      	push	{r3, r4, r5, lr}
 800ad26:	2300      	movs	r3, #0
 800ad28:	4d05      	ldr	r5, [pc, #20]	@ (800ad40 <_isatty_r+0x1c>)
 800ad2a:	4604      	mov	r4, r0
 800ad2c:	4608      	mov	r0, r1
 800ad2e:	602b      	str	r3, [r5, #0]
 800ad30:	f7f6 fd1b 	bl	800176a <_isatty>
 800ad34:	1c43      	adds	r3, r0, #1
 800ad36:	d102      	bne.n	800ad3e <_isatty_r+0x1a>
 800ad38:	682b      	ldr	r3, [r5, #0]
 800ad3a:	b103      	cbz	r3, 800ad3e <_isatty_r+0x1a>
 800ad3c:	6023      	str	r3, [r4, #0]
 800ad3e:	bd38      	pop	{r3, r4, r5, pc}
 800ad40:	20001cec 	.word	0x20001cec

0800ad44 <_init>:
 800ad44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad46:	bf00      	nop
 800ad48:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad4a:	bc08      	pop	{r3}
 800ad4c:	469e      	mov	lr, r3
 800ad4e:	4770      	bx	lr

0800ad50 <_fini>:
 800ad50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad52:	bf00      	nop
 800ad54:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad56:	bc08      	pop	{r3}
 800ad58:	469e      	mov	lr, r3
 800ad5a:	4770      	bx	lr
